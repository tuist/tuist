<style>
  .ztm-container {
    display: flex;
    flex-direction: column;
    height: 500px;
    gap: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }

  .ztm-controls {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .ztm-control-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-bottom: 16px;
  }

  .ztm-control-group:last-child {
    margin-bottom: 0;
  }

  .ztm-control-label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 14px;
    font-weight: 600;
    color: #1d1d1f;
  }

  .ztm-control-value {
    color: #0071e3;
    font-weight: 700;
  }

  .ztm-slider {
    width: 100%;
    height: 6px;
    border-radius: 3px;
    background: #e5e5e7;
    outline: none;
    -webkit-appearance: none;
  }

  .ztm-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #0071e3;
    cursor: pointer;
  }

  .ztm-slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #0071e3;
    cursor: pointer;
    border: none;
  }

  .ztm-workspace {
    flex: 1;
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 20px;
    min-height: 0;
  }

  .ztm-developer-side {
    background: white;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 20px;
  }

  .ztm-developer {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 12px;
  }

  .ztm-developer-icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 36px;
    position: relative;
  }

  .ztm-developer-icon.active {
    animation: ztm-pulse 1s ease-in-out;
  }

  @keyframes ztm-pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }

  .ztm-developer-label {
    font-weight: 600;
    color: #1d1d1f;
    font-size: 16px;
  }

  .ztm-agents {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    justify-content: center;
    max-width: 200px;
  }

  .ztm-agent-icon {
    width: 50px;
    height: 50px;
    border-radius: 12px;
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    opacity: 0;
    animation: ztm-fadeIn 0.3s forwards;
  }

  @keyframes ztm-fadeIn {
    to { opacity: 1; }
  }

  .ztm-branch-side {
    background: white;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .ztm-branch-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 20px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e5e5e7;
  }

  .ztm-branch-icon {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
  }

  .ztm-branch-name {
    font-weight: 700;
    font-size: 18px;
    color: #1d1d1f;
  }

  .ztm-stats {
    display: flex;
    gap: 20px;
    margin-left: auto;
  }

  .ztm-stat {
    text-align: center;
  }

  .ztm-stat-value {
    font-size: 24px;
    font-weight: 700;
    color: #0071e3;
  }

  .ztm-stat-label {
    font-size: 12px;
    color: #6e6e73;
    margin-top: 4px;
  }

  .ztm-commits-container {
    flex: 1;
    position: relative;
    overflow: hidden;
  }

  .ztm-commit {
    position: absolute;
    width: 40px;
    height: 40px;
    border-radius: 8px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 700;
    font-size: 14px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    left: -50px;
  }

  .ztm-commit.flying {
    animation: ztm-flyToMain 1.5s ease-out forwards;
  }

  @keyframes ztm-flyToMain {
    0% {
      left: -50px;
      top: 50%;
      transform: translateY(-50%) scale(1);
      opacity: 1;
    }
    50% {
      transform: translateY(-50%) scale(1.2);
    }
    100% {
      left: calc(100% - 60px);
      transform: translateY(-50%) scale(1);
      opacity: 1;
    }
  }

  .ztm-commit.stacked {
    animation: ztm-stackCommit 0.3s ease-out forwards;
  }

  @keyframes ztm-stackCommit {
    from {
      transform: translateX(0) scale(1);
    }
    to {
      transform: translateX(0) scale(0.8);
    }
  }
</style>

<div class="ztm-container" id="ztm-lone-wolf">
  <div class="ztm-controls">
    <div class="ztm-control-group">
      <div class="ztm-control-label">
        <span>Coding Agents per Developer</span>
        <span class="ztm-control-value" id="ztm-agents-value">2</span>
      </div>
      <input type="range" class="ztm-slider" id="ztm-agents-slider" min="0" max="3" value="2" step="1">
    </div>
    <div class="ztm-control-group">
      <div class="ztm-control-label">
        <span>Push Frequency (commits per day)</span>
        <span class="ztm-control-value" id="ztm-frequency-value">10</span>
      </div>
      <input type="range" class="ztm-slider" id="ztm-frequency-slider" min="5" max="15" value="10" step="1">
    </div>
  </div>

  <div class="ztm-workspace">
    <div class="ztm-developer-side">
      <div class="ztm-developer">
        <div class="ztm-developer-icon" id="ztm-developer-icon">üë®‚Äçüíª</div>
        <div class="ztm-developer-label">Developer</div>
      </div>
      <div class="ztm-agents" id="ztm-agents-container">
        <div class="ztm-agent-icon">ü§ñ</div>
        <div class="ztm-agent-icon">ü§ñ</div>
      </div>
    </div>

    <div class="ztm-branch-side">
      <div class="ztm-branch-header">
        <div class="ztm-branch-icon">üåø</div>
        <div class="ztm-branch-name">main</div>
        <div class="ztm-stats">
          <div class="ztm-stat">
            <div class="ztm-stat-value" id="ztm-commits-today">0</div>
            <div class="ztm-stat-label">Commits Today</div>
          </div>
          <div class="ztm-stat">
            <div class="ztm-stat-value" id="ztm-throughput">0</div>
            <div class="ztm-stat-label">Throughput</div>
          </div>
        </div>
      </div>
      <div class="ztm-commits-container" id="ztm-commits-container"></div>
    </div>
  </div>
</div>

<script>
  (function() {
    // State
    let numAgents = 2;
    let pushFrequency = 10;
    let commitsToday = 0;
    let commitCounter = 0;
    let stackedCommits = [];
    let pushInterval;
    let dayInterval;

    // Elements
    const agentsSlider = document.getElementById('ztm-agents-slider');
    const frequencySlider = document.getElementById('ztm-frequency-slider');
    const agentsValue = document.getElementById('ztm-agents-value');
    const frequencyValue = document.getElementById('ztm-frequency-value');
    const agentsContainer = document.getElementById('ztm-agents-container');
    const developerIcon = document.getElementById('ztm-developer-icon');
    const commitsTodayEl = document.getElementById('ztm-commits-today');
    const throughputEl = document.getElementById('ztm-throughput');
    const commitsContainer = document.getElementById('ztm-commits-container');

    // Update agents display
    function updateAgents() {
      agentsContainer.innerHTML = '';
      for (let i = 0; i < numAgents; i++) {
        const agent = document.createElement('div');
        agent.className = 'ztm-agent-icon';
        agent.textContent = 'ü§ñ';
        agent.style.animationDelay = `${i * 0.1}s`;
        agentsContainer.appendChild(agent);
      }
    }

    // Create and animate a commit
    function pushCommit() {
      commitCounter++;
      commitsToday++;

      // Pulse developer
      developerIcon.classList.add('active');
      setTimeout(() => developerIcon.classList.remove('active'), 1000);

      // Create commit
      const commit = document.createElement('div');
      commit.className = 'ztm-commit flying';
      commit.textContent = commitCounter;
      commit.style.top = '50%';
      commitsContainer.appendChild(commit);

      // After animation, stack it
      setTimeout(() => {
        commit.classList.remove('flying');
        commit.classList.add('stacked');
        stackedCommits.push(commit);

        // Position stacked commits
        stackedCommits.forEach((c, i) => {
          const offset = Math.min(i * 5, 30);
          c.style.left = `calc(100% - ${60 + offset}px)`;
          c.style.top = '50%';
          c.style.zIndex = 1000 - i;
        });

        // Keep only last 10 commits visible
        if (stackedCommits.length > 10) {
          const removed = stackedCommits.shift();
          removed.style.opacity = '0';
          setTimeout(() => removed.remove(), 300);
        }
      }, 1500);

      // Update stats
      commitsTodayEl.textContent = commitsToday;
      throughputEl.textContent = `${pushFrequency}/day`;
    }

    // Start/restart push interval
    function startPushing() {
      if (pushInterval) clearInterval(pushInterval);

      // Convert commits per day to milliseconds between commits
      // Simulate a "day" as 20 seconds for visualization
      const dayInMs = 20000;
      const intervalMs = dayInMs / pushFrequency;

      pushInterval = setInterval(pushCommit, intervalMs);
    }

    // Reset day counter
    function startDayCounter() {
      if (dayInterval) clearInterval(dayInterval);
      dayInterval = setInterval(() => {
        commitsToday = 0;
        commitsTodayEl.textContent = '0';
      }, 20000); // Reset every "day" (20 seconds)
    }

    // Event listeners
    agentsSlider.addEventListener('input', (e) => {
      numAgents = parseInt(e.target.value);
      agentsValue.textContent = numAgents;
      updateAgents();
    });

    frequencySlider.addEventListener('input', (e) => {
      pushFrequency = parseInt(e.target.value);
      frequencyValue.textContent = pushFrequency;
      throughputEl.textContent = `${pushFrequency}/day`;
      startPushing();
    });

    // Initialize
    updateAgents();
    startPushing();
    startDayCounter();
    throughputEl.textContent = `${pushFrequency}/day`;

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (pushInterval) clearInterval(pushInterval);
      if (dayInterval) clearInterval(dayInterval);
    });
  })();
</script>
