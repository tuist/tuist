import TSCBasic
import TuistSupport

/// The type of modulemap file
public enum ModuleMapType: Equatable {
    /// No headers and hence no modulemap file
    case none
    /// Custom modulemap file provided in SPM package
    case custom
    /// Umbrella header provided in SPM package
    case header
    /// Nested umbrella header provided in SPM package
    case nestedHeader
    /// No umbrella header provided in SPM package, define umbrella directory
    case directory
}

/// Protocol that allows to generate a modulemap for an SPM target.
/// It implements the Swift Package Manager logic
/// [documented here](https://github.com/apple/swift-package-manager/blob/main/Documentation/Usage.md#creating-c-language-targets) and
/// [implemented here](https://github.com/apple/swift-package-manager/blob/main/Sources/PackageLoading/ModuleMapGenerator.swift).
public protocol SwiftPackageManagerModuleMapGenerating {
    func generate(moduleName: String, publicHeadersPath: AbsolutePath) throws -> (type: ModuleMapType, path: AbsolutePath?)
}

public final class SwiftPackageManagerModuleMapGenerator: SwiftPackageManagerModuleMapGenerating {
    public init() {}

    public func generate(moduleName: String, publicHeadersPath: AbsolutePath) throws -> (type: ModuleMapType, path: AbsolutePath?) {
        let umbrellaHeaderPath = publicHeadersPath.appending(component: moduleName + ".h")
        let nestedUmbrellaHeaderPath = publicHeadersPath.appending(component: moduleName).appending(component: moduleName + ".h")

        let moduleMapType: ModuleMapType

        if let customModuleMapPath = try Self.customModuleMapPath(publicHeadersPath: publicHeadersPath) {
            // User defined modulemap exists, use it
            return (type: .custom, path: customModuleMapPath)
        } else if FileHandler.shared.exists(umbrellaHeaderPath) {
            // If 'PublicHeadersDir/ModuleName.h' exists, then use it as the umbrella header.
            // When umbrella header is present, no need to define a modulemap as it is generated by Xcode
            return (type: .header, path: nil)
        } else if FileHandler.shared.exists(nestedUmbrellaHeaderPath) {
            // If 'PublicHeadersDir/ModuleName/ModuleName.h' exists, then use it as the umbrella header.
            moduleMapType = .nestedHeader
        } else if FileHandler.shared.exists(publicHeadersPath) {
            // Otherwise, consider the public headers folder as umbrella directory
            moduleMapType = .directory
        } else {
            return (type: .none, path: nil)
        }

        let sanitizedModuleName = moduleName.replacingOccurrences(of: "-", with: "_")
        switch moduleMapType {
        case .none, .header, .nestedHeader, .custom:
            return (type: moduleMapType, path: nil)
        case .directory:
            let generatedModuleMapContent =
                """
                module \(sanitizedModuleName) {
                    umbrella "\(publicHeadersPath.pathString)"
                    export *
                }

                """
            let generatedModuleMapPath = publicHeadersPath.appending(component: "\(moduleName).modulemap")
            try FileHandler.shared.write(generatedModuleMapContent, path: generatedModuleMapPath, atomically: true)
            return (type: moduleMapType, path: generatedModuleMapPath)
        }
    }

    static func customModuleMapPath(publicHeadersPath: AbsolutePath) throws -> AbsolutePath? {
        guard FileHandler.shared.exists(publicHeadersPath) else { return nil }

        let moduleMapPath = RelativePath("module.modulemap")
        let publicHeadersFolderContent = try FileHandler.shared.contentsOfDirectory(publicHeadersPath)

        if publicHeadersFolderContent.contains(publicHeadersPath.appending(moduleMapPath)) {
            return publicHeadersPath.appending(moduleMapPath)
        } else if publicHeadersFolderContent.count == 1,
            let nestedHeadersPath = publicHeadersFolderContent.first,
            FileHandler.shared.isFolder(nestedHeadersPath),
            FileHandler.shared.exists(nestedHeadersPath.appending(moduleMapPath))
        {
            return nestedHeadersPath.appending(moduleMapPath)
        } else {
            return nil
        }
    }
}
