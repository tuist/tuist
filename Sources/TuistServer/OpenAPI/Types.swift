// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Create a a new command analytics event
    ///
    /// - Remark: HTTP `POST /api/analytics`.
    /// - Remark: Generated from `#/paths//api/analytics/post(createCommandEvent)`.
    func createCommandEvent(_ input: Operations.createCommandEvent.Input) async throws
        -> Operations.createCommandEvent.Output
    /// Authenticate with email and password.
    ///
    /// This endpoint returns API tokens for a given email and password.
    ///
    /// - Remark: HTTP `POST /api/auth`.
    /// - Remark: Generated from `#/paths//api/auth/post(authenticate)`.
    func authenticate(_ input: Operations.authenticate.Input) async throws
        -> Operations.authenticate.Output
    /// Get a specific device code.
    ///
    /// This endpoint returns a token for a given device code if the device code is authenticated.
    ///
    /// - Remark: HTTP `GET /api/auth/device_code/{device_code}`.
    /// - Remark: Generated from `#/paths//api/auth/device_code/{device_code}/get(getDeviceCode)`.
    func getDeviceCode(_ input: Operations.getDeviceCode.Input) async throws
        -> Operations.getDeviceCode.Output
    /// Request new tokens.
    ///
    /// This endpoint returns new tokens for a given refresh token if the refresh token is valid.
    ///
    /// - Remark: HTTP `POST /api/auth/refresh_token`.
    /// - Remark: Generated from `#/paths//api/auth/refresh_token/post(refreshToken)`.
    func refreshToken(_ input: Operations.refreshToken.Input) async throws
        -> Operations.refreshToken.Output
    /// Downloads an artifact from the cache.
    ///
    /// This endpoint returns a signed URL that can be used to download an artifact from the cache.
    ///
    /// - Remark: HTTP `GET /api/cache`.
    /// - Remark: Generated from `#/paths//api/cache/get(downloadCacheArtifact)`.
    func downloadCacheArtifact(_ input: Operations.downloadCacheArtifact.Input) async throws
        -> Operations.downloadCacheArtifact.Output
    /// It checks if an artifact exists in the cache.
    ///
    /// This endpoint checks if an artifact exists in the cache. It returns a 404 status code if the artifact does not exist.
    ///
    /// - Remark: HTTP `GET /api/cache/exists`.
    /// - Remark: Generated from `#/paths//api/cache/exists/get(cacheArtifactExists)`.
    @available(*, deprecated) func cacheArtifactExists(
        _ input: Operations.cacheArtifactExists.Input
    ) async throws -> Operations.cacheArtifactExists.Output
    /// It completes a multi-part upload.
    ///
    /// Given the upload ID and all the parts with their ETags, this endpoint completes the multipart upload. The cache will then be able to serve the artifact.
    ///
    /// - Remark: HTTP `POST /api/cache/multipart/complete`.
    /// - Remark: Generated from `#/paths//api/cache/multipart/complete/post(completeCacheArtifactMultipartUpload)`.
    func completeCacheArtifactMultipartUpload(
        _ input: Operations.completeCacheArtifactMultipartUpload.Input
    ) async throws -> Operations.completeCacheArtifactMultipartUpload.Output
    /// It generates a signed URL for uploading a part.
    ///
    /// Given an upload ID and a part number, this endpoint returns a signed URL that can be used to upload a part of a multipart upload. The URL is short-lived and expires in 120 seconds.
    ///
    /// - Remark: HTTP `POST /api/cache/multipart/generate-url`.
    /// - Remark: Generated from `#/paths//api/cache/multipart/generate-url/post(generateCacheArtifactMultipartUploadURL)`.
    func generateCacheArtifactMultipartUploadURL(
        _ input: Operations.generateCacheArtifactMultipartUploadURL.Input
    ) async throws -> Operations.generateCacheArtifactMultipartUploadURL.Output
    /// It initiates a multipart upload in the cache.
    ///
    /// The endpoint returns an upload ID that can be used to generate URLs for the individual parts and complete the upload.
    ///
    /// - Remark: HTTP `POST /api/cache/multipart/start`.
    /// - Remark: Generated from `#/paths//api/cache/multipart/start/post(startCacheArtifactMultipartUpload)`.
    func startCacheArtifactMultipartUpload(
        _ input: Operations.startCacheArtifactMultipartUpload.Input
    ) async throws -> Operations.startCacheArtifactMultipartUpload.Output
    /// Lists the organizations
    ///
    /// Returns all the organizations the authenticated subject is part of.
    ///
    /// - Remark: HTTP `GET /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)`.
    func listOrganizations(_ input: Operations.listOrganizations.Input) async throws
        -> Operations.listOrganizations.Output
    /// Creates an organization
    ///
    /// Creates an organization with the given name.
    ///
    /// - Remark: HTTP `POST /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)`.
    func createOrganization(_ input: Operations.createOrganization.Input) async throws
        -> Operations.createOrganization.Output
    /// Shows an organization
    ///
    /// Returns the organization with the given identifier.
    ///
    /// - Remark: HTTP `GET /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(showOrganization)`.
    func showOrganization(_ input: Operations.showOrganization.Input) async throws
        -> Operations.showOrganization.Output
    /// Updates an organization
    ///
    /// Updates an organization with given parameters.
    ///
    /// - Remark: HTTP `PATCH /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/patch(updateOrganization (2))`.
    func updateOrganization__2_(_ input: Operations.updateOrganization__2_.Input) async throws
        -> Operations.updateOrganization__2_.Output
    /// Updates an organization
    ///
    /// Updates an organization with given parameters.
    ///
    /// - Remark: HTTP `PUT /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/put(updateOrganization)`.
    func updateOrganization(_ input: Operations.updateOrganization.Input) async throws
        -> Operations.updateOrganization.Output
    /// Deletes an organization
    ///
    /// Deletes the organization with the given name.
    ///
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)`.
    func deleteOrganization(_ input: Operations.deleteOrganization.Input) async throws
        -> Operations.deleteOrganization.Output
    /// Creates an invitation
    ///
    /// Invites a user with a given email to a given organization.
    ///
    /// - Remark: HTTP `POST /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createInvitation)`.
    func createInvitation(_ input: Operations.createInvitation.Input) async throws
        -> Operations.createInvitation.Output
    /// Cancels an invitation
    ///
    /// Cancels an invitation for a given invitee email and an organization.
    ///
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelInvitation)`.
    func cancelInvitation(_ input: Operations.cancelInvitation.Input) async throws
        -> Operations.cancelInvitation.Output
    /// Updates a member in an organization
    ///
    /// Updates a member in a given organization
    ///
    /// - Remark: HTTP `PUT /api/organizations/{organization_name}/members/{user_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/put(updateOrganizationMember)`.
    func updateOrganizationMember(_ input: Operations.updateOrganizationMember.Input) async throws
        -> Operations.updateOrganizationMember.Output
    /// Removes a member from an organization
    ///
    /// Removes a member with a given username from a given organization
    ///
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/members/{user_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/delete(removeOrganizationMember)`.
    func removeOrganizationMember(_ input: Operations.removeOrganizationMember.Input) async throws
        -> Operations.removeOrganizationMember.Output
    /// Shows the usage of an organization
    ///
    /// Returns the usage of the organization with the given identifier. (e.g. number of remote cache hits)
    ///
    /// - Remark: HTTP `GET /api/organizations/{organization_name}/usage`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/usage/get(showOrganizationUsage)`.
    func showOrganizationUsage(_ input: Operations.showOrganizationUsage.Input) async throws
        -> Operations.showOrganizationUsage.Output
    /// List projects the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/get(listProjects)`.
    func listProjects(_ input: Operations.listProjects.Input) async throws
        -> Operations.listProjects.Output
    /// Create a new project.
    ///
    /// - Remark: HTTP `POST /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/post(createProject)`.
    func createProject(_ input: Operations.createProject.Input) async throws
        -> Operations.createProject.Output
    /// Returns a project based on the handle.
    ///
    /// - Remark: HTTP `GET /api/projects/{account_handle}/{project_handle}`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/get(showProject)`.
    func showProject(_ input: Operations.showProject.Input) async throws
        -> Operations.showProject.Output
    /// Cleans cache for a given project
    ///
    /// - Remark: HTTP `PUT /api/projects/{account_handle}/{project_handle}/cache/clean`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/cache/clean/put(cleanCache)`.
    func cleanCache(_ input: Operations.cleanCache.Input) async throws
        -> Operations.cleanCache.Output
    /// List all project tokens.
    ///
    /// This endpoint returns all tokens for a given project.
    ///
    /// - Remark: HTTP `GET /api/projects/{account_handle}/{project_handle}/tokens`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/get(listProjectTokens)`.
    func listProjectTokens(_ input: Operations.listProjectTokens.Input) async throws
        -> Operations.listProjectTokens.Output
    /// Create a new project token.
    ///
    /// This endpoint returns a new project token.
    ///
    /// - Remark: HTTP `POST /api/projects/{account_handle}/{project_handle}/tokens`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/post(createProjectToken)`.
    func createProjectToken(_ input: Operations.createProjectToken.Input) async throws
        -> Operations.createProjectToken.Output
    /// Revokes a project token.
    ///
    /// - Remark: HTTP `DELETE /api/projects/{account_handle}/{project_handle}/tokens/{id}`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/{id}/delete(revokeProjectToken)`.
    func revokeProjectToken(_ input: Operations.revokeProjectToken.Input) async throws
        -> Operations.revokeProjectToken.Output
    /// Deletes a project with a given id.
    ///
    /// - Remark: HTTP `DELETE /api/projects/{id}`.
    /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)`.
    func deleteProject(_ input: Operations.deleteProject.Input) async throws
        -> Operations.deleteProject.Output
    /// It completes a multi-part upload.
    ///
    /// Given the upload ID and all the parts with their ETags, this endpoint completes the multipart upload.
    ///
    /// - Remark: HTTP `POST /api/runs/{run_id}/complete`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete/post(completeAnalyticsArtifactMultipartUpload)`.
    func completeAnalyticsArtifactMultipartUpload(
        _ input: Operations.completeAnalyticsArtifactMultipartUpload.Input
    ) async throws -> Operations.completeAnalyticsArtifactMultipartUpload.Output
    /// Completes artifacts uploads for a given command event
    ///
    /// Given a command event, it marks all artifact uploads as finished and does extra processing of a given command run, such as test flakiness detection.
    ///
    /// - Remark: HTTP `PUT /api/runs/{run_id}/complete_artifacts_uploads`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete_artifacts_uploads/put(completeAnalyticsArtifactsUploads)`.
    func completeAnalyticsArtifactsUploads(
        _ input: Operations.completeAnalyticsArtifactsUploads.Input
    ) async throws -> Operations.completeAnalyticsArtifactsUploads.Output
    /// It generates a signed URL for uploading a part.
    ///
    /// Given an upload ID and a part number, this endpoint returns a signed URL that can be used to upload a part of a multipart upload. The URL is short-lived and expires in 120 seconds.
    ///
    /// - Remark: HTTP `POST /api/runs/{run_id}/generate-url`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/generate-url/post(generateAnalyticsArtifactMultipartUploadURL)`.
    func generateAnalyticsArtifactMultipartUploadURL(
        _ input: Operations.generateAnalyticsArtifactMultipartUploadURL.Input
    ) async throws -> Operations.generateAnalyticsArtifactMultipartUploadURL.Output
    /// It initiates a multipart upload for a command event artifact.
    ///
    /// The endpoint returns an upload ID that can be used to generate URLs for the individual parts and complete the upload.
    ///
    /// - Remark: HTTP `POST /api/runs/{run_id}/start`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/start/post(startAnalyticsArtifactMultipartUpload)`.
    func startAnalyticsArtifactMultipartUpload(
        _ input: Operations.startAnalyticsArtifactMultipartUpload.Input
    ) async throws -> Operations.startAnalyticsArtifactMultipartUpload.Output
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "http://localhost:8080")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AbsentCacheArtifact`.
        public struct AbsentCacheArtifact: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AbsentCacheArtifact/errorPayload`.
            public struct errorPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AbsentCacheArtifact/errorPayload/code`.
                public var code: Swift.String?
                /// - Remark: Generated from `#/components/schemas/AbsentCacheArtifact/errorPayload/message`.
                public var message: Swift.String?
                /// Creates a new `errorPayloadPayload`.
                ///
                /// - Parameters:
                ///   - code:
                ///   - message:
                public init(code: Swift.String? = nil, message: Swift.String? = nil) {
                    self.code = code
                    self.message = message
                }
                public enum CodingKeys: String, CodingKey {
                    case code
                    case message
                }
            }
            /// - Remark: Generated from `#/components/schemas/AbsentCacheArtifact/error`.
            public typealias errorPayload = [Components.Schemas.AbsentCacheArtifact
                .errorPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/AbsentCacheArtifact/error`.
            public var error: Components.Schemas.AbsentCacheArtifact.errorPayload?
            /// Creates a new `AbsentCacheArtifact`.
            ///
            /// - Parameters:
            ///   - error:
            public init(error: Components.Schemas.AbsentCacheArtifact.errorPayload? = nil) {
                self.error = error
            }
            public enum CodingKeys: String, CodingKey { case error }
        }
        /// Represents an multipart upload's part identified by the upload id and the part number
        ///
        /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadPart`.
        public struct ArtifactMultipartUploadPart: Codable, Equatable, Hashable, Sendable {
            /// The part number of the multipart upload.
            ///
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadPart/part_number`.
            public var part_number: Swift.Int
            /// The upload ID.
            ///
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadPart/upload_id`.
            public var upload_id: Swift.String
            /// Creates a new `ArtifactMultipartUploadPart`.
            ///
            /// - Parameters:
            ///   - part_number: The part number of the multipart upload.
            ///   - upload_id: The upload ID.
            public init(part_number: Swift.Int, upload_id: Swift.String) {
                self.part_number = part_number
                self.upload_id = upload_id
            }
            public enum CodingKeys: String, CodingKey {
                case part_number
                case upload_id
            }
        }
        /// It represents a part that has been uploaded using multipart uploads. The part is identified by its number and the etag
        ///
        /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadParts`.
        public struct ArtifactMultipartUploadParts: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadParts/partsPayload`.
            public struct partsPayloadPayload: Codable, Equatable, Hashable, Sendable {
                /// The ETag of the part
                ///
                /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadParts/partsPayload/etag`.
                public var etag: Swift.String
                /// The part number
                ///
                /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadParts/partsPayload/part_number`.
                public var part_number: Swift.Int
                /// Creates a new `partsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - etag: The ETag of the part
                ///   - part_number: The part number
                public init(etag: Swift.String, part_number: Swift.Int) {
                    self.etag = etag
                    self.part_number = part_number
                }
                public enum CodingKeys: String, CodingKey {
                    case etag
                    case part_number
                }
            }
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadParts/parts`.
            public typealias partsPayload = [Components.Schemas.ArtifactMultipartUploadParts
                .partsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadParts/parts`.
            public var parts: Components.Schemas.ArtifactMultipartUploadParts.partsPayload
            /// The upload ID
            ///
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadParts/upload_id`.
            public var upload_id: Swift.String
            /// Creates a new `ArtifactMultipartUploadParts`.
            ///
            /// - Parameters:
            ///   - parts:
            ///   - upload_id: The upload ID
            public init(
                parts: Components.Schemas.ArtifactMultipartUploadParts.partsPayload,
                upload_id: Swift.String
            ) {
                self.parts = parts
                self.upload_id = upload_id
            }
            public enum CodingKeys: String, CodingKey {
                case parts
                case upload_id
            }
        }
        /// The URL to upload a multipart part
        ///
        /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadURL`.
        public struct ArtifactMultipartUploadURL: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadURL/data`.
            public struct dataPayload: Codable, Equatable, Hashable, Sendable {
                /// The URL to upload the part
                ///
                /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadURL/data/url`.
                public var url: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - url: The URL to upload the part
                public init(url: Swift.String) { self.url = url }
                public enum CodingKeys: String, CodingKey { case url }
            }
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadURL/data`.
            public var data: Components.Schemas.ArtifactMultipartUploadURL.dataPayload
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadURL/status`.
            @frozen
            public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case success
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "success": self = .success
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .success: return "success"
                    }
                }
                public static var allCases: [statusPayload] { [.success] }
            }
            /// - Remark: Generated from `#/components/schemas/ArtifactMultipartUploadURL/status`.
            public var status: Components.Schemas.ArtifactMultipartUploadURL.statusPayload
            /// Creates a new `ArtifactMultipartUploadURL`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(
                data: Components.Schemas.ArtifactMultipartUploadURL.dataPayload,
                status: Components.Schemas.ArtifactMultipartUploadURL.statusPayload
            ) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// The upload has been initiated and a ID is returned to upload the various parts using multi-part uploads
        ///
        /// - Remark: Generated from `#/components/schemas/ArtifactUploadID`.
        public struct ArtifactUploadID: Codable, Equatable, Hashable, Sendable {
            /// Data that contains ID that's associated with the multipart upload to use when uploading parts
            ///
            /// - Remark: Generated from `#/components/schemas/ArtifactUploadID/data`.
            public struct dataPayload: Codable, Equatable, Hashable, Sendable {
                /// The upload ID
                ///
                /// - Remark: Generated from `#/components/schemas/ArtifactUploadID/data/upload_id`.
                public var upload_id: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - upload_id: The upload ID
                public init(upload_id: Swift.String) { self.upload_id = upload_id }
                public enum CodingKeys: String, CodingKey { case upload_id }
            }
            /// Data that contains ID that's associated with the multipart upload to use when uploading parts
            ///
            /// - Remark: Generated from `#/components/schemas/ArtifactUploadID/data`.
            public var data: Components.Schemas.ArtifactUploadID.dataPayload
            /// - Remark: Generated from `#/components/schemas/ArtifactUploadID/status`.
            @frozen
            public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case success
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "success": self = .success
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .success: return "success"
                    }
                }
                public static var allCases: [statusPayload] { [.success] }
            }
            /// - Remark: Generated from `#/components/schemas/ArtifactUploadID/status`.
            public var status: Components.Schemas.ArtifactUploadID.statusPayload
            /// Creates a new `ArtifactUploadID`.
            ///
            /// - Parameters:
            ///   - data: Data that contains ID that's associated with the multipart upload to use when uploading parts
            ///   - status:
            public init(
                data: Components.Schemas.ArtifactUploadID.dataPayload,
                status: Components.Schemas.ArtifactUploadID.statusPayload
            ) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// API tokens to authenticate with.
        ///
        /// - Remark: Generated from `#/components/schemas/AuthenticationTokens`.
        public struct AuthenticationTokens: Codable, Equatable, Hashable, Sendable {
            /// API access token.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthenticationTokens/access_token`.
            public var access_token: Swift.String
            /// API refresh token.
            ///
            /// - Remark: Generated from `#/components/schemas/AuthenticationTokens/refresh_token`.
            public var refresh_token: Swift.String
            /// Creates a new `AuthenticationTokens`.
            ///
            /// - Parameters:
            ///   - access_token: API access token.
            ///   - refresh_token: API refresh token.
            public init(access_token: Swift.String, refresh_token: Swift.String) {
                self.access_token = access_token
                self.refresh_token = refresh_token
            }
            public enum CodingKeys: String, CodingKey {
                case access_token
                case refresh_token
            }
        }
        /// The URL to download the artifact from the cache.
        ///
        /// - Remark: Generated from `#/components/schemas/CacheArtifactDownloadURL`.
        public struct CacheArtifactDownloadURL: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CacheArtifactDownloadURL/data`.
            public struct dataPayload: Codable, Equatable, Hashable, Sendable {
                /// The UNIX timestamp when the URL expires.
                ///
                /// - Remark: Generated from `#/components/schemas/CacheArtifactDownloadURL/data/expires_at`.
                public var expires_at: Swift.Int
                /// The URL to download the artifact from the cache.
                ///
                /// - Remark: Generated from `#/components/schemas/CacheArtifactDownloadURL/data/url`.
                public var url: Swift.String
                /// Creates a new `dataPayload`.
                ///
                /// - Parameters:
                ///   - expires_at: The UNIX timestamp when the URL expires.
                ///   - url: The URL to download the artifact from the cache.
                public init(expires_at: Swift.Int, url: Swift.String) {
                    self.expires_at = expires_at
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case expires_at
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/CacheArtifactDownloadURL/data`.
            public var data: Components.Schemas.CacheArtifactDownloadURL.dataPayload
            /// - Remark: Generated from `#/components/schemas/CacheArtifactDownloadURL/status`.
            @frozen
            public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case success
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "success": self = .success
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .success: return "success"
                    }
                }
                public static var allCases: [statusPayload] { [.success] }
            }
            /// - Remark: Generated from `#/components/schemas/CacheArtifactDownloadURL/status`.
            public var status: Components.Schemas.CacheArtifactDownloadURL.statusPayload
            /// Creates a new `CacheArtifactDownloadURL`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(
                data: Components.Schemas.CacheArtifactDownloadURL.dataPayload,
                status: Components.Schemas.CacheArtifactDownloadURL.statusPayload
            ) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// The artifact exists in the cache and can be downloaded
        ///
        /// - Remark: Generated from `#/components/schemas/CacheArtifactExistence`.
        public struct CacheArtifactExistence: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CacheArtifactExistence/data`.
            public var data: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/CacheArtifactExistence/status`.
            @frozen
            public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case success
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "success": self = .success
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .success: return "success"
                    }
                }
                public static var allCases: [statusPayload] { [.success] }
            }
            /// - Remark: Generated from `#/components/schemas/CacheArtifactExistence/status`.
            public var status: Components.Schemas.CacheArtifactExistence.statusPayload?
            /// Creates a new `CacheArtifactExistence`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(
                data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                status: Components.Schemas.CacheArtifactExistence.statusPayload? = nil
            ) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// This response confirms that the upload has been completed successfully. The cache will now be able to serve the artifact.
        ///
        /// - Remark: Generated from `#/components/schemas/CacheArtifactMultipartUploadCompletion`.
        public struct CacheArtifactMultipartUploadCompletion: Codable, Equatable, Hashable, Sendable
        {
            /// - Remark: Generated from `#/components/schemas/CacheArtifactMultipartUploadCompletion/data`.
            public var data: OpenAPIRuntime.OpenAPIObjectContainer?
            /// - Remark: Generated from `#/components/schemas/CacheArtifactMultipartUploadCompletion/status`.
            @frozen
            public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case success
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "success": self = .success
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .success: return "success"
                    }
                }
                public static var allCases: [statusPayload] { [.success] }
            }
            /// - Remark: Generated from `#/components/schemas/CacheArtifactMultipartUploadCompletion/status`.
            public var status:
                Components.Schemas.CacheArtifactMultipartUploadCompletion.statusPayload?
            /// Creates a new `CacheArtifactMultipartUploadCompletion`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - status:
            public init(
                data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                status: Components.Schemas.CacheArtifactMultipartUploadCompletion.statusPayload? =
                    nil
            ) {
                self.data = data
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case status
            }
        }
        /// The category of the cache.
        ///
        /// - Remark: Generated from `#/components/schemas/CacheCategory`.
        @frozen
        public enum CacheCategory: RawRepresentable, Codable, Equatable, Hashable, Sendable,
            _AutoLosslessStringConvertible, CaseIterable
        {
            case tests
            case builds
            /// Parsed a raw value that was not defined in the OpenAPI document.
            case undocumented(String)
            public init?(rawValue: String) {
                switch rawValue {
                case "tests": self = .tests
                case "builds": self = .builds
                default: self = .undocumented(rawValue)
                }
            }
            public var rawValue: String {
                switch self {
                case let .undocumented(string): return string
                case .tests: return "tests"
                case .builds: return "builds"
                }
            }
            public static var allCases: [CacheCategory] { [.tests, .builds] }
        }
        /// The schema for the command analytics event.
        ///
        /// - Remark: Generated from `#/components/schemas/CommandEvent`.
        public struct CommandEvent: Codable, Equatable, Hashable, Sendable {
            /// ID of the command event
            ///
            /// - Remark: Generated from `#/components/schemas/CommandEvent/id`.
            public var id: Swift.Double
            /// Name of the command
            ///
            /// - Remark: Generated from `#/components/schemas/CommandEvent/name`.
            public var name: Swift.String
            /// URL to the command event
            ///
            /// - Remark: Generated from `#/components/schemas/CommandEvent/url`.
            public var url: Swift.String
            /// Creates a new `CommandEvent`.
            ///
            /// - Parameters:
            ///   - id: ID of the command event
            ///   - name: Name of the command
            ///   - url: URL to the command event
            public init(id: Swift.Double, name: Swift.String, url: Swift.String) {
                self.id = id
                self.name = name
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case url
            }
        }
        /// It represents an artifact that's associated with a command event (e.g. result bundles)
        ///
        /// - Remark: Generated from `#/components/schemas/CommandEventArtifact`.
        public struct CommandEventArtifact: Codable, Equatable, Hashable, Sendable {
            /// The name of the file. It's used only for certain types such as result_bundle_object
            ///
            /// - Remark: Generated from `#/components/schemas/CommandEventArtifact/name`.
            public var name: Swift.String?
            /// The command event artifact type. It can be:
            /// - result_bundle: A result bundle artifact that represents the whole `.xcresult` bundle
            /// - invocation_record: An invocation record artifact. This is a root bundle object of the result bundle
            /// - result_bundle_object: A result bundle object. There are many different bundle objects per result bundle.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CommandEventArtifact/type`.
            @frozen
            public enum _typePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case result_bundle
                case invocation_record
                case result_bundle_object
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "result_bundle": self = .result_bundle
                    case "invocation_record": self = .invocation_record
                    case "result_bundle_object": self = .result_bundle_object
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .result_bundle: return "result_bundle"
                    case .invocation_record: return "invocation_record"
                    case .result_bundle_object: return "result_bundle_object"
                    }
                }
                public static var allCases: [_typePayload] {
                    [.result_bundle, .invocation_record, .result_bundle_object]
                }
            }
            /// The command event artifact type. It can be:
            /// - result_bundle: A result bundle artifact that represents the whole `.xcresult` bundle
            /// - invocation_record: An invocation record artifact. This is a root bundle object of the result bundle
            /// - result_bundle_object: A result bundle object. There are many different bundle objects per result bundle.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CommandEventArtifact/type`.
            public var _type: Components.Schemas.CommandEventArtifact._typePayload
            /// Creates a new `CommandEventArtifact`.
            ///
            /// - Parameters:
            ///   - name: The name of the file. It's used only for certain types such as result_bundle_object
            ///   - _type: The command event artifact type. It can be:
            public init(
                name: Swift.String? = nil,
                _type: Components.Schemas.CommandEventArtifact._typePayload
            ) {
                self.name = name
                self._type = _type
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case _type = "type"
            }
        }
        /// Token to authenticate the user with.
        ///
        /// - Remark: Generated from `#/components/schemas/DeviceCodeAuthenticationTokens`.
        public struct DeviceCodeAuthenticationTokens: Codable, Equatable, Hashable, Sendable {
            /// A short-lived token to authenticate API requests as user.
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceCodeAuthenticationTokens/access_token`.
            public var access_token: Swift.String?
            /// A token to generate new access tokens when they expire.
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceCodeAuthenticationTokens/refresh_token`.
            public var refresh_token: Swift.String?
            /// User authentication token
            ///
            /// - Remark: Generated from `#/components/schemas/DeviceCodeAuthenticationTokens/token`.
            @available(*, deprecated) public var token: Swift.String?
            /// Creates a new `DeviceCodeAuthenticationTokens`.
            ///
            /// - Parameters:
            ///   - access_token: A short-lived token to authenticate API requests as user.
            ///   - refresh_token: A token to generate new access tokens when they expire.
            ///   - token: User authentication token
            public init(
                access_token: Swift.String? = nil,
                refresh_token: Swift.String? = nil,
                token: Swift.String? = nil
            ) {
                self.access_token = access_token
                self.refresh_token = refresh_token
                self.token = token
            }
            public enum CodingKeys: String, CodingKey {
                case access_token
                case refresh_token
                case token
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Equatable, Hashable, Sendable {
            /// The error message
            ///
            /// - Remark: Generated from `#/components/schemas/Error/message`.
            public var message: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - message: The error message
            public init(message: Swift.String) { self.message = message }
            public enum CodingKeys: String, CodingKey { case message }
        }
        /// - Remark: Generated from `#/components/schemas/Invitation`.
        public struct Invitation: Codable, Equatable, Hashable, Sendable {
            /// The invitation's unique identifier
            ///
            /// - Remark: Generated from `#/components/schemas/Invitation/id`.
            public var id: Swift.Double
            /// The email of the invitee
            ///
            /// - Remark: Generated from `#/components/schemas/Invitation/invitee_email`.
            public var invitee_email: Swift.String
            /// - Remark: Generated from `#/components/schemas/Invitation/inviter`.
            public var inviter: Components.Schemas.User
            /// The id of the organization the invitee is invited to
            ///
            /// - Remark: Generated from `#/components/schemas/Invitation/organization_id`.
            public var organization_id: Swift.Double
            /// The token to accept the invitation
            ///
            /// - Remark: Generated from `#/components/schemas/Invitation/token`.
            public var token: Swift.String
            /// Creates a new `Invitation`.
            ///
            /// - Parameters:
            ///   - id: The invitation's unique identifier
            ///   - invitee_email: The email of the invitee
            ///   - inviter:
            ///   - organization_id: The id of the organization the invitee is invited to
            ///   - token: The token to accept the invitation
            public init(
                id: Swift.Double,
                invitee_email: Swift.String,
                inviter: Components.Schemas.User,
                organization_id: Swift.Double,
                token: Swift.String
            ) {
                self.id = id
                self.invitee_email = invitee_email
                self.inviter = inviter
                self.organization_id = organization_id
                self.token = token
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case invitee_email
                case inviter
                case organization_id
                case token
            }
        }
        /// - Remark: Generated from `#/components/schemas/Module`.
        public struct Module: Codable, Equatable, Hashable, Sendable {
            /// A hash that represents the module.
            ///
            /// - Remark: Generated from `#/components/schemas/Module/hash`.
            public var hash: Swift.String
            /// A name of the module
            ///
            /// - Remark: Generated from `#/components/schemas/Module/name`.
            public var name: Swift.String
            /// Project's relative path from the root of the repository
            ///
            /// - Remark: Generated from `#/components/schemas/Module/project_identifier`.
            public var project_identifier: Swift.String
            /// Creates a new `Module`.
            ///
            /// - Parameters:
            ///   - hash: A hash that represents the module.
            ///   - name: A name of the module
            ///   - project_identifier: Project's relative path from the root of the repository
            public init(hash: Swift.String, name: Swift.String, project_identifier: Swift.String) {
                self.hash = hash
                self.name = name
                self.project_identifier = project_identifier
            }
            public enum CodingKeys: String, CodingKey {
                case hash
                case name
                case project_identifier
            }
        }
        /// An organization
        ///
        /// - Remark: Generated from `#/components/schemas/Organization`.
        public struct Organization: Codable, Equatable, Hashable, Sendable {
            /// The organization's unique identifier
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/id`.
            public var id: Swift.Double
            /// A list of organization invitations
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/invitations`.
            public var invitations: [Components.Schemas.Invitation]
            /// A list of organization members
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/members`.
            public var members: [Components.Schemas.OrganizationMember]
            /// The organization's name
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/name`.
            public var name: Swift.String
            /// The plan associated with the organization
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/plan`.
            @frozen
            public enum planPayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case air
                case pro
                case enterprise
                case none
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "air": self = .air
                    case "pro": self = .pro
                    case "enterprise": self = .enterprise
                    case "none": self = .none
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .air: return "air"
                    case .pro: return "pro"
                    case .enterprise: return "enterprise"
                    case .none: return "none"
                    }
                }
                public static var allCases: [planPayload] { [.air, .pro, .enterprise, .none] }
            }
            /// The plan associated with the organization
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/plan`.
            public var plan: Components.Schemas.Organization.planPayload
            /// The organization ID associated with the SSO provider
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/sso_organization_id`.
            public var sso_organization_id: Swift.String?
            /// The SSO provider set up for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/sso_provider`.
            @frozen
            public enum sso_providerPayload: RawRepresentable, Codable, Equatable, Hashable,
                Sendable, _AutoLosslessStringConvertible, CaseIterable
            {
                case google
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "google": self = .google
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .google: return "google"
                    }
                }
                public static var allCases: [sso_providerPayload] { [.google] }
            }
            /// The SSO provider set up for the organization
            ///
            /// - Remark: Generated from `#/components/schemas/Organization/sso_provider`.
            public var sso_provider: Components.Schemas.Organization.sso_providerPayload?
            /// Creates a new `Organization`.
            ///
            /// - Parameters:
            ///   - id: The organization's unique identifier
            ///   - invitations: A list of organization invitations
            ///   - members: A list of organization members
            ///   - name: The organization's name
            ///   - plan: The plan associated with the organization
            ///   - sso_organization_id: The organization ID associated with the SSO provider
            ///   - sso_provider: The SSO provider set up for the organization
            public init(
                id: Swift.Double,
                invitations: [Components.Schemas.Invitation],
                members: [Components.Schemas.OrganizationMember],
                name: Swift.String,
                plan: Components.Schemas.Organization.planPayload,
                sso_organization_id: Swift.String? = nil,
                sso_provider: Components.Schemas.Organization.sso_providerPayload? = nil
            ) {
                self.id = id
                self.invitations = invitations
                self.members = members
                self.name = name
                self.plan = plan
                self.sso_organization_id = sso_organization_id
                self.sso_provider = sso_provider
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case invitations
                case members
                case name
                case plan
                case sso_organization_id
                case sso_provider
            }
        }
        /// The list of organizations the authenticated subject is part of.
        ///
        /// - Remark: Generated from `#/components/schemas/OrganizationList`.
        public struct OrganizationList: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrganizationList/organizations`.
            public var organizations: [Components.Schemas.Organization]
            /// Creates a new `OrganizationList`.
            ///
            /// - Parameters:
            ///   - organizations:
            public init(organizations: [Components.Schemas.Organization]) {
                self.organizations = organizations
            }
            public enum CodingKeys: String, CodingKey { case organizations }
        }
        /// An organization member
        ///
        /// - Remark: Generated from `#/components/schemas/OrganizationMember`.
        public struct OrganizationMember: Codable, Equatable, Hashable, Sendable {
            /// The organization member's email
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/email`.
            public var email: Swift.String
            /// The organization member's unique identifier
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/id`.
            public var id: Swift.Double
            /// The organization member's name
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/name`.
            public var name: Swift.String
            /// The organization member's role
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/role`.
            @frozen
            public enum rolePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case admin
                case user
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "admin": self = .admin
                    case "user": self = .user
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .admin: return "admin"
                    case .user: return "user"
                    }
                }
                public static var allCases: [rolePayload] { [.admin, .user] }
            }
            /// The organization member's role
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/role`.
            public var role: Components.Schemas.OrganizationMember.rolePayload
            /// Creates a new `OrganizationMember`.
            ///
            /// - Parameters:
            ///   - email: The organization member's email
            ///   - id: The organization member's unique identifier
            ///   - name: The organization member's name
            ///   - role: The organization member's role
            public init(
                email: Swift.String,
                id: Swift.Double,
                name: Swift.String,
                role: Components.Schemas.OrganizationMember.rolePayload
            ) {
                self.email = email
                self.id = id
                self.name = name
                self.role = role
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case id
                case name
                case role
            }
        }
        /// The usage of an organization.
        ///
        /// - Remark: Generated from `#/components/schemas/OrganizationUsage`.
        public struct OrganizationUsage: Codable, Equatable, Hashable, Sendable {
            /// The number of remote cache hits in the current month
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationUsage/current_month_remote_cache_hits`.
            public var current_month_remote_cache_hits: Swift.Double
            /// Creates a new `OrganizationUsage`.
            ///
            /// - Parameters:
            ///   - current_month_remote_cache_hits: The number of remote cache hits in the current month
            public init(current_month_remote_cache_hits: Swift.Double) {
                self.current_month_remote_cache_hits = current_month_remote_cache_hits
            }
            public enum CodingKeys: String, CodingKey { case current_month_remote_cache_hits }
        }
        /// - Remark: Generated from `#/components/schemas/Project`.
        public struct Project: Codable, Equatable, Hashable, Sendable {
            /// The full name of the project (e.g. tuist/tuist)
            ///
            /// - Remark: Generated from `#/components/schemas/Project/full_name`.
            public var full_name: Swift.String
            /// ID of the project
            ///
            /// - Remark: Generated from `#/components/schemas/Project/id`.
            public var id: Swift.Double
            /// The token that should be used to authenticate the project. For CI only.
            ///
            /// - Remark: Generated from `#/components/schemas/Project/token`.
            @available(*, deprecated) public var token: Swift.String
            /// Creates a new `Project`.
            ///
            /// - Parameters:
            ///   - full_name: The full name of the project (e.g. tuist/tuist)
            ///   - id: ID of the project
            ///   - token: The token that should be used to authenticate the project. For CI only.
            public init(full_name: Swift.String, id: Swift.Double, token: Swift.String) {
                self.full_name = full_name
                self.id = id
                self.token = token
            }
            public enum CodingKeys: String, CodingKey {
                case full_name
                case id
                case token
            }
        }
        /// A new project token.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectFullToken`.
        public struct ProjectFullToken: Codable, Equatable, Hashable, Sendable {
            /// The generated project token.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectFullToken/token`.
            public var token: Swift.String
            /// Creates a new `ProjectFullToken`.
            ///
            /// - Parameters:
            ///   - token: The generated project token.
            public init(token: Swift.String) { self.token = token }
            public enum CodingKeys: String, CodingKey { case token }
        }
        /// A token to authenticate API requests as a project.
        ///
        /// - Remark: Generated from `#/components/schemas/ProjectToken`.
        public struct ProjectToken: Codable, Equatable, Hashable, Sendable {
            /// The token unique identifier.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectToken/id`.
            public var id: Swift.String
            /// The timestamp of when the token was created.
            ///
            /// - Remark: Generated from `#/components/schemas/ProjectToken/inserted_at`.
            public var inserted_at: Foundation.Date
            /// Creates a new `ProjectToken`.
            ///
            /// - Parameters:
            ///   - id: The token unique identifier.
            ///   - inserted_at: The timestamp of when the token was created.
            public init(id: Swift.String, inserted_at: Foundation.Date) {
                self.id = id
                self.inserted_at = inserted_at
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case inserted_at
            }
        }
        /// A list of project tokens.
        ///
        /// - Remark: Generated from `#/components/schemas/Tokens`.
        public struct Tokens: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Tokens/tokens`.
            public var tokens: [Components.Schemas.ProjectToken]
            /// Creates a new `Tokens`.
            ///
            /// - Parameters:
            ///   - tokens:
            public init(tokens: [Components.Schemas.ProjectToken]) { self.tokens = tokens }
            public enum CodingKeys: String, CodingKey { case tokens }
        }
        /// A user.
        ///
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Equatable, Hashable, Sendable {
            /// The user's email
            ///
            /// - Remark: Generated from `#/components/schemas/User/email`.
            public var email: Swift.String
            /// The user's unique identifier
            ///
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.Double
            /// The user's name
            ///
            /// - Remark: Generated from `#/components/schemas/User/name`.
            public var name: Swift.String
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - email: The user's email
            ///   - id: The user's unique identifier
            ///   - name: The user's name
            public init(email: Swift.String, id: Swift.Double, name: Swift.String) {
                self.email = email
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case id
                case name
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Create a a new command analytics event
    ///
    /// - Remark: HTTP `POST /api/analytics`.
    /// - Remark: Generated from `#/paths//api/analytics/post(createCommandEvent)`.
    public enum createCommandEvent {
        public static let id: String = "createCommandEvent"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.createCommandEvent.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var project_id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - project_id:
                public init(project_id: Swift.String) { self.project_id = project_id }
            }
            public var query: Operations.createCommandEvent.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createCommandEvent.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createCommandEvent.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Command event params
                ///
                /// - Remark: Generated from `#/paths/api/analytics/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The client id of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/client_id`.
                    public var client_id: Swift.String
                    /// The arguments of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/command_arguments`.
                    public var command_arguments: [Swift.String]?
                    /// The duration of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/duration`.
                    public var duration: Swift.Double
                    /// The error message of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/error_message`.
                    public var error_message: Swift.String?
                    /// Whether the command was run in a CI environment.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/is_ci`.
                    public var is_ci: Swift.Bool
                    /// The version of macOS that ran the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/macos_version`.
                    public var macos_version: Swift.String
                    /// The name of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/name`.
                    public var name: Swift.String
                    /// Extra parameters.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/params`.
                    public struct paramsPayload: Codable, Equatable, Hashable, Sendable {
                        /// A list of cacheable targets.
                        ///
                        /// - Remark: Generated from `#/paths/api/analytics/POST/json/params/cacheable_targets`.
                        public var cacheable_targets: [Swift.String]?
                        /// A list of local cache target hits.
                        ///
                        /// - Remark: Generated from `#/paths/api/analytics/POST/json/params/local_cache_target_hits`.
                        public var local_cache_target_hits: [Swift.String]?
                        /// A list of local targets whose tests were skipped.
                        ///
                        /// - Remark: Generated from `#/paths/api/analytics/POST/json/params/local_test_target_hits`.
                        public var local_test_target_hits: [Swift.String]?
                        /// A list of remote cache target hits.
                        ///
                        /// - Remark: Generated from `#/paths/api/analytics/POST/json/params/remote_cache_target_hits`.
                        public var remote_cache_target_hits: [Swift.String]?
                        /// A list of remote targets whose tests were skipped.
                        ///
                        /// - Remark: Generated from `#/paths/api/analytics/POST/json/params/remote_test_target_hits`.
                        public var remote_test_target_hits: [Swift.String]?
                        /// The list of targets that were tested.
                        ///
                        /// - Remark: Generated from `#/paths/api/analytics/POST/json/params/test_targets`.
                        public var test_targets: [Swift.String]?
                        /// Creates a new `paramsPayload`.
                        ///
                        /// - Parameters:
                        ///   - cacheable_targets: A list of cacheable targets.
                        ///   - local_cache_target_hits: A list of local cache target hits.
                        ///   - local_test_target_hits: A list of local targets whose tests were skipped.
                        ///   - remote_cache_target_hits: A list of remote cache target hits.
                        ///   - remote_test_target_hits: A list of remote targets whose tests were skipped.
                        ///   - test_targets: The list of targets that were tested.
                        public init(
                            cacheable_targets: [Swift.String]? = nil,
                            local_cache_target_hits: [Swift.String]? = nil,
                            local_test_target_hits: [Swift.String]? = nil,
                            remote_cache_target_hits: [Swift.String]? = nil,
                            remote_test_target_hits: [Swift.String]? = nil,
                            test_targets: [Swift.String]? = nil
                        ) {
                            self.cacheable_targets = cacheable_targets
                            self.local_cache_target_hits = local_cache_target_hits
                            self.local_test_target_hits = local_test_target_hits
                            self.remote_cache_target_hits = remote_cache_target_hits
                            self.remote_test_target_hits = remote_test_target_hits
                            self.test_targets = test_targets
                        }
                        public enum CodingKeys: String, CodingKey {
                            case cacheable_targets
                            case local_cache_target_hits
                            case local_test_target_hits
                            case remote_cache_target_hits
                            case remote_test_target_hits
                            case test_targets
                        }
                    }
                    /// Extra parameters.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/params`.
                    public var params:
                        Operations.createCommandEvent.Input.Body.jsonPayload.paramsPayload?
                    /// The status of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/status`.
                    @frozen
                    public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable,
                        Sendable, _AutoLosslessStringConvertible, CaseIterable
                    {
                        case success
                        case failure
                        /// Parsed a raw value that was not defined in the OpenAPI document.
                        case undocumented(String)
                        public init?(rawValue: String) {
                            switch rawValue {
                            case "success": self = .success
                            case "failure": self = .failure
                            default: self = .undocumented(rawValue)
                            }
                        }
                        public var rawValue: String {
                            switch self {
                            case let .undocumented(string): return string
                            case .success: return "success"
                            case .failure: return "failure"
                            }
                        }
                        public static var allCases: [statusPayload] { [.success, .failure] }
                    }
                    /// The status of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/status`.
                    public var status:
                        Operations.createCommandEvent.Input.Body.jsonPayload.statusPayload?
                    /// The subcommand of the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/subcommand`.
                    public var subcommand: Swift.String?
                    /// The version of Swift that ran the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/swift_version`.
                    public var swift_version: Swift.String
                    /// The version of Tuist that ran the command.
                    ///
                    /// - Remark: Generated from `#/paths/api/analytics/POST/json/tuist_version`.
                    public var tuist_version: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - client_id: The client id of the command.
                    ///   - command_arguments: The arguments of the command.
                    ///   - duration: The duration of the command.
                    ///   - error_message: The error message of the command.
                    ///   - is_ci: Whether the command was run in a CI environment.
                    ///   - macos_version: The version of macOS that ran the command.
                    ///   - name: The name of the command.
                    ///   - params: Extra parameters.
                    ///   - status: The status of the command.
                    ///   - subcommand: The subcommand of the command.
                    ///   - swift_version: The version of Swift that ran the command.
                    ///   - tuist_version: The version of Tuist that ran the command.
                    public init(
                        client_id: Swift.String,
                        command_arguments: [Swift.String]? = nil,
                        duration: Swift.Double,
                        error_message: Swift.String? = nil,
                        is_ci: Swift.Bool,
                        macos_version: Swift.String,
                        name: Swift.String,
                        params: Operations.createCommandEvent.Input.Body.jsonPayload
                            .paramsPayload? = nil,
                        status: Operations.createCommandEvent.Input.Body.jsonPayload
                            .statusPayload? = nil,
                        subcommand: Swift.String? = nil,
                        swift_version: Swift.String,
                        tuist_version: Swift.String
                    ) {
                        self.client_id = client_id
                        self.command_arguments = command_arguments
                        self.duration = duration
                        self.error_message = error_message
                        self.is_ci = is_ci
                        self.macos_version = macos_version
                        self.name = name
                        self.params = params
                        self.status = status
                        self.subcommand = subcommand
                        self.swift_version = swift_version
                        self.tuist_version = tuist_version
                    }
                    public enum CodingKeys: String, CodingKey {
                        case client_id
                        case command_arguments
                        case duration
                        case error_message
                        case is_ci
                        case macos_version
                        case name
                        case params
                        case status
                        case subcommand
                        case swift_version
                        case tuist_version
                    }
                }
                case json(Operations.createCommandEvent.Input.Body.jsonPayload)
            }
            public var body: Operations.createCommandEvent.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createCommandEvent.Input.Path = .init(),
                query: Operations.createCommandEvent.Input.Query,
                headers: Operations.createCommandEvent.Input.Headers = .init(),
                cookies: Operations.createCommandEvent.Input.Cookies = .init(),
                body: Operations.createCommandEvent.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createCommandEvent.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.CommandEvent)
                }
                /// Received HTTP response body
                public var body: Operations.createCommandEvent.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createCommandEvent.Output.Ok.Headers = .init(),
                    body: Operations.createCommandEvent.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The command event was created
            ///
            /// - Remark: Generated from `#/paths//api/analytics/post(createCommandEvent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createCommandEvent.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createCommandEvent.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createCommandEvent.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createCommandEvent.Output.Unauthorized.Headers = .init(),
                    body: Operations.createCommandEvent.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/analytics/post(createCommandEvent)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createCommandEvent.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createCommandEvent.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createCommandEvent.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createCommandEvent.Output.Forbidden.Headers = .init(),
                    body: Operations.createCommandEvent.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You don't have permission to create command events for the project.
            ///
            /// - Remark: Generated from `#/paths//api/analytics/post(createCommandEvent)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createCommandEvent.Output.Forbidden)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Authenticate with email and password.
    ///
    /// This endpoint returns API tokens for a given email and password.
    ///
    /// - Remark: HTTP `POST /api/auth`.
    /// - Remark: Generated from `#/paths//api/auth/post(authenticate)`.
    public enum authenticate {
        public static let id: String = "authenticate"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.authenticate.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.authenticate.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.authenticate.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.authenticate.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Authentication params.
                ///
                /// - Remark: Generated from `#/paths/api/auth/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The email to authenticate with.
                    ///
                    /// - Remark: Generated from `#/paths/api/auth/POST/json/email`.
                    public var email: Swift.String
                    /// The password to authenticate with.
                    ///
                    /// - Remark: Generated from `#/paths/api/auth/POST/json/password`.
                    public var password: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - email: The email to authenticate with.
                    ///   - password: The password to authenticate with.
                    public init(email: Swift.String, password: Swift.String) {
                        self.email = email
                        self.password = password
                    }
                    public enum CodingKeys: String, CodingKey {
                        case email
                        case password
                    }
                }
                case json(Operations.authenticate.Input.Body.jsonPayload)
            }
            public var body: Operations.authenticate.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.authenticate.Input.Path = .init(),
                query: Operations.authenticate.Input.Query = .init(),
                headers: Operations.authenticate.Input.Headers = .init(),
                cookies: Operations.authenticate.Input.Cookies = .init(),
                body: Operations.authenticate.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.authenticate.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.AuthenticationTokens)
                }
                /// Received HTTP response body
                public var body: Operations.authenticate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.authenticate.Output.Ok.Headers = .init(),
                    body: Operations.authenticate.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Successfully authenticated and returned new API tokens.
            ///
            /// - Remark: Generated from `#/paths//api/auth/post(authenticate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.authenticate.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.authenticate.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.authenticate.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.authenticate.Output.Unauthorized.Headers = .init(),
                    body: Operations.authenticate.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Invalid email or password.
            ///
            /// - Remark: Generated from `#/paths//api/auth/post(authenticate)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.authenticate.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Get a specific device code.
    ///
    /// This endpoint returns a token for a given device code if the device code is authenticated.
    ///
    /// - Remark: HTTP `GET /api/auth/device_code/{device_code}`.
    /// - Remark: Generated from `#/paths//api/auth/device_code/{device_code}/get(getDeviceCode)`.
    public enum getDeviceCode {
        public static let id: String = "getDeviceCode"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var device_code: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - device_code:
                public init(device_code: Swift.String) { self.device_code = device_code }
            }
            public var path: Operations.getDeviceCode.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.getDeviceCode.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.getDeviceCode.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.getDeviceCode.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.getDeviceCode.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.getDeviceCode.Input.Path,
                query: Operations.getDeviceCode.Input.Query = .init(),
                headers: Operations.getDeviceCode.Input.Headers = .init(),
                cookies: Operations.getDeviceCode.Input.Cookies = .init(),
                body: Operations.getDeviceCode.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getDeviceCode.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// Token to authenticate the user with.
                    ///
                    /// - Remark: Generated from `#/paths/api/auth/device_code/{device_code}/GET/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// A short-lived token to authenticate API requests as user.
                        ///
                        /// - Remark: Generated from `#/paths/api/auth/device_code/{device_code}/GET/json/access_token`.
                        public var access_token: Swift.String?
                        /// A token to generate new access tokens when they expire.
                        ///
                        /// - Remark: Generated from `#/paths/api/auth/device_code/{device_code}/GET/json/refresh_token`.
                        public var refresh_token: Swift.String?
                        /// User authentication token
                        ///
                        /// - Remark: Generated from `#/paths/api/auth/device_code/{device_code}/GET/json/token`.
                        @available(*, deprecated) public var token: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - access_token: A short-lived token to authenticate API requests as user.
                        ///   - refresh_token: A token to generate new access tokens when they expire.
                        ///   - token: User authentication token
                        public init(
                            access_token: Swift.String? = nil,
                            refresh_token: Swift.String? = nil,
                            token: Swift.String? = nil
                        ) {
                            self.access_token = access_token
                            self.refresh_token = refresh_token
                            self.token = token
                        }
                        public enum CodingKeys: String, CodingKey {
                            case access_token
                            case refresh_token
                            case token
                        }
                    }
                    case json(Operations.getDeviceCode.Output.Ok.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.getDeviceCode.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getDeviceCode.Output.Ok.Headers = .init(),
                    body: Operations.getDeviceCode.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The device code is authenticated
            ///
            /// - Remark: Generated from `#/paths//api/auth/device_code/{device_code}/get(getDeviceCode)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getDeviceCode.Output.Ok)
            public struct Accepted: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getDeviceCode.Output.Accepted.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(OpenAPIRuntime.OpenAPIObjectContainer)
                }
                /// Received HTTP response body
                public var body: Operations.getDeviceCode.Output.Accepted.Body
                /// Creates a new `Accepted`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getDeviceCode.Output.Accepted.Headers = .init(),
                    body: Operations.getDeviceCode.Output.Accepted.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The device code is not authenticated
            ///
            /// - Remark: Generated from `#/paths//api/auth/device_code/{device_code}/get(getDeviceCode)/responses/202`.
            ///
            /// HTTP response code: `202 accepted`.
            case accepted(Operations.getDeviceCode.Output.Accepted)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getDeviceCode.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.getDeviceCode.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getDeviceCode.Output.BadRequest.Headers = .init(),
                    body: Operations.getDeviceCode.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The request was not accepted, e.g., when the device code is expired
            ///
            /// - Remark: Generated from `#/paths//api/auth/device_code/{device_code}/get(getDeviceCode)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.getDeviceCode.Output.BadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Request new tokens.
    ///
    /// This endpoint returns new tokens for a given refresh token if the refresh token is valid.
    ///
    /// - Remark: HTTP `POST /api/auth/refresh_token`.
    /// - Remark: Generated from `#/paths//api/auth/refresh_token/post(refreshToken)`.
    public enum refreshToken {
        public static let id: String = "refreshToken"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.refreshToken.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.refreshToken.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.refreshToken.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.refreshToken.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Token params
                ///
                /// - Remark: Generated from `#/paths/api/auth/refresh_token/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// User refresh token
                    ///
                    /// - Remark: Generated from `#/paths/api/auth/refresh_token/POST/json/refresh_token`.
                    public var refresh_token: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - refresh_token: User refresh token
                    public init(refresh_token: Swift.String) { self.refresh_token = refresh_token }
                    public enum CodingKeys: String, CodingKey { case refresh_token }
                }
                case json(Operations.refreshToken.Input.Body.jsonPayload)
            }
            public var body: Operations.refreshToken.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.refreshToken.Input.Path = .init(),
                query: Operations.refreshToken.Input.Query = .init(),
                headers: Operations.refreshToken.Input.Headers = .init(),
                cookies: Operations.refreshToken.Input.Cookies = .init(),
                body: Operations.refreshToken.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.refreshToken.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.AuthenticationTokens)
                }
                /// Received HTTP response body
                public var body: Operations.refreshToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.refreshToken.Output.Ok.Headers = .init(),
                    body: Operations.refreshToken.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Succcessfully generated new API tokens.
            ///
            /// - Remark: Generated from `#/paths//api/auth/refresh_token/post(refreshToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.refreshToken.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.refreshToken.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.refreshToken.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.refreshToken.Output.Unauthorized.Headers = .init(),
                    body: Operations.refreshToken.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to issue new tokens
            ///
            /// - Remark: Generated from `#/paths//api/auth/refresh_token/post(refreshToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.refreshToken.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Downloads an artifact from the cache.
    ///
    /// This endpoint returns a signed URL that can be used to download an artifact from the cache.
    ///
    /// - Remark: HTTP `GET /api/cache`.
    /// - Remark: Generated from `#/paths//api/cache/get(downloadCacheArtifact)`.
    public enum downloadCacheArtifact {
        public static let id: String = "downloadCacheArtifact"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.downloadCacheArtifact.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var cache_category: Components.Schemas.CacheCategory?
                public var project_id: Swift.String
                public var hash: Swift.String
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cache_category:
                ///   - project_id:
                ///   - hash:
                ///   - name:
                public init(
                    cache_category: Components.Schemas.CacheCategory? = nil,
                    project_id: Swift.String,
                    hash: Swift.String,
                    name: Swift.String
                ) {
                    self.cache_category = cache_category
                    self.project_id = project_id
                    self.hash = hash
                    self.name = name
                }
            }
            public var query: Operations.downloadCacheArtifact.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.downloadCacheArtifact.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.downloadCacheArtifact.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.downloadCacheArtifact.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.downloadCacheArtifact.Input.Path = .init(),
                query: Operations.downloadCacheArtifact.Input.Query,
                headers: Operations.downloadCacheArtifact.Input.Headers = .init(),
                cookies: Operations.downloadCacheArtifact.Input.Cookies = .init(),
                body: Operations.downloadCacheArtifact.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.downloadCacheArtifact.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.CacheArtifactDownloadURL)
                }
                /// Received HTTP response body
                public var body: Operations.downloadCacheArtifact.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.downloadCacheArtifact.Output.Ok.Headers = .init(),
                    body: Operations.downloadCacheArtifact.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The artifact exists and is downloadable
            ///
            /// - Remark: Generated from `#/paths//api/cache/get(downloadCacheArtifact)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.downloadCacheArtifact.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.downloadCacheArtifact.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.downloadCacheArtifact.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.downloadCacheArtifact.Output.Unauthorized.Headers = .init(),
                    body: Operations.downloadCacheArtifact.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/cache/get(downloadCacheArtifact)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.downloadCacheArtifact.Output.Unauthorized)
            public struct PaymentRequired: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.downloadCacheArtifact.Output.PaymentRequired.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.downloadCacheArtifact.Output.PaymentRequired.Body
                /// Creates a new `PaymentRequired`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.downloadCacheArtifact.Output.PaymentRequired.Headers =
                        .init(),
                    body: Operations.downloadCacheArtifact.Output.PaymentRequired.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The account has an invalid plan
            ///
            /// - Remark: Generated from `#/paths//api/cache/get(downloadCacheArtifact)/responses/402`.
            ///
            /// HTTP response code: `402 paymentRequired`.
            case paymentRequired(Operations.downloadCacheArtifact.Output.PaymentRequired)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.downloadCacheArtifact.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.downloadCacheArtifact.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.downloadCacheArtifact.Output.Forbidden.Headers = .init(),
                    body: Operations.downloadCacheArtifact.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/cache/get(downloadCacheArtifact)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.downloadCacheArtifact.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.downloadCacheArtifact.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.downloadCacheArtifact.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.downloadCacheArtifact.Output.NotFound.Headers = .init(),
                    body: Operations.downloadCacheArtifact.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project or the cache artifact doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/cache/get(downloadCacheArtifact)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.downloadCacheArtifact.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// It checks if an artifact exists in the cache.
    ///
    /// This endpoint checks if an artifact exists in the cache. It returns a 404 status code if the artifact does not exist.
    ///
    /// - Remark: HTTP `GET /api/cache/exists`.
    /// - Remark: Generated from `#/paths//api/cache/exists/get(cacheArtifactExists)`.
    public enum cacheArtifactExists {
        public static let id: String = "cacheArtifactExists"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.cacheArtifactExists.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var cache_category: Components.Schemas.CacheCategory?
                public var project_id: Swift.String
                public var hash: Swift.String
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cache_category:
                ///   - project_id:
                ///   - hash:
                ///   - name:
                public init(
                    cache_category: Components.Schemas.CacheCategory? = nil,
                    project_id: Swift.String,
                    hash: Swift.String,
                    name: Swift.String
                ) {
                    self.cache_category = cache_category
                    self.project_id = project_id
                    self.hash = hash
                    self.name = name
                }
            }
            public var query: Operations.cacheArtifactExists.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.cacheArtifactExists.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.cacheArtifactExists.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.cacheArtifactExists.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.cacheArtifactExists.Input.Path = .init(),
                query: Operations.cacheArtifactExists.Input.Query,
                headers: Operations.cacheArtifactExists.Input.Headers = .init(),
                cookies: Operations.cacheArtifactExists.Input.Cookies = .init(),
                body: Operations.cacheArtifactExists.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cacheArtifactExists.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// The artifact exists in the cache and can be downloaded
                    ///
                    /// - Remark: Generated from `#/paths/api/cache/exists/GET/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/data`.
                        public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                        /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/status`.
                        @frozen
                        public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable,
                            Sendable, _AutoLosslessStringConvertible, CaseIterable
                        {
                            case success
                            /// Parsed a raw value that was not defined in the OpenAPI document.
                            case undocumented(String)
                            public init?(rawValue: String) {
                                switch rawValue {
                                case "success": self = .success
                                default: self = .undocumented(rawValue)
                                }
                            }
                            public var rawValue: String {
                                switch self {
                                case let .undocumented(string): return string
                                case .success: return "success"
                                }
                            }
                            public static var allCases: [statusPayload] { [.success] }
                        }
                        /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/status`.
                        public var status:
                            Operations.cacheArtifactExists.Output.Ok.Body.jsonPayload.statusPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        ///   - status:
                        public init(
                            data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                            status: Operations.cacheArtifactExists.Output.Ok.Body.jsonPayload
                                .statusPayload? = nil
                        ) {
                            self.data = data
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                            case status
                        }
                    }
                    case json(Operations.cacheArtifactExists.Output.Ok.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.cacheArtifactExists.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cacheArtifactExists.Output.Ok.Headers = .init(),
                    body: Operations.cacheArtifactExists.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The artifact exists
            ///
            /// - Remark: Generated from `#/paths//api/cache/exists/get(cacheArtifactExists)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cacheArtifactExists.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cacheArtifactExists.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cacheArtifactExists.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cacheArtifactExists.Output.Unauthorized.Headers = .init(),
                    body: Operations.cacheArtifactExists.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/cache/exists/get(cacheArtifactExists)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.cacheArtifactExists.Output.Unauthorized)
            public struct PaymentRequired: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cacheArtifactExists.Output.PaymentRequired.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cacheArtifactExists.Output.PaymentRequired.Body
                /// Creates a new `PaymentRequired`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cacheArtifactExists.Output.PaymentRequired.Headers =
                        .init(),
                    body: Operations.cacheArtifactExists.Output.PaymentRequired.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The account has an invalid plan
            ///
            /// - Remark: Generated from `#/paths//api/cache/exists/get(cacheArtifactExists)/responses/402`.
            ///
            /// HTTP response code: `402 paymentRequired`.
            case paymentRequired(Operations.cacheArtifactExists.Output.PaymentRequired)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cacheArtifactExists.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cacheArtifactExists.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cacheArtifactExists.Output.Forbidden.Headers = .init(),
                    body: Operations.cacheArtifactExists.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/cache/exists/get(cacheArtifactExists)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.cacheArtifactExists.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cacheArtifactExists.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// - Remark: Generated from `#/paths/api/cache/exists/GET/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/errorPayload`.
                        public struct errorPayloadPayload: Codable, Equatable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/errorPayload/code`.
                            public var code: Swift.String?
                            /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/errorPayload/message`.
                            public var message: Swift.String?
                            /// Creates a new `errorPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - code:
                            ///   - message:
                            public init(code: Swift.String? = nil, message: Swift.String? = nil) {
                                self.code = code
                                self.message = message
                            }
                            public enum CodingKeys: String, CodingKey {
                                case code
                                case message
                            }
                        }
                        /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/error`.
                        public typealias errorPayload = [Operations.cacheArtifactExists.Output
                            .NotFound.Body.jsonPayload.errorPayloadPayload]
                        /// - Remark: Generated from `#/paths/api/cache/exists/GET/json/error`.
                        public var error:
                            Operations.cacheArtifactExists.Output.NotFound.Body.jsonPayload
                                .errorPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(
                            error: Operations.cacheArtifactExists.Output.NotFound.Body.jsonPayload
                                .errorPayload? = nil
                        ) { self.error = error }
                        public enum CodingKeys: String, CodingKey { case error }
                    }
                    case json(Operations.cacheArtifactExists.Output.NotFound.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.cacheArtifactExists.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cacheArtifactExists.Output.NotFound.Headers = .init(),
                    body: Operations.cacheArtifactExists.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The artifact doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/cache/exists/get(cacheArtifactExists)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.cacheArtifactExists.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// It completes a multi-part upload.
    ///
    /// Given the upload ID and all the parts with their ETags, this endpoint completes the multipart upload. The cache will then be able to serve the artifact.
    ///
    /// - Remark: HTTP `POST /api/cache/multipart/complete`.
    /// - Remark: Generated from `#/paths//api/cache/multipart/complete/post(completeCacheArtifactMultipartUpload)`.
    public enum completeCacheArtifactMultipartUpload {
        public static let id: String = "completeCacheArtifactMultipartUpload"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.completeCacheArtifactMultipartUpload.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var cache_category: Components.Schemas.CacheCategory?
                public var project_id: Swift.String
                public var hash: Swift.String
                public var upload_id: Swift.String
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cache_category:
                ///   - project_id:
                ///   - hash:
                ///   - upload_id:
                ///   - name:
                public init(
                    cache_category: Components.Schemas.CacheCategory? = nil,
                    project_id: Swift.String,
                    hash: Swift.String,
                    upload_id: Swift.String,
                    name: Swift.String
                ) {
                    self.cache_category = cache_category
                    self.project_id = project_id
                    self.hash = hash
                    self.upload_id = upload_id
                    self.name = name
                }
            }
            public var query: Operations.completeCacheArtifactMultipartUpload.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.completeCacheArtifactMultipartUpload.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.completeCacheArtifactMultipartUpload.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Multi-part upload parts
                ///
                /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/partsPayload`.
                    public struct partsPayloadPayload: Codable, Equatable, Hashable, Sendable {
                        /// The ETag of the part
                        ///
                        /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/partsPayload/etag`.
                        public var etag: Swift.String?
                        /// The part number
                        ///
                        /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/partsPayload/part_number`.
                        public var part_number: Swift.Int?
                        /// Creates a new `partsPayloadPayload`.
                        ///
                        /// - Parameters:
                        ///   - etag: The ETag of the part
                        ///   - part_number: The part number
                        public init(etag: Swift.String? = nil, part_number: Swift.Int? = nil) {
                            self.etag = etag
                            self.part_number = part_number
                        }
                        public enum CodingKeys: String, CodingKey {
                            case etag
                            case part_number
                        }
                    }
                    /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/parts`.
                    public typealias partsPayload = [Operations.completeCacheArtifactMultipartUpload
                        .Input.Body.jsonPayload.partsPayloadPayload]
                    /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/parts`.
                    public var parts:
                        Operations.completeCacheArtifactMultipartUpload.Input.Body.jsonPayload
                            .partsPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - parts:
                    public init(
                        parts: Operations.completeCacheArtifactMultipartUpload.Input.Body
                            .jsonPayload.partsPayload? = nil
                    ) { self.parts = parts }
                    public enum CodingKeys: String, CodingKey { case parts }
                }
                case json(Operations.completeCacheArtifactMultipartUpload.Input.Body.jsonPayload)
            }
            public var body: Operations.completeCacheArtifactMultipartUpload.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.completeCacheArtifactMultipartUpload.Input.Path = .init(),
                query: Operations.completeCacheArtifactMultipartUpload.Input.Query,
                headers: Operations.completeCacheArtifactMultipartUpload.Input.Headers = .init(),
                cookies: Operations.completeCacheArtifactMultipartUpload.Input.Cookies = .init(),
                body: Operations.completeCacheArtifactMultipartUpload.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeCacheArtifactMultipartUpload.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// This response confirms that the upload has been completed successfully. The cache will now be able to serve the artifact.
                    ///
                    /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/data`.
                        public var data: OpenAPIRuntime.OpenAPIObjectContainer?
                        /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/status`.
                        @frozen
                        public enum statusPayload: RawRepresentable, Codable, Equatable, Hashable,
                            Sendable, _AutoLosslessStringConvertible, CaseIterable
                        {
                            case success
                            /// Parsed a raw value that was not defined in the OpenAPI document.
                            case undocumented(String)
                            public init?(rawValue: String) {
                                switch rawValue {
                                case "success": self = .success
                                default: self = .undocumented(rawValue)
                                }
                            }
                            public var rawValue: String {
                                switch self {
                                case let .undocumented(string): return string
                                case .success: return "success"
                                }
                            }
                            public static var allCases: [statusPayload] { [.success] }
                        }
                        /// - Remark: Generated from `#/paths/api/cache/multipart/complete/POST/json/status`.
                        public var status:
                            Operations.completeCacheArtifactMultipartUpload.Output.Ok.Body
                                .jsonPayload.statusPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - data:
                        ///   - status:
                        public init(
                            data: OpenAPIRuntime.OpenAPIObjectContainer? = nil,
                            status: Operations.completeCacheArtifactMultipartUpload.Output.Ok.Body
                                .jsonPayload.statusPayload? = nil
                        ) {
                            self.data = data
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case data
                            case status
                        }
                    }
                    case json(
                        Operations.completeCacheArtifactMultipartUpload.Output.Ok.Body.jsonPayload
                    )
                }
                /// Received HTTP response body
                public var body: Operations.completeCacheArtifactMultipartUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeCacheArtifactMultipartUpload.Output.Ok.Headers =
                        .init(),
                    body: Operations.completeCacheArtifactMultipartUpload.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The upload has been completed
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/complete/post(completeCacheArtifactMultipartUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.completeCacheArtifactMultipartUpload.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeCacheArtifactMultipartUpload.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeCacheArtifactMultipartUpload.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeCacheArtifactMultipartUpload.Output.Unauthorized
                        .Headers = .init(),
                    body: Operations.completeCacheArtifactMultipartUpload.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/complete/post(completeCacheArtifactMultipartUpload)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.completeCacheArtifactMultipartUpload.Output.Unauthorized)
            public struct PaymentRequired: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeCacheArtifactMultipartUpload.Output.PaymentRequired.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeCacheArtifactMultipartUpload.Output.PaymentRequired.Body
                /// Creates a new `PaymentRequired`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeCacheArtifactMultipartUpload.Output.PaymentRequired
                        .Headers = .init(),
                    body: Operations.completeCacheArtifactMultipartUpload.Output.PaymentRequired
                        .Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The account has an invalid plan
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/complete/post(completeCacheArtifactMultipartUpload)/responses/402`.
            ///
            /// HTTP response code: `402 paymentRequired`.
            case paymentRequired(
                Operations.completeCacheArtifactMultipartUpload.Output.PaymentRequired
            )
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeCacheArtifactMultipartUpload.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeCacheArtifactMultipartUpload.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeCacheArtifactMultipartUpload.Output.Forbidden
                        .Headers = .init(),
                    body: Operations.completeCacheArtifactMultipartUpload.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/complete/post(completeCacheArtifactMultipartUpload)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.completeCacheArtifactMultipartUpload.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeCacheArtifactMultipartUpload.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeCacheArtifactMultipartUpload.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeCacheArtifactMultipartUpload.Output.NotFound
                        .Headers = .init(),
                    body: Operations.completeCacheArtifactMultipartUpload.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/complete/post(completeCacheArtifactMultipartUpload)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.completeCacheArtifactMultipartUpload.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// It generates a signed URL for uploading a part.
    ///
    /// Given an upload ID and a part number, this endpoint returns a signed URL that can be used to upload a part of a multipart upload. The URL is short-lived and expires in 120 seconds.
    ///
    /// - Remark: HTTP `POST /api/cache/multipart/generate-url`.
    /// - Remark: Generated from `#/paths//api/cache/multipart/generate-url/post(generateCacheArtifactMultipartUploadURL)`.
    public enum generateCacheArtifactMultipartUploadURL {
        public static let id: String = "generateCacheArtifactMultipartUploadURL"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.generateCacheArtifactMultipartUploadURL.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var cache_category: Components.Schemas.CacheCategory?
                public var project_id: Swift.String
                public var hash: Swift.String
                public var part_number: Swift.Int
                public var upload_id: Swift.String
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cache_category:
                ///   - project_id:
                ///   - hash:
                ///   - part_number:
                ///   - upload_id:
                ///   - name:
                public init(
                    cache_category: Components.Schemas.CacheCategory? = nil,
                    project_id: Swift.String,
                    hash: Swift.String,
                    part_number: Swift.Int,
                    upload_id: Swift.String,
                    name: Swift.String
                ) {
                    self.cache_category = cache_category
                    self.project_id = project_id
                    self.hash = hash
                    self.part_number = part_number
                    self.upload_id = upload_id
                    self.name = name
                }
            }
            public var query: Operations.generateCacheArtifactMultipartUploadURL.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.generateCacheArtifactMultipartUploadURL.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.generateCacheArtifactMultipartUploadURL.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.generateCacheArtifactMultipartUploadURL.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.generateCacheArtifactMultipartUploadURL.Input.Path = .init(),
                query: Operations.generateCacheArtifactMultipartUploadURL.Input.Query,
                headers: Operations.generateCacheArtifactMultipartUploadURL.Input.Headers = .init(),
                cookies: Operations.generateCacheArtifactMultipartUploadURL.Input.Cookies = .init(),
                body: Operations.generateCacheArtifactMultipartUploadURL.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.ArtifactMultipartUploadURL)
                }
                /// Received HTTP response body
                public var body: Operations.generateCacheArtifactMultipartUploadURL.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateCacheArtifactMultipartUploadURL.Output.Ok.Headers =
                        .init(),
                    body: Operations.generateCacheArtifactMultipartUploadURL.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The URL has been generated
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/generate-url/post(generateCacheArtifactMultipartUploadURL)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.generateCacheArtifactMultipartUploadURL.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateCacheArtifactMultipartUploadURL.Output.Unauthorized
                        .Headers = .init(),
                    body: Operations.generateCacheArtifactMultipartUploadURL.Output.Unauthorized
                        .Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/generate-url/post(generateCacheArtifactMultipartUploadURL)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(
                Operations.generateCacheArtifactMultipartUploadURL.Output.Unauthorized
            )
            public struct PaymentRequired: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.PaymentRequired
                        .Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.PaymentRequired.Body
                /// Creates a new `PaymentRequired`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateCacheArtifactMultipartUploadURL.Output
                        .PaymentRequired.Headers = .init(),
                    body: Operations.generateCacheArtifactMultipartUploadURL.Output.PaymentRequired
                        .Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The account has an invalid plan
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/generate-url/post(generateCacheArtifactMultipartUploadURL)/responses/402`.
            ///
            /// HTTP response code: `402 paymentRequired`.
            case paymentRequired(
                Operations.generateCacheArtifactMultipartUploadURL.Output.PaymentRequired
            )
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateCacheArtifactMultipartUploadURL.Output.Forbidden
                        .Headers = .init(),
                    body: Operations.generateCacheArtifactMultipartUploadURL.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/generate-url/post(generateCacheArtifactMultipartUploadURL)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.generateCacheArtifactMultipartUploadURL.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateCacheArtifactMultipartUploadURL.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateCacheArtifactMultipartUploadURL.Output.NotFound
                        .Headers = .init(),
                    body: Operations.generateCacheArtifactMultipartUploadURL.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/generate-url/post(generateCacheArtifactMultipartUploadURL)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.generateCacheArtifactMultipartUploadURL.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// It initiates a multipart upload in the cache.
    ///
    /// The endpoint returns an upload ID that can be used to generate URLs for the individual parts and complete the upload.
    ///
    /// - Remark: HTTP `POST /api/cache/multipart/start`.
    /// - Remark: Generated from `#/paths//api/cache/multipart/start/post(startCacheArtifactMultipartUpload)`.
    public enum startCacheArtifactMultipartUpload {
        public static let id: String = "startCacheArtifactMultipartUpload"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.startCacheArtifactMultipartUpload.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var cache_category: Components.Schemas.CacheCategory?
                public var project_id: Swift.String
                public var hash: Swift.String
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - cache_category:
                ///   - project_id:
                ///   - hash:
                ///   - name:
                public init(
                    cache_category: Components.Schemas.CacheCategory? = nil,
                    project_id: Swift.String,
                    hash: Swift.String,
                    name: Swift.String
                ) {
                    self.cache_category = cache_category
                    self.project_id = project_id
                    self.hash = hash
                    self.name = name
                }
            }
            public var query: Operations.startCacheArtifactMultipartUpload.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.startCacheArtifactMultipartUpload.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.startCacheArtifactMultipartUpload.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.startCacheArtifactMultipartUpload.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.startCacheArtifactMultipartUpload.Input.Path = .init(),
                query: Operations.startCacheArtifactMultipartUpload.Input.Query,
                headers: Operations.startCacheArtifactMultipartUpload.Input.Headers = .init(),
                cookies: Operations.startCacheArtifactMultipartUpload.Input.Cookies = .init(),
                body: Operations.startCacheArtifactMultipartUpload.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.startCacheArtifactMultipartUpload.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.ArtifactUploadID)
                }
                /// Received HTTP response body
                public var body: Operations.startCacheArtifactMultipartUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startCacheArtifactMultipartUpload.Output.Ok.Headers =
                        .init(),
                    body: Operations.startCacheArtifactMultipartUpload.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The upload has been started
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/start/post(startCacheArtifactMultipartUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.startCacheArtifactMultipartUpload.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startCacheArtifactMultipartUpload.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.startCacheArtifactMultipartUpload.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startCacheArtifactMultipartUpload.Output.Unauthorized
                        .Headers = .init(),
                    body: Operations.startCacheArtifactMultipartUpload.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/start/post(startCacheArtifactMultipartUpload)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.startCacheArtifactMultipartUpload.Output.Unauthorized)
            public struct PaymentRequired: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startCacheArtifactMultipartUpload.Output.PaymentRequired.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.startCacheArtifactMultipartUpload.Output.PaymentRequired.Body
                /// Creates a new `PaymentRequired`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startCacheArtifactMultipartUpload.Output.PaymentRequired
                        .Headers = .init(),
                    body: Operations.startCacheArtifactMultipartUpload.Output.PaymentRequired.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The account has an invalid plan
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/start/post(startCacheArtifactMultipartUpload)/responses/402`.
            ///
            /// HTTP response code: `402 paymentRequired`.
            case paymentRequired(
                Operations.startCacheArtifactMultipartUpload.Output.PaymentRequired
            )
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startCacheArtifactMultipartUpload.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.startCacheArtifactMultipartUpload.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startCacheArtifactMultipartUpload.Output.Forbidden.Headers =
                        .init(),
                    body: Operations.startCacheArtifactMultipartUpload.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/start/post(startCacheArtifactMultipartUpload)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.startCacheArtifactMultipartUpload.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startCacheArtifactMultipartUpload.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.startCacheArtifactMultipartUpload.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startCacheArtifactMultipartUpload.Output.NotFound.Headers =
                        .init(),
                    body: Operations.startCacheArtifactMultipartUpload.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/cache/multipart/start/post(startCacheArtifactMultipartUpload)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.startCacheArtifactMultipartUpload.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Lists the organizations
    ///
    /// Returns all the organizations the authenticated subject is part of.
    ///
    /// - Remark: HTTP `GET /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)`.
    public enum listOrganizations {
        public static let id: String = "listOrganizations"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.listOrganizations.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.listOrganizations.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.listOrganizations.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.listOrganizations.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.listOrganizations.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.listOrganizations.Input.Path = .init(),
                query: Operations.listOrganizations.Input.Query = .init(),
                headers: Operations.listOrganizations.Input.Headers = .init(),
                cookies: Operations.listOrganizations.Input.Cookies = .init(),
                body: Operations.listOrganizations.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listOrganizations.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// The list of organizations the authenticated subject is part of.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/GET/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/organizations/GET/json/organizations`.
                        public var organizations: [Components.Schemas.Organization]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - organizations:
                        public init(organizations: [Components.Schemas.Organization]) {
                            self.organizations = organizations
                        }
                        public enum CodingKeys: String, CodingKey { case organizations }
                    }
                    case json(Operations.listOrganizations.Output.Ok.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.listOrganizations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listOrganizations.Output.Ok.Headers = .init(),
                    body: Operations.listOrganizations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The list of organizations
            ///
            /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listOrganizations.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listOrganizations.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.listOrganizations.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listOrganizations.Output.Unauthorized.Headers = .init(),
                    body: Operations.listOrganizations.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.listOrganizations.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listOrganizations.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.listOrganizations.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listOrganizations.Output.Forbidden.Headers = .init(),
                    body: Operations.listOrganizations.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.listOrganizations.Output.Forbidden)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Creates an organization
    ///
    /// Creates an organization with the given name.
    ///
    /// - Remark: HTTP `POST /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)`.
    public enum createOrganization {
        public static let id: String = "createOrganization"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.createOrganization.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createOrganization.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createOrganization.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createOrganization.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Organization params
                ///
                /// - Remark: Generated from `#/paths/api/organizations/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The name of the organization that should be created.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/POST/json/name`.
                    public var name: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the organization that should be created.
                    public init(name: Swift.String) { self.name = name }
                    public enum CodingKeys: String, CodingKey { case name }
                }
                case json(Operations.createOrganization.Input.Body.jsonPayload)
            }
            public var body: Operations.createOrganization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createOrganization.Input.Path = .init(),
                query: Operations.createOrganization.Input.Query = .init(),
                headers: Operations.createOrganization.Input.Headers = .init(),
                cookies: Operations.createOrganization.Input.Cookies = .init(),
                body: Operations.createOrganization.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganization.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Organization)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganization.Output.Ok.Headers = .init(),
                    body: Operations.createOrganization.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization was created
            ///
            /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createOrganization.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganization.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganization.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganization.Output.BadRequest.Headers = .init(),
                    body: Operations.createOrganization.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization could not be created due to a validation error
            ///
            /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createOrganization.Output.BadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Shows an organization
    ///
    /// Returns the organization with the given identifier.
    ///
    /// - Remark: HTTP `GET /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(showOrganization)`.
    public enum showOrganization {
        public static let id: String = "showOrganization"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.showOrganization.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.showOrganization.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.showOrganization.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.showOrganization.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.showOrganization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.showOrganization.Input.Path,
                query: Operations.showOrganization.Input.Query = .init(),
                headers: Operations.showOrganization.Input.Headers = .init(),
                cookies: Operations.showOrganization.Input.Cookies = .init(),
                body: Operations.showOrganization.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganization.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Organization)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganization.Output.Ok.Headers = .init(),
                    body: Operations.showOrganization.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(showOrganization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.showOrganization.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganization.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganization.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganization.Output.Unauthorized.Headers = .init(),
                    body: Operations.showOrganization.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(showOrganization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.showOrganization.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganization.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganization.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganization.Output.Forbidden.Headers = .init(),
                    body: Operations.showOrganization.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(showOrganization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.showOrganization.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganization.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganization.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganization.Output.NotFound.Headers = .init(),
                    body: Operations.showOrganization.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization with the given name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(showOrganization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.showOrganization.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Updates an organization
    ///
    /// Updates an organization with given parameters.
    ///
    /// - Remark: HTTP `PATCH /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/patch(updateOrganization (2))`.
    public enum updateOrganization__2_ {
        public static let id: String = "updateOrganization (2)"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.updateOrganization__2_.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.updateOrganization__2_.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.updateOrganization__2_.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.updateOrganization__2_.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Organization update params
                ///
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PATCH/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The SSO organization ID to be associated with the SSO provider
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PATCH/json/sso_organization_id`.
                    public var sso_organization_id: Swift.String?
                    /// The SSO provider to set up for the organization
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PATCH/json/sso_provider`.
                    @frozen
                    public enum sso_providerPayload: RawRepresentable, Codable, Equatable, Hashable,
                        Sendable, _AutoLosslessStringConvertible, CaseIterable
                    {
                        case google
                        case none
                        /// Parsed a raw value that was not defined in the OpenAPI document.
                        case undocumented(String)
                        public init?(rawValue: String) {
                            switch rawValue {
                            case "google": self = .google
                            case "none": self = .none
                            default: self = .undocumented(rawValue)
                            }
                        }
                        public var rawValue: String {
                            switch self {
                            case let .undocumented(string): return string
                            case .google: return "google"
                            case .none: return "none"
                            }
                        }
                        public static var allCases: [sso_providerPayload] { [.google, .none] }
                    }
                    /// The SSO provider to set up for the organization
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PATCH/json/sso_provider`.
                    public var sso_provider:
                        Operations.updateOrganization__2_.Input.Body.jsonPayload
                            .sso_providerPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - sso_organization_id: The SSO organization ID to be associated with the SSO provider
                    ///   - sso_provider: The SSO provider to set up for the organization
                    public init(
                        sso_organization_id: Swift.String? = nil,
                        sso_provider: Operations.updateOrganization__2_.Input.Body.jsonPayload
                            .sso_providerPayload? = nil
                    ) {
                        self.sso_organization_id = sso_organization_id
                        self.sso_provider = sso_provider
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sso_organization_id
                        case sso_provider
                    }
                }
                case json(Operations.updateOrganization__2_.Input.Body.jsonPayload)
            }
            public var body: Operations.updateOrganization__2_.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.updateOrganization__2_.Input.Path,
                query: Operations.updateOrganization__2_.Input.Query = .init(),
                headers: Operations.updateOrganization__2_.Input.Headers = .init(),
                cookies: Operations.updateOrganization__2_.Input.Cookies = .init(),
                body: Operations.updateOrganization__2_.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization__2_.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Organization)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization__2_.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization__2_.Output.Ok.Headers = .init(),
                    body: Operations.updateOrganization__2_.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/patch(updateOrganization (2))/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateOrganization__2_.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization__2_.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization__2_.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization__2_.Output.BadRequest.Headers = .init(),
                    body: Operations.updateOrganization__2_.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization could not be updated due to a validation error
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/patch(updateOrganization (2))/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.updateOrganization__2_.Output.BadRequest)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization__2_.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization__2_.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization__2_.Output.Unauthorized.Headers =
                        .init(),
                    body: Operations.updateOrganization__2_.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/patch(updateOrganization (2))/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.updateOrganization__2_.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization__2_.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization__2_.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization__2_.Output.Forbidden.Headers = .init(),
                    body: Operations.updateOrganization__2_.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/patch(updateOrganization (2))/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.updateOrganization__2_.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization__2_.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization__2_.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization__2_.Output.NotFound.Headers = .init(),
                    body: Operations.updateOrganization__2_.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization with the given name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/patch(updateOrganization (2))/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.updateOrganization__2_.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Updates an organization
    ///
    /// Updates an organization with given parameters.
    ///
    /// - Remark: HTTP `PUT /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/put(updateOrganization)`.
    public enum updateOrganization {
        public static let id: String = "updateOrganization"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.updateOrganization.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.updateOrganization.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.updateOrganization.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.updateOrganization.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Organization update params
                ///
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PUT/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The SSO organization ID to be associated with the SSO provider
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PUT/json/sso_organization_id`.
                    public var sso_organization_id: Swift.String?
                    /// The SSO provider to set up for the organization
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PUT/json/sso_provider`.
                    @frozen
                    public enum sso_providerPayload: RawRepresentable, Codable, Equatable, Hashable,
                        Sendable, _AutoLosslessStringConvertible, CaseIterable
                    {
                        case google
                        case none
                        /// Parsed a raw value that was not defined in the OpenAPI document.
                        case undocumented(String)
                        public init?(rawValue: String) {
                            switch rawValue {
                            case "google": self = .google
                            case "none": self = .none
                            default: self = .undocumented(rawValue)
                            }
                        }
                        public var rawValue: String {
                            switch self {
                            case let .undocumented(string): return string
                            case .google: return "google"
                            case .none: return "none"
                            }
                        }
                        public static var allCases: [sso_providerPayload] { [.google, .none] }
                    }
                    /// The SSO provider to set up for the organization
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/PUT/json/sso_provider`.
                    public var sso_provider:
                        Operations.updateOrganization.Input.Body.jsonPayload.sso_providerPayload?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - sso_organization_id: The SSO organization ID to be associated with the SSO provider
                    ///   - sso_provider: The SSO provider to set up for the organization
                    public init(
                        sso_organization_id: Swift.String? = nil,
                        sso_provider: Operations.updateOrganization.Input.Body.jsonPayload
                            .sso_providerPayload? = nil
                    ) {
                        self.sso_organization_id = sso_organization_id
                        self.sso_provider = sso_provider
                    }
                    public enum CodingKeys: String, CodingKey {
                        case sso_organization_id
                        case sso_provider
                    }
                }
                case json(Operations.updateOrganization.Input.Body.jsonPayload)
            }
            public var body: Operations.updateOrganization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.updateOrganization.Input.Path,
                query: Operations.updateOrganization.Input.Query = .init(),
                headers: Operations.updateOrganization.Input.Headers = .init(),
                cookies: Operations.updateOrganization.Input.Cookies = .init(),
                body: Operations.updateOrganization.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Organization)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization.Output.Ok.Headers = .init(),
                    body: Operations.updateOrganization.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/put(updateOrganization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateOrganization.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization.Output.BadRequest.Headers = .init(),
                    body: Operations.updateOrganization.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization could not be updated due to a validation error
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/put(updateOrganization)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.updateOrganization.Output.BadRequest)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization.Output.Unauthorized.Headers = .init(),
                    body: Operations.updateOrganization.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/put(updateOrganization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.updateOrganization.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization.Output.Forbidden.Headers = .init(),
                    body: Operations.updateOrganization.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/put(updateOrganization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.updateOrganization.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganization.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganization.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganization.Output.NotFound.Headers = .init(),
                    body: Operations.updateOrganization.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization with the given name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/put(updateOrganization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.updateOrganization.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Deletes an organization
    ///
    /// Deletes the organization with the given name.
    ///
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)`.
    public enum deleteOrganization {
        public static let id: String = "deleteOrganization"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.deleteOrganization.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.deleteOrganization.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.deleteOrganization.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.deleteOrganization.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.deleteOrganization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.deleteOrganization.Input.Path,
                query: Operations.deleteOrganization.Input.Query = .init(),
                headers: Operations.deleteOrganization.Input.Headers = .init(),
                cookies: Operations.deleteOrganization.Input.Cookies = .init(),
                body: Operations.deleteOrganization.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteOrganization.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.deleteOrganization.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteOrganization.Output.NoContent.Headers = .init(),
                    body: Operations.deleteOrganization.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization was deleted
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteOrganization.Output.NoContent)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteOrganization.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteOrganization.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteOrganization.Output.Unauthorized.Headers = .init(),
                    body: Operations.deleteOrganization.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.deleteOrganization.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteOrganization.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteOrganization.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteOrganization.Output.Forbidden.Headers = .init(),
                    body: Operations.deleteOrganization.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.deleteOrganization.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteOrganization.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteOrganization.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteOrganization.Output.NotFound.Headers = .init(),
                    body: Operations.deleteOrganization.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization with the given name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteOrganization.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Creates an invitation
    ///
    /// Invites a user with a given email to a given organization.
    ///
    /// - Remark: HTTP `POST /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createInvitation)`.
    public enum createInvitation {
        public static let id: String = "createInvitation"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.createInvitation.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createInvitation.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createInvitation.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createInvitation.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Invitation params
                ///
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The email of the invitee.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/POST/json/invitee_email`.
                    public var invitee_email: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - invitee_email: The email of the invitee.
                    public init(invitee_email: Swift.String) { self.invitee_email = invitee_email }
                    public enum CodingKeys: String, CodingKey { case invitee_email }
                }
                case json(Operations.createInvitation.Input.Body.jsonPayload)
            }
            public var body: Operations.createInvitation.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createInvitation.Input.Path,
                query: Operations.createInvitation.Input.Query = .init(),
                headers: Operations.createInvitation.Input.Headers = .init(),
                cookies: Operations.createInvitation.Input.Cookies = .init(),
                body: Operations.createInvitation.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createInvitation.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Invitation)
                }
                /// Received HTTP response body
                public var body: Operations.createInvitation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createInvitation.Output.Ok.Headers = .init(),
                    body: Operations.createInvitation.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The user was invited
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createInvitation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createInvitation.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createInvitation.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createInvitation.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createInvitation.Output.BadRequest.Headers = .init(),
                    body: Operations.createInvitation.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The user could not be invited due to a validation error
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createInvitation)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createInvitation.Output.BadRequest)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createInvitation.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createInvitation.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createInvitation.Output.Unauthorized.Headers = .init(),
                    body: Operations.createInvitation.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createInvitation)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createInvitation.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createInvitation.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createInvitation.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createInvitation.Output.Forbidden.Headers = .init(),
                    body: Operations.createInvitation.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createInvitation)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createInvitation.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createInvitation.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createInvitation.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createInvitation.Output.NotFound.Headers = .init(),
                    body: Operations.createInvitation.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createInvitation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.createInvitation.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Cancels an invitation
    ///
    /// Cancels an invitation for a given invitee email and an organization.
    ///
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelInvitation)`.
    public enum cancelInvitation {
        public static let id: String = "cancelInvitation"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.cancelInvitation.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.cancelInvitation.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.cancelInvitation.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.cancelInvitation.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Invitation params
                ///
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/DELETE/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The email of the invitee.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/DELETE/json/invitee_email`.
                    public var invitee_email: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - invitee_email: The email of the invitee.
                    public init(invitee_email: Swift.String) { self.invitee_email = invitee_email }
                    public enum CodingKeys: String, CodingKey { case invitee_email }
                }
                case json(Operations.cancelInvitation.Input.Body.jsonPayload)
            }
            public var body: Operations.cancelInvitation.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.cancelInvitation.Input.Path,
                query: Operations.cancelInvitation.Input.Query = .init(),
                headers: Operations.cancelInvitation.Input.Headers = .init(),
                cookies: Operations.cancelInvitation.Input.Cookies = .init(),
                body: Operations.cancelInvitation.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cancelInvitation.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                }
                /// Received HTTP response body
                public var body: Operations.cancelInvitation.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cancelInvitation.Output.NoContent.Headers = .init(),
                    body: Operations.cancelInvitation.Output.NoContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitation was cancelled
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelInvitation)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.cancelInvitation.Output.NoContent)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cancelInvitation.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cancelInvitation.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cancelInvitation.Output.Unauthorized.Headers = .init(),
                    body: Operations.cancelInvitation.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelInvitation)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.cancelInvitation.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cancelInvitation.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cancelInvitation.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cancelInvitation.Output.Forbidden.Headers = .init(),
                    body: Operations.cancelInvitation.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelInvitation)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.cancelInvitation.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cancelInvitation.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cancelInvitation.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cancelInvitation.Output.NotFound.Headers = .init(),
                    body: Operations.cancelInvitation.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitation with the given invitee email and organization name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelInvitation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.cancelInvitation.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Updates a member in an organization
    ///
    /// Updates a member in a given organization
    ///
    /// - Remark: HTTP `PUT /api/organizations/{organization_name}/members/{user_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/put(updateOrganizationMember)`.
    public enum updateOrganizationMember {
        public static let id: String = "updateOrganizationMember"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                public var user_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                ///   - user_name:
                public init(organization_name: Swift.String, user_name: Swift.String) {
                    self.organization_name = organization_name
                    self.user_name = user_name
                }
            }
            public var path: Operations.updateOrganizationMember.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.updateOrganizationMember.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.updateOrganizationMember.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.updateOrganizationMember.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Member update params
                ///
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/members/{user_name}/PUT/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The role to update the member to
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/members/{user_name}/PUT/json/role`.
                    @frozen
                    public enum rolePayload: RawRepresentable, Codable, Equatable, Hashable,
                        Sendable, _AutoLosslessStringConvertible, CaseIterable
                    {
                        case admin
                        case user
                        /// Parsed a raw value that was not defined in the OpenAPI document.
                        case undocumented(String)
                        public init?(rawValue: String) {
                            switch rawValue {
                            case "admin": self = .admin
                            case "user": self = .user
                            default: self = .undocumented(rawValue)
                            }
                        }
                        public var rawValue: String {
                            switch self {
                            case let .undocumented(string): return string
                            case .admin: return "admin"
                            case .user: return "user"
                            }
                        }
                        public static var allCases: [rolePayload] { [.admin, .user] }
                    }
                    /// The role to update the member to
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/members/{user_name}/PUT/json/role`.
                    public var role:
                        Operations.updateOrganizationMember.Input.Body.jsonPayload.rolePayload
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The role to update the member to
                    public init(
                        role: Operations.updateOrganizationMember.Input.Body.jsonPayload.rolePayload
                    ) { self.role = role }
                    public enum CodingKeys: String, CodingKey { case role }
                }
                case json(Operations.updateOrganizationMember.Input.Body.jsonPayload)
            }
            public var body: Operations.updateOrganizationMember.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.updateOrganizationMember.Input.Path,
                query: Operations.updateOrganizationMember.Input.Query = .init(),
                headers: Operations.updateOrganizationMember.Input.Headers = .init(),
                cookies: Operations.updateOrganizationMember.Input.Cookies = .init(),
                body: Operations.updateOrganizationMember.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.OrganizationMember)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.Ok.Headers = .init(),
                    body: Operations.updateOrganizationMember.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member was updated
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/put(updateOrganizationMember)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateOrganizationMember.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.BadRequest.Headers =
                        .init(),
                    body: Operations.updateOrganizationMember.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member could not be updated due to a validation error
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/put(updateOrganizationMember)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.updateOrganizationMember.Output.BadRequest)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.Unauthorized.Headers =
                        .init(),
                    body: Operations.updateOrganizationMember.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/put(updateOrganizationMember)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.updateOrganizationMember.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.Forbidden.Headers = .init(),
                    body: Operations.updateOrganizationMember.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/put(updateOrganizationMember)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.updateOrganizationMember.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.NotFound.Headers = .init(),
                    body: Operations.updateOrganizationMember.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization or the user with the given name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/put(updateOrganizationMember)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.updateOrganizationMember.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Removes a member from an organization
    ///
    /// Removes a member with a given username from a given organization
    ///
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/members/{user_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/delete(removeOrganizationMember)`.
    public enum removeOrganizationMember {
        public static let id: String = "removeOrganizationMember"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                public var user_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                ///   - user_name:
                public init(organization_name: Swift.String, user_name: Swift.String) {
                    self.organization_name = organization_name
                    self.user_name = user_name
                }
            }
            public var path: Operations.removeOrganizationMember.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.removeOrganizationMember.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.removeOrganizationMember.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.removeOrganizationMember.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.removeOrganizationMember.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.removeOrganizationMember.Input.Path,
                query: Operations.removeOrganizationMember.Input.Query = .init(),
                headers: Operations.removeOrganizationMember.Input.Headers = .init(),
                cookies: Operations.removeOrganizationMember.Input.Cookies = .init(),
                body: Operations.removeOrganizationMember.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(OpenAPIRuntime.OpenAPIValueContainer)
                }
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.NoContent.Headers = .init(),
                    body: Operations.removeOrganizationMember.Output.NoContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member was removed
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/delete(removeOrganizationMember)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.removeOrganizationMember.Output.NoContent)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.BadRequest.Headers =
                        .init(),
                    body: Operations.removeOrganizationMember.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member could not be removed due to a validation error
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/delete(removeOrganizationMember)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.removeOrganizationMember.Output.BadRequest)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.Unauthorized.Headers =
                        .init(),
                    body: Operations.removeOrganizationMember.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/delete(removeOrganizationMember)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.removeOrganizationMember.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.Forbidden.Headers = .init(),
                    body: Operations.removeOrganizationMember.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/delete(removeOrganizationMember)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.removeOrganizationMember.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.NotFound.Headers = .init(),
                    body: Operations.removeOrganizationMember.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization or the user with the given name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{user_name}/delete(removeOrganizationMember)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.removeOrganizationMember.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Shows the usage of an organization
    ///
    /// Returns the usage of the organization with the given identifier. (e.g. number of remote cache hits)
    ///
    /// - Remark: HTTP `GET /api/organizations/{organization_name}/usage`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/usage/get(showOrganizationUsage)`.
    public enum showOrganizationUsage {
        public static let id: String = "showOrganizationUsage"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.showOrganizationUsage.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.showOrganizationUsage.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.showOrganizationUsage.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.showOrganizationUsage.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.showOrganizationUsage.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.showOrganizationUsage.Input.Path,
                query: Operations.showOrganizationUsage.Input.Query = .init(),
                headers: Operations.showOrganizationUsage.Input.Headers = .init(),
                cookies: Operations.showOrganizationUsage.Input.Cookies = .init(),
                body: Operations.showOrganizationUsage.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganizationUsage.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.OrganizationUsage)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganizationUsage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganizationUsage.Output.Ok.Headers = .init(),
                    body: Operations.showOrganizationUsage.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization usage
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/usage/get(showOrganizationUsage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.showOrganizationUsage.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganizationUsage.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganizationUsage.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganizationUsage.Output.Unauthorized.Headers = .init(),
                    body: Operations.showOrganizationUsage.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/usage/get(showOrganizationUsage)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.showOrganizationUsage.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganizationUsage.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganizationUsage.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganizationUsage.Output.Forbidden.Headers = .init(),
                    body: Operations.showOrganizationUsage.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/usage/get(showOrganizationUsage)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.showOrganizationUsage.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showOrganizationUsage.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showOrganizationUsage.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showOrganizationUsage.Output.NotFound.Headers = .init(),
                    body: Operations.showOrganizationUsage.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization with the given name was not found
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/usage/get(showOrganizationUsage)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.showOrganizationUsage.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List projects the authenticated user has access to.
    ///
    /// - Remark: HTTP `GET /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/get(listProjects)`.
    public enum listProjects {
        public static let id: String = "listProjects"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.listProjects.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.listProjects.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.listProjects.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.listProjects.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.listProjects.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.listProjects.Input.Path = .init(),
                query: Operations.listProjects.Input.Query = .init(),
                headers: Operations.listProjects.Input.Headers = .init(),
                cookies: Operations.listProjects.Input.Cookies = .init(),
                body: Operations.listProjects.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listProjects.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// - Remark: Generated from `#/paths/api/projects/GET/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/projects/GET/json/projects`.
                        public var projects: [Components.Schemas.Project]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - projects:
                        public init(projects: [Components.Schemas.Project]) {
                            self.projects = projects
                        }
                        public enum CodingKeys: String, CodingKey { case projects }
                    }
                    case json(Operations.listProjects.Output.Ok.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.listProjects.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listProjects.Output.Ok.Headers = .init(),
                    body: Operations.listProjects.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// List of projects
            ///
            /// - Remark: Generated from `#/paths//api/projects/get(listProjects)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listProjects.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listProjects.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.listProjects.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listProjects.Output.Unauthorized.Headers = .init(),
                    body: Operations.listProjects.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/projects/get(listProjects)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.listProjects.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a new project.
    ///
    /// - Remark: HTTP `POST /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/post(createProject)`.
    public enum createProject {
        public static let id: String = "createProject"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.createProject.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createProject.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createProject.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createProject.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Projects params
                ///
                /// - Remark: Generated from `#/paths/api/projects/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The full handle of the project that should be created.
                    ///
                    /// - Remark: Generated from `#/paths/api/projects/POST/json/full_handle`.
                    public var full_handle: Swift.String?
                    /// The name of the project that should be created.
                    ///
                    /// - Remark: Generated from `#/paths/api/projects/POST/json/name`.
                    @available(*, deprecated) public var name: Swift.String?
                    /// Organization to create the project with. If not specified, the project will be created with the current user's personal account.
                    ///
                    /// - Remark: Generated from `#/paths/api/projects/POST/json/organization`.
                    @available(*, deprecated) public var organization: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - full_handle: The full handle of the project that should be created.
                    ///   - name: The name of the project that should be created.
                    ///   - organization: Organization to create the project with. If not specified, the project will be created with the current user's personal account.
                    public init(
                        full_handle: Swift.String? = nil,
                        name: Swift.String? = nil,
                        organization: Swift.String? = nil
                    ) {
                        self.full_handle = full_handle
                        self.name = name
                        self.organization = organization
                    }
                    public enum CodingKeys: String, CodingKey {
                        case full_handle
                        case name
                        case organization
                    }
                }
                case json(Operations.createProject.Input.Body.jsonPayload)
            }
            public var body: Operations.createProject.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createProject.Input.Path = .init(),
                query: Operations.createProject.Input.Query = .init(),
                headers: Operations.createProject.Input.Headers = .init(),
                cookies: Operations.createProject.Input.Cookies = .init(),
                body: Operations.createProject.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProject.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Project)
                }
                /// Received HTTP response body
                public var body: Operations.createProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProject.Output.Ok.Headers = .init(),
                    body: Operations.createProject.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was created
            ///
            /// - Remark: Generated from `#/paths//api/projects/post(createProject)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createProject.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProject.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createProject.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProject.Output.BadRequest.Headers = .init(),
                    body: Operations.createProject.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The account was not found
            ///
            /// - Remark: Generated from `#/paths//api/projects/post(createProject)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createProject.Output.BadRequest)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProject.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createProject.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProject.Output.Unauthorized.Headers = .init(),
                    body: Operations.createProject.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/projects/post(createProject)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createProject.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProject.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createProject.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProject.Output.Forbidden.Headers = .init(),
                    body: Operations.createProject.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/projects/post(createProject)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createProject.Output.Forbidden)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Returns a project based on the handle.
    ///
    /// - Remark: HTTP `GET /api/projects/{account_handle}/{project_handle}`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/get(showProject)`.
    public enum showProject {
        public static let id: String = "showProject"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var account_handle: Swift.String
                public var project_handle: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_handle:
                ///   - project_handle:
                public init(account_handle: Swift.String, project_handle: Swift.String) {
                    self.account_handle = account_handle
                    self.project_handle = project_handle
                }
            }
            public var path: Operations.showProject.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.showProject.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.showProject.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.showProject.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.showProject.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.showProject.Input.Path,
                query: Operations.showProject.Input.Query = .init(),
                headers: Operations.showProject.Input.Headers = .init(),
                cookies: Operations.showProject.Input.Cookies = .init(),
                body: Operations.showProject.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showProject.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Project)
                }
                /// Received HTTP response body
                public var body: Operations.showProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showProject.Output.Ok.Headers = .init(),
                    body: Operations.showProject.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project to show
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/get(showProject)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.showProject.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showProject.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showProject.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showProject.Output.Unauthorized.Headers = .init(),
                    body: Operations.showProject.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/get(showProject)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.showProject.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showProject.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showProject.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showProject.Output.Forbidden.Headers = .init(),
                    body: Operations.showProject.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/get(showProject)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.showProject.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.showProject.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.showProject.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.showProject.Output.NotFound.Headers = .init(),
                    body: Operations.showProject.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was not found
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/get(showProject)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.showProject.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Cleans cache for a given project
    ///
    /// - Remark: HTTP `PUT /api/projects/{account_handle}/{project_handle}/cache/clean`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/cache/clean/put(cleanCache)`.
    public enum cleanCache {
        public static let id: String = "cleanCache"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var account_handle: Swift.String
                public var project_handle: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_handle:
                ///   - project_handle:
                public init(account_handle: Swift.String, project_handle: Swift.String) {
                    self.account_handle = account_handle
                    self.project_handle = project_handle
                }
            }
            public var path: Operations.cleanCache.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.cleanCache.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.cleanCache.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.cleanCache.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.cleanCache.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.cleanCache.Input.Path,
                query: Operations.cleanCache.Input.Query = .init(),
                headers: Operations.cleanCache.Input.Headers = .init(),
                cookies: Operations.cleanCache.Input.Cookies = .init(),
                body: Operations.cleanCache.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cleanCache.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.cleanCache.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cleanCache.Output.NoContent.Headers = .init(),
                    body: Operations.cleanCache.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The cache has been successfully cleaned
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/cache/clean/put(cleanCache)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.cleanCache.Output.NoContent)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cleanCache.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cleanCache.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cleanCache.Output.Unauthorized.Headers = .init(),
                    body: Operations.cleanCache.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/cache/clean/put(cleanCache)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.cleanCache.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cleanCache.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cleanCache.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cleanCache.Output.Forbidden.Headers = .init(),
                    body: Operations.cleanCache.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/cache/clean/put(cleanCache)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.cleanCache.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cleanCache.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cleanCache.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cleanCache.Output.NotFound.Headers = .init(),
                    body: Operations.cleanCache.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was not found
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/cache/clean/put(cleanCache)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.cleanCache.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// List all project tokens.
    ///
    /// This endpoint returns all tokens for a given project.
    ///
    /// - Remark: HTTP `GET /api/projects/{account_handle}/{project_handle}/tokens`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/get(listProjectTokens)`.
    public enum listProjectTokens {
        public static let id: String = "listProjectTokens"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var account_handle: Swift.String
                public var project_handle: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_handle:
                ///   - project_handle:
                public init(account_handle: Swift.String, project_handle: Swift.String) {
                    self.account_handle = account_handle
                    self.project_handle = project_handle
                }
            }
            public var path: Operations.listProjectTokens.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.listProjectTokens.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.listProjectTokens.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.listProjectTokens.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.listProjectTokens.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.listProjectTokens.Input.Path,
                query: Operations.listProjectTokens.Input.Query = .init(),
                headers: Operations.listProjectTokens.Input.Headers = .init(),
                cookies: Operations.listProjectTokens.Input.Cookies = .init(),
                body: Operations.listProjectTokens.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listProjectTokens.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// A list of project tokens.
                    ///
                    /// - Remark: Generated from `#/paths/api/projects/{account_handle}/{project_handle}/tokens/GET/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/api/projects/{account_handle}/{project_handle}/tokens/GET/json/tokens`.
                        public var tokens: [Components.Schemas.ProjectToken]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - tokens:
                        public init(tokens: [Components.Schemas.ProjectToken]) {
                            self.tokens = tokens
                        }
                        public enum CodingKeys: String, CodingKey { case tokens }
                    }
                    case json(Operations.listProjectTokens.Output.Ok.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.listProjectTokens.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listProjectTokens.Output.Ok.Headers = .init(),
                    body: Operations.listProjectTokens.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A list of project tokens.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/get(listProjectTokens)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listProjectTokens.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listProjectTokens.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.listProjectTokens.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listProjectTokens.Output.Unauthorized.Headers = .init(),
                    body: Operations.listProjectTokens.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to list tokens
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/get(listProjectTokens)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.listProjectTokens.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listProjectTokens.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.listProjectTokens.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listProjectTokens.Output.Forbidden.Headers = .init(),
                    body: Operations.listProjectTokens.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authorized to list tokens
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/get(listProjectTokens)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.listProjectTokens.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listProjectTokens.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.listProjectTokens.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listProjectTokens.Output.NotFound.Headers = .init(),
                    body: Operations.listProjectTokens.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was not found
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/get(listProjectTokens)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.listProjectTokens.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Create a new project token.
    ///
    /// This endpoint returns a new project token.
    ///
    /// - Remark: HTTP `POST /api/projects/{account_handle}/{project_handle}/tokens`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/post(createProjectToken)`.
    public enum createProjectToken {
        public static let id: String = "createProjectToken"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var account_handle: Swift.String
                public var project_handle: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_handle:
                ///   - project_handle:
                public init(account_handle: Swift.String, project_handle: Swift.String) {
                    self.account_handle = account_handle
                    self.project_handle = project_handle
                }
            }
            public var path: Operations.createProjectToken.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createProjectToken.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createProjectToken.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createProjectToken.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.createProjectToken.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createProjectToken.Input.Path,
                query: Operations.createProjectToken.Input.Query = .init(),
                headers: Operations.createProjectToken.Input.Headers = .init(),
                cookies: Operations.createProjectToken.Input.Cookies = .init(),
                body: Operations.createProjectToken.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProjectToken.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    /// A new project token.
                    ///
                    /// - Remark: Generated from `#/paths/api/projects/{account_handle}/{project_handle}/tokens/POST/json`.
                    public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                        /// The generated project token.
                        ///
                        /// - Remark: Generated from `#/paths/api/projects/{account_handle}/{project_handle}/tokens/POST/json/token`.
                        public var token: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - token: The generated project token.
                        public init(token: Swift.String) { self.token = token }
                        public enum CodingKeys: String, CodingKey { case token }
                    }
                    case json(Operations.createProjectToken.Output.Ok.Body.jsonPayload)
                }
                /// Received HTTP response body
                public var body: Operations.createProjectToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProjectToken.Output.Ok.Headers = .init(),
                    body: Operations.createProjectToken.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A project token was generated
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/post(createProjectToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createProjectToken.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProjectToken.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createProjectToken.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProjectToken.Output.Unauthorized.Headers = .init(),
                    body: Operations.createProjectToken.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to issue new tokens
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/post(createProjectToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createProjectToken.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProjectToken.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createProjectToken.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProjectToken.Output.Forbidden.Headers = .init(),
                    body: Operations.createProjectToken.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authorized to issue new tokens
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/post(createProjectToken)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.createProjectToken.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProjectToken.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createProjectToken.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProjectToken.Output.NotFound.Headers = .init(),
                    body: Operations.createProjectToken.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was not found
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/post(createProjectToken)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.createProjectToken.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Revokes a project token.
    ///
    /// - Remark: HTTP `DELETE /api/projects/{account_handle}/{project_handle}/tokens/{id}`.
    /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/{id}/delete(revokeProjectToken)`.
    public enum revokeProjectToken {
        public static let id: String = "revokeProjectToken"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var account_handle: Swift.String
                public var project_handle: Swift.String
                public var id: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_handle:
                ///   - project_handle:
                ///   - id:
                public init(
                    account_handle: Swift.String,
                    project_handle: Swift.String,
                    id: Swift.String
                ) {
                    self.account_handle = account_handle
                    self.project_handle = project_handle
                    self.id = id
                }
            }
            public var path: Operations.revokeProjectToken.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.revokeProjectToken.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.revokeProjectToken.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.revokeProjectToken.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.revokeProjectToken.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.revokeProjectToken.Input.Path,
                query: Operations.revokeProjectToken.Input.Query = .init(),
                headers: Operations.revokeProjectToken.Input.Headers = .init(),
                cookies: Operations.revokeProjectToken.Input.Cookies = .init(),
                body: Operations.revokeProjectToken.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.revokeProjectToken.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.revokeProjectToken.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.revokeProjectToken.Output.NoContent.Headers = .init(),
                    body: Operations.revokeProjectToken.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project token was revoked
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/{id}/delete(revokeProjectToken)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.revokeProjectToken.Output.NoContent)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.revokeProjectToken.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.revokeProjectToken.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.revokeProjectToken.Output.Unauthorized.Headers = .init(),
                    body: Operations.revokeProjectToken.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/{id}/delete(revokeProjectToken)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.revokeProjectToken.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.revokeProjectToken.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.revokeProjectToken.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.revokeProjectToken.Output.Forbidden.Headers = .init(),
                    body: Operations.revokeProjectToken.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/{id}/delete(revokeProjectToken)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.revokeProjectToken.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.revokeProjectToken.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.revokeProjectToken.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.revokeProjectToken.Output.NotFound.Headers = .init(),
                    body: Operations.revokeProjectToken.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project token was not found
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_handle}/{project_handle}/tokens/{id}/delete(revokeProjectToken)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.revokeProjectToken.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Deletes a project with a given id.
    ///
    /// - Remark: HTTP `DELETE /api/projects/{id}`.
    /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)`.
    public enum deleteProject {
        public static let id: String = "deleteProject"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int) { self.id = id }
            }
            public var path: Operations.deleteProject.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.deleteProject.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.deleteProject.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.deleteProject.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.deleteProject.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.deleteProject.Input.Path,
                query: Operations.deleteProject.Input.Query = .init(),
                headers: Operations.deleteProject.Input.Headers = .init(),
                cookies: Operations.deleteProject.Input.Cookies = .init(),
                body: Operations.deleteProject.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteProject.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.deleteProject.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteProject.Output.NoContent.Headers = .init(),
                    body: Operations.deleteProject.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was successfully deleted.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteProject.Output.NoContent)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteProject.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteProject.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteProject.Output.Unauthorized.Headers = .init(),
                    body: Operations.deleteProject.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.deleteProject.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteProject.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteProject.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteProject.Output.Forbidden.Headers = .init(),
                    body: Operations.deleteProject.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.deleteProject.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteProject.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteProject.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteProject.Output.NotFound.Headers = .init(),
                    body: Operations.deleteProject.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was not found
            ///
            /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteProject.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// It completes a multi-part upload.
    ///
    /// Given the upload ID and all the parts with their ETags, this endpoint completes the multipart upload.
    ///
    /// - Remark: HTTP `POST /api/runs/{run_id}/complete`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete/post(completeAnalyticsArtifactMultipartUpload)`.
    public enum completeAnalyticsArtifactMultipartUpload {
        public static let id: String = "completeAnalyticsArtifactMultipartUpload"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var run_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - run_id:
                public init(run_id: Swift.Int) { self.run_id = run_id }
            }
            public var path: Operations.completeAnalyticsArtifactMultipartUpload.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.completeAnalyticsArtifactMultipartUpload.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.completeAnalyticsArtifactMultipartUpload.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.completeAnalyticsArtifactMultipartUpload.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Command event artifact multipart upload completion
                ///
                /// - Remark: Generated from `#/paths/api/runs/{run_id}/complete/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/runs/{run_id}/complete/POST/json/command_event_artifact`.
                    public var command_event_artifact: Components.Schemas.CommandEventArtifact
                    /// - Remark: Generated from `#/paths/api/runs/{run_id}/complete/POST/json/multipart_upload_parts`.
                    public var multipart_upload_parts:
                        Components.Schemas.ArtifactMultipartUploadParts
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - command_event_artifact:
                    ///   - multipart_upload_parts:
                    public init(
                        command_event_artifact: Components.Schemas.CommandEventArtifact,
                        multipart_upload_parts: Components.Schemas.ArtifactMultipartUploadParts
                    ) {
                        self.command_event_artifact = command_event_artifact
                        self.multipart_upload_parts = multipart_upload_parts
                    }
                    public enum CodingKeys: String, CodingKey {
                        case command_event_artifact
                        case multipart_upload_parts
                    }
                }
                case json(
                    Operations.completeAnalyticsArtifactMultipartUpload.Input.Body.jsonPayload
                )
            }
            public var body: Operations.completeAnalyticsArtifactMultipartUpload.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.completeAnalyticsArtifactMultipartUpload.Input.Path,
                query: Operations.completeAnalyticsArtifactMultipartUpload.Input.Query = .init(),
                headers: Operations.completeAnalyticsArtifactMultipartUpload.Input.Headers =
                    .init(),
                cookies: Operations.completeAnalyticsArtifactMultipartUpload.Input.Cookies =
                    .init(),
                body: Operations.completeAnalyticsArtifactMultipartUpload.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactMultipartUpload.Output.NoContent
                        .Headers = .init(),
                    body: Operations.completeAnalyticsArtifactMultipartUpload.Output.NoContent
                        .Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The upload has been completed
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete/post(completeAnalyticsArtifactMultipartUpload)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.completeAnalyticsArtifactMultipartUpload.Output.NoContent)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactMultipartUpload.Output.Unauthorized
                        .Headers = .init(),
                    body: Operations.completeAnalyticsArtifactMultipartUpload.Output.Unauthorized
                        .Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete/post(completeAnalyticsArtifactMultipartUpload)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(
                Operations.completeAnalyticsArtifactMultipartUpload.Output.Unauthorized
            )
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactMultipartUpload.Output.Forbidden
                        .Headers = .init(),
                    body: Operations.completeAnalyticsArtifactMultipartUpload.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete/post(completeAnalyticsArtifactMultipartUpload)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.completeAnalyticsArtifactMultipartUpload.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeAnalyticsArtifactMultipartUpload.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactMultipartUpload.Output.NotFound
                        .Headers = .init(),
                    body: Operations.completeAnalyticsArtifactMultipartUpload.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete/post(completeAnalyticsArtifactMultipartUpload)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.completeAnalyticsArtifactMultipartUpload.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// Completes artifacts uploads for a given command event
    ///
    /// Given a command event, it marks all artifact uploads as finished and does extra processing of a given command run, such as test flakiness detection.
    ///
    /// - Remark: HTTP `PUT /api/runs/{run_id}/complete_artifacts_uploads`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete_artifacts_uploads/put(completeAnalyticsArtifactsUploads)`.
    public enum completeAnalyticsArtifactsUploads {
        public static let id: String = "completeAnalyticsArtifactsUploads"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var run_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - run_id:
                public init(run_id: Swift.Int) { self.run_id = run_id }
            }
            public var path: Operations.completeAnalyticsArtifactsUploads.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.completeAnalyticsArtifactsUploads.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.completeAnalyticsArtifactsUploads.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.completeAnalyticsArtifactsUploads.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Extra metadata for the post-processing of a command event.
                ///
                /// - Remark: Generated from `#/paths/api/runs/{run_id}/complete_artifacts_uploads/PUT/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// A list of modules with their metadata.
                    ///
                    /// - Remark: Generated from `#/paths/api/runs/{run_id}/complete_artifacts_uploads/PUT/json/modules`.
                    public var modules: [Components.Schemas.Module]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - modules: A list of modules with their metadata.
                    public init(modules: [Components.Schemas.Module]) { self.modules = modules }
                    public enum CodingKeys: String, CodingKey { case modules }
                }
                case json(Operations.completeAnalyticsArtifactsUploads.Input.Body.jsonPayload)
            }
            public var body: Operations.completeAnalyticsArtifactsUploads.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.completeAnalyticsArtifactsUploads.Input.Path,
                query: Operations.completeAnalyticsArtifactsUploads.Input.Query = .init(),
                headers: Operations.completeAnalyticsArtifactsUploads.Input.Headers = .init(),
                cookies: Operations.completeAnalyticsArtifactsUploads.Input.Cookies = .init(),
                body: Operations.completeAnalyticsArtifactsUploads.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactsUploads.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.completeAnalyticsArtifactsUploads.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactsUploads.Output.NoContent.Headers =
                        .init(),
                    body: Operations.completeAnalyticsArtifactsUploads.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The command event artifact uploads were successfully finished
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete_artifacts_uploads/put(completeAnalyticsArtifactsUploads)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.completeAnalyticsArtifactsUploads.Output.NoContent)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactsUploads.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.completeAnalyticsArtifactsUploads.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactsUploads.Output.Unauthorized
                        .Headers = .init(),
                    body: Operations.completeAnalyticsArtifactsUploads.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete_artifacts_uploads/put(completeAnalyticsArtifactsUploads)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.completeAnalyticsArtifactsUploads.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactsUploads.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.completeAnalyticsArtifactsUploads.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactsUploads.Output.Forbidden.Headers =
                        .init(),
                    body: Operations.completeAnalyticsArtifactsUploads.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete_artifacts_uploads/put(completeAnalyticsArtifactsUploads)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.completeAnalyticsArtifactsUploads.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.completeAnalyticsArtifactsUploads.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.completeAnalyticsArtifactsUploads.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.completeAnalyticsArtifactsUploads.Output.NotFound.Headers =
                        .init(),
                    body: Operations.completeAnalyticsArtifactsUploads.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The command event doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/complete_artifacts_uploads/put(completeAnalyticsArtifactsUploads)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.completeAnalyticsArtifactsUploads.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// It generates a signed URL for uploading a part.
    ///
    /// Given an upload ID and a part number, this endpoint returns a signed URL that can be used to upload a part of a multipart upload. The URL is short-lived and expires in 120 seconds.
    ///
    /// - Remark: HTTP `POST /api/runs/{run_id}/generate-url`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/generate-url/post(generateAnalyticsArtifactMultipartUploadURL)`.
    public enum generateAnalyticsArtifactMultipartUploadURL {
        public static let id: String = "generateAnalyticsArtifactMultipartUploadURL"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var run_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - run_id:
                public init(run_id: Swift.Int) { self.run_id = run_id }
            }
            public var path: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// Artifact to generate a signed URL for
                ///
                /// - Remark: Generated from `#/paths/api/runs/{run_id}/generate-url/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/api/runs/{run_id}/generate-url/POST/json/command_event_artifact`.
                    public var command_event_artifact: Components.Schemas.CommandEventArtifact
                    /// - Remark: Generated from `#/paths/api/runs/{run_id}/generate-url/POST/json/multipart_upload_part`.
                    public var multipart_upload_part: Components.Schemas.ArtifactMultipartUploadPart
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - command_event_artifact:
                    ///   - multipart_upload_part:
                    public init(
                        command_event_artifact: Components.Schemas.CommandEventArtifact,
                        multipart_upload_part: Components.Schemas.ArtifactMultipartUploadPart
                    ) {
                        self.command_event_artifact = command_event_artifact
                        self.multipart_upload_part = multipart_upload_part
                    }
                    public enum CodingKeys: String, CodingKey {
                        case command_event_artifact
                        case multipart_upload_part
                    }
                }
                case json(
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Body.jsonPayload
                )
            }
            public var body: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Path,
                query: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Query = .init(),
                headers: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Headers =
                    .init(),
                cookies: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Cookies =
                    .init(),
                body: Operations.generateAnalyticsArtifactMultipartUploadURL.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.ArtifactMultipartUploadURL)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Ok
                        .Headers = .init(),
                    body: Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The URL has been generated
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/generate-url/post(generateAnalyticsArtifactMultipartUploadURL)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Unauthorized
                        .Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateAnalyticsArtifactMultipartUploadURL.Output
                        .Unauthorized.Headers = .init(),
                    body: Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Unauthorized
                        .Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/generate-url/post(generateAnalyticsArtifactMultipartUploadURL)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(
                Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Unauthorized
            )
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Forbidden
                        .Headers = .init(),
                    body: Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Forbidden
                        .Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/generate-url/post(generateAnalyticsArtifactMultipartUploadURL)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.generateAnalyticsArtifactMultipartUploadURL.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.generateAnalyticsArtifactMultipartUploadURL.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.generateAnalyticsArtifactMultipartUploadURL.Output.NotFound
                        .Headers = .init(),
                    body: Operations.generateAnalyticsArtifactMultipartUploadURL.Output.NotFound
                        .Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/generate-url/post(generateAnalyticsArtifactMultipartUploadURL)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.generateAnalyticsArtifactMultipartUploadURL.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// It initiates a multipart upload for a command event artifact.
    ///
    /// The endpoint returns an upload ID that can be used to generate URLs for the individual parts and complete the upload.
    ///
    /// - Remark: HTTP `POST /api/runs/{run_id}/start`.
    /// - Remark: Generated from `#/paths//api/runs/{run_id}/start/post(startAnalyticsArtifactMultipartUpload)`.
    public enum startAnalyticsArtifactMultipartUpload {
        public static let id: String = "startAnalyticsArtifactMultipartUpload"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var run_id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - run_id:
                public init(run_id: Swift.Int) { self.run_id = run_id }
            }
            public var path: Operations.startAnalyticsArtifactMultipartUpload.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.startAnalyticsArtifactMultipartUpload.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.startAnalyticsArtifactMultipartUpload.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.startAnalyticsArtifactMultipartUpload.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                case json(Components.Schemas.CommandEventArtifact)
            }
            public var body: Operations.startAnalyticsArtifactMultipartUpload.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.startAnalyticsArtifactMultipartUpload.Input.Path,
                query: Operations.startAnalyticsArtifactMultipartUpload.Input.Query = .init(),
                headers: Operations.startAnalyticsArtifactMultipartUpload.Input.Headers = .init(),
                cookies: Operations.startAnalyticsArtifactMultipartUpload.Input.Cookies = .init(),
                body: Operations.startAnalyticsArtifactMultipartUpload.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startAnalyticsArtifactMultipartUpload.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.ArtifactUploadID)
                }
                /// Received HTTP response body
                public var body: Operations.startAnalyticsArtifactMultipartUpload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startAnalyticsArtifactMultipartUpload.Output.Ok.Headers =
                        .init(),
                    body: Operations.startAnalyticsArtifactMultipartUpload.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The upload has been started
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/start/post(startAnalyticsArtifactMultipartUpload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.startAnalyticsArtifactMultipartUpload.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startAnalyticsArtifactMultipartUpload.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.startAnalyticsArtifactMultipartUpload.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startAnalyticsArtifactMultipartUpload.Output.Unauthorized
                        .Headers = .init(),
                    body: Operations.startAnalyticsArtifactMultipartUpload.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You need to be authenticated to access this resource
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/start/post(startAnalyticsArtifactMultipartUpload)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.startAnalyticsArtifactMultipartUpload.Output.Unauthorized)
            public struct Forbidden: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startAnalyticsArtifactMultipartUpload.Output.Forbidden.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.startAnalyticsArtifactMultipartUpload.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startAnalyticsArtifactMultipartUpload.Output.Forbidden
                        .Headers = .init(),
                    body: Operations.startAnalyticsArtifactMultipartUpload.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The authenticated subject is not authorized to perform this action
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/start/post(startAnalyticsArtifactMultipartUpload)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.startAnalyticsArtifactMultipartUpload.Output.Forbidden)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers:
                    Operations.startAnalyticsArtifactMultipartUpload.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body:
                    Operations.startAnalyticsArtifactMultipartUpload.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.startAnalyticsArtifactMultipartUpload.Output.NotFound
                        .Headers = .init(),
                    body: Operations.startAnalyticsArtifactMultipartUpload.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The command event doesn't exist
            ///
            /// - Remark: Generated from `#/paths//api/runs/{run_id}/start/post(startAnalyticsArtifactMultipartUpload)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.startAnalyticsArtifactMultipartUpload.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
