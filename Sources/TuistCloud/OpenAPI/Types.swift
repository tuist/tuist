// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import Foundation
#else
import Foundation
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `GET /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/get(listProjects)`.
    func listProjects(_ input: Operations.listProjects.Input) async throws
        -> Operations.listProjects.Output
    /// - Remark: HTTP `POST /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/post(createProject)`.
    func createProject(_ input: Operations.createProject.Input) async throws
        -> Operations.createProject.Output
    /// - Remark: HTTP `GET /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)`.
    func listOrganizations(_ input: Operations.listOrganizations.Input) async throws
        -> Operations.listOrganizations.Output
    /// - Remark: HTTP `POST /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)`.
    func createOrganization(_ input: Operations.createOrganization.Input) async throws
        -> Operations.createOrganization.Output
    /// - Remark: HTTP `DELETE /api/projects/{id}`.
    /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)`.
    func deleteProject(_ input: Operations.deleteProject.Input) async throws
        -> Operations.deleteProject.Output
    /// - Remark: HTTP `GET /api/projects/{account_name}/{project_name}`.
    /// - Remark: Generated from `#/paths//api/projects/{account_name}/{project_name}/get(getProject)`.
    func getProject(_ input: Operations.getProject.Input) async throws
        -> Operations.getProject.Output
    /// - Remark: HTTP `PUT /api/projects/{full_name}/cache/clean`.
    /// - Remark: Generated from `#/paths//api/projects/{full_name}/cache/clean/put(cleanCache)`.
    func cleanCache(_ input: Operations.cleanCache.Input) async throws
        -> Operations.cleanCache.Output
    /// - Remark: HTTP `GET /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(getOrganization)`.
    func getOrganization(_ input: Operations.getOrganization.Input) async throws
        -> Operations.getOrganization.Output
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)`.
    func deleteOrganization(_ input: Operations.deleteOrganization.Input) async throws
        -> Operations.deleteOrganization.Output
    /// - Remark: HTTP `POST /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createOrganizationInvite)`.
    func createOrganizationInvite(_ input: Operations.createOrganizationInvite.Input) async throws
        -> Operations.createOrganizationInvite.Output
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelOrganizationInvite)`.
    func cancelOrganizationInvite(_ input: Operations.cancelOrganizationInvite.Input) async throws
        -> Operations.cancelOrganizationInvite.Output
    /// - Remark: HTTP `PUT /api/organizations/{organization_name}/members/{username}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/put(updateOrganizationMember)`.
    func updateOrganizationMember(_ input: Operations.updateOrganizationMember.Input) async throws
        -> Operations.updateOrganizationMember.Output
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/members/{username}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/delete(removeOrganizationMember)`.
    func removeOrganizationMember(_ input: Operations.removeOrganizationMember.Input) async throws
        -> Operations.removeOrganizationMember.Output
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Localhost deployment.
    public static func server1() throws -> URL {
        try URL(validatingOpenAPIServerURL: "http://127.0.0.1:3000/api")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.Double
            /// - Remark: Generated from `#/components/schemas/User/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/name`.
            public var name: Swift.String
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - email:
            ///   - name:
            public init(id: Swift.Double, email: Swift.String, name: Swift.String) {
                self.id = id
                self.email = email
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case email
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/Invitation`.
        public struct Invitation: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Invitation/id`.
            public var id: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Invitation/invitee_email`.
            public var invitee_email: Swift.String
            /// - Remark: Generated from `#/components/schemas/Invitation/organization_id`.
            public var organization_id: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Invitation/token`.
            public var token: Swift.String
            /// - Remark: Generated from `#/components/schemas/Invitation/inviter`.
            public var inviter: Components.Schemas.User
            /// Creates a new `Invitation`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - invitee_email:
            ///   - organization_id:
            ///   - token:
            ///   - inviter:
            public init(
                id: Swift.Double,
                invitee_email: Swift.String,
                organization_id: Swift.Double,
                token: Swift.String,
                inviter: Components.Schemas.User
            ) {
                self.id = id
                self.invitee_email = invitee_email
                self.organization_id = organization_id
                self.token = token
                self.inviter = inviter
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case invitee_email
                case organization_id
                case token
                case inviter
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrganizationMember`.
        public struct OrganizationMember: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/id`.
            public var id: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/role`.
            @frozen
            public enum rolePayload: RawRepresentable, Codable, Equatable, Hashable, Sendable,
                _AutoLosslessStringConvertible, CaseIterable
            {
                case admin
                case user
                /// Parsed a raw value that was not defined in the OpenAPI document.
                case undocumented(String)
                public init?(rawValue: String) {
                    switch rawValue {
                    case "admin": self = .admin
                    case "user": self = .user
                    default: self = .undocumented(rawValue)
                    }
                }
                public var rawValue: String {
                    switch self {
                    case let .undocumented(string): return string
                    case .admin: return "admin"
                    case .user: return "user"
                    }
                }
                public static var allCases: [rolePayload] { [.admin, .user] }
            }
            /// - Remark: Generated from `#/components/schemas/OrganizationMember/role`.
            public var role: Components.Schemas.OrganizationMember.rolePayload
            /// Creates a new `OrganizationMember`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - email:
            ///   - name:
            ///   - role:
            public init(
                id: Swift.Double,
                email: Swift.String,
                name: Swift.String,
                role: Components.Schemas.OrganizationMember.rolePayload
            ) {
                self.id = id
                self.email = email
                self.name = name
                self.role = role
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case email
                case name
                case role
            }
        }
        /// - Remark: Generated from `#/components/schemas/Projects`.
        public struct Projects: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Projects/projects`.
            public var projects: [Components.Schemas.Project]
            /// Creates a new `Projects`.
            ///
            /// - Parameters:
            ///   - projects:
            public init(projects: [Components.Schemas.Project]) { self.projects = projects }
            public enum CodingKeys: String, CodingKey { case projects }
        }
        /// - Remark: Generated from `#/components/schemas/Project`.
        public struct Project: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Project/id`.
            public var id: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Project/full_name`.
            public var full_name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Project/token`.
            public var token: Swift.String
            /// Creates a new `Project`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - full_name:
            ///   - token:
            public init(id: Swift.Double, full_name: Swift.String, token: Swift.String) {
                self.id = id
                self.full_name = full_name
                self.token = token
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case full_name
                case token
            }
        }
        /// - Remark: Generated from `#/components/schemas/Organizations`.
        public struct Organizations: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Organizations/organizations`.
            public var organizations: [Components.Schemas.Organization]
            /// Creates a new `Organizations`.
            ///
            /// - Parameters:
            ///   - organizations:
            public init(organizations: [Components.Schemas.Organization]) {
                self.organizations = organizations
            }
            public enum CodingKeys: String, CodingKey { case organizations }
        }
        /// - Remark: Generated from `#/components/schemas/Organization`.
        public struct Organization: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Organization/id`.
            public var id: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Organization/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Organization/members`.
            public var members: [Components.Schemas.OrganizationMember]
            /// - Remark: Generated from `#/components/schemas/Organization/invitations`.
            public var invitations: [Components.Schemas.Invitation]
            /// Creates a new `Organization`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - members:
            ///   - invitations:
            public init(
                id: Swift.Double,
                name: Swift.String,
                members: [Components.Schemas.OrganizationMember],
                invitations: [Components.Schemas.Invitation]
            ) {
                self.id = id
                self.name = name
                self.members = members
                self.invitations = invitations
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case members
                case invitations
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Equatable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/message`.
            public var message: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - message:
            public init(message: Swift.String) { self.message = message }
            public enum CodingKeys: String, CodingKey { case message }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `GET /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/get(listProjects)`.
    public enum listProjects {
        public static let id: String = "listProjects"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.listProjects.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                public var account_name: Swift.String?
                public var project_name: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - account_name:
                ///   - project_name:
                public init(account_name: Swift.String? = nil, project_name: Swift.String? = nil) {
                    self.account_name = account_name
                    self.project_name = project_name
                }
            }
            public var query: Operations.listProjects.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.listProjects.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.listProjects.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.listProjects.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.listProjects.Input.Path = .init(),
                query: Operations.listProjects.Input.Query = .init(),
                headers: Operations.listProjects.Input.Headers = .init(),
                cookies: Operations.listProjects.Input.Cookies = .init(),
                body: Operations.listProjects.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listProjects.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Projects)
                }
                /// Received HTTP response body
                public var body: Operations.listProjects.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listProjects.Output.Ok.Headers = .init(),
                    body: Operations.listProjects.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A success response with all available cloud projects.
            ///
            /// - Remark: Generated from `#/paths//api/projects/get(listProjects)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listProjects.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `POST /api/projects`.
    /// - Remark: Generated from `#/paths//api/projects/post(createProject)`.
    public enum createProject {
        public static let id: String = "createProject"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.createProject.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createProject.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createProject.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createProject.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/api/projects/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The name of the project that should be created.
                    ///
                    /// - Remark: Generated from `#/paths/api/projects/POST/json/name`.
                    public var name: Swift.String
                    /// Organization to create the project with. If nil, the project will be created with the current user's personal account.
                    ///
                    /// - Remark: Generated from `#/paths/api/projects/POST/json/organization`.
                    public var organization: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the project that should be created.
                    ///   - organization: Organization to create the project with. If nil, the project will be created with the current user's personal account.
                    public init(name: Swift.String, organization: Swift.String? = nil) {
                        self.name = name
                        self.organization = organization
                    }
                    public enum CodingKeys: String, CodingKey {
                        case name
                        case organization
                    }
                }
                case json(Operations.createProject.Input.Body.jsonPayload)
            }
            public var body: Operations.createProject.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createProject.Input.Path = .init(),
                query: Operations.createProject.Input.Query = .init(),
                headers: Operations.createProject.Input.Headers = .init(),
                cookies: Operations.createProject.Input.Cookies = .init(),
                body: Operations.createProject.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProject.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Project)
                }
                /// Received HTTP response body
                public var body: Operations.createProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProject.Output.Ok.Headers = .init(),
                    body: Operations.createProject.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A success response with the created project.
            ///
            /// - Remark: Generated from `#/paths//api/projects/post(createProject)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createProject.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createProject.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createProject.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createProject.Output.BadRequest.Headers = .init(),
                    body: Operations.createProject.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project could not be created because of a validation error.
            ///
            /// - Remark: Generated from `#/paths//api/projects/post(createProject)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createProject.Output.BadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `GET /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)`.
    public enum listOrganizations {
        public static let id: String = "listOrganizations"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.listOrganizations.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.listOrganizations.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.listOrganizations.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.listOrganizations.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.listOrganizations.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.listOrganizations.Input.Path = .init(),
                query: Operations.listOrganizations.Input.Query = .init(),
                headers: Operations.listOrganizations.Input.Headers = .init(),
                cookies: Operations.listOrganizations.Input.Cookies = .init(),
                body: Operations.listOrganizations.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.listOrganizations.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Organizations)
                }
                /// Received HTTP response body
                public var body: Operations.listOrganizations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.listOrganizations.Output.Ok.Headers = .init(),
                    body: Operations.listOrganizations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A success response with all available cloud organizations.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/get(listOrganizations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.listOrganizations.Output.Ok)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `POST /api/organizations`.
    /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)`.
    public enum createOrganization {
        public static let id: String = "createOrganization"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                /// Creates a new `Path`.
                public init() {}
            }
            public var path: Operations.createOrganization.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createOrganization.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createOrganization.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createOrganization.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/api/organizations/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The name of the organization that should be created.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/POST/json/name`.
                    public var name: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - name: The name of the organization that should be created.
                    public init(name: Swift.String) { self.name = name }
                    public enum CodingKeys: String, CodingKey { case name }
                }
                case json(Operations.createOrganization.Input.Body.jsonPayload)
            }
            public var body: Operations.createOrganization.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createOrganization.Input.Path = .init(),
                query: Operations.createOrganization.Input.Query = .init(),
                headers: Operations.createOrganization.Input.Headers = .init(),
                cookies: Operations.createOrganization.Input.Cookies = .init(),
                body: Operations.createOrganization.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganization.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Organization)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganization.Output.Ok.Headers = .init(),
                    body: Operations.createOrganization.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A success response with the created organization.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createOrganization.Output.Ok)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganization.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganization.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganization.Output.BadRequest.Headers = .init(),
                    body: Operations.createOrganization.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization could not be created because of a validation error.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/post(createOrganization)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createOrganization.Output.BadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `DELETE /api/projects/{id}`.
    /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)`.
    public enum deleteProject {
        public static let id: String = "deleteProject"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int) { self.id = id }
            }
            public var path: Operations.deleteProject.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.deleteProject.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.deleteProject.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.deleteProject.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.deleteProject.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.deleteProject.Input.Path,
                query: Operations.deleteProject.Input.Query = .init(),
                headers: Operations.deleteProject.Input.Headers = .init(),
                cookies: Operations.deleteProject.Input.Cookies = .init(),
                body: Operations.deleteProject.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteProject.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.deleteProject.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteProject.Output.NoContent.Headers = .init(),
                    body: Operations.deleteProject.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A project was successfully deleted.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteProject.Output.NoContent)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteProject.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteProject.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteProject.Output.NotFound.Headers = .init(),
                    body: Operations.deleteProject.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project could not be deleted because it was not found.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteProject.Output.NotFound)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteProject.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteProject.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteProject.Output.Unauthorized.Headers = .init(),
                    body: Operations.deleteProject.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project could not be created because the user is not authorized to do the action.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{id}/delete(deleteProject)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.deleteProject.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `GET /api/projects/{account_name}/{project_name}`.
    /// - Remark: Generated from `#/paths//api/projects/{account_name}/{project_name}/get(getProject)`.
    public enum getProject {
        public static let id: String = "getProject"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var account_name: Swift.String
                public var project_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_name:
                ///   - project_name:
                public init(account_name: Swift.String, project_name: Swift.String) {
                    self.account_name = account_name
                    self.project_name = project_name
                }
            }
            public var path: Operations.getProject.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.getProject.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.getProject.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.getProject.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.getProject.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.getProject.Input.Path,
                query: Operations.getProject.Input.Query = .init(),
                headers: Operations.getProject.Input.Headers = .init(),
                cookies: Operations.getProject.Input.Cookies = .init(),
                body: Operations.getProject.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getProject.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Project)
                }
                /// Received HTTP response body
                public var body: Operations.getProject.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getProject.Output.Ok.Headers = .init(),
                    body: Operations.getProject.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A success response with the project.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_name}/{project_name}/get(getProject)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getProject.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getProject.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.getProject.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getProject.Output.Unauthorized.Headers = .init(),
                    body: Operations.getProject.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You don't have the permission to view the project.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_name}/{project_name}/get(getProject)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getProject.Output.Unauthorized)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getProject.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.getProject.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getProject.Output.NotFound.Headers = .init(),
                    body: Operations.getProject.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was not found.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{account_name}/{project_name}/get(getProject)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getProject.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `PUT /api/projects/{full_name}/cache/clean`.
    /// - Remark: Generated from `#/paths//api/projects/{full_name}/cache/clean/put(cleanCache)`.
    public enum cleanCache {
        public static let id: String = "cleanCache"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var full_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - full_name:
                public init(full_name: Swift.String) { self.full_name = full_name }
            }
            public var path: Operations.cleanCache.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.cleanCache.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.cleanCache.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.cleanCache.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.cleanCache.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.cleanCache.Input.Path,
                query: Operations.cleanCache.Input.Query = .init(),
                headers: Operations.cleanCache.Input.Headers = .init(),
                cookies: Operations.cleanCache.Input.Cookies = .init(),
                body: Operations.cleanCache.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cleanCache.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.cleanCache.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cleanCache.Output.NoContent.Headers = .init(),
                    body: Operations.cleanCache.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The cache was successfuly cleaned.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{full_name}/cache/clean/put(cleanCache)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.cleanCache.Output.NoContent)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cleanCache.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cleanCache.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cleanCache.Output.NotFound.Headers = .init(),
                    body: Operations.cleanCache.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The project was not found.
            ///
            /// - Remark: Generated from `#/paths//api/projects/{full_name}/cache/clean/put(cleanCache)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.cleanCache.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `GET /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(getOrganization)`.
    public enum getOrganization {
        public static let id: String = "getOrganization"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.getOrganization.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.getOrganization.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.getOrganization.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.getOrganization.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.getOrganization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.getOrganization.Input.Path,
                query: Operations.getOrganization.Input.Query = .init(),
                headers: Operations.getOrganization.Input.Headers = .init(),
                cookies: Operations.getOrganization.Input.Cookies = .init(),
                body: Operations.getOrganization.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getOrganization.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Organization)
                }
                /// Received HTTP response body
                public var body: Operations.getOrganization.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getOrganization.Output.Ok.Headers = .init(),
                    body: Operations.getOrganization.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A success response with the organization.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(getOrganization)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getOrganization.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getOrganization.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.getOrganization.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getOrganization.Output.Unauthorized.Headers = .init(),
                    body: Operations.getOrganization.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// You don't have the permission to view the organization.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(getOrganization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.getOrganization.Output.Unauthorized)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.getOrganization.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.getOrganization.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.getOrganization.Output.NotFound.Headers = .init(),
                    body: Operations.getOrganization.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization was not found.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/get(getOrganization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getOrganization.Output.NotFound)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)`.
    public enum deleteOrganization {
        public static let id: String = "deleteOrganization"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.deleteOrganization.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.deleteOrganization.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.deleteOrganization.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.deleteOrganization.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.deleteOrganization.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.deleteOrganization.Input.Path,
                query: Operations.deleteOrganization.Input.Query = .init(),
                headers: Operations.deleteOrganization.Input.Headers = .init(),
                cookies: Operations.deleteOrganization.Input.Cookies = .init(),
                body: Operations.deleteOrganization.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteOrganization.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.deleteOrganization.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteOrganization.Output.NoContent.Headers = .init(),
                    body: Operations.deleteOrganization.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// An organization was successfully deleted.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteOrganization.Output.NoContent)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteOrganization.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteOrganization.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteOrganization.Output.NotFound.Headers = .init(),
                    body: Operations.deleteOrganization.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization could not be deleted because it was not found.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.deleteOrganization.Output.NotFound)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.deleteOrganization.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.deleteOrganization.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.deleteOrganization.Output.Unauthorized.Headers = .init(),
                    body: Operations.deleteOrganization.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization could not be deleted because the user is not authorized to do the action.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/delete(deleteOrganization)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.deleteOrganization.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `POST /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createOrganizationInvite)`.
    public enum createOrganizationInvite {
        public static let id: String = "createOrganizationInvite"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.createOrganizationInvite.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.createOrganizationInvite.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.createOrganizationInvite.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.createOrganizationInvite.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/POST/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// Email of the user to invite.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/POST/json/invitee_email`.
                    public var invitee_email: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - invitee_email: Email of the user to invite.
                    public init(invitee_email: Swift.String) { self.invitee_email = invitee_email }
                    public enum CodingKeys: String, CodingKey { case invitee_email }
                }
                case json(Operations.createOrganizationInvite.Input.Body.jsonPayload)
            }
            public var body: Operations.createOrganizationInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.createOrganizationInvite.Input.Path,
                query: Operations.createOrganizationInvite.Input.Query = .init(),
                headers: Operations.createOrganizationInvite.Input.Headers = .init(),
                cookies: Operations.createOrganizationInvite.Input.Cookies = .init(),
                body: Operations.createOrganizationInvite.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganizationInvite.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.Invitation)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganizationInvite.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganizationInvite.Output.Ok.Headers = .init(),
                    body: Operations.createOrganizationInvite.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A user was successfully invited.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createOrganizationInvite)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createOrganizationInvite.Output.Ok)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganizationInvite.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganizationInvite.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganizationInvite.Output.Unauthorized.Headers =
                        .init(),
                    body: Operations.createOrganizationInvite.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitation could not be created because the user is not authorized to perform the action.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createOrganizationInvite)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.createOrganizationInvite.Output.Unauthorized)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganizationInvite.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganizationInvite.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganizationInvite.Output.NotFound.Headers = .init(),
                    body: Operations.createOrganizationInvite.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitation could not be created because the relevant organization was not found.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createOrganizationInvite)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.createOrganizationInvite.Output.NotFound)
            public struct BadRequest: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.createOrganizationInvite.Output.BadRequest.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.createOrganizationInvite.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.createOrganizationInvite.Output.BadRequest.Headers =
                        .init(),
                    body: Operations.createOrganizationInvite.Output.BadRequest.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitation could not be created because of a validation error.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/post(createOrganizationInvite)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createOrganizationInvite.Output.BadRequest)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/invitations`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelOrganizationInvite)`.
    public enum cancelOrganizationInvite {
        public static let id: String = "cancelOrganizationInvite"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                public init(organization_name: Swift.String) {
                    self.organization_name = organization_name
                }
            }
            public var path: Operations.cancelOrganizationInvite.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.cancelOrganizationInvite.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.cancelOrganizationInvite.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.cancelOrganizationInvite.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/DELETE/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// Email of the user to cancel the invite for.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/invitations/DELETE/json/invitee_email`.
                    public var invitee_email: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - invitee_email: Email of the user to cancel the invite for.
                    public init(invitee_email: Swift.String) { self.invitee_email = invitee_email }
                    public enum CodingKeys: String, CodingKey { case invitee_email }
                }
                case json(Operations.cancelOrganizationInvite.Input.Body.jsonPayload)
            }
            public var body: Operations.cancelOrganizationInvite.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.cancelOrganizationInvite.Input.Path,
                query: Operations.cancelOrganizationInvite.Input.Query = .init(),
                headers: Operations.cancelOrganizationInvite.Input.Headers = .init(),
                cookies: Operations.cancelOrganizationInvite.Input.Cookies = .init(),
                body: Operations.cancelOrganizationInvite.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cancelOrganizationInvite.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.cancelOrganizationInvite.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cancelOrganizationInvite.Output.NoContent.Headers = .init(),
                    body: Operations.cancelOrganizationInvite.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitations was successfully cancelled.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelOrganizationInvite)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.cancelOrganizationInvite.Output.NoContent)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cancelOrganizationInvite.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cancelOrganizationInvite.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cancelOrganizationInvite.Output.NotFound.Headers = .init(),
                    body: Operations.cancelOrganizationInvite.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitation could not be deleted because it was not found.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelOrganizationInvite)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.cancelOrganizationInvite.Output.NotFound)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.cancelOrganizationInvite.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.cancelOrganizationInvite.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.cancelOrganizationInvite.Output.Unauthorized.Headers =
                        .init(),
                    body: Operations.cancelOrganizationInvite.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The invitation could not be cancelled because the user is not authorized to do the action.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/invitations/delete(cancelOrganizationInvite)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.cancelOrganizationInvite.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `PUT /api/organizations/{organization_name}/members/{username}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/put(updateOrganizationMember)`.
    public enum updateOrganizationMember {
        public static let id: String = "updateOrganizationMember"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                public var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                ///   - username:
                public init(organization_name: Swift.String, username: Swift.String) {
                    self.organization_name = organization_name
                    self.username = username
                }
            }
            public var path: Operations.updateOrganizationMember.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.updateOrganizationMember.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.updateOrganizationMember.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.updateOrganizationMember.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {
                /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/members/{username}/PUT/json`.
                public struct jsonPayload: Codable, Equatable, Hashable, Sendable {
                    /// The new role of the member.
                    ///
                    /// - Remark: Generated from `#/paths/api/organizations/{organization_name}/members/{username}/PUT/json/role`.
                    public var role: OpenAPIRuntime.OpenAPIValueContainer
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - role: The new role of the member.
                    public init(role: OpenAPIRuntime.OpenAPIValueContainer) { self.role = role }
                    public enum CodingKeys: String, CodingKey { case role }
                }
                case json(Operations.updateOrganizationMember.Input.Body.jsonPayload)
            }
            public var body: Operations.updateOrganizationMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.updateOrganizationMember.Input.Path,
                query: Operations.updateOrganizationMember.Input.Query = .init(),
                headers: Operations.updateOrganizationMember.Input.Headers = .init(),
                cookies: Operations.updateOrganizationMember.Input.Cookies = .init(),
                body: Operations.updateOrganizationMember.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct Ok: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.Ok.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas.OrganizationMember)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.Ok.Headers = .init(),
                    body: Operations.updateOrganizationMember.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member was successfully updated.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/put(updateOrganizationMember)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.updateOrganizationMember.Output.Ok)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.NotFound.Headers = .init(),
                    body: Operations.updateOrganizationMember.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization or the member were not found.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/put(updateOrganizationMember)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.updateOrganizationMember.Output.NotFound)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.updateOrganizationMember.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.updateOrganizationMember.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.updateOrganizationMember.Output.Unauthorized.Headers =
                        .init(),
                    body: Operations.updateOrganizationMember.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member could not be updated because the user is not authorized to do the action.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/put(updateOrganizationMember)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.updateOrganizationMember.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// - Remark: HTTP `DELETE /api/organizations/{organization_name}/members/{username}`.
    /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/delete(removeOrganizationMember)`.
    public enum removeOrganizationMember {
        public static let id: String = "removeOrganizationMember"
        public struct Input: Sendable, Equatable, Hashable {
            public struct Path: Sendable, Equatable, Hashable {
                public var organization_name: Swift.String
                public var username: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organization_name:
                ///   - username:
                public init(organization_name: Swift.String, username: Swift.String) {
                    self.organization_name = organization_name
                    self.username = username
                }
            }
            public var path: Operations.removeOrganizationMember.Input.Path
            public struct Query: Sendable, Equatable, Hashable {
                /// Creates a new `Query`.
                public init() {}
            }
            public var query: Operations.removeOrganizationMember.Input.Query
            public struct Headers: Sendable, Equatable, Hashable {
                /// Creates a new `Headers`.
                public init() {}
            }
            public var headers: Operations.removeOrganizationMember.Input.Headers
            public struct Cookies: Sendable, Equatable, Hashable {
                /// Creates a new `Cookies`.
                public init() {}
            }
            public var cookies: Operations.removeOrganizationMember.Input.Cookies
            @frozen public enum Body: Sendable, Equatable, Hashable {}
            public var body: Operations.removeOrganizationMember.Input.Body?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - cookies:
            ///   - body:
            public init(
                path: Operations.removeOrganizationMember.Input.Path,
                query: Operations.removeOrganizationMember.Input.Query = .init(),
                headers: Operations.removeOrganizationMember.Input.Headers = .init(),
                cookies: Operations.removeOrganizationMember.Input.Cookies = .init(),
                body: Operations.removeOrganizationMember.Input.Body? = nil
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.cookies = cookies
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Equatable, Hashable {
            public struct NoContent: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.NoContent.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {}
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.NoContent.Body?
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.NoContent.Headers = .init(),
                    body: Operations.removeOrganizationMember.Output.NoContent.Body? = nil
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member was successfully removed.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/delete(removeOrganizationMember)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.removeOrganizationMember.Output.NoContent)
            public struct NotFound: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.NotFound.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.NotFound.Headers = .init(),
                    body: Operations.removeOrganizationMember.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The organization or the member were not found.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/delete(removeOrganizationMember)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.removeOrganizationMember.Output.NotFound)
            public struct Unauthorized: Sendable, Equatable, Hashable {
                public struct Headers: Sendable, Equatable, Hashable {
                    /// Creates a new `Headers`.
                    public init() {}
                }
                /// Received HTTP response headers
                public var headers: Operations.removeOrganizationMember.Output.Unauthorized.Headers
                @frozen public enum Body: Sendable, Equatable, Hashable {
                    case json(Components.Schemas._Error)
                }
                /// Received HTTP response body
                public var body: Operations.removeOrganizationMember.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.removeOrganizationMember.Output.Unauthorized.Headers =
                        .init(),
                    body: Operations.removeOrganizationMember.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The member could not be removed because the user is not authorized to do the action.
            ///
            /// - Remark: Generated from `#/paths//api/organizations/{organization_name}/members/{username}/delete(removeOrganizationMember)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.removeOrganizationMember.Output.Unauthorized)
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
}
