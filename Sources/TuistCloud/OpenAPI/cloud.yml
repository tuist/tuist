openapi: "3.0.3"
info:
  title: Tuist Cloud API
  version: 0.1.0
servers:
  - url: http://127.0.0.1:3000/api
    description: Localhost deployment.
paths:
  /api/projects:
    get:
      operationId: listProjects
      parameters:
          - name: account_name
            in: query
            description: Filter items by account name
            schema:
              type: string
          - name: project_name
            in: query
            description: Filter items by project name
            schema:
              type: string
      responses:
        "200":
          description: A success response with all available cloud projects.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"
    post:
      operationId: createProject
      parameters:
        - name: name
          required: true
          in: query
          description: The name of the project that should be created.
          schema:
            type: string
        - name: organization
          required: false
          in: query
          description: Organization to create the project with. If nil, the project will be created with the current user's personal account.
          schema:
            type: string
      responses:
        "200":
          description: A success response with the created project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          description: The project could not be created because of a validation error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/organizations:
    get:
      operationId: listOrganizations
      responses:
        "200":
          description: A success response with all available cloud organizations.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organizations"
    post:
      operationId: createOrganization
      parameters:
        - name: name
          required: true
          in: query
          description: The name of the organization that should be created.
          schema:
            type: string
      responses:
        "200":
          description: A success response with the created organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          description: The organization could not be created because of a validation error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/projects/{id}:
    delete:
      operationId: deleteProject
      parameters:
        - in: path
          name: id
          required: true
          description: The id of the project that should be deleted.
          schema:
            type: integer
      responses:
        "204":
          description: A project was successfully deleted.
        "404":
          description: The project could not be deleted because it was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The project could not be created because the user is not authorized to do the action.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/projects/{account_name}/{project_name}:
    get:
      operationId: getProject
      parameters:
        - in: path
          name: account_name
          required: true
          description: The account name of the project to show.
          schema:
            type: string
        - in: path
          name: project_name
          required: true
          description: The name of the project to show.
          schema:
            type: string
      responses:
        "200":
          description: A success response with the project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "401":
          description: You don't have the permission to view the project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The project was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/organizations/{organization_name}:
    get:
      operationId: getOrganization
      parameters:
        - in: path
          name: organization_name
          required: true
          description: The organization to show.
          schema:
            type: string
      responses:
        "200":
          description: A success response with the organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          description: You don't have the permission to view the organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The organization was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteOrganization
      parameters:
        - in: path
          name: organization_name
          required: true
          description: The name of the organization that should be deleted.
          schema:
            type: string
      responses:
        "204":
          description: An organization was successfully deleted.
        "404":
          description: The organization could not be deleted because it was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: The organization could not be deleted because the user is not authorized to do the action.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    OrganizationMember:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum:
            - admin
            - user
      required:
        - id
        - email
        - name
        - role
    Projects:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Project"
      required:
        - projects
    Project:
      type: object
      properties:
        id:
          type: number
        full_name:
          type: string
      required:
        - id
        - full_name
    Organizations:
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: "#/components/schemas/Organization"
      required:
        - organizations
    Organization:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        members:
            type: array
            items:
              $ref: "#/components/schemas/OrganizationMember"
      required:
        - id
        - name
        - members
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message