import Foundation
import TuistCore

/// A graph mapper that auto-generates schemes for each of the targets of the graph
/// if the user hasn't already defined schemes for those.
public class AutogeneratedSchemesGraphMapper: GraphMapping {
    // MARK: - Init

    public init() {}

    // MARK: - GraphMapping

    public func map(graph: Graph) throws -> (Graph, [SideEffectDescriptor]) {
        let projects = graph.projects.map { (project: Project) -> Project in
            let schemeNames = Set(project.schemes.map { $0.name })
            let schemes = project.schemes

            let autogeneratedSchemes = project.targets.compactMap { (target: Target) -> Scheme? in
                let scheme = self.createDefaultScheme(target: target,
                                                      project: project,
                                                      buildConfiguration: project.defaultDebugBuildConfigurationName,
                                                      graph: graph)
                // The user has already defined a scheme with that name.
                if schemeNames.contains(scheme.name) { return nil }
                return scheme
            }

            return project.with(schemes: schemes + autogeneratedSchemes)
        }

        let mappedGraph = Graph(name: graph.name,
                                entryPath: graph.entryPath,
                                entryNodes: graph.entryNodes,
                                projects: projects,
                                cocoapods: graph.cocoapods,
                                packages: graph.packages,
                                precompiled: graph.precompiled,
                                targets: graph.targets)
        return (mappedGraph, [])
    }

    // MARK: - Private

    private func createDefaultScheme(target: Target, project: Project, buildConfiguration: String, graph: Graph) -> Scheme {
        let targetReference = TargetReference(projectPath: project.path, name: target.name)

        let testTargets: [TestableTarget]

        if target.product.testsBundle {
            testTargets = [TestableTarget(target: targetReference)]
        } else {
            testTargets = graph.testTargetsDependingOn(path: project.path, name: target.name)
                .map { TargetReference(projectPath: $0.project.path, name: $0.target.name) }
                .map { TestableTarget(target: $0) }
        }

        return Scheme(name: target.name,
                      shared: true,
                      buildAction: BuildAction(targets: [targetReference]),
                      testAction: TestAction(targets: testTargets, configurationName: buildConfiguration),
                      runAction: RunAction(configurationName: buildConfiguration,
                                           executable: targetReference,
                                           arguments: Arguments(environment: target.environment)))
    }
}
