import Foundation
import TuistAutomation
import TuistCore
import TuistGenerator
import TuistGraph
import TuistLoader
import TuistSigning
import TuistSupport

/// The protocol describes an interface for getting project mappers.
protocol ProjectMapperFactorying {
    /// Returns the default project mapper.
    /// - Parameter config: The project configuration
    /// - Returns: A project mapper instance.
    func `default`(config: Config) -> [ProjectMapping]

    /// Returns a project mapper for caching projects.
    /// - Parameter config: The project configuration.
    /// - Returns: An instance of a project mapper.
    func cache(config: Config) -> [ProjectMapping]

    /// Returns a project mapper for automation.
    /// - Parameter config: The project configuration.
    /// - Parameter skipUITests: Whether UI tests should be skipped.
    /// - Returns: An instance of a project mapper.
    func automation(config: Config, skipUITests: Bool) -> [ProjectMapping]
}

final class ProjectMapperFactory: ProjectMapperFactorying {
    private let contentHasher: ContentHashing

    init(contentHasher: ContentHashing = ContentHasher()) {
        self.contentHasher = contentHasher
    }

    func cache(config: Config) -> [ProjectMapping] {
        return self.default(config: config)
    }

    func automation(config: Config, skipUITests: Bool) -> [ProjectMapping] {
        var mappers: [ProjectMapping] = []
        mappers += self.default(config: config)

        if config.generationOptions.contains(.disableAutogeneratedSchemes) {
            mappers.append(
                AutogeneratedSchemesProjectMapper(
                    enableCodeCoverage: config.codeCoverageMode != nil
                )
            )
        }

        mappers.append(
            SourceRootPathProjectMapper()
        )

        if skipUITests {
            mappers.append(
                SkipUITestsProjectMapper()
            )
        }

        return mappers
    }

    func `default`(config: Config) -> [ProjectMapping] {
        var mappers: [ProjectMapping] = []

        // Delete current derived
        mappers.append(DeleteDerivedDirectoryProjectMapper())

        // Namespace generator
        if !config.generationOptions.contains(.disableSynthesizedResourceAccessors) {
            mappers.append(
                SynthesizedResourceInterfaceProjectMapper(
                    contentHasher: contentHasher
                )
            )
        }

        // Logfile noise suppression
        if config.generationOptions.contains(.disableShowEnvironmentVarsInScriptPhases) {
            mappers.append(
                TargetProjectMapper(mapper: TargetActionEnvironmentMapper(false))
            )
        }

        // Support for resources in libraries
        if !config.generationOptions.contains(.disableBundleAccessors) {
            mappers.append(ResourcesProjectMapper())
        }

        // Auto-generation of schemes
        // This mapper should follow the ResourcesProjectMapper in order to create schemes for bundles and cache them.
        if !config.generationOptions.contains(.disableAutogeneratedSchemes) {
            mappers.append(AutogeneratedSchemesProjectMapper(enableCodeCoverage: config.codeCoverageMode != nil))
        }

        // Info Plist
        mappers.append(GenerateInfoPlistProjectMapper())

        // Project name and organization
        mappers.append(ProjectNameAndOrganizationMapper(config: config))

        // Development region
        mappers.append(ProjectDevelopmentRegionMapper(config: config))

        // Template macros
        mappers.append(IDETemplateMacrosMapper())

        // Signing
        mappers.append(SigningMapper())

        return mappers
    }
}
