import Foundation
import TSCUtility
import TuistCore
import TuistGenerator
import TuistGraph
import TuistAutomation
import TSCBasic

protocol WorkspaceMapperFactorying {
    
    /// Returns the default workspace mapper.
    /// - Returns: A workspace mapping instance.
    func `default`(config: Config) -> WorkspaceMapping
    
    /// Returns a mapper to generate cacheable prorjects.
    /// - Parameter config: The project configuration.
    /// - Parameter includedTargets: The list of targets to cache.
    /// - Returns: A workspace mapping instance.
    func cache(config: Config, includedTargets: Set<String>) -> WorkspaceMapping
    
    /// Returns a mapper for automation commands like build and test.
    /// - Parameter config: The project configuration.
    /// - Parameter workspaceDirectory: The directory where the workspace will be generated.
    /// - Returns: A workspace mapping instance.
    func automation(config: Config, workspaceDirectory: AbsolutePath) -> WorkspaceMapping
}

final class WorkspaceMapperFactory: WorkspaceMapperFactorying {
    
    private let projectMapperFactory: ProjectMapperFactorying

    init(projectMapperFactory: ProjectMapperFactorying) {
        self.projectMapperFactory = projectMapperFactory
    }

    func cache(config: Config, includedTargets: Set<String>) -> WorkspaceMapping {
        var mappers = self.defaultMappers(config: config)
        mappers +=  [GenerateCacheableSchemesWorkspaceMapper(includedTargets: includedTargets)]
        return SequentialWorkspaceMapper(mappers: mappers)
    }

    func automation(config: Config, workspaceDirectory: AbsolutePath) -> WorkspaceMapping {
        var mappers: [WorkspaceMapping] = []
        mappers.append(AutomationPathWorkspaceMapper(workspaceDirectory: workspaceDirectory))
        mappers += self.defaultMappers(config: config)
        if config.generationOptions.contains(.disableAutogeneratedSchemes) {
            mappers.append(
                AutogeneratedProjectSchemeWorkspaceMapper(
                    codeCoverageMode: config.codeCoverageMode
                )
            )
        }

        return SequentialWorkspaceMapper(mappers: mappers)
    }

    func `default`(config: Config) -> WorkspaceMapping {
        SequentialWorkspaceMapper(
            mappers: defaultMappers(
                config: config
            )
        )
    }

    // MARK: - Fileprivate
    
    fileprivate func defaultMappers(config: Config) -> [WorkspaceMapping] {
        var mappers: [WorkspaceMapping] = []

        mappers.append(
            ProjectWorkspaceMapper(mapper: projectMapperFactory.default(config: config))
        )

        mappers.append(
            TuistWorkspaceIdentifierMapper()
        )

        mappers.append(
            IDETemplateMacrosMapper()
        )

        // Auto-generation of project scheme
        if !config.generationOptions.contains(.disableAutogeneratedSchemes) {
            mappers.append(
                AutogeneratedProjectSchemeWorkspaceMapper(
                    codeCoverageMode: config.codeCoverageMode
                )
            )
        }

        mappers.append(
            ModuleMapMapper()
        )

        if let lastUpgradeVersion = lastUpgradeCheckOverride(config: config) {
            mappers.append(
                LastUpgradeVersionWorkspaceMapper(
                    lastUpgradeVersion: lastUpgradeVersion
                )
            )
        }

        return mappers
    }

    fileprivate func lastUpgradeCheckOverride(config: Config) -> Version? {
        config.generationOptions.compactMap { item -> Version? in
            switch item {
            case let .lastUpgradeCheck(version):
                return version
            default:
                return nil
            }
        }.first
    }
}
