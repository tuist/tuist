import Foundation
import TSCBasic
import TuistAutomation
import TuistCore
import TuistGenerator
import TuistGraph
import TuistSupport

/// Custom mapper provider for automation features
/// It uses default `ProjectMapperProvider` but adds its own on top
final class AutomationProjectMapperProvider: ProjectMapperProviding {
    private let projectMapperProvider: ProjectMapperProviding
    private let skipUITests: Bool

    init(
        projectMapperProvider: ProjectMapperProviding = ProjectMapperProvider(),
        skipUITests: Bool
    ) {
        self.projectMapperProvider = projectMapperProvider
        self.skipUITests = skipUITests
    }

    func mapper(config: Config) -> ProjectMapping {
        var mappers: [ProjectMapping] = []
        mappers.append(
            projectMapperProvider.mapper(
                config: config
            )
        )

        if config.generationOptions.contains(.disableAutogeneratedSchemes) {
            mappers.append(
                AutogeneratedSchemesProjectMapper(
                    enableCodeCoverage: config.codeCoverageMode != nil
                )
            )
        }

        mappers.append(
            SourceRootPathProjectMapper()
        )

        if skipUITests {
            mappers.append(
                SkipUITestsProjectMapper()
            )
        }

        return SequentialProjectMapper(mappers: mappers)
    }
}
