@Tutorial(time: 5) {
    @Intro(title: "Adding external Dependencies") {
        Learn how to integrate external dependencies in a Tuist.

        Integrating external dependencies is an important but often painful part of Xcode project management. Dependency managers like [CocoaPods](https://cocoapods.org) integrate it when running `pod install` leveraging Xcode workspaces, and [Swift Package Manager](https://www.swift.org/package-manager) does it at build time leveraging Xcode closed build system. Both approaches might lead to integration issues that can cause compilation issues down the road.

        We are aware that's not a great developer experience, and thus we take a different approach to managing external dependencies that allow leveraging Tuist features such as linting and caching. Because we merge your project and the external dependencies' graph into a single graph, we validate and fail early if the resulting graph is invalid.

        @Image(source: "Logo-Blurred.png", alt: "Blurred Tuist Logo.")
    }

    @Section(title: "Defining the dependencies") {
        @ContentAndMedia {
            External dependencies are defined in the `Tuist/Dependencies.swift` and `Tuist/Package.swift` manifest files.
        }

        @Steps {
            @Step {
                Create a `Tuist/Package.swift` file defining your external dependencies and their versions with the same `Swift Package Manager` syntax you might be familiar with.
                @Code(name: "Tuist/Package.swift", file: "Package.swift", reset: true)
            }

            @Step {
                Create a `Tuist/Dependencies.swift` file defining additional configuration details such as the desired target platform, or some custom mapping for your dependencies.
                @Code(name: "Tuist/Dependencies.swift", file: "Dependencies.swift", reset: true)

                > Note: For example, here we are declaring that the `Alamofire` target should be mapped to a dynamic framework, instead of the default static framework.
            }
        }
    }

    @Section(title: "Fetching dependencies") {
        @ContentAndMedia {
            After dependencies have been declared, you need to fetch them by running `tuist fetch`. Tuist uses  `Swift Package Manager` to pull the dependencies under the `Tuist/Dependencies` directory, and maps them to Tuist target and projects:

            ```bash
            Tuist
                |- Dependencies.swift # Manifest
                |- Packages.swift # Dependencies definition and versions
                |- Dependencies
                    |- graph.json # stores the serialized dependencies graph generated by `tuist fetch`
                    |- Lockfiles # stores the lockfiles generated by the dependencies resolution
                        |- Package.resolved
                    |- SwiftPackageManager
                        |- .build # stores content of `.build/` directory generated by `Swift Package Manager`
                            |- artifacts
                            |- checkouts
                            |- repositories
                            |- manifest.db
                            |- workspace-state.json
                        |- Package.swift # the generated Package.swift
            ```

            We recommend excluding the following files and directories from [version control](https://en.wikipedia.org/wiki/Version_control) (for example, in your `.gitignore` file).

            ```bash
            Tuist/Dependencies/graph.json # Avoid checking in the serialized dependencies graph generated by Tuist.
            Tuist/Dependencies/Carthage # Avoid checking in build artifacts from Carthage dependencies.
            Tuist/Dependencies/SwiftPackageManager # Avoid checking in build artifacts from Swift Package Manager dependencies.
            ```
        }
    }

    @Section(title: "Integrating dependencies into your project") {
        @ContentAndMedia {
            Once dependencies have been fetched, you can declare dependencies from your projects' targets.
        }

        @Steps {
            @Step {
                Run `tuist edit` to edit your project's manifest.
                @Code(name: "console", file: "tuist-edit.txt", reset: true)
            }

            @Step {
                Use the `.external` target dependency option to declare the dependency.
                @Code(name: "Project.swift", file: "Project.swift", reset: true)
            }
        }
    }


    @Section(title: "Notes") {
        @ContentAndMedia {
            Some notes on the integration of Swift packages:
              - When Swift packages are integrated as source code into your project's graph, no scheme is created for them, as you usually don't want to build only the dependency explicitly. If you need it (for example, for testing some problem in the library), you can create the scheme directly from Xcode, or you can define it in your `Project.swift` if you need it to be available across generations.
              - If present, Tuist uses the product type defined in the package manifest file. Otherwise, it defaults to use `.staticFramework`. You can override the product type using the `SwiftPackageManagerDependencies.productTypes` property.
              - To use Swift packages from an Objective-C target, add the path to the public headers of the package to the `HEADER_SEARCH_PATHS` of the target. The path will be something like `Tuist/Dependencies/SwiftPackageManager/.build/checkouts/<your_package>/<the_headers>`.
        }
    }
}

