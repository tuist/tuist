@Tutorial(time: 25) {
    @Intro(title: "Deployment") {
        Learn how to deploy Tuist Cloud's Docker image to production.
    }
    
    @Section(title: "Pulling the image from GitHub's registry") {
        @ContentAndMedia(layout: "horizontal") {}
        
            
        For our enterprise customers, access is provided to the repository at [github.com/tuist/cloud-enterprise](https://github.com/cloud/cloud-enterprise), which includes an associated container registry from which images can be pulled. While it's possible to authenticate using the credentials of the individual who was granted repository access or a token linked to their account, we advise against this. Such an approach is risky, especially if that individual departs your organization, potentially revoking your repository access and disrupting your deployment pipelines. Instead, we recommend creating a [GitHub app](https://docs.github.com/en/apps/creating-github-apps/about-creating-github-apps/about-creating-github-apps). Name it "Your Organization - Tuist Cloud," disable webhooks, select the "read packages" permission for the repository, and designate [https://tuist.io](https://tuist.io) as the callback URL. Make sure the app supports installation in other organizations.
        
        ### Generating an access token
        
        Once the app is installed, you can generate a **temporary access token** to send authenticated requests to the registry. Below is a bash snippet for this purpose. You can use it as a reference or adapt it to your preferred scripting language:
        
        ```sh
        # Generate access token
        
        APP_ID=your_github_app_id
        PRIVATE_KEY_PATH=/path/to/private_key.pem
        # Get the current time in seconds since the Unix epoch.
        CURRENT_TIME=$(date +%s)
        # JWT expiration time (10 minutes from now, for example).
        EXPIRATION=$(($CURRENT_TIME + 600))
        JWT_HEADER="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9"
        PAYLOAD=$(printf '{"iat":%d,"exp":%d,"iss":%d}' $CURRENT_TIME $EXPIRATION $APP_ID)
        JWT_PAYLOAD=$(echo -n $PAYLOAD | openssl base64 -e -A | tr -d '=' | tr '/+' '_-')
        JWT_SIGNATURE=$(echo -n "$JWT_HEADER.$JWT_PAYLOAD" | openssl dgst -sha256 -binary -sign $PRIVATE_KEY_PATH | openssl base64 -e -A | tr -d '=' | tr '/+' '_-')
        JWT="$JWT_HEADER.$JWT_PAYLOAD.$JWT_SIGNATURE"
        INSTALLATION_ID=your_github_app_installation_id
        TOKEN=$(curl -s -X POST \
          -H "Authorization: Bearer $JWT" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens \
          | jq -r .token)
        ```
        
        ### Pulling the Docker image
        
        After generating the token, you can retrieve the image by executing the following command:
        
        ```bash
        echo $TOKEN | docker login ghcr.io -u USERNAME --password-stdin
        docker pull ghcr.io/tuist/cloud:main
        ```
    }
    
    @Section(title: "Deploying a Docker image") {
        @ContentAndMedia(layout: "horizontal") {}
            
        The deployment process for the Docker image will differ based on your chosen cloud provider and your organization's continuous deployment approach. Since most cloud solutions and tools, like [Kubernetes](https://kubernetes.io/), utilize Docker images as fundamental units, the examples in this section should align well with your existing setup.
        
        We recommend establishing a continuous deployment pipeline that operates daily, pulling and deploying fresh images. This ensures you consistently benefit from the latest improvements. If preferred, you can synchronize with Tuist Cloud's release schedule and deploy weekly, coinciding with each new official release.

        Subsequent sections provide examples of deployments using popular cloud providers.
        
        
        ### Fly
        
        To deploy the app on [Fly](https://fly.io/), you'll require a fly.toml configuration file. Consider generating it dynamically within your Continuous Deployment (CD) pipeline. Below is a reference example for your use:
        
        ```toml
        app = "tuist-cloud-enterprise-example"
        primary_region = "ams"
        kill_signal = "SIGINT"
        kill_timeout = "5s"

        [experimental]
          auto_rollback = true

        [build]

        [deploy]
          release_command = "bin/rails fly:release"

        [env]
          PORT = "8080"

        [processes]
          app = "bin/rails fly:server"
          worker = "bundle exec que"

        [[services]]
          protocol = "tcp"
          internal_port = 8080
          auto_stop_machines = true
          auto_start_machines = true
          min_machines_running = 1
          processes = ["app"]

          [[services.ports]]
            port = 80
            handlers = ["http"]
            force_https = true

          [[services.ports]]
            port = 443
            handlers = ["tls", "http"]
          [services.concurrency]
            type = "connections"
            hard_limit = 25
            soft_limit = 20

          [[services.tcp_checks]]
            interval = "15s"
            timeout = "2s"
            grace_period = "1s"

        [[statics]]
          guest_path = "/app/public"
          url_prefix = "/"
        ```
        
        Then you can run `fly launch --local-only --no-deploy` to launch the app. On subsequent deploys, instead of running `fly launch --local-only`, you will need to run `fly deploy --local-only`. Fly.io doesn't allow to pull private Docker images, which is why we need to use the `--local-only` flag.
    }
    

}
