@Tutorial(time: 25) {
    @Intro(title: "Deployment") {
        Learn how to deploy Tuist Cloud's Docker image to production.
        @Image(source: "Logo-Blurred.png", alt: "Blurred Tuist Logo.")
    }
    
    @Section(title: "Pulling the image from GitHub's registry") {
        @ContentAndMedia(layout: "horizontal") {}
        
        For our enterprise clients, we grant access to the repository located at [github.com/tuist/cloud](https://github.com/cloud/cloud). This repository also comes with a linked container registry for pulling images. Currently, the container registry allows authentication only as an individual user. Therefore, users with repository access must generate a **personal access token** within the Tuist organization, ensuring they have the necessary permissions to read packages. After submission, we will promptly approve this token.
        
        > Important: Using a personal access token presents a challenge because it's associated with an individual who might eventually depart from the enterprise organization. GitHub recognizes this limitation and is actively developing a solution to allow GitHub apps to authenticate with app-generated tokens.
                
        ### Pulling the Docker image
        
        After generating the token, you can retrieve the image by executing the following command:
        
        ```bash
        echo $TOKEN | docker login ghcr.io -u USERNAME --password-stdin
        docker pull ghcr.io/tuist/cloud:main
        ```
    }
    
    @Section(title: "Deploying a Docker image") {
        @ContentAndMedia(layout: "horizontal") {}
            
        The deployment process for the Docker image will differ based on your chosen cloud provider and your organization's continuous deployment approach. Since most cloud solutions and tools, like [Kubernetes](https://kubernetes.io/), utilize Docker images as fundamental units, the examples in this section should align well with your existing setup.
        
        We recommend establishing a continuous deployment pipeline that operates daily, pulling and deploying fresh images. This ensures you consistently benefit from the latest improvements. If preferred, you can synchronize with Tuist Cloud's release schedule and deploy weekly, coinciding with each new official release.

        Subsequent sections provide examples of deployments using popular cloud providers.
        
        
        ### Fly
        
        To deploy the app on [Fly](https://fly.io/), you'll require a fly.toml configuration file. Consider generating it dynamically within your Continuous Deployment (CD) pipeline. Below is a reference example for your use:
        
        ```toml
        app = "tuist-cloud-enterprise-example"
        primary_region = "ams"
        kill_signal = "SIGINT"
        kill_timeout = "5s"

        [experimental]
          auto_rollback = true

        [build]

        [deploy]
          release_command = "bin/rails fly:release"

        [env]
          PORT = "8080"

        [processes]
          app = "bin/rails fly:server"
          worker = "bundle exec que"

        [[services]]
          protocol = "tcp"
          internal_port = 8080
          auto_stop_machines = true
          auto_start_machines = true
          min_machines_running = 1
          processes = ["app"]

          [[services.ports]]
            port = 80
            handlers = ["http"]
            force_https = true

          [[services.ports]]
            port = 443
            handlers = ["tls", "http"]
          [services.concurrency]
            type = "connections"
            hard_limit = 25
            soft_limit = 20

          [[services.tcp_checks]]
            interval = "15s"
            timeout = "2s"
            grace_period = "1s"

        [[statics]]
          guest_path = "/app/public"
          url_prefix = "/"
        ```
        
        Then you can run `fly launch --local-only --no-deploy` to launch the app. On subsequent deploys, instead of running `fly launch --local-only`, you will need to run `fly deploy --local-only`. Fly.io doesn't allow to pull private Docker images, which is why we need to use the `--local-only` flag.
    }
    

}
