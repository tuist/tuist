import Foundation

extension Multiplatform {
    public struct Project: Codable, Equatable {
        /// The name of the project. Also, the file name of the generated Xcode project.
        public let name: String
        /// The name of the organization used by Xcode as copyright.
        public let organizationName: String?
        /// The project options.
        public let options: ProjectDescription.Project.Options
        /// The Swift Packages used by the project.
        public let packages: [Package]
        /// The targets of the project.
        public let targets: [Target]
        /// The custom schemes for the project. Default schemes for each target are generated by default.
        public let schemes: [Scheme]
        /// The build settings and configuration for the project.
        public let settings: Settings?
        /// The custom file header template for Xcode built-in file templates.
        public let fileHeaderTemplate: FileHeaderTemplate?
        /// The additional files for the project. For target's additional files, see ``Target/additionalFiles``.
        public let additionalFiles: [FileElement]
        /// The resource synthesizers for the project to generate accessors for resources.
        public let resourceSynthesizers: [ResourceSynthesizer]

        public init(
            name: String,
            organizationName: String? = nil,
            options: ProjectDescription.Project.Options = .options(),
            packages: [Package] = [],
            settings: Settings? = nil,
            targets: [Target] = [],
            schemes: [Scheme] = [],
            fileHeaderTemplate: FileHeaderTemplate? = nil,
            additionalFiles: [FileElement] = [],
            resourceSynthesizers: [ResourceSynthesizer] = .default
        ) {
            self.name = name
            self.organizationName = organizationName
            self.options = options
            self.packages = packages
            self.targets = targets
            self.schemes = schemes
            self.settings = settings
            self.additionalFiles = additionalFiles
            self.fileHeaderTemplate = fileHeaderTemplate
            self.resourceSynthesizers = resourceSynthesizers
            dumpIfNeeded(self)
        }
    }
}
