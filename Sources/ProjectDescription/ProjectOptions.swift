import Foundation

extension Project {
    /// Options to configure a project.
    public struct Options: Codable, Equatable {
        /// Configures automatic target schemes generation.
        public var automaticSchemesOptions: AutomaticSchemesOptions = .enabled(),

        /// Configures the default known regions
        public var defaultKnownRegions: [String]? = nil

        /// Configures the development region.
        public var developmentRegion: String? = nil

        /// Disables generating Bundle accessors.
        public var disableBundleAccessors: Bool = false

        /// Suppress logging of environment in Run Script build phases.
        public var disableShowEnvironmentVarsInScriptPhases: Bool = false

        /// Disable synthesized resource accessors.
        public var disableSynthesizedResourceAccessors: Bool = false

        /// Configures text settings.
        public var textSettings: TextSettings = .init()

        /// Configures the name of the generated .xcodeproj.
        public var xcodeProjectName: String? = nil
    }
}

// MARK: - AutomaticSchemesOptions

extension Project.Options {
    /// Automatic schemes options allow customizing the generation of the target schemes.
    public enum AutomaticSchemesOptions: Codable, Equatable {
        /// Allows you to define what targets will be enabled for code coverage data gathering.
        public enum TargetSchemesGrouping: Codable, Equatable {
            /// Generate a single scheme for each project.
            case singleScheme

            /// Group schemes according to the suffix of their names.
            case byNameSuffix(build: Set<String>, test: Set<String>, run: Set<String>)

            /// Generate a scheme for each target.
            case notGrouped
        }

        /// Enable autogenerated schemes
        case enabled(
            targetSchemesGrouping: TargetSchemesGrouping = .byNameSuffix(
                build: ["Implementation", "Interface", "Mocks", "Testing"],
                test: ["Tests", "IntegrationTests", "UITests", "SnapshotTests"],
                run: ["App", "Demo"]
            ),
            codeCoverageEnabled: Bool = false,
            testingOptions: TestingOptions = [],
            testLanguage: SchemeLanguage? = nil,
            testRegion: String? = nil,
            testScreenCaptureFormat: ScreenCaptureFormat? = nil,
            runLanguage: SchemeLanguage? = nil,
            runRegion: String? = nil
        )

        /// Disable autogenerated schemes
        case disabled
    }

    /// The text settings options
    public struct TextSettings: Codable, Equatable {
        /// Whether tabs should be used instead of spaces
        public var usesTabs: Bool? = nil

        /// The width of space indent
        public var indentWidth: UInt? = nil

        /// The width of tab indent
        public var tabWidth: UInt? = nil

        /// Whether lines should be wrapped or not
        public var wrapsLines: Bool? = nil
    }
}
