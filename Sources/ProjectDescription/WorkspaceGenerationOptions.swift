extension Workspace {
    /// Contains options related to the workspace generation.
    public struct GenerationOptions: Codable, Equatable {
        /// Contains options for autogenerated workspace schemes
        public enum AutogeneratedWorkspaceSchemes: Codable, Equatable {
            /// Contains options for code coverage
            public enum CodeCoverageMode: Codable, Equatable {
                /// Gather code coverage for all targets
                case all
                /// Gather code coverage only for targets, that have code coverage enabled at least in one scheme
                case relevant
                /// Gather code coverage only for given targets
                case targets([TargetReference])
                /// Do not gather code coverage
                case disabled
            }

            /// Tuist will not automatically generate any schemes
            case disabled
            /// Tuist will generate schemes with the associated testing options
            case enabled(codeCoverageMode: CodeCoverageMode = .disabled, testingOptions: TestingOptions = [])
        }

        /// Tuist generates a WorkspaceSettings.xcsettings file, setting the related key to the associated value.
        public let enableAutomaticXcodeSchemes: Bool?

        /// Contains options for autogenerated workspace schemes
        public let autogeneratedWorkspaceSchemes: AutogeneratedWorkspaceSchemes

        public static func options(
            enableAutomaticXcodeSchemes: Bool? = false,
            autogeneratedWorkspaceSchemes: AutogeneratedWorkspaceSchemes = .enabled()
        ) -> Self {
            GenerationOptions(
                enableAutomaticXcodeSchemes: enableAutomaticXcodeSchemes,
                autogeneratedWorkspaceSchemes: autogeneratedWorkspaceSchemes
            )
        }
    }
}
