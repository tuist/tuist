import Foundation
import ProjectDescription
import TuistCore
import TuistGraph
import TuistSupport
import TuistSupportTesting
import XCTest

@testable import TuistLoader

final class WorkspaceGenerationOptionsManifestMapperTests: TuistTestCase {
    func test_from_whenAutomaticXcodeSchemeIsDefault() throws {
        // Given
        let temporaryPath = try temporaryPath()
        let generatorPaths = GeneratorPaths(manifestDirectory: temporaryPath)
        let manifest = ProjectDescription.Workspace.GenerationOptions.options(
            enableAutomaticXcodeSchemes: nil,
            autogeneratedWorkspaceSchemes: .disabled
        )

        // When
        let actual = try TuistGraph.Workspace.GenerationOptions.from(manifest: manifest, generatorPaths: generatorPaths)

        // Then
        XCTAssertEqual(actual, .init(enableAutomaticXcodeSchemes: nil, autogeneratedWorkspaceSchemes: .disabled))
    }

    func test_from_whenAutomaticXcodeSchemeIsDisabled() throws {
        // Given
        let temporaryPath = try temporaryPath()
        let generatorPaths = GeneratorPaths(manifestDirectory: temporaryPath)
        let manifest = ProjectDescription.Workspace.GenerationOptions.options(
            enableAutomaticXcodeSchemes: false,
            autogeneratedWorkspaceSchemes: .disabled
        )

        // When
        let actual = try TuistGraph.Workspace.GenerationOptions.from(manifest: manifest, generatorPaths: generatorPaths)

        // Then
        XCTAssertEqual(actual, .init(enableAutomaticXcodeSchemes: false, autogeneratedWorkspaceSchemes: .disabled))
    }

    func test_from_whenAutomaticXcodeSchemeIsEnabled() throws {
        // Given
        let temporaryPath = try temporaryPath()
        let generatorPaths = GeneratorPaths(manifestDirectory: temporaryPath)
        let manifest = ProjectDescription.Workspace.GenerationOptions.options(
            enableAutomaticXcodeSchemes: true,
            autogeneratedWorkspaceSchemes: .disabled
        )

        // When
        let actual = try TuistGraph.Workspace.GenerationOptions.from(manifest: manifest, generatorPaths: generatorPaths)

        // Then
        XCTAssertEqual(actual, .init(enableAutomaticXcodeSchemes: true, autogeneratedWorkspaceSchemes: .disabled))
    }

    func test_from_whenAutogenerationOptionsIsEnabled() throws {
        // Given
        let temporaryPath = try temporaryPath()
        let generatorPaths = GeneratorPaths(manifestDirectory: temporaryPath)
        let manifest = ProjectDescription.Workspace.GenerationOptions.options(
            enableAutomaticXcodeSchemes: true,
            autogeneratedWorkspaceSchemes: .enabled(
                codeCoverageMode: .all,
                testingOptions: [.parallelizable, .randomExecutionOrdering]
            )
        )

        // When
        let actual = try TuistGraph.Workspace.GenerationOptions.from(manifest: manifest, generatorPaths: generatorPaths)

        // Then
        XCTAssertEqual(
            actual,
            .init(
                enableAutomaticXcodeSchemes: true,
                autogeneratedWorkspaceSchemes: .enabled(
                    codeCoverageMode: .all,
                    testingOptions: [.parallelizable, .randomExecutionOrdering]
                )
            )
        )
    }
}
