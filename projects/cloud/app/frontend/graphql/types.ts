import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of AcceptInvitation */
export type AcceptInvitationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  token: Scalars['String'];
};

export type Account = {
  __typename?: 'Account';
  id: Scalars['ID'];
  name: Scalars['String'];
  owner: Owner;
  projects: Array<Project>;
};

/** Autogenerated input type of CancelInvite */
export type CancelInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  invitationId: Scalars['String'];
};

/** Autogenerated input type of ChangeRemoteCacheStorage */
export type ChangeRemoteCacheStorageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  projectId: Scalars['ID'];
};

/** Autogenerated input type of ChangeUserRole */
export type ChangeUserRoleInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  organizationId: Scalars['String'];
  role: Role;
  userId: Scalars['ID'];
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  accountId?: InputMaybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  organizationName?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of CreateS3Bucket */
export type CreateS3BucketInput = {
  accessKeyId: Scalars['String'];
  accountId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  region: Scalars['String'];
  secretAccessKey: Scalars['String'];
};

export type Invitation = {
  __typename?: 'Invitation';
  id: Scalars['ID'];
  inviteeEmail: Scalars['ID'];
  inviter: User;
  organization: Organization;
  token: Scalars['String'];
};

/** Autogenerated input type of InviteUser */
export type InviteUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  inviteeEmail: Scalars['String'];
  organizationId: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Accept invitation based on a token */
  acceptInvitation: Organization;
  /** Cancel invite for a user to a given organization */
  cancelInvite: Invitation;
  /** Change remote cache storage */
  changeRemoteCacheStorage: RemoteCacheStorage;
  /** Change role of a user for a given organization */
  changeUserRole: User;
  /** Creates a new project */
  createProject: Project;
  /** Create new S3 bucket */
  createS3Bucket: S3Bucket;
  /** Invite a user to a given organization */
  inviteUser: Invitation;
  /** Remove user from a given organization */
  removeUser: User;
  /** Resend invite for a user to a given organization */
  resendInvite: Invitation;
  /** Update S3 bucket */
  updateS3Bucket: S3Bucket;
};


export type MutationAcceptInvitationArgs = {
  input: AcceptInvitationInput;
};


export type MutationCancelInviteArgs = {
  input: CancelInviteInput;
};


export type MutationChangeRemoteCacheStorageArgs = {
  input: ChangeRemoteCacheStorageInput;
};


export type MutationChangeUserRoleArgs = {
  input: ChangeUserRoleInput;
};


export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};


export type MutationCreateS3BucketArgs = {
  input: CreateS3BucketInput;
};


export type MutationInviteUserArgs = {
  input: InviteUserInput;
};


export type MutationRemoveUserArgs = {
  input: RemoveUserInput;
};


export type MutationResendInviteArgs = {
  input: ResendInviteInput;
};


export type MutationUpdateS3BucketArgs = {
  input: UpdateS3BucketInput;
};

export type Organization = {
  __typename?: 'Organization';
  account: Account;
  admins: Array<User>;
  id: Scalars['ID'];
  invitations: Array<Invitation>;
  name: Scalars['String'];
  users: Array<User>;
};

export type Owner = Organization | User;

export type Project = {
  __typename?: 'Project';
  account: Account;
  id: Scalars['ID'];
  name: Scalars['String'];
  remoteCacheStorage?: Maybe<RemoteCacheStorage>;
  slug: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  /** Returns all tied accounts for the authenticated user */
  accounts: Array<Account>;
  /** Returns invitation for a given token */
  invitation: Invitation;
  /** Returns the authenticated user */
  me: User;
  /** Returns organization for a given name */
  organization?: Maybe<Organization>;
  /** Returns all available organizations for the authenticated user */
  organizations: Array<Organization>;
  /** Returns project for a given name and account name */
  project?: Maybe<Project>;
  /** Returns all available projects for the authenticated user */
  projects: Array<Project>;
  /** Returns S3 buckets for an account of a given name */
  s3Buckets: Array<S3Bucket>;
};


export type QueryInvitationArgs = {
  token: Scalars['String'];
};


export type QueryOrganizationArgs = {
  name: Scalars['String'];
};


export type QueryProjectArgs = {
  accountName: Scalars['String'];
  name: Scalars['String'];
};


export type QueryS3BucketsArgs = {
  accountName: Scalars['String'];
};

export type RemoteCacheStorage = S3Bucket;

/** Autogenerated input type of RemoveUser */
export type RemoveUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  organizationId: Scalars['String'];
  userId: Scalars['ID'];
};

/** Autogenerated input type of ResendInvite */
export type ResendInviteInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  invitationId: Scalars['String'];
};

export enum Role {
  Admin = 'admin',
  User = 'user'
}

export type S3Bucket = {
  __typename?: 'S3Bucket';
  accessKeyId: Scalars['String'];
  accountId: Scalars['ID'];
  id: Scalars['ID'];
  name: Scalars['String'];
  region: Scalars['String'];
  secretAccessKey?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateS3Bucket */
export type UpdateS3BucketInput = {
  accessKeyId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  region: Scalars['String'];
  secretAccessKey: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  account: Account;
  avatarUrl?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  id: Scalars['ID'];
  lastVisitedProject?: Maybe<Project>;
  organizations: Array<Organization>;
  projects: Array<Project>;
};

export type AcceptInvitationMutationVariables = Exact<{
  input: AcceptInvitationInput;
}>;


export type AcceptInvitationMutation = { __typename?: 'Mutation', acceptInvitation: { __typename?: 'Organization', account: { __typename?: 'Account', projects: Array<{ __typename?: 'Project', slug: string }> } } };

export type CancelInviteMutationVariables = Exact<{
  input: CancelInviteInput;
}>;


export type CancelInviteMutation = { __typename?: 'Mutation', cancelInvite: { __typename?: 'Invitation', id: string } };

export type ChangeRemoteCacheStorageMutationVariables = Exact<{
  input: ChangeRemoteCacheStorageInput;
}>;


export type ChangeRemoteCacheStorageMutation = { __typename?: 'Mutation', changeRemoteCacheStorage: { __typename?: 'S3Bucket', id: string, name: string, accessKeyId: string, secretAccessKey?: string | null, accountId: string, region: string } };

export type ChangeUserRoleMutationVariables = Exact<{
  input: ChangeUserRoleInput;
}>;


export type ChangeUserRoleMutation = { __typename?: 'Mutation', changeUserRole: { __typename?: 'User', id: string, email: string, avatarUrl?: string | null, account: { __typename?: 'Account', name: string } } };

export type CreateProjectMutationVariables = Exact<{
  input: CreateProjectInput;
}>;


export type CreateProjectMutation = { __typename?: 'Mutation', createProject: { __typename?: 'Project', slug: string } };

export type CreateS3BucketMutationVariables = Exact<{
  input: CreateS3BucketInput;
}>;


export type CreateS3BucketMutation = { __typename?: 'Mutation', createS3Bucket: { __typename?: 'S3Bucket', id: string, name: string, accessKeyId: string, secretAccessKey?: string | null, accountId: string, region: string } };

export type InvitationQueryVariables = Exact<{
  token: Scalars['String'];
}>;


export type InvitationQuery = { __typename?: 'Query', invitation: { __typename?: 'Invitation', inviteeEmail: string, id: string } };

export type InviteUserMutationVariables = Exact<{
  input: InviteUserInput;
}>;


export type InviteUserMutation = { __typename?: 'Mutation', inviteUser: { __typename?: 'Invitation', inviteeEmail: string, id: string } };

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, email: string, avatarUrl?: string | null, lastVisitedProject?: { __typename?: 'Project', slug: string } | null, projects: Array<{ __typename?: 'Project', name: string, slug: string }>, account: { __typename?: 'Account', name: string } } };

export type MyAccountsQueryVariables = Exact<{ [key: string]: never; }>;


export type MyAccountsQuery = { __typename?: 'Query', accounts: Array<{ __typename?: 'Account', id: string, name: string }> };

export type MyOrganizationsQueryVariables = Exact<{ [key: string]: never; }>;


export type MyOrganizationsQuery = { __typename?: 'Query', organizations: Array<{ __typename?: 'Organization', account: { __typename?: 'Account', name: string } }> };

export type OrganizationQueryVariables = Exact<{
  name: Scalars['String'];
}>;


export type OrganizationQuery = { __typename?: 'Query', organization?: { __typename?: 'Organization', id: string, users: Array<{ __typename?: 'User', id: string, email: string, avatarUrl?: string | null, account: { __typename?: 'Account', name: string } }>, admins: Array<{ __typename?: 'User', id: string, email: string, avatarUrl?: string | null, account: { __typename?: 'Account', name: string } }>, invitations: Array<{ __typename?: 'Invitation', inviteeEmail: string, id: string }> } | null };

export type PendingInvitationFragment = { __typename?: 'Invitation', inviteeEmail: string, id: string };

export type ProjectQueryVariables = Exact<{
  name: Scalars['String'];
  accountName: Scalars['String'];
}>;


export type ProjectQuery = { __typename?: 'Query', project?: { __typename?: 'Project', id: string, account: { __typename?: 'Account', id: string, name: string, owner: { __typename?: 'Organization', id: string } | { __typename?: 'User', id: string } }, remoteCacheStorage?: { __typename?: 'S3Bucket', id: string, name: string, accessKeyId: string, secretAccessKey?: string | null, accountId: string, region: string } | null } | null };

export type RemoveUserMutationVariables = Exact<{
  input: RemoveUserInput;
}>;


export type RemoveUserMutation = { __typename?: 'Mutation', removeUser: { __typename?: 'User', id: string, email: string, avatarUrl?: string | null, account: { __typename?: 'Account', name: string } } };

export type ResendInviteMutationVariables = Exact<{
  input: ResendInviteInput;
}>;


export type ResendInviteMutation = { __typename?: 'Mutation', resendInvite: { __typename?: 'Invitation', inviteeEmail: string } };

export type S3BucketInfoFragment = { __typename?: 'S3Bucket', id: string, name: string, accessKeyId: string, secretAccessKey?: string | null, accountId: string, region: string };

export type S3BucketsQueryVariables = Exact<{
  accountName: Scalars['String'];
}>;


export type S3BucketsQuery = { __typename?: 'Query', s3Buckets: Array<{ __typename?: 'S3Bucket', id: string, name: string, accessKeyId: string, secretAccessKey?: string | null, accountId: string, region: string }> };

export type UpdateS3BucketMutationVariables = Exact<{
  input: UpdateS3BucketInput;
}>;


export type UpdateS3BucketMutation = { __typename?: 'Mutation', updateS3Bucket: { __typename?: 'S3Bucket', id: string, name: string, accessKeyId: string, secretAccessKey?: string | null, accountId: string, region: string } };

export type UserBasicInfoFragment = { __typename?: 'User', id: string, email: string, avatarUrl?: string | null, account: { __typename?: 'Account', name: string } };

export const PendingInvitationFragmentDoc = gql`
    fragment PendingInvitation on Invitation {
  inviteeEmail
  id
}
    `;
export const S3BucketInfoFragmentDoc = gql`
    fragment S3BucketInfo on S3Bucket {
  id
  name
  accessKeyId
  secretAccessKey
  accountId
  region
}
    `;
export const UserBasicInfoFragmentDoc = gql`
    fragment UserBasicInfo on User {
  id
  email
  avatarUrl
  account {
    name
  }
}
    `;
export const AcceptInvitationDocument = gql`
    mutation AcceptInvitation($input: AcceptInvitationInput!) {
  acceptInvitation(input: $input) {
    account {
      projects {
        slug
      }
    }
  }
}
    `;
export type AcceptInvitationMutationFn = Apollo.MutationFunction<AcceptInvitationMutation, AcceptInvitationMutationVariables>;

/**
 * __useAcceptInvitationMutation__
 *
 * To run a mutation, you first call `useAcceptInvitationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAcceptInvitationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [acceptInvitationMutation, { data, loading, error }] = useAcceptInvitationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAcceptInvitationMutation(baseOptions?: Apollo.MutationHookOptions<AcceptInvitationMutation, AcceptInvitationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AcceptInvitationMutation, AcceptInvitationMutationVariables>(AcceptInvitationDocument, options);
      }
export type AcceptInvitationMutationHookResult = ReturnType<typeof useAcceptInvitationMutation>;
export type AcceptInvitationMutationResult = Apollo.MutationResult<AcceptInvitationMutation>;
export type AcceptInvitationMutationOptions = Apollo.BaseMutationOptions<AcceptInvitationMutation, AcceptInvitationMutationVariables>;
export const CancelInviteDocument = gql`
    mutation CancelInvite($input: CancelInviteInput!) {
  cancelInvite(input: $input) {
    id
  }
}
    `;
export type CancelInviteMutationFn = Apollo.MutationFunction<CancelInviteMutation, CancelInviteMutationVariables>;

/**
 * __useCancelInviteMutation__
 *
 * To run a mutation, you first call `useCancelInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCancelInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [cancelInviteMutation, { data, loading, error }] = useCancelInviteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCancelInviteMutation(baseOptions?: Apollo.MutationHookOptions<CancelInviteMutation, CancelInviteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CancelInviteMutation, CancelInviteMutationVariables>(CancelInviteDocument, options);
      }
export type CancelInviteMutationHookResult = ReturnType<typeof useCancelInviteMutation>;
export type CancelInviteMutationResult = Apollo.MutationResult<CancelInviteMutation>;
export type CancelInviteMutationOptions = Apollo.BaseMutationOptions<CancelInviteMutation, CancelInviteMutationVariables>;
export const ChangeRemoteCacheStorageDocument = gql`
    mutation ChangeRemoteCacheStorage($input: ChangeRemoteCacheStorageInput!) {
  changeRemoteCacheStorage(input: $input) {
    ... on S3Bucket {
      ...S3BucketInfo
    }
  }
}
    ${S3BucketInfoFragmentDoc}`;
export type ChangeRemoteCacheStorageMutationFn = Apollo.MutationFunction<ChangeRemoteCacheStorageMutation, ChangeRemoteCacheStorageMutationVariables>;

/**
 * __useChangeRemoteCacheStorageMutation__
 *
 * To run a mutation, you first call `useChangeRemoteCacheStorageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeRemoteCacheStorageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeRemoteCacheStorageMutation, { data, loading, error }] = useChangeRemoteCacheStorageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeRemoteCacheStorageMutation(baseOptions?: Apollo.MutationHookOptions<ChangeRemoteCacheStorageMutation, ChangeRemoteCacheStorageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeRemoteCacheStorageMutation, ChangeRemoteCacheStorageMutationVariables>(ChangeRemoteCacheStorageDocument, options);
      }
export type ChangeRemoteCacheStorageMutationHookResult = ReturnType<typeof useChangeRemoteCacheStorageMutation>;
export type ChangeRemoteCacheStorageMutationResult = Apollo.MutationResult<ChangeRemoteCacheStorageMutation>;
export type ChangeRemoteCacheStorageMutationOptions = Apollo.BaseMutationOptions<ChangeRemoteCacheStorageMutation, ChangeRemoteCacheStorageMutationVariables>;
export const ChangeUserRoleDocument = gql`
    mutation ChangeUserRole($input: ChangeUserRoleInput!) {
  changeUserRole(input: $input) {
    ...UserBasicInfo
  }
}
    ${UserBasicInfoFragmentDoc}`;
export type ChangeUserRoleMutationFn = Apollo.MutationFunction<ChangeUserRoleMutation, ChangeUserRoleMutationVariables>;

/**
 * __useChangeUserRoleMutation__
 *
 * To run a mutation, you first call `useChangeUserRoleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeUserRoleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeUserRoleMutation, { data, loading, error }] = useChangeUserRoleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeUserRoleMutation(baseOptions?: Apollo.MutationHookOptions<ChangeUserRoleMutation, ChangeUserRoleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChangeUserRoleMutation, ChangeUserRoleMutationVariables>(ChangeUserRoleDocument, options);
      }
export type ChangeUserRoleMutationHookResult = ReturnType<typeof useChangeUserRoleMutation>;
export type ChangeUserRoleMutationResult = Apollo.MutationResult<ChangeUserRoleMutation>;
export type ChangeUserRoleMutationOptions = Apollo.BaseMutationOptions<ChangeUserRoleMutation, ChangeUserRoleMutationVariables>;
export const CreateProjectDocument = gql`
    mutation CreateProject($input: CreateProjectInput!) {
  createProject(input: $input) {
    slug
  }
}
    `;
export type CreateProjectMutationFn = Apollo.MutationFunction<CreateProjectMutation, CreateProjectMutationVariables>;

/**
 * __useCreateProjectMutation__
 *
 * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateProjectMutation(baseOptions?: Apollo.MutationHookOptions<CreateProjectMutation, CreateProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, options);
      }
export type CreateProjectMutationHookResult = ReturnType<typeof useCreateProjectMutation>;
export type CreateProjectMutationResult = Apollo.MutationResult<CreateProjectMutation>;
export type CreateProjectMutationOptions = Apollo.BaseMutationOptions<CreateProjectMutation, CreateProjectMutationVariables>;
export const CreateS3BucketDocument = gql`
    mutation CreateS3Bucket($input: CreateS3BucketInput!) {
  createS3Bucket(input: $input) {
    ...S3BucketInfo
  }
}
    ${S3BucketInfoFragmentDoc}`;
export type CreateS3BucketMutationFn = Apollo.MutationFunction<CreateS3BucketMutation, CreateS3BucketMutationVariables>;

/**
 * __useCreateS3BucketMutation__
 *
 * To run a mutation, you first call `useCreateS3BucketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateS3BucketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createS3BucketMutation, { data, loading, error }] = useCreateS3BucketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateS3BucketMutation(baseOptions?: Apollo.MutationHookOptions<CreateS3BucketMutation, CreateS3BucketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateS3BucketMutation, CreateS3BucketMutationVariables>(CreateS3BucketDocument, options);
      }
export type CreateS3BucketMutationHookResult = ReturnType<typeof useCreateS3BucketMutation>;
export type CreateS3BucketMutationResult = Apollo.MutationResult<CreateS3BucketMutation>;
export type CreateS3BucketMutationOptions = Apollo.BaseMutationOptions<CreateS3BucketMutation, CreateS3BucketMutationVariables>;
export const InvitationDocument = gql`
    query Invitation($token: String!) {
  invitation(token: $token) {
    ...PendingInvitation
  }
}
    ${PendingInvitationFragmentDoc}`;

/**
 * __useInvitationQuery__
 *
 * To run a query within a React component, call `useInvitationQuery` and pass it any options that fit your needs.
 * When your component renders, `useInvitationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInvitationQuery({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */
export function useInvitationQuery(baseOptions: Apollo.QueryHookOptions<InvitationQuery, InvitationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<InvitationQuery, InvitationQueryVariables>(InvitationDocument, options);
      }
export function useInvitationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InvitationQuery, InvitationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<InvitationQuery, InvitationQueryVariables>(InvitationDocument, options);
        }
export type InvitationQueryHookResult = ReturnType<typeof useInvitationQuery>;
export type InvitationLazyQueryHookResult = ReturnType<typeof useInvitationLazyQuery>;
export type InvitationQueryResult = Apollo.QueryResult<InvitationQuery, InvitationQueryVariables>;
export const InviteUserDocument = gql`
    mutation InviteUser($input: InviteUserInput!) {
  inviteUser(input: $input) {
    ...PendingInvitation
  }
}
    ${PendingInvitationFragmentDoc}`;
export type InviteUserMutationFn = Apollo.MutationFunction<InviteUserMutation, InviteUserMutationVariables>;

/**
 * __useInviteUserMutation__
 *
 * To run a mutation, you first call `useInviteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInviteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [inviteUserMutation, { data, loading, error }] = useInviteUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useInviteUserMutation(baseOptions?: Apollo.MutationHookOptions<InviteUserMutation, InviteUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<InviteUserMutation, InviteUserMutationVariables>(InviteUserDocument, options);
      }
export type InviteUserMutationHookResult = ReturnType<typeof useInviteUserMutation>;
export type InviteUserMutationResult = Apollo.MutationResult<InviteUserMutation>;
export type InviteUserMutationOptions = Apollo.BaseMutationOptions<InviteUserMutation, InviteUserMutationVariables>;
export const MeDocument = gql`
    query Me {
  me {
    ...UserBasicInfo
    lastVisitedProject {
      slug
    }
    projects {
      name
      slug
    }
  }
}
    ${UserBasicInfoFragmentDoc}`;

/**
 * __useMeQuery__
 *
 * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);
      }
export function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);
        }
export type MeQueryHookResult = ReturnType<typeof useMeQuery>;
export type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;
export type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;
export const MyAccountsDocument = gql`
    query MyAccounts {
  accounts {
    id
    name
  }
}
    `;

/**
 * __useMyAccountsQuery__
 *
 * To run a query within a React component, call `useMyAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyAccountsQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyAccountsQuery(baseOptions?: Apollo.QueryHookOptions<MyAccountsQuery, MyAccountsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyAccountsQuery, MyAccountsQueryVariables>(MyAccountsDocument, options);
      }
export function useMyAccountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyAccountsQuery, MyAccountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyAccountsQuery, MyAccountsQueryVariables>(MyAccountsDocument, options);
        }
export type MyAccountsQueryHookResult = ReturnType<typeof useMyAccountsQuery>;
export type MyAccountsLazyQueryHookResult = ReturnType<typeof useMyAccountsLazyQuery>;
export type MyAccountsQueryResult = Apollo.QueryResult<MyAccountsQuery, MyAccountsQueryVariables>;
export const MyOrganizationsDocument = gql`
    query MyOrganizations {
  organizations {
    account {
      name
    }
  }
}
    `;

/**
 * __useMyOrganizationsQuery__
 *
 * To run a query within a React component, call `useMyOrganizationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyOrganizationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyOrganizationsQuery(baseOptions?: Apollo.QueryHookOptions<MyOrganizationsQuery, MyOrganizationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyOrganizationsQuery, MyOrganizationsQueryVariables>(MyOrganizationsDocument, options);
      }
export function useMyOrganizationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyOrganizationsQuery, MyOrganizationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyOrganizationsQuery, MyOrganizationsQueryVariables>(MyOrganizationsDocument, options);
        }
export type MyOrganizationsQueryHookResult = ReturnType<typeof useMyOrganizationsQuery>;
export type MyOrganizationsLazyQueryHookResult = ReturnType<typeof useMyOrganizationsLazyQuery>;
export type MyOrganizationsQueryResult = Apollo.QueryResult<MyOrganizationsQuery, MyOrganizationsQueryVariables>;
export const OrganizationDocument = gql`
    query Organization($name: String!) {
  organization(name: $name) {
    id
    users {
      ...UserBasicInfo
    }
    admins {
      ...UserBasicInfo
    }
    invitations {
      ...PendingInvitation
    }
  }
}
    ${UserBasicInfoFragmentDoc}
${PendingInvitationFragmentDoc}`;

/**
 * __useOrganizationQuery__
 *
 * To run a query within a React component, call `useOrganizationQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrganizationQuery({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useOrganizationQuery(baseOptions: Apollo.QueryHookOptions<OrganizationQuery, OrganizationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<OrganizationQuery, OrganizationQueryVariables>(OrganizationDocument, options);
      }
export function useOrganizationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrganizationQuery, OrganizationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<OrganizationQuery, OrganizationQueryVariables>(OrganizationDocument, options);
        }
export type OrganizationQueryHookResult = ReturnType<typeof useOrganizationQuery>;
export type OrganizationLazyQueryHookResult = ReturnType<typeof useOrganizationLazyQuery>;
export type OrganizationQueryResult = Apollo.QueryResult<OrganizationQuery, OrganizationQueryVariables>;
export const ProjectDocument = gql`
    query Project($name: String!, $accountName: String!) {
  project(name: $name, accountName: $accountName) {
    id
    account {
      id
      name
      owner {
        ... on Organization {
          id
        }
        ... on User {
          id
        }
      }
    }
    remoteCacheStorage {
      ... on S3Bucket {
        ...S3BucketInfo
      }
    }
  }
}
    ${S3BucketInfoFragmentDoc}`;

/**
 * __useProjectQuery__
 *
 * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectQuery({
 *   variables: {
 *      name: // value for 'name'
 *      accountName: // value for 'accountName'
 *   },
 * });
 */
export function useProjectQuery(baseOptions: Apollo.QueryHookOptions<ProjectQuery, ProjectQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, options);
      }
export function useProjectLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectQuery, ProjectQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, options);
        }
export type ProjectQueryHookResult = ReturnType<typeof useProjectQuery>;
export type ProjectLazyQueryHookResult = ReturnType<typeof useProjectLazyQuery>;
export type ProjectQueryResult = Apollo.QueryResult<ProjectQuery, ProjectQueryVariables>;
export const RemoveUserDocument = gql`
    mutation RemoveUser($input: RemoveUserInput!) {
  removeUser(input: $input) {
    ...UserBasicInfo
  }
}
    ${UserBasicInfoFragmentDoc}`;
export type RemoveUserMutationFn = Apollo.MutationFunction<RemoveUserMutation, RemoveUserMutationVariables>;

/**
 * __useRemoveUserMutation__
 *
 * To run a mutation, you first call `useRemoveUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeUserMutation, { data, loading, error }] = useRemoveUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRemoveUserMutation(baseOptions?: Apollo.MutationHookOptions<RemoveUserMutation, RemoveUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RemoveUserMutation, RemoveUserMutationVariables>(RemoveUserDocument, options);
      }
export type RemoveUserMutationHookResult = ReturnType<typeof useRemoveUserMutation>;
export type RemoveUserMutationResult = Apollo.MutationResult<RemoveUserMutation>;
export type RemoveUserMutationOptions = Apollo.BaseMutationOptions<RemoveUserMutation, RemoveUserMutationVariables>;
export const ResendInviteDocument = gql`
    mutation ResendInvite($input: ResendInviteInput!) {
  resendInvite(input: $input) {
    inviteeEmail
  }
}
    `;
export type ResendInviteMutationFn = Apollo.MutationFunction<ResendInviteMutation, ResendInviteMutationVariables>;

/**
 * __useResendInviteMutation__
 *
 * To run a mutation, you first call `useResendInviteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResendInviteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resendInviteMutation, { data, loading, error }] = useResendInviteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useResendInviteMutation(baseOptions?: Apollo.MutationHookOptions<ResendInviteMutation, ResendInviteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ResendInviteMutation, ResendInviteMutationVariables>(ResendInviteDocument, options);
      }
export type ResendInviteMutationHookResult = ReturnType<typeof useResendInviteMutation>;
export type ResendInviteMutationResult = Apollo.MutationResult<ResendInviteMutation>;
export type ResendInviteMutationOptions = Apollo.BaseMutationOptions<ResendInviteMutation, ResendInviteMutationVariables>;
export const S3BucketsDocument = gql`
    query S3Buckets($accountName: String!) {
  s3Buckets(accountName: $accountName) {
    ...S3BucketInfo
  }
}
    ${S3BucketInfoFragmentDoc}`;

/**
 * __useS3BucketsQuery__
 *
 * To run a query within a React component, call `useS3BucketsQuery` and pass it any options that fit your needs.
 * When your component renders, `useS3BucketsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useS3BucketsQuery({
 *   variables: {
 *      accountName: // value for 'accountName'
 *   },
 * });
 */
export function useS3BucketsQuery(baseOptions: Apollo.QueryHookOptions<S3BucketsQuery, S3BucketsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<S3BucketsQuery, S3BucketsQueryVariables>(S3BucketsDocument, options);
      }
export function useS3BucketsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<S3BucketsQuery, S3BucketsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<S3BucketsQuery, S3BucketsQueryVariables>(S3BucketsDocument, options);
        }
export type S3BucketsQueryHookResult = ReturnType<typeof useS3BucketsQuery>;
export type S3BucketsLazyQueryHookResult = ReturnType<typeof useS3BucketsLazyQuery>;
export type S3BucketsQueryResult = Apollo.QueryResult<S3BucketsQuery, S3BucketsQueryVariables>;
export const UpdateS3BucketDocument = gql`
    mutation UpdateS3Bucket($input: UpdateS3BucketInput!) {
  updateS3Bucket(input: $input) {
    ...S3BucketInfo
  }
}
    ${S3BucketInfoFragmentDoc}`;
export type UpdateS3BucketMutationFn = Apollo.MutationFunction<UpdateS3BucketMutation, UpdateS3BucketMutationVariables>;

/**
 * __useUpdateS3BucketMutation__
 *
 * To run a mutation, you first call `useUpdateS3BucketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateS3BucketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateS3BucketMutation, { data, loading, error }] = useUpdateS3BucketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateS3BucketMutation(baseOptions?: Apollo.MutationHookOptions<UpdateS3BucketMutation, UpdateS3BucketMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateS3BucketMutation, UpdateS3BucketMutationVariables>(UpdateS3BucketDocument, options);
      }
export type UpdateS3BucketMutationHookResult = ReturnType<typeof useUpdateS3BucketMutation>;
export type UpdateS3BucketMutationResult = Apollo.MutationResult<UpdateS3BucketMutation>;
export type UpdateS3BucketMutationOptions = Apollo.BaseMutationOptions<UpdateS3BucketMutation, UpdateS3BucketMutationVariables>;