type Account {
  id: ID!
  name: String!
  owner: Owner!
}

"""
Autogenerated input type of ChangeUserRole
"""
input ChangeUserRoleInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  organizationId: String!
  role: Role!
  userId: ID!
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  accountId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  organizationName: String
}

type Mutation {
  """
  Change role of a user for a given organization
  """
  changeUserRole(
    """
    Parameters for ChangeUserRole
    """
    input: ChangeUserRoleInput!
  ): User!

  """
  Creates a new project
  """
  createProject(
    """
    Parameters for CreateProject
    """
    input: CreateProjectInput!
  ): Project!
}

type Organization {
  account: Account!
  admins: [User!]!
  id: ID!
  users: [User!]!
}

union Owner = Organization | User

type Project {
  account: Account!
  id: ID!
  name: String!
  slug: String!
}

type Query {
  """
  Returns all tied accounts for the authenticated user
  """
  accounts: [Account!]!

  """
  Returns the authenticated user
  """
  me: User!

  """
  Returns organization for a given name
  """
  organization(name: String!): Organization

  """
  Returns all available organizations for the authenticated user
  """
  organizations: [Organization!]!

  """
  Returns project for a given name and account name
  """
  project(accountName: String!, name: String!): Project

  """
  Returns all available projects for the authenticated user
  """
  projects: [Project!]!
}

enum Role {
  admin
  user
}

type User {
  account: Account!
  avatarUrl: String
  email: String!
  id: ID!
  lastVisitedProject: Project
  organizations: [Organization!]!
  projects: [Project!]!
}
