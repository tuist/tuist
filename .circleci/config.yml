version: 2.1
orbs:
  multirepo: dnephin/multirepo@0.0.7
workflows:
  version: 2.1
  tuist-install:
    jobs:
      - tuist-install:
          context: tuist
  tuist-release-build:
    jobs:
      - tuist-release-build:
          context: tuist
  tuist-unit-tests:
    jobs:
      - tuist-unit-tests:
          context: tuist
  danger:
    jobs:
      - danger:
          context: tuist
  tuist-acceptance-tests:
    jobs:
      - tuist-acceptance-tests:
          context: tuist
  tuist-upload:
    jobs:
      - tuist-upload:
          context: tuist
  galaxy:
    jobs:
      - galaxy:
          context: tuist
      - galaxy-deploy:
          context: tuist
          requires:
            - galaxy
          filters:
            branches:
              only: master

jobs:
  tuist-install:
    macos:
      xcode: '11.1.0'
    steps:
      - checkout
      - multirepo/run-job-for-paths:
          paths: Sources/**/* .circleci/* Gemfile Gemfile.lock Rakefile Package.swift Package.resolved script/**/*
      - run:
          name: Install Tuist
          command: |
            ./script/install
            tuist --help
      - run:
          name: Uninstall Tuist
          command: |
            ./script/uninstall
  tuist-release-build:
    macos:
      xcode: '11.1.0'
    # To activate chruby, we must change the shell parameter of your job to be a login shell (adding --login).
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - multirepo/run-job-for-paths:
          paths: 'Sources/**/* .circleci/* Gemfile Gemfile.lock Rakefile Package.swift Package.resolved script/**/*'
      - run:
          name: Build for release
          command: |
            swift build -c release --product tuist
            swift build -c release --product tuistenv
  danger:
    macos:
      xcode: '11.1.0'
    # To activate chruby, we must change the shell parameter of your job to be a login shell (adding --login).
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - restore_cache:
          key: bundler-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Dependencies
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install swiftformat
            bundle install --local || bundle package
            ./.circleci/setup-brew-dependencies.sh
      - run:
          name: Run Danger
          command: bundle exec danger
      - save_cache:
          key: bundler-{{ checksum "Gemfile.lock" }}
          paths:
            - 'vendor'
  tuist-acceptance-tests:
    macos:
      xcode: '11.1.0'
    # To activate chruby, we must change the shell parameter of your job to be a login shell (adding --login).
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - multirepo/run-job-for-paths:
          paths: 'Sources/**/* .circleci/* Gemfile Gemfile.lock Rakefile Package.swift Package.resolved script/**/* fixtures/**/* features/**/*'
      - restore_cache:
          key: bundler-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Dependencies
          command: |
            bundle install --local || bundle package
      - run:
          name: Run acceptance tests
          command: bundle exec rake features
      - save_cache:
          key: bundler-{{ checksum "Gemfile.lock" }}
          paths:
            - 'vendor'
  tuist-upload:
    macos:
      xcode: '11.1.0'
    # To activate chruby, we must change the shell parameter of your job to be a login shell (adding --login).
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - restore_cache:
          key: bundler-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install Dependencies
          command: |
            bundle install --local || bundle package
      - run:
          name: Package build and upload it to GCS
          command: |
            bundle exec rake package_commit
      - save_cache:
          key: bundler-{{ checksum "Gemfile.lock" }}
          paths:
            - 'vendor'
  tuist-unit-tests:
    macos:
      xcode: '11.1.0'
    # To activate chruby, we must change the shell parameter of your job to be a login shell (adding --login).
    shell: /bin/bash --login -eo pipefail
    steps:
      - checkout
      - multirepo/run-job-for-paths:
          paths: 'Sources/**/* Tests/**/* .circleci/* Gemfile Gemfile.lock Rakefile Package.swift Package.resolved'
      - run:
          name: Generate Xcode project
          command: |
            swift package generate-xcodeproj
      - run:
          name: Run unit tests
          command: xcodebuild test -scheme tuist-Package -enableCodeCoverage YES
      - run:
          name: Send test coverage report
          command: bash <(curl -s https://codecov.io/bash)

  # Reference https://gist.github.com/Virolea/b589e7bd128ed53b9080583d1213e71f
  # Reference https://robots.thoughtbot.com/circleci-2-rails
  galaxy:
    docker:
      - image: circleci/ruby:2.6.3-node
        environment:
          RAILS_ENV: test
          BUNDLER_VERSION: 2.0.2

      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: runner
          POSTGRES_DB: test_db
          POSTGRES_PASSWORD: ''

      - image: redis:4.0.6

    working_directory: ~/repo/galaxy
    steps:
      - checkout:
          path: ~/repo

      - multirepo/run-job-for-paths:
          paths: 'galaxy/**/* .circleci/**/*'

      - run:
          name: Update Bundler
          command: |
            gem update bundler

      - restore_cache:
          name: Restore Bundler Cache
          keys:
            - bundler-galaxy-{{ checksum "Gemfile.lock" }}
            - bundler-galaxy

      - run:
          name: Install Bundler dependencies
          command: |
            sudo apt-get install -y cmake
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          name: Save Bundler Cache
          paths:
            - ./vendor/bundle
          key: bundler-galaxy-{{ checksum "Gemfile.lock" }}

      - run:
          name: Rails tests
          command: |
            cp config/database.yml.ci config/database.yml
            bundle exec rake db:create
            bundle exec rails db:schema:load
            bundle exec rake test

  galaxy-deploy:
    docker:
      - image: buildpack-deps:trusty
    working_directory: ~/repo/galaxy
    steps:
      - checkout:
          path: ~/repo
      - multirepo/run-job-for-paths:
          paths: 'galaxy/**/* .circleci/**/*'
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
