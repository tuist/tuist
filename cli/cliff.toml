# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[bump]
initial_tag = "4.55.6"

[remote.github]
owner = "tuist"
repo = "tuist"

[changelog]
# template for the changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
## What's Changed

{%- if version %} in {{ version }}{%- endif -%}
<!-- RELEASE NOTES START -->
{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | striptags | trim }}
{% for commit in commits %}
  {% if commit.github.pr_title -%}
    {%- set commit_message = commit.github.pr_title -%}
  {%- else -%}
    {%- set commit_message = commit.message -%}
  {%- endif -%}
  * {{ commit_message | split(pat="\n") | first | trim }}\
    {% if commit.github.username %} by [@{{ commit.github.username }}](https://github.com/{{ commit.github.username }}){%- endif -%}
    {% if commit.github.pr_number %} in \
      [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{% endfor %}

{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  {% raw %}\n{% endraw -%}
  ## New Contributors
{%- endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * [@{{ contributor.username }}](https://github.com/{{ contributor.username }}) made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif -%}

{% if version %}
    {% if previous.version %}
      **Full Changelog**: {{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}
    {% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}

{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# postprocessors
postprocessors = [
    # Remove commit type prefix from changelog entries
    { pattern = '\* (feat|fix|docs?|perf|refactor|style|test|chore|ci)(\([^)]*\))?:\s*', replace = "* " },
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    # Include commits with (cli) scope
    { message = "^feat\\(cli\\)", group = "<!-- 0 -->‚õ∞Ô∏è  Features" },
    { message = "^fix\\(cli\\)", group = "<!-- 1 -->üêõ Bug Fixes" },
    { message = "^docs?\\(cli\\)", group = "<!-- 3 -->üìö Documentation" },
    { message = "^perf\\(cli\\)", group = "<!-- 4 -->‚ö° Performance" },
    { message = "^refactor\\(cli\\)", group = "<!-- 2 -->üöú Refactor" },
    { message = "^style\\(cli\\)", group = "<!-- 5 -->üé® Styling" },
    { message = "^test\\(cli\\)", group = "<!-- 6 -->üß™ Testing" },
    { message = "^chore\\(cli\\)", skip = true },
    { message = "^ci\\(cli\\)", skip = true },
    # Skip any other scoped commits
    { message = "^[a-z]+\\([^)]+\\)", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "^[0-9].*$"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
