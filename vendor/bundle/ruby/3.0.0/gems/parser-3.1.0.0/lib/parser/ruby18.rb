# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby18 < Parser::Base


  def version
    18
  end

  def default_encoding
    Encoding::BINARY
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-277,197,198,197,198,491,-87,-277,-277,-277,513,544,580,-277,-277,-85',
'-277,-61,74,581,533,560,491,491,523,-80,75,-427,-84,504,-428,736,608',
'505,-427,-277,-277,-428,-277,-277,-277,-277,-277,491,491,570,692,-82',
'-83,-81,-86,-429,693,537,-76,559,-69,-84,-429,197,198,293,-74,-277,-277',
'-277,-277,-277,-277,-277,-277,-277,-277,-277,-277,-277,-277,-479,261',
'-277,-277,-277,532,551,525,524,528,-277,538,101,-277,293,-82,623,100',
'-277,540,-277,-84,-277,-277,-277,-277,-277,-277,-277,-482,-277,-79,-277',
'-478,724,512,-482,-482,-482,101,-77,490,-482,-482,100,-482,-277,-277',
'-74,-77,-72,-277,-85,-76,-482,101,101,101,490,490,100,100,100,623,-482',
'-482,-74,-482,-482,-482,-482,-482,-74,-75,-73,-78,397,101,101,490,490',
'623,100,100,260,261,497,-74,498,560,-74,-76,-482,-482,-482,-482,-482',
'-482,-482,-482,-482,-482,-482,-482,-482,-482,261,580,-482,-482,-482',
'-259,548,101,581,622,-482,-431,100,-482,465,523,-87,559,-482,523,-482',
'542,-482,-482,-482,-482,-482,-482,-482,-226,-482,-482,-482,608,256,498',
'-226,-226,-226,-479,256,-226,-226,-226,433,-226,-482,-482,-76,-75,293',
'-482,-83,363,101,-226,622,-80,560,100,-86,256,260,523,-226,-226,-76',
'-226,-226,-226,-226,-226,101,523,622,525,524,100,827,525,524,529,816',
'260,217,675,715,-76,-479,523,-76,770,559,465,-423,-479,197,198,217,-482',
'-479,-423,-419,-226,-479,-272,101,217,560,-419,-226,100,-272,-272,-272',
'256,-226,-272,-272,-272,196,-272,-479,525,524,526,217,661,660,664,663',
'-272,-272,525,524,521,-78,-81,-226,-86,-272,-272,559,-272,-272,-272',
'-272,-272,-482,525,524,534,-226,828,-226,-482,101,-226,-424,829,-478',
'100,101,-79,-482,-424,-87,100,-272,-272,-272,-272,-272,-272,-272,-272',
'-272,-272,-272,-272,-272,-272,-482,-482,-272,-272,-272,-271,101,-272',
'286,287,-272,100,-271,-272,-272,-431,-272,570,-272,570,-272,-271,-272',
'-272,-272,-272,-272,-272,-272,-226,-272,-475,-272,682,-476,543,-226',
'-226,-226,736,608,-226,-226,-226,-478,-226,-272,-272,-272,-272,-482',
'-272,253,518,577,-226,293,-482,-72,254,519,-80,-478,-482,-226,-226,-482',
'-226,-226,-226,-226,-226,101,463,464,816,-73,100,-74,-81,-419,-82,-278',
'-423,-482,479,582,-419,478,-278,-423,236,-475,-478,217,-476,-419,-279',
'-278,-423,-478,-426,360,-226,-279,-478,362,361,-426,-478,-226,831,-482',
'-279,-475,256,-226,-476,194,-482,661,660,664,663,-478,195,214,-478,-482',
'-319,216,215,212,213,193,592,-319,657,-226,655,654,653,656,-430,593',
'-319,-482,-479,-479,-479,-430,-479,-226,-69,-226,-479,-479,-226,479',
'-430,-479,481,-479,-479,-479,-479,-479,-479,-479,479,664,663,484,-479',
'-479,-479,-479,-479,-479,-479,217,594,661,660,664,663,832,479,217,-479',
'481,471,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-425,-479',
'-479,-479,-479,-479,834,-425,669,670,214,671,95,96,216,215,212,213,214',
'197,198,882,216,215,837,-479,551,570,-479,-479,608,-479,-479,197,198',
'-479,-277,-479,189,-479,293,-479,657,-277,655,654,653,656,-479,-479',
'841,842,-277,351,-479,-479,-479,-479,-479,-479,618,498,626,-479,-479',
'-478,-478,-478,217,-478,848,849,-85,-478,-478,674,677,850,-478,760,-478',
'-478,-478,-478,-478,-478,-478,661,660,664,663,-478,-478,-478,-478,-478',
'-478,-478,760,761,214,438,885,438,216,215,188,-478,293,695,-478,-478',
'-478,-478,-478,-478,-478,-478,-478,-478,-277,-478,-478,-478,-478,-478',
'459,-277,-271,760,706,-279,-479,460,468,-271,-277,433,-279,433,245,469',
'458,709,-271,-478,694,-279,-478,-478,395,-478,-478,710,863,-478,-278',
'-478,717,-478,887,-478,657,-278,655,654,653,656,719,-478,285,723,-278',
'256,-478,-478,-478,-478,-478,-478,256,500,217,-478,-478,67,68,64,501',
'51,217,726,-83,56,57,284,-259,499,60,647,58,59,61,23,24,65,66,661,660',
'664,663,22,28,27,90,89,91,92,730,732,17,608,740,741,742,539,888,41,745',
'570,94,93,84,50,86,85,88,87,95,96,747,82,83,38,39,37,217,221,226,227',
'228,223,225,233,234,229,230,-430,210,211,509,751,231,232,-430,202,755',
'507,206,757,760,52,53,-430,761,54,508,762,214,763,220,40,216,215,212',
'213,224,222,218,18,219,765,236,-260,81,74,76,77,78,79,820,393,570,75',
'80,473,101,235,394,-215,771,100,67,68,64,7,51,395,398,825,56,57,399',
'779,780,60,826,58,59,61,23,24,65,66,570,824,97,570,22,28,27,90,89,91',
'92,256,256,17,103,104,105,106,107,6,41,8,9,94,93,84,50,86,85,88,87,95',
'96,-277,82,83,38,39,37,-278,-277,236,876,877,570,-479,-278,792,793,-277',
'103,104,105,106,107,-278,794,878,36,799,801,30,192,428,52,53,430,191',
'54,433,32,438,807,-60,40,657,396,655,654,653,656,453,18,454,455,190',
'461,81,74,76,77,78,79,265,293,256,75,80,67,68,64,466,51,467,353,217',
'56,57,809,473,474,60,647,58,59,61,248,249,65,66,661,660,664,663,247',
'277,281,90,89,91,92,103,104,105,106,107,293,293,483,486,278,353,502',
'94,93,84,50,86,85,88,87,95,96,503,82,83,,,282,217,221,226,227,228,223',
'225,233,,229,230,,,,,,231,232,,774,,,206,,,52,53,,,54,,,214,,220,,216',
'215,212,213,224,222,218,,219,,,,81,74,76,77,78,79,,,,75,80,,67,68,64',
'857,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89',
'91,92,,,,,,,,539,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,217',
'221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232,,774,,,206',
',,52,53,,,54,,,214,,220,,216,215,212,213,224,222,218,,219,,,,81,74,76',
'77,78,79,,,,75,80,,,235,,777,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61',
'23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,217,-499,-499,-499,-499,223,225,,',
'-499,-499,,,,,,231,232,,36,,,267,,,52,53,,,54,,32,214,,220,40,216,215',
'212,213,224,222,218,18,219,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64',
'7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217',
'-499,-499,-499,-499,223,225,,,-499,-499,,,,,,231,232,,36,,,30,,,52,53',
',,54,,32,214,,220,40,216,215,212,213,224,222,218,18,219,,,,81,74,76',
'77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65',
'66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88',
'87,95,96,,82,83,38,39,37,217,-499,-499,-499,-499,223,225,,,-499,-499',
',,,,,231,232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215,212,213,224',
'222,218,18,219,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57',
',,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41',
'8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217,221,226,227,228',
'223,225,233,234,229,230,,-499,-499,,,231,232,,36,,,30,,,52,53,,,54,',
'32,214,,220,40,216,215,212,213,224,222,218,18,219,,,,81,74,76,77,78',
'79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,217,-499,-499,-499,-499,223,225,,,-499,-499,,,,,',
'231,232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215,212,213,224,222',
'218,18,219,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,',
',60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8',
'9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217,,,,,,,,,,,,,,,,231',
'232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215,212,213,,,218,18,219',
',,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59',
'61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84',
'50,86,85,88,87,95,96,,82,83,38,39,37,217,-499,-499,-499,-499,223,225',
',,-499,-499,,,,,,231,232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215',
'212,213,224,222,218,18,219,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64',
'7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217',
'221,226,227,228,223,225,233,234,229,230,,-499,-499,,,231,232,,36,,,30',
',,52,53,,,54,,32,214,,220,40,216,215,212,213,224,222,218,18,219,,,,81',
'74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23',
'24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86',
'85,88,87,95,96,,82,83,38,39,37,217,,,,,,,,,,,,,,,,231,232,,36,,,30,',
',52,53,,,54,,32,214,,220,40,216,215,212,213,,,218,18,219,,,,81,74,76',
'77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65',
'66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88',
'87,95,96,,82,83,38,39,37,217,221,226,227,228,223,225,,,229,230,,,,,',
'231,232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215,212,213,224,222',
'218,18,219,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,',
',60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8',
'9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217,,,,,,,,,,,,,,,,231',
'232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215,212,213,,,218,18,219',
',,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59',
'61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84',
'50,86,85,88,87,95,96,,82,83,38,39,37,217,-499,-499,-499,-499,223,225',
',,-499,-499,,,,,,231,232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215',
'212,213,224,222,218,18,219,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64',
'7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217',
',,,,,,,,,,,,,,,231,232,,36,,,30,,,52,53,,,54,,32,214,,220,40,216,215',
'212,213,,,218,18,219,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,',
',,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,',
',,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217,,,,,,',
',,,,,,,,,231,232,,36,,,267,,,52,53,,,54,,32,214,,220,40,216,215,212',
'213,,,,18,,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,',
',60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8',
'9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,217,,,,,,,,,,,,,,,,231',
'232,,36,,,267,,,52,53,,,54,,32,214,,220,40,216,215,212,213,,,,18,,,',
',81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61',
'23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,217,,,,,,,,,,,,,,,,231,232,,36,,,30',
',,52,53,,,54,,32,214,,,40,216,215,212,213,,,,18,,,,,81,74,76,77,78,79',
',,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,',
',,,,18,,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30',
',,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,5,67',
'68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74',
'76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24',
'65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85',
'88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54',
',32,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,',
',,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,',
',,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,',
',,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77,78',
'79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40',
',,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,',
',60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8',
'9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36',
',,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80',
'5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90',
'89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,',
',,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61',
'23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53',
',,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7',
'51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17',
',,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77',
'78,79,,,,75,80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87',
'95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,',
',40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,5,67,68,64,7,51,,,,56,57',
',,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41',
'8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,',
',36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75',
'80,5,67,68,64,7,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27',
'90,89,91,92,,,17,,,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18',
',,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52',
'53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,7',
'51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17',
',,,,,6,41,8,9,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77',
'78,79,,,,75,80,155,166,156,179,152,172,162,161,182,183,177,160,159,154',
'180,184,185,164,153,167,171,173,165,158,,,174,181,176,175,168,178,163',
'151,170,169,,,,,,150,157,148,149,146,147,111,113,110,,112,,,,,,,141',
'142,,139,123,124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,',
',136,135,,122,140,138,137,133,134,129,127,120,,121,,,145,81,,,,,,,,',
',80,155,166,156,179,152,172,162,161,182,183,177,160,159,154,180,184',
'185,164,153,167,171,173,165,158,,,174,181,176,175,168,178,163,151,170',
'169,,,,,,150,157,148,149,146,147,111,113,,,112,,,,,,,141,142,,139,123',
'124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122',
'140,138,137,133,134,129,127,120,,121,,,145,81,,,67,68,64,,51,,,80,56',
'57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89',
'91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74',
'76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65',
'66,,,,,247,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,243,,245',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,28,27,90,89,91,92,,,,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,243,,245,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,',
',75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,28',
'27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,243,,245,,40,,,,,,',
',209,,,,,81,74,76,77,78,79,,,,75,80,-249,-249,-249,,-249,,,,-249,-249',
',,,-249,,-249,-249,-249,-249,-249,-249,-249,,,,,-249,-249,-249,-249',
'-249,-249,-249,,,,,,,,,,-249,,,-249,-249,-249,-249,-249,-249,-249,-249',
'-249,-249,,-249,-249,-249,-249,-249,,,,,,,,,,,,,,,,,,,,-249,,,-249,256',
',-249,-249,,,-249,,-249,,-249,,-249,,,,,,,,-249,,,,,-249,-249,-249,-249',
'-249,-249,,,,-249,-249,-249,-249,-249,,-249,,,,-249,-249,,,,-249,,-249',
'-249,-249,-249,-249,-249,-249,,,,,-249,-249,-249,-249,-249,-249,-249',
',,,,,,,,,-249,,,-249,-249,-249,-249,-249,-249,-249,-249,-249,-249,,-249',
'-249,-249,-249,-249,,,,,,,,,,,,,,,,,,,,-249,,,-249,265,,-249,-249,,',
'-249,,-249,,-249,,-249,,,,,,,,-249,,,,,-249,-249,-249,-249,-249,-249',
',,,-249,-249,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,',
',247,277,281,90,89,91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96',
',82,83,,,282,,217,221,226,227,228,223,225,233,234,229,230,,210,211,',
',231,232,275,,,272,,,52,53,,,54,,271,,214,,220,,216,215,212,213,224',
'222,218,,219,,,81,74,76,77,78,79,,,,75,80,67,68,64,235,51,570,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,278',
',,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,,217,221,226,227,228,223',
'225,233,234,229,230,,210,211,,,231,232,275,,,206,,,52,53,,,54,,,,214',
',220,,216,215,212,213,224,222,218,,219,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,235,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,',
'81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248',
'249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85',
'88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54',
',,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28',
'27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,18',
',,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86',
'85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53',
',,54,,301,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,',
'51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92',
',,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,',
'58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89',
'91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,,217',
'221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232,317,,,30',
',,52,53,,,54,,32,,214,,220,,216,215,212,213,224,222,218,,219,,,81,74',
'76,77,78,79,,,,75,80,67,68,64,235,51,,,,56,57,,,,60,,58,59,61,248,249',
'65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,278,,,94,93,322,50,86,85',
'323,87,95,96,,82,83,,,282,,217,221,226,227,228,223,225,233,234,229,230',
',210,211,,329,231,232,324,,,206,,,52,53,,,54,,,,214,,220,,216,215,212',
'213,224,222,218,,219,,,81,74,76,77,78,79,,,,75,80,67,68,64,235,51,,',
',56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,',
',,,,,,278,,,94,93,322,50,86,85,323,87,95,96,,82,83,,,282,,217,221,226',
'227,228,223,225,233,234,229,230,,210,211,,,231,232,324,,,206,,,52,53',
',,54,,,,214,,220,,216,215,212,213,224,222,218,,219,,,81,74,76,77,78',
'79,,,,75,80,-475,-475,-475,235,-475,,,,-475,-475,,,,-475,,-475,-475',
'-475,-475,-475,-475,-475,,-475,,,-475,-475,-475,-475,-475,-475,-475',
',,,,,,,,,-475,,,-475,-475,-475,-475,-475,-475,-475,-475,-475,-475,,-475',
'-475,-475,-475,-475,,,,,,,,,,,,,,,,,,,,-475,,,-475,-475,,-475,-475,',
',-475,,-475,,-475,,-475,,,,,,,,-475,,-475,,,-475,-475,-475,-475,-475',
'-475,,,,-475,-475,-476,-476,-476,,-476,,,,-476,-476,,,,-476,,-476,-476',
'-476,-476,-476,-476,-476,,-476,,,-476,-476,-476,-476,-476,-476,-476',
',,,,,,,,,-476,,,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476,,-476',
'-476,-476,-476,-476,,,,,,,,,,,,,,,,,,,,-476,,,-476,-476,,-476,-476,',
',-476,,-476,,-476,,-476,,,,,,,,-476,,-476,,,-476,-476,-476,-476,-476',
'-476,,,,-476,-476,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40',
',,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92',
',,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,',
',,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,7,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30',
',,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92',
',,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,202,,,206,,,52,53,,,54,,371,,,,40,,,,,,,,209,,,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,371,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84',
'50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,',
'52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64',
',51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,28,27,90,89,91,92',
',,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,202,,,206,,,52,53,,,54,,301,,,,40,,,,,,,,209,,,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,',
',,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92',
',,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,',
',,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,',
',,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67',
'68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90',
'89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81',
'74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249',
'65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88',
'87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,',
',,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247',
'277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82',
'83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,',
',209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58',
'59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89',
'91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74',
'76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65',
'66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87',
'95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,',
'81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248',
'249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85',
'88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54',
',,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247',
'277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82',
'83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,',
',209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58',
'59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89',
'91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74',
'76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65',
'66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87',
'95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,',
'81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248',
'249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85',
'88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54',
',,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247',
'277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82',
'83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,',
',209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58',
'59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89',
'91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74',
'76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65',
'66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87',
'95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,',
'81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248',
'249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85',
'88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54',
',,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247',
'28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,243,,245,,40,,,',
',,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,',
'58,59,61,248,249,65,66,,,,,247,28,27,90,89,91,92,,,,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,447,53,,,54,,243,,245,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,28,27,90',
'89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,202,,,206,,451,52,53,,,54,,243,,245,,40,,,,,,,,209',
',,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,278,,,94,93,84,50',
'86,85,88,87,95,96,,82,83,,,282,,217,221,226,227,228,223,225,233,234',
'229,230,,210,211,,,231,232,275,,,206,,,52,53,,,54,,,,214,,220,,216,215',
'212,213,224,222,218,,219,,,81,74,76,77,78,79,,,,75,80,67,68,64,235,51',
',,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,',
',,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,',
',,,,,,,,,,202,,,206,471,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66',
',,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92',
',,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,',
',,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,',
',22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,',
'58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,155,166',
'156,179,152,172,162,161,182,183,177,160,159,154,180,184,185,164,153',
'167,171,173,165,158,,,174,181,176,175,168,178,163,151,170,169,,,,,,150',
'157,148,149,146,147,111,113,,,112,,,,,,,141,142,,139,123,124,125,,128',
'130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122,140,138,137',
'133,134,129,127,120,,121,,,145,81,,,-249,-249,-249,,-249,,,80,-249,-249',
',,,-249,,-249,-249,-249,-249,-249,-249,-249,,,,,-249,-249,-249,-249',
'-249,-249,-249,,,,,,,,,,-249,,,-249,-249,-249,-249,-249,-249,-249,-249',
'-249,-249,,-249,-249,-249,-249,-249,,,,,,,,,,,,,,,,,,,,-249,,,-249,256',
',-249,-249,,,-249,,-249,,-249,,-249,,,,,,,,-249,,,,,-249,-249,-249,-249',
'-249,-249,,,,-249,-249,-480,-480,-480,,-480,,,,-480,-480,,,,-480,,-480',
'-480,-480,-480,-480,-480,-480,,,,,-480,-480,-480,-480,-480,-480,-480',
',,,,,,,,,-480,,,-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,,-480',
'-480,-480,-480,-480,,,,,,,,,,,,,,,,,,,,-480,,,-480,-480,,-480,-480,',
',-480,,-480,,-480,,-480,,,,,,,,-480,,,,,-480,-480,-480,-480,-480,-480',
',,,-480,-480,-481,-481,-481,,-481,,,,-481,-481,,,,-481,,-481,-481,-481',
'-481,-481,-481,-481,,,,,-481,-481,-481,-481,-481,-481,-481,,,,,,,,,',
'-481,,,-481,-481,-481,-481,-481,-481,-481,-481,-481,-481,,-481,-481',
'-481,-481,-481,,,,,,,,,,,,,,,,,,,,-481,,,-481,-481,,-481,-481,,,-481',
',-481,,-481,,-481,,,,,,,,-481,,,,,-481,-481,-481,-481,-481,-481,,,,-481',
'-481,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,28',
'27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,301,,,,40,,,,,,,,209',
',,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52',
'53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,',
'51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92',
',,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,',
',,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,562,,245,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75',
'80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,566,,245,,40,,,,,,,,209',
',,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52',
'53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,',
'51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17',
',,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,202,,,206,,,52,53,,,54,,586,,245,,40,,,,,,,,18,,,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66',
',,,,247,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,301,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67',
'68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90',
'89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81',
'74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249',
'65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88',
'87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,',
',,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,371,,,,40,,,,,,,,209,',
',,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52',
'53,,,54,,614,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64',
',51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91',
'92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,',
',,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66',
',,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,630,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,28,27,90',
'89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,301,,,,40,,,,,,,,209,,,,',
'81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248',
'249,65,66,,,,,247,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85',
'88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54',
',301,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,',
',56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,',
',,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,',
',,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79',
',,,75,80,155,166,156,179,152,172,162,161,182,183,177,160,159,154,180',
'184,185,164,153,167,171,173,165,158,,,174,181,176,175,168,178,163,151',
'170,169,,,,,,150,157,148,149,146,147,111,113,,,112,,,,,,,141,142,,139',
'123,124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135',
',122,140,138,137,133,134,129,127,120,,121,,,145,81,,,67,68,64,,51,,',
'80,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,',
',,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,',
',,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,',
',,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,681,,',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67',
'68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91',
'92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,',
',,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66',
',,,,22,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,',
',,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67',
'68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90',
'89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81',
'74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249',
'65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88',
'87,95,96,,82,83,,,282,,,,,,,,,,,,,,,,,,,,275,,,272,,,52,53,,,54,,699',
',700,,,,,,,,,701,,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247',
'277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82',
'83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,',
',209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58',
'59,61,248,249,65,66,,,,,247,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84',
'50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,',
'52,53,,,54,,562,,245,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67',
'68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90',
'89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81',
'74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249',
'65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88',
'87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,',
',,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28',
'27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,18',
',,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52',
'53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,',
'51,,,,56,57,,,,60,,58,59,61,23,24,65,66,,,,,22,28,27,90,89,91,92,,,',
',,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78',
'79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,',
'247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,',
',,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67',
'68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90',
'89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81',
'74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249',
'65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88',
'87,95,96,,82,83,,,282,,217,221,226,227,228,223,225,233,234,229,230,',
'210,211,,,231,232,774,,,206,,,52,53,,,54,,,,214,,220,,216,215,212,213',
'224,222,218,,219,,,81,74,76,77,78,79,,,,75,80,67,68,64,235,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,782,,245,,40,,,,,,,,209,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,',
',,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,788,,245',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,790,,245,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,',
',75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277',
'281,90,89,91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83',
',,282,,217,221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232',
'774,,,206,,,52,53,,,54,,,,214,,220,,216,215,212,213,224,222,218,,219',
',,81,74,76,77,78,79,,,,75,80,67,68,64,235,51,,,,56,57,,,,60,,58,59,61',
'23,24,65,66,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86',
'85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,',
',,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,',
',,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,',
',,,,,,,,,202,,,206,,,52,53,,,54,,804,,,,40,,,,,,,,209,,,,,81,74,76,77',
'78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,',
',,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60',
',58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94',
'93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,',
'206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67',
'68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90',
'89,91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,',
',,,,,,,,,,,,,,,,,,275,,,272,,,52,53,,,54,,823,,822,,,,,,,,,,,,,,,81',
'74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249',
'65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88',
'87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,',
',,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56',
'57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,',
',,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79',
',,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247',
'277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82',
'83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40,,,,,,',
',209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58',
'59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93',
'84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206',
',,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89',
'91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,,217',
'221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232,774,,,206',
',,52,53,,,54,,,,214,,220,,216,215,212,213,224,222,218,,219,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,235,51,,,,56,57,,,,60,,58,59,61,248,249,65',
'66,,,,,247,28,27,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,301,,',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,278',
',,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,,217,221,226,227,228,223',
'225,233,234,229,230,,210,211,,,231,232,774,,,206,,,52,53,,,54,,,,214',
',220,,216,215,212,213,224,222,218,,219,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,235,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95,96,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,866,,245,,40,,,,,,,,209',
',,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57,,,,60,,58,59,61',
'248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50',
'86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52',
'53,,,54,,869,,245,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68',
'64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89',
'91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,,217',
'221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232,774,,,206',
',,52,53,,,54,,,,214,,220,,216,215,212,213,224,222,218,,219,,,81,74,76',
'77,78,79,,,,75,80,67,68,64,235,51,,,,56,57,,,,60,,58,59,61,248,249,65',
'66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87',
'95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,',
',40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51,,,,56,57',
',,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41',
',,94,93,84,50,86,85,88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202',
',,206,,,52,53,,,54,,,,,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80',
'67,68,64,,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281',
'90,89,91,92,,,,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83,,,282',
',217,221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232,774',
',,206,,,52,53,,,54,,,,214,,220,,216,215,212,213,224,222,218,,219,,,81',
'74,76,77,78,79,,,,75,80,67,68,64,235,51,,,,56,57,,,,60,,58,59,61,248',
'249,65,66,,,,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85',
'88,87,95,96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54',
',891,,245,,40,,,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,67,68,64,,51',
',,,56,57,,,,60,,58,59,61,248,249,65,66,,,,,247,277,281,90,89,91,92,',
',,,,,,,,278,,,94,93,84,50,86,85,88,87,95,96,,82,83,,,282,,217,221,226',
'227,228,223,225,233,234,229,230,,210,211,,,231,232,774,,,206,,,52,53',
',,54,,,,214,,220,,216,215,212,213,224,222,218,,219,,,81,74,76,77,78',
'79,,,,75,80,67,68,64,235,51,,,,56,57,,,,60,,58,59,61,248,249,65,66,',
',,,247,277,281,90,89,91,92,,,,,,,,,,41,,,94,93,84,50,86,85,88,87,95',
'96,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,53,,,54,,,,,,40',
',,,,,,,209,,,,,81,74,76,77,78,79,,,,75,80,155,166,156,179,152,172,162',
'161,182,183,177,160,159,154,180,184,185,164,153,167,171,173,165,158',
',,174,181,176,338,337,339,336,151,170,169,,,,,,150,157,148,149,334,335',
'332,113,86,85,333,87,,,,,,141,142,,139,123,124,125,,128,130,,,126,,',
',,143,144,131,132,,,,,,343,,,,,,,,136,135,,122,140,138,137,133,134,129',
'127,120,,121,,,145,155,166,156,179,152,172,162,161,182,183,177,160,159',
'154,180,184,185,164,153,167,171,173,165,158,,,174,181,176,175,168,178',
'163,151,170,169,,,,,,150,157,148,149,146,147,111,113,,,112,,,,,,,141',
'142,,139,123,124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,',
',136,135,,122,140,138,137,133,134,129,127,120,,121,,,145,217,221,226',
'227,228,223,225,233,234,229,230,,210,211,,,231,232,,,,-215,,,,,,,,,',
',214,,220,,216,215,212,213,224,222,218,,219,,,,,,,,,,,,,,,,,235,,-215',
'217,221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232,,,,,',
',,,,,,,,,214,,220,,216,215,212,213,224,222,218,,219,,,,,,,,552,381,',
',553,,,,,235,558,141,142,,139,123,124,125,,128,130,,,126,,,,,143,144',
'131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129,127,120,,121',
'634,387,145,,635,,,,,,,141,142,,139,123,124,125,,128,130,,,126,,,,,143',
'144,131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129,127,120',
',121,637,387,145,,638,,,,,,,141,142,,139,123,124,125,,128,130,,,126',
',,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129',
'127,120,,121,435,381,145,,436,,,,,,,141,142,,139,123,124,125,,128,130',
',,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133',
'134,129,127,120,,121,552,381,145,,553,,,,,,,141,142,,139,123,124,125',
',128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122,140,138',
'137,133,134,129,127,120,,121,554,387,145,,555,,,,,,,141,142,,139,123',
'124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122',
'140,138,137,133,134,129,127,120,,121,,,145,217,221,226,227,228,223,225',
'233,234,229,230,,210,211,,,231,232,,,,,,,,,,,,,,,214,,220,,216,215,212',
'213,224,222,218,,219,,,,,,,435,381,,,436,,,,,293,235,141,142,,139,123',
'124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122',
'140,138,137,133,134,129,127,120,,121,435,381,145,,436,,,,,,,141,142',
',139,123,124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136',
'135,,122,140,138,137,133,134,129,127,120,,121,378,381,145,,379,,,,,',
',141,142,,139,123,124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,',
',,,,,,136,135,,122,140,138,137,133,134,129,127,120,,121,859,381,145',
',860,,,,,,,141,142,,139,123,124,125,,128,130,,,126,,,,,143,144,131,132',
',,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129,127,120,,121,599,387',
'145,,600,,,,,,,141,142,,139,123,124,125,,128,130,,,126,,,,,143,144,131',
'132,,,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129,127,120,,121,861',
'387,145,,862,,,,,,,141,142,,139,123,124,125,,128,130,,,126,,,,,143,144',
'131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129,127,120,,121',
'596,381,145,,597,,,,,,,141,142,,139,123,124,125,,128,130,,,126,,,,,143',
'144,131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129,127,120',
',121,632,381,145,,633,,,,,,,141,142,,139,123,124,125,,128,130,,,126',
',,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133,134,129',
'127,120,,121,554,387,145,,555,,,,,,,141,142,,139,123,124,125,,128,130',
',,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122,140,138,137,133',
'134,129,127,120,,121,435,381,145,,436,,,,,,,141,142,,139,123,124,125',
',128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122,140,138',
'137,133,134,129,127,120,,121,383,387,145,,385,,,,,,,141,142,,139,123',
'124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136,135,,122',
'140,138,137,133,134,129,127,120,,121,435,381,145,,436,,,,,,,141,142',
',139,123,124,125,,128,130,,,126,,,,,143,144,131,132,,,,,,,,,,,,,,136',
'135,,122,140,138,137,133,134,129,127,120,,121,,,145,217,221,226,227',
'228,223,225,233,234,229,230,,210,211,,,231,232,,,,,,,,,,,,,,,214,,220',
',216,215,212,213,224,222,218,,219,,217,221,226,227,228,223,225,233,234',
'229,230,,210,211,293,235,231,232,,,,,,,,,,,,,,,214,,220,,216,215,212',
'213,224,222,218,,219,,,,,,,,,,,,,,,,,235' ]
        racc_action_table = arr = ::Array.new(24171, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'385,514,514,520,520,308,318,385,385,385,328,379,442,385,385,635,385',
'593,72,442,349,576,309,629,347,315,72,336,633,324,335,617,617,324,336',
'385,385,335,385,385,385,385,385,800,729,883,552,632,634,745,502,334',
'553,364,379,576,593,379,334,605,605,442,596,385,385,385,385,385,385',
'385,385,385,385,385,385,385,385,635,55,385,385,385,349,385,347,347,347',
'385,365,514,385,520,552,493,514,385,370,385,553,385,385,385,385,385',
'385,385,383,385,318,385,634,605,328,383,383,383,308,635,308,383,383',
'308,383,385,385,596,385,315,385,385,633,383,328,309,629,309,629,328',
'309,629,494,383,383,596,383,383,383,383,383,632,634,745,502,203,800',
'729,800,729,746,800,729,55,279,313,596,313,448,596,597,383,383,383,383',
'383,383,383,383,383,383,383,383,383,383,26,713,383,383,383,373,383,493',
'713,493,383,201,493,383,396,530,203,448,383,348,383,377,383,383,383',
'383,383,383,383,434,383,383,383,805,384,805,434,434,434,860,279,434',
'434,434,584,434,383,383,597,383,713,383,383,186,494,434,494,201,449',
'494,396,26,279,346,434,434,597,434,434,434,434,434,746,345,746,530,530',
'746,774,348,348,348,757,26,404,530,584,597,860,350,597,695,449,285,333',
'860,15,15,405,637,860,333,332,434,860,50,3,406,426,332,434,3,50,50,50',
'434,434,50,50,50,14,50,860,346,346,346,407,757,757,757,757,50,50,345',
'345,345,285,695,434,285,50,50,426,50,50,50,50,50,637,350,350,350,434',
'776,434,637,312,434,337,777,637,312,648,14,637,337,14,648,50,50,50,50',
'50,50,50,50,50,50,50,50,50,50,637,599,50,50,50,775,642,50,37,37,50,642',
'775,50,50,35,50,431,50,880,50,775,50,50,50,50,50,50,50,437,50,322,50',
'542,323,378,437,437,437,872,872,437,437,437,859,437,50,50,50,50,599',
'50,25,341,440,437,441,599,35,25,341,35,599,861,437,437,599,437,437,437',
'437,437,513,282,282,850,542,513,378,542,322,378,505,323,599,299,443',
'322,299,505,323,444,322,859,421,323,322,723,505,323,859,339,110,437',
'723,859,110,110,339,859,437,784,861,723,322,437,437,323,13,861,850,850',
'850,850,861,13,421,859,861,42,421,421,421,421,13,450,42,755,437,755',
'755,755,755,273,452,42,861,555,555,555,273,555,437,453,437,555,555,437',
'305,273,555,305,555,555,555,555,555,555,555,303,760,760,303,555,555',
'555,555,555,555,555,422,457,755,755,755,755,785,300,403,555,300,462',
'555,555,555,555,555,555,555,555,555,555,338,555,555,555,555,555,786',
'338,524,524,422,524,524,524,422,422,422,422,403,296,296,867,403,403',
'789,555,555,894,555,555,472,555,555,307,307,555,638,555,9,555,475,555',
'647,638,647,647,647,647,638,555,802,803,638,97,555,555,555,555,555,555',
'489,495,496,555,555,554,554,554,402,554,808,810,555,554,554,528,533',
'811,554,812,554,554,554,554,554,554,554,647,647,647,647,554,554,554',
'554,554,554,554,815,816,402,545,873,549,402,402,8,554,41,556,554,554',
'554,554,554,554,554,554,554,554,862,554,554,554,554,554,274,862,276',
'874,563,878,862,274,288,276,862,565,878,568,570,288,274,578,276,554',
'554,878,554,554,288,554,554,579,828,554,827,554,585,554,875,554,819',
'827,819,819,819,819,588,554,36,595,827,598,554,554,554,554,554,554,601',
'316,603,554,554,60,60,60,316,60,604,606,554,60,60,34,609,316,60,819',
'60,60,60,60,60,60,60,819,819,819,819,60,60,60,60,60,60,60,610,613,60',
'619,625,627,628,368,876,60,631,835,60,60,60,60,60,60,60,60,60,60,640',
'60,60,60,60,60,368,368,368,368,368,368,368,368,368,368,368,772,368,368',
'326,645,368,368,772,60,649,326,60,650,651,60,60,772,657,60,326,662,368',
'665,368,60,368,368,368,368,368,368,368,60,368,667,20,680,60,60,60,60',
'60,60,766,200,838,60,60,839,60,368,200,368,698,60,99,99,99,99,99,200',
'204,773,99,99,205,702,703,99,773,99,99,99,99,99,99,99,704,773,1,707',
'99,99,99,99,99,99,99,711,712,99,4,4,4,4,4,99,99,99,99,99,99,99,99,99',
'99,99,99,99,99,600,99,99,99,99,99,461,600,714,856,857,718,600,461,720',
'721,600,352,352,352,352,352,461,722,858,99,734,737,99,12,241,99,99,242',
'11,99,246,99,255,748,266,99,516,202,516,516,516,516,268,99,269,270,10',
'275,99,99,99,99,99,99,277,278,281,99,99,823,823,823,286,823,287,99,290',
'823,823,752,294,295,823,516,823,823,823,823,823,823,823,516,516,516',
'516,823,823,823,823,823,823,823,108,108,108,108,108,298,753,302,304',
'823,314,317,823,823,823,823,823,823,823,823,823,823,319,823,823,,,823',
'424,424,424,424,424,424,424,424,,424,424,,,,,,424,424,,823,,,823,,,823',
'823,,,823,,,424,,424,,424,424,424,424,424,424,424,,424,,,,823,823,823',
'823,823,823,,,,823,823,,699,699,699,823,699,,,,699,699,,,,699,,699,699',
'699,699,699,699,699,,,,,699,699,699,699,699,699,699,,,,,,,,557,,699',
',,699,699,699,699,699,699,699,699,699,699,,699,699,,,699,557,557,557',
'557,557,557,557,557,557,557,557,,557,557,,,557,557,,699,,,699,,,699',
'699,,,699,,,557,,557,,557,557,557,557,557,557,557,,557,,,,699,699,699',
'699,699,699,,,,699,699,,,557,,699,30,30,30,30,30,30,,,,30,30,,,,30,',
'30,30,30,30,30,30,30,,,,,30,30,30,30,30,30,30,,,30,,,,,,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,416,416,416,416,416,416',
'416,,,416,416,,,,,,416,416,,30,,,30,,,30,30,,,30,,30,416,,416,30,416',
'416,416,416,416,416,416,30,416,,,,30,30,30,30,30,30,,,,30,30,739,739',
'739,739,739,739,,,,739,739,,,,739,,739,739,739,739,739,739,739,,,,,739',
'739,739,739,739,739,739,,,739,,,,,,739,739,739,739,739,739,739,739,739',
'739,739,739,739,739,,739,739,739,739,739,417,417,417,417,417,417,417',
',,417,417,,,,,,417,417,,739,,,739,,,739,739,,,739,,739,417,,417,739',
'417,417,417,417,417,417,417,739,417,,,,739,739,739,739,739,739,,,,739',
'739,738,738,738,738,738,738,,,,738,738,,,,738,,738,738,738,738,738,738',
'738,,,,,738,738,738,738,738,738,738,,,738,,,,,,738,738,738,738,738,738',
'738,738,738,738,738,738,738,738,,738,738,738,738,738,418,418,418,418',
'418,418,418,,,418,418,,,,,,418,418,,738,,,738,,,738,738,,,738,,738,418',
',418,738,418,418,418,418,418,418,418,738,418,,,,738,738,738,738,738',
'738,,,,738,738,608,608,608,608,608,608,,,,608,608,,,,608,,608,608,608',
'608,608,608,608,,,,,608,608,608,608,608,608,608,,,608,,,,,,608,608,608',
'608,608,608,608,608,608,608,608,608,608,608,,608,608,608,608,608,400',
'400,400,400,400,400,400,400,400,400,400,,400,400,,,400,400,,608,,,608',
',,608,608,,,608,,608,400,,400,608,400,400,400,400,400,400,400,608,400',
',,,608,608,608,608,608,608,,,,608,608,591,591,591,591,591,591,,,,591',
'591,,,,591,,591,591,591,591,591,591,591,,,,,591,591,591,591,591,591',
'591,,,591,,,,,,591,591,591,591,591,591,591,591,591,591,591,591,591,591',
',591,591,591,591,591,419,419,419,419,419,419,419,,,419,419,,,,,,419',
'419,,591,,,591,,,591,591,,,591,,591,419,,419,591,419,419,419,419,419',
'419,419,591,419,,,,591,591,591,591,591,591,,,,591,591,188,188,188,188',
'188,188,,,,188,188,,,,188,,188,188,188,188,188,188,188,,,,,188,188,188',
'188,188,188,188,,,188,,,,,,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,,188,188,188,188,188,413,,,,,,,,,,,,,,,,413,413,,188,,,188',
',,188,188,,,188,,188,413,,413,188,413,413,413,413,,,413,188,413,,,,188',
'188,188,188,188,188,,,,188,188,189,189,189,189,189,189,,,,189,189,,',
',189,,189,189,189,189,189,189,189,,,,,189,189,189,189,189,189,189,,',
'189,,,,,,189,189,189,189,189,189,189,189,189,189,189,189,189,189,,189',
'189,189,189,189,420,420,420,420,420,420,420,,,420,420,,,,,,420,420,',
'189,,,189,,,189,189,,,189,,189,420,,420,189,420,420,420,420,420,420',
'420,189,420,,,,189,189,189,189,189,189,,,,189,189,590,590,590,590,590',
'590,,,,590,590,,,,590,,590,590,590,590,590,590,590,,,,,590,590,590,590',
'590,590,590,,,590,,,,,,590,590,590,590,590,590,590,590,590,590,590,590',
'590,590,,590,590,590,590,590,401,401,401,401,401,401,401,401,401,401',
'401,,401,401,,,401,401,,590,,,590,,,590,590,,,590,,590,401,,401,590',
'401,401,401,401,401,401,401,590,401,,,,590,590,590,590,590,590,,,,590',
'590,561,561,561,561,561,561,,,,561,561,,,,561,,561,561,561,561,561,561',
'561,,,,,561,561,561,561,561,561,561,,,561,,,,,,561,561,561,561,561,561',
'561,561,561,561,561,561,561,561,,561,561,561,561,561,415,,,,,,,,,,,',
',,,,415,415,,561,,,561,,,561,561,,,561,,561,415,,415,561,415,415,415',
'415,,,415,561,415,,,,561,561,561,561,561,561,,,,561,561,726,726,726',
'726,726,726,,,,726,726,,,,726,,726,726,726,726,726,726,726,,,,,726,726',
'726,726,726,726,726,,,726,,,,,,726,726,726,726,726,726,726,726,726,726',
'726,726,726,726,,726,726,726,726,726,423,423,423,423,423,423,423,,,423',
'423,,,,,,423,423,,726,,,726,,,726,726,,,726,,726,423,,423,726,423,423',
'423,423,423,423,423,726,423,,,,726,726,726,726,726,726,,,,726,726,708',
'708,708,708,708,708,,,,708,708,,,,708,,708,708,708,708,708,708,708,',
',,,708,708,708,708,708,708,708,,,708,,,,,,708,708,708,708,708,708,708',
'708,708,708,708,708,708,708,,708,708,708,708,708,412,,,,,,,,,,,,,,,',
'412,412,,708,,,708,,,708,708,,,708,,708,412,,412,708,412,412,412,412',
',,412,708,412,,,,708,708,708,708,708,708,,,,708,708,0,0,0,0,0,0,,,,0',
'0,,,,0,,0,0,0,0,0,0,0,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0',
'0,0,0,0,,0,0,0,0,0,411,411,411,411,411,411,411,,,411,411,,,,,,411,411',
',0,,,0,,,0,0,,,0,,0,411,,411,0,411,411,411,411,411,411,411,0,411,,,',
'0,0,0,0,0,0,,,,0,0,854,854,854,854,854,854,,,,854,854,,,,854,,854,854',
'854,854,854,854,854,,,,,854,854,854,854,854,854,854,,,854,,,,,,854,854',
'854,854,854,854,854,854,854,854,854,854,854,854,,854,854,854,854,854',
'414,,,,,,,,,,,,,,,,414,414,,854,,,854,,,854,854,,,854,,854,414,,414',
'854,414,414,414,414,,,414,854,414,,,,854,854,854,854,854,854,,,,854',
'854,272,272,272,272,272,272,,,,272,272,,,,272,,272,272,272,272,272,272',
'272,,,,,272,272,272,272,272,272,272,,,272,,,,,,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,,272,272,272,272,272,408,,,,,,,,,,,',
',,,,408,408,,272,,,272,,,272,272,,,272,,272,408,,408,272,408,408,408',
'408,,,,272,,,,,272,272,272,272,272,272,,,,272,272,267,267,267,267,267',
'267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,267,267,267,267',
'267,267,267,,,267,,,,,,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,,267,267,267,267,267,409,,,,,,,,,,,,,,,,409,409,,267,,,267,',
',267,267,,,267,,267,409,,409,267,409,409,409,409,,,,267,,,,,267,267',
'267,267,267,267,,,,267,267,206,206,206,206,206,206,,,,206,206,,,,206',
',206,206,206,206,206,206,206,,,,,206,206,206,206,206,206,206,,,206,',
',,,,206,206,206,206,206,206,206,206,206,206,206,206,206,206,,206,206',
'206,206,206,410,,,,,,,,,,,,,,,,410,410,,206,,,206,,,206,206,,,206,,206',
'410,,,206,410,410,410,410,,,,206,,,,,206,206,206,206,206,206,,,,206',
'206,51,51,51,51,51,51,,,,51,51,,,,51,,51,51,51,51,51,51,51,,,,,51,51',
'51,51,51,51,51,,,51,,,,,,51,51,51,51,51,51,51,51,51,51,51,51,51,51,',
'51,51,51,51,51,,,,,,,,,,,,,,,,,,,,51,,,51,,,51,51,,,51,,51,,,,51,,,',
',,,,51,,,,,51,51,51,51,51,51,,,,51,51,847,847,847,847,847,847,,,,847',
'847,,,,847,,847,847,847,847,847,847,847,,,,,847,847,847,847,847,847',
'847,,,847,,,,,,847,847,847,847,847,847,847,847,847,847,847,847,847,847',
',847,847,847,847,847,,,,,,,,,,,,,,,,,,,,847,,,847,,,847,847,,,847,,847',
',,,847,,,,,,,,847,,,,,847,847,847,847,847,847,,,,847,847,673,673,673',
'673,673,673,,,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,673,673',
'673,673,673,673,673,,,673,,,,,,673,673,673,673,673,673,673,673,673,673',
'673,673,673,673,,673,673,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,',
'673,673,,,673,,673,,,,673,,,,,,,,673,,,,,673,673,673,673,673,673,,,',
'673,673,515,515,515,515,515,515,,,,515,515,,,,515,,515,515,515,515,515',
'515,515,,,,,515,515,515,515,515,515,515,,,515,,,,,,515,515,515,515,515',
'515,515,515,515,515,515,515,515,515,,515,515,515,515,515,,,,,,,,,,,',
',,,,,,,,515,,,515,,,515,515,,,515,,515,,,,515,,,,,,,,515,,,,,515,515',
'515,515,515,515,,,,515,515,840,840,840,840,840,840,,,,840,840,,,,840',
',840,840,840,840,840,840,840,,,,,840,840,840,840,840,840,840,,,840,',
',,,,840,840,840,840,840,840,840,840,840,840,840,840,840,840,,840,840',
'840,840,840,,,,,,,,,,,,,,,,,,,,840,,,840,,,840,840,,,840,,840,,,,840',
',,,,,,,840,,,,,840,840,840,840,840,840,,,,840,840,796,796,796,796,796',
'796,,,,796,796,,,,796,,796,796,796,796,796,796,796,,,,,796,796,796,796',
'796,796,796,,,796,,,,,,796,796,796,796,796,796,796,796,796,796,796,796',
'796,796,,796,796,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796',
',,796,,796,,,,796,,,,,,,,796,,,,,796,796,796,796,796,796,,,,796,796',
'646,646,646,646,646,646,,,,646,646,,,,646,,646,646,646,646,646,646,646',
',,,,646,646,646,646,646,646,646,,,646,,,,,,646,646,646,646,646,646,646',
'646,646,646,646,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,',
'646,,,646,,,646,646,,,646,,646,,,,646,,,,,,,,646,,,,,646,646,646,646',
'646,646,,,,646,646,641,641,641,641,641,641,,,,641,641,,,,641,,641,641',
'641,641,641,641,641,,,,,641,641,641,641,641,641,641,,,641,,,,,,641,641',
'641,641,641,641,641,641,641,641,641,641,641,641,,641,641,641,641,641',
',,,,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,641,,,,641,,,,,,,,641',
',,,,641,641,641,641,641,641,,,,641,641,497,497,497,497,497,497,,,,497',
'497,,,,497,,497,497,497,497,497,497,497,,,,,497,497,497,497,497,497',
'497,,,497,,,,,,497,497,497,497,497,497,497,497,497,497,497,497,497,497',
',497,497,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,497',
',,,497,,,,,,,,497,,,,,497,497,497,497,497,497,,,,497,497,492,492,492',
'492,492,492,,,,492,492,,,,492,,492,492,492,492,492,492,492,,,,,492,492',
'492,492,492,492,492,,,492,,,,,,492,492,492,492,492,492,492,492,492,492',
'492,492,492,492,,492,492,492,492,492,,,,,,,,,,,,,,,,,,,,492,,,492,,',
'492,492,,,492,,492,,,,492,,,,,,,,492,,,,,492,492,492,492,492,492,,,',
'492,492,750,750,750,750,750,750,,,,750,750,,,,750,,750,750,750,750,750',
'750,750,,,,,750,750,750,750,750,750,750,,,750,,,,,,750,750,750,750,750',
'750,750,750,750,750,750,750,750,750,,750,750,750,750,750,,,,,,,,,,,',
',,,,,,,,750,,,750,,,750,750,,,750,,750,,,,750,,,,,,,,750,,,,,750,750',
'750,750,750,750,,,,750,750,743,743,743,743,743,743,,,,743,743,,,,743',
',743,743,743,743,743,743,743,,,,,743,743,743,743,743,743,743,,,743,',
',,,,743,743,743,743,743,743,743,743,743,743,743,743,743,743,,743,743',
'743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,,743,,,,743',
',,,,,,,743,,,,,743,743,743,743,743,743,,,,743,743,488,488,488,488,488',
'488,,,,488,488,,,,488,,488,488,488,488,488,488,488,,,,,488,488,488,488',
'488,488,488,,,488,,,,,,488,488,488,488,488,488,488,488,488,488,488,488',
'488,488,,488,488,488,488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488',
',,488,,488,,,,488,,,,,,,,488,,,,,488,488,488,488,488,488,,,,488,488',
'371,371,371,,371,,,,371,371,,,,371,,371,371,371,371,371,371,371,,,,',
'371,371,371,371,371,371,371,,,,,,,,,,371,,,371,371,371,371,371,371,371',
'371,371,371,,371,371,371,371,371,,,,,,,,,,,,,,,,,,,,371,,,371,,,371',
'371,,,371,,,,,,371,,,,,,,,371,,,,,371,371,371,371,371,371,,,,371,371',
'5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5',
'5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,',
'5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,5,5,,,,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,6,6,6,6,6,,,6,6,6,6,6,6,6,6,6,6,,,,,,6,6,6,6,6,6,6,6,6,',
'6,,,,,,,6,6,,6,6,6,6,,6,6,,,6,,,,,6,6,6,6,,,,,,,,,,,,,,6,6,,6,6,6,6',
'6,6,6,6,6,,6,,,6,6,,,,,,,,,,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7',
'7,7,7,7,7,,,7,7,7,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,7,,,7,,,,,,,7,7,',
'7,7,7,7,,7,7,,,7,,,,,7,7,7,7,,,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,,7',
',,7,7,,,17,17,17,,17,,,7,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17',
'17,17,17,17,17,,,17,,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17',
'17,17,17,,,,,,,,,,,,,,,,,,,,17,,,17,,,17,17,,,17,,,,,,17,,,,,,,,17,',
',,,17,17,17,17,17,17,,,,17,17,18,18,18,,18,,,,18,18,,,,18,,18,18,18',
'18,18,18,18,,,,,18,18,18,18,18,18,18,,,,,,,,,,18,,,18,18,18,18,18,18',
'18,18,18,18,,18,18,18,18,18,,,,,,,,,,,,,,,,,,,,18,,,18,,,18,18,,,18',
',,,,,18,,,,,,,,18,,,,,18,18,18,18,18,18,,,,18,18,22,22,22,,22,,,,22',
'22,,,,22,,22,22,22,22,22,22,22,,,,,22,22,22,22,22,22,22,,,,,,,,,,22',
',,22,22,22,22,22,22,22,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22',
',,22,,,22,22,,,22,,22,,22,,22,,,,,,,,22,,,,,22,22,22,22,22,22,,,,22',
'22,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,23,23,23,23',
'23,23,23,,,,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,,23,23,23,23,23',
',,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,23,,23,,23,,,,,,,,23,,,,,23',
'23,23,23,23,23,,,,23,23,24,24,24,,24,,,,24,24,,,,24,,24,24,24,24,24',
'24,24,,,,,24,24,24,24,24,24,24,,,,,,,,,,24,,,24,24,24,24,24,24,24,24',
'24,24,,24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24,24,,,24,,24,,24',
',24,,,,,,,,24,,,,,24,24,24,24,24,24,,,,24,24,27,27,27,,27,,,,27,27,',
',,27,,27,27,27,27,27,27,27,,,,,27,27,27,27,27,27,27,,,,,,,,,,27,,,27',
'27,27,27,27,27,27,27,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27',
'27,,27,27,,,27,,27,,27,,27,,,,,,,,27,,,,,27,27,27,27,27,27,,,,27,27',
'28,28,28,,28,,,,28,28,,,,28,,28,28,28,28,28,28,28,,,,,28,28,28,28,28',
'28,28,,,,,,,,,,28,,,28,28,28,28,28,28,28,28,28,28,,28,28,28,28,28,,',
',,,,,,,,,,,,,,,,,28,,,28,28,,28,28,,,28,,28,,28,,28,,,,,,,,28,,,,,28',
'28,28,28,28,28,,,,28,28,31,31,31,,31,,,,31,31,,,,31,,31,31,31,31,31',
'31,31,,,,,31,31,31,31,31,31,31,,,,,,,,,,31,,,31,31,31,31,31,31,31,31',
'31,31,,31,31,,,31,,830,830,830,830,830,830,830,830,830,830,830,,830',
'830,,,830,830,31,,,31,,,31,31,,,31,,31,,830,,830,,830,830,830,830,830',
'830,830,,830,,,31,31,31,31,31,31,,,,31,31,32,32,32,830,32,830,,,32,32',
',,,32,,32,32,32,32,32,32,32,,,,,32,32,32,32,32,32,32,,,,,,,,,,32,,,32',
'32,32,32,32,32,32,32,32,32,,32,32,,,32,,696,696,696,696,696,696,696',
'696,696,696,696,,696,696,,,696,696,32,,,32,,,32,32,,,32,,,,696,,696',
',696,696,696,696,696,696,696,,696,,,32,32,32,32,32,32,,,,32,32,38,38',
'38,696,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,38,38,38,38,38,38',
'38,,,,,,,,,,38,,,38,38,38,38,38,38,38,38,38,38,,38,38,38,38,38,,,,,',
',,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,38,,,,,,,,38,,,,,38,38,38,38',
'38,38,,,,38,38,39,39,39,,39,,,,39,39,,,,39,,39,39,39,39,39,39,39,,,',
',39,39,39,39,39,39,39,,,,,,,,,,39,,,39,39,39,39,39,39,39,39,39,39,,39',
'39,39,39,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39,,,,,,,,39',
',,,,39,39,39,39,39,39,,,,39,39,40,40,40,,40,,,,40,40,,,,40,,40,40,40',
'40,40,40,40,,,,,40,40,40,40,40,40,40,,,,,,,,,,40,,,40,40,40,40,40,40',
'40,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,,,40',
',,,,,40,,,,,,,,40,,,,,40,40,40,40,40,40,,,,40,40,52,52,52,,52,,,,52',
'52,,,,52,,52,52,52,52,52,52,52,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52',
',,52,52,52,52,52,52,52,52,52,52,,52,52,52,52,52,,,,,,,,,,,,,,,,,,,,52',
',,52,,,52,52,,,52,,,,,,52,,,,,,,,52,,,,,52,52,52,52,52,52,,,,52,52,53',
'53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53,53,53,53,53,53',
'53,,,,,,,,,,53,,,53,53,53,53,53,53,53,53,53,53,,53,53,53,53,53,,,,,',
',,,,,,,,,,,,,,53,,,53,,,53,53,,,53,,53,,,,53,,,,,,,,53,,,,,53,53,53',
'53,53,53,,,,53,53,54,54,54,,54,,,,54,54,,,,54,,54,54,54,54,54,54,54',
',,,,54,54,54,54,54,54,54,,,,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54',
',54,54,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,,54,,,,',
',,,54,,,,,54,54,54,54,54,54,,,,54,54,56,56,56,,56,,,,56,56,,,,56,,56',
'56,56,56,56,56,56,,,,,56,56,56,56,56,56,56,,,56,,,,,,,56,,,56,56,56',
'56,56,56,56,56,56,56,,56,56,56,56,56,,,,,,,,,,,,,,,,,,,,56,,,56,,,56',
'56,,,56,,,,,,56,,,,,,,,56,,,,,56,56,56,56,56,56,,,,56,56,57,57,57,,57',
',,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57,57,57,57,,,57,',
',,,,,57,,,57,57,57,57,57,57,57,57,57,57,,57,57,57,57,57,,,,,,,,,,,,',
',,,,,,,57,,,57,,,57,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,57,57',
',,,57,57,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,61,61',
'61,61,61,61,61,,,,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,,61,61,,',
'61,,470,470,470,470,470,470,470,470,470,470,470,,470,470,,,470,470,61',
',,61,,,61,61,,,61,,61,,470,,470,,470,470,470,470,470,470,470,,470,,',
'61,61,61,61,61,61,,,,61,61,62,62,62,470,62,,,,62,62,,,,62,,62,62,62',
'62,62,62,62,,,,,62,62,62,62,62,62,62,,,,,,,,,,62,,,62,62,62,62,62,62',
'62,62,62,62,,62,62,,,62,,691,691,691,691,691,691,691,691,691,691,691',
',691,691,,62,691,691,62,,,62,,,62,62,,,62,,,,691,,691,,691,691,691,691',
'691,691,691,,691,,,62,62,62,62,62,62,,,,62,62,63,63,63,691,63,,,,63',
'63,,,,63,,63,63,63,63,63,63,63,,,,,63,63,63,63,63,63,63,,,,,,,,,,63',
',,63,63,63,63,63,63,63,63,63,63,,63,63,,,63,,689,689,689,689,689,689',
'689,689,689,689,689,,689,689,,,689,689,63,,,63,,,63,63,,,63,,,,689,',
'689,,689,689,689,689,689,689,689,,689,,,63,63,63,63,63,63,,,,63,63,84',
'84,84,689,84,,,,84,84,,,,84,,84,84,84,84,84,84,84,,84,,,84,84,84,84',
'84,84,84,,,,,,,,,,84,,,84,84,84,84,84,84,84,84,84,84,,84,84,84,84,84',
',,,,,,,,,,,,,,,,,,,84,,,84,84,,84,84,,,84,,84,,84,,84,,,,,,,,84,,84',
',,84,84,84,84,84,84,,,,84,84,88,88,88,,88,,,,88,88,,,,88,,88,88,88,88',
'88,88,88,,88,,,88,88,88,88,88,88,88,,,,,,,,,,88,,,88,88,88,88,88,88',
'88,88,88,88,,88,88,88,88,88,,,,,,,,,,,,,,,,,,,,88,,,88,88,,88,88,,,88',
',88,,88,,88,,,,,,,,88,,88,,,88,88,88,88,88,88,,,,88,88,103,103,103,',
'103,,,,103,103,,,,103,,103,103,103,103,103,103,103,,,,,103,103,103,103',
'103,103,103,,,103,,,,,,,103,,,103,103,103,103,103,103,103,103,103,103',
',103,103,103,103,103,,,,,,,,,,,,,,,,,,,,103,,,103,,,103,103,,,103,,',
',,,103,,,,,,,,103,,,,,103,103,103,103,103,103,,,,103,103,104,104,104',
',104,,,,104,104,,,,104,,104,104,104,104,104,104,104,,,,,104,104,104',
'104,104,104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,104,104',
'104,,104,104,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,104,,,104',
',,,,,104,,,,,,,,104,,,,,104,104,104,104,104,104,,,,104,104,105,105,105',
',105,,,,105,105,,,,105,,105,105,105,105,105,105,105,,,,,105,105,105',
'105,105,105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,105,105',
'105,,105,105,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105',
',,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,106,106,106',
',106,,,,106,106,,,,106,,106,106,106,106,106,106,106,,,,,106,106,106',
'106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,106,106',
'106,,106,106,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,,106',
',,,,,106,,,,,,,,106,,,,,106,106,106,106,106,106,,,,106,106,107,107,107',
'107,107,,,,107,107,,,,107,,107,107,107,107,107,107,107,,,,,107,107,107',
'107,107,107,107,,,107,,,,,,107,107,107,107,107,107,107,107,107,107,107',
'107,107,107,,107,107,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,,,107',
'107,,,107,,107,,,,107,,,,,,,,107,,,,,107,107,107,107,107,107,,,,107',
'107,190,190,190,,190,,,,190,190,,,,190,,190,190,190,190,190,190,190',
',,,,190,190,190,190,190,190,190,,,,,,,,,,190,,,190,190,190,190,190,190',
'190,190,190,190,,190,190,190,190,190,,,,,,,,,,,,,,,,,,,,190,,,190,,',
'190,190,,,190,,190,,,,190,,,,,,,,190,,,,,190,190,190,190,190,190,,,',
'190,190,191,191,191,,191,,,,191,191,,,,191,,191,191,191,191,191,191',
'191,,,,,191,191,191,191,191,191,191,,,,,,,,,,191,,,191,191,191,191,191',
'191,191,191,191,191,,191,191,191,191,191,,,,,,,,,,,,,,,,,,,,191,,,191',
',,191,191,,,191,,191,,,,191,,,,,,,,191,,,,,191,191,191,191,191,191,',
',,191,191,192,192,192,,192,,,,192,192,,,,192,,192,192,192,192,192,192',
'192,,,,,192,192,192,192,192,192,192,,,,,,,,,,192,,,192,192,192,192,192',
'192,192,192,192,192,,192,192,192,192,192,,,,,,,,,,,,,,,,,,,,192,,,192',
',,192,192,,,192,,,,,,192,,,,,,,,192,,,,,192,192,192,192,192,192,,,,192',
'192,193,193,193,,193,,,,193,193,,,,193,,193,193,193,193,193,193,193',
',,,,193,193,193,193,193,193,193,,,,,,,,,,193,,,193,193,193,193,193,193',
'193,193,193,193,,193,193,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193,,',
'193,193,,,193,,193,,,,193,,,,,,,,193,,,,,193,193,193,193,193,193,,,',
'193,193,196,196,196,,196,,,,196,196,,,,196,,196,196,196,196,196,196',
'196,,,,,196,196,196,196,196,196,196,,,,,,,,,,196,,,196,196,196,196,196',
'196,196,196,196,196,,196,196,196,196,196,,,,,,,,,,,,,,,,,,,,196,,,196',
',,196,196,,,196,,,,,,196,,,,,,,,196,,,,,196,196,196,196,196,196,,,,196',
'196,197,197,197,,197,,,,197,197,,,,197,,197,197,197,197,197,197,197',
',,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197,197,197,197,197',
'197,197,197,197,197,,197,197,197,197,197,,,,,,,,,,,,,,,,,,,,197,,,197',
',,197,197,,,197,,,,,,197,,,,,,,,197,,,,,197,197,197,197,197,197,,,,197',
'197,198,198,198,,198,,,,198,198,,,,198,,198,198,198,198,198,198,198',
',,,,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198,198,198,198,198',
'198,198,198,198,198,,198,198,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198',
',,198,198,,,198,,,,,,198,,,,,,,,198,,,,,198,198,198,198,198,198,,,,198',
'198,209,209,209,,209,,,,209,209,,,,209,,209,209,209,209,209,209,209',
',,,,209,209,209,209,209,209,209,,,,,,,,,,209,,,209,209,209,209,209,209',
'209,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,',
'209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209,209,209,209,,,,209',
'209,210,210,210,,210,,,,210,210,,,,210,,210,210,210,210,210,210,210',
',,,,210,210,210,210,210,210,210,,,,,,,,,,210,,,210,210,210,210,210,210',
'210,210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,',
'210,210,,,210,,,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210',
'210,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211,211',
',,,,211,211,211,211,211,211,211,,,,,,,,,,211,,,211,211,211,211,211,211',
'211,211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,',
'211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,212,212,212,212,212,212,212,,,,,,,,,,212,,,212,212,212,212,212,212',
'212,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,',
'212,212,,,212,,,,,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212',
'212,213,213,213,,213,,,,213,213,,,,213,,213,213,213,213,213,213,213',
',,,,213,213,213,213,213,213,213,,,,,,,,,,213,,,213,213,213,213,213,213',
'213,213,213,213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,',
'213,213,,,213,,,,,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213',
'213,214,214,214,,214,,,,214,214,,,,214,,214,214,214,214,214,214,214',
',,,,214,214,214,214,214,214,214,,,,,,,,,,214,,,214,214,214,214,214,214',
'214,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,',
'214,214,,,214,,,,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214',
'214,215,215,215,,215,,,,215,215,,,,215,,215,215,215,215,215,215,215',
',,,,215,215,215,215,215,215,215,,,,,,,,,,215,,,215,215,215,215,215,215',
'215,215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,',
'215,215,,,215,,,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215',
'215,216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216',
',,,,216,216,216,216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216,216',
'216,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,',
'216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216',
'216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217',
',,,,217,217,217,217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217,217',
'217,217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,',
'217,217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217',
'217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218',
',,,,218,218,218,218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218,218',
'218,218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,',
'218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218',
'218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219,219',
',,,,219,219,219,219,219,219,219,,,,,,,,,,219,,,219,219,219,219,219,219',
'219,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,',
'219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219',
'219,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220,220',
',,,,220,220,220,220,220,220,220,,,,,,,,,,220,,,220,220,220,220,220,220',
'220,220,220,220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,',
'220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220',
'220,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221',
',,,,221,221,221,221,221,221,221,,,,,,,,,,221,,,221,221,221,221,221,221',
'221,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,',
'221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221',
'221,222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222',
',,,,222,222,222,222,222,222,222,,,,,,,,,,222,,,222,222,222,222,222,222',
'222,222,222,222,,222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,',
'222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222',
'222,223,223,223,,223,,,,223,223,,,,223,,223,223,223,223,223,223,223',
',,,,223,223,223,223,223,223,223,,,,,,,,,,223,,,223,223,223,223,223,223',
'223,223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,',
'223,223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223',
'223,224,224,224,,224,,,,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,224,224,224,224,224,224,224,,,,,,,,,,224,,,224,224,224,224,224,224',
'224,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,',
'224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224',
'224,225,225,225,,225,,,,225,225,,,,225,,225,225,225,225,225,225,225',
',,,,225,225,225,225,225,225,225,,,,,,,,,,225,,,225,225,225,225,225,225',
'225,225,225,225,,225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,',
'225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225',
'225,226,226,226,,226,,,,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,226,226,226,226,226,226,226,,,,,,,,,,226,,,226,226,226,226,226,226',
'226,226,226,226,,226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,',
'226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226',
'226,227,227,227,,227,,,,227,227,,,,227,,227,227,227,227,227,227,227',
',,,,227,227,227,227,227,227,227,,,,,,,,,,227,,,227,227,227,227,227,227',
'227,227,227,227,,227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,',
'227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227',
'227,228,228,228,,228,,,,228,228,,,,228,,228,228,228,228,228,228,228',
',,,,228,228,228,228,228,228,228,,,,,,,,,,228,,,228,228,228,228,228,228',
'228,228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,',
'228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228',
'228,229,229,229,,229,,,,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,229,229,229,229,229,229,229,,,,,,,,,,229,,,229,229,229,229,229,229',
'229,229,229,229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,',
'229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229',
'229,230,230,230,,230,,,,230,230,,,,230,,230,230,230,230,230,230,230',
',,,,230,230,230,230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230,230',
'230,230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,',
'230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230',
'230,231,231,231,,231,,,,231,231,,,,231,,231,231,231,231,231,231,231',
',,,,231,231,231,231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231,231',
'231,231,231,231,,231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,',
'231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231',
'231,232,232,232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,232,232,232,232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232,232',
'232,232,232,232,,232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,',
'232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232',
'232,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,233,233,233,233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233,233',
'233,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,',
'233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233',
'233,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,234,234,234,234,234,234,234,,,,,,,,,,234,,,234,234,234,234,234,234',
'234,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,',
'234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234',
'234,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,235,235,235,235,235,235,235,,,,,,,,,,235,,,235,235,235,235,235,235',
'235,235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,',
'235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235',
'235,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243',
',,,,243,243,243,243,243,243,243,,,,,,,,,,243,,,243,243,243,243,243,243',
'243,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,',
'243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243',
'243,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,245,245,245,245,245,245,245,,,,,,,,,,245,,,245,245,245,245,245,245',
'245,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,',
'245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245',
'245,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256',
',,,,256,256,256,256,256,256,256,,,,,,,,,,256,,,256,256,256,256,256,256',
'256,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,',
'256,256,,,256,,256,,256,,256,,,,,,,,256,,,,,256,256,256,256,256,256',
',,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257',
'257,,,,,257,257,257,257,257,257,257,,,,,,,,,,257,,,257,257,257,257,257',
'257,257,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257',
',,257,257,,,257,,257,,257,,257,,,,,,,,257,,,,,257,257,257,257,257,257',
',,,257,257,265,265,265,,265,,,,265,265,,,,265,,265,265,265,265,265,265',
'265,,,,,265,265,265,265,265,265,265,,,,,,,,,,265,,,265,265,265,265,265',
'265,265,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265',
',265,265,265,,,265,,265,,265,,265,,,,,,,,265,,,,,265,265,265,265,265',
'265,,,,265,265,271,271,271,,271,,,,271,271,,,,271,,271,271,271,271,271',
'271,271,,,,,271,271,271,271,271,271,271,,,,,,,,,,271,,,271,271,271,271',
'271,271,271,271,271,271,,271,271,,,271,,686,686,686,686,686,686,686',
'686,686,686,686,,686,686,,,686,686,271,,,271,,,271,271,,,271,,,,686',
',686,,686,686,686,686,686,686,686,,686,,,271,271,271,271,271,271,,,',
'271,271,292,292,292,686,292,,,,292,292,,,,292,,292,292,292,292,292,292',
'292,,,,,292,292,292,292,292,292,292,,,,,,,,,,292,,,292,292,292,292,292',
'292,292,292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292',
'292,,292,292,,,292,,,,,,292,,,,,,,,292,,,,,292,292,292,292,292,292,',
',,292,292,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301',
'301,,,,,301,301,301,301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301',
'301,301,301,301,301,,301,301,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301',
',,301,301,,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301',
'301,310,310,310,,310,,,,310,310,,,,310,,310,310,310,310,310,310,310',
',,,,310,310,310,310,310,310,310,,,310,,,,,,,310,,,310,310,310,310,310',
'310,310,310,310,310,,310,310,310,310,310,,,,,,,,,,,,,,,,,,,,310,,,310',
',,310,310,,,310,,,,,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310',
'310,311,311,311,,311,,,,311,311,,,,311,,311,311,311,311,311,311,311',
',,,,311,311,311,311,311,311,311,,,311,,,,,,,311,,,311,311,311,311,311',
'311,311,311,311,311,,311,311,311,311,311,,,,,,,,,,,,,,,,,,,,311,,,311',
',,311,311,,,311,,,,,,311,,,,,,,,311,,,,,311,311,311,311,311,311,,,,311',
'311,329,329,329,,329,,,,329,329,,,,329,,329,329,329,329,329,329,329',
',,,,329,329,329,329,329,329,329,,,329,,,,,,,329,,,329,329,329,329,329',
'329,329,329,329,329,,329,329,329,329,329,,,,,,,,,,,,,,,,,,,,329,,,329',
',,329,329,,,329,,,,,,329,,,,,,,,329,,,,,329,329,329,329,329,329,,,,329',
'329,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343',
',,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343',
'343,343,343,343,343,,343,343,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343',
',,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343,343,343,,,,343',
'343,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359,359',
'359,359,359,359,359,359,359,359,,,359,359,359,359,359,359,359,359,359',
'359,,,,,,359,359,359,359,359,359,359,359,,,359,,,,,,,359,359,,359,359',
'359,359,,359,359,,,359,,,,,359,359,359,359,,,,,,,,,,,,,,359,359,,359',
'359,359,359,359,359,359,359,359,,359,,,359,359,,,380,380,380,,380,,',
'359,380,380,,,,380,,380,380,380,380,380,380,380,,,,,380,380,380,380',
'380,380,380,,,,,,,,,,380,,,380,380,380,380,380,380,380,380,380,380,',
'380,380,380,380,380,,,,,,,,,,,,,,,,,,,,380,,,380,380,,380,380,,,380',
',380,,380,,380,,,,,,,,380,,,,,380,380,380,380,380,380,,,,380,380,387',
'387,387,,387,,,,387,387,,,,387,,387,387,387,387,387,387,387,,,,,387',
'387,387,387,387,387,387,,,,,,,,,,387,,,387,387,387,387,387,387,387,387',
'387,387,,387,387,387,387,387,,,,,,,,,,,,,,,,,,,,387,,,387,387,,387,387',
',,387,,387,,387,,387,,,,,,,,387,,,,,387,387,387,387,387,387,,,,387,387',
'388,388,388,,388,,,,388,388,,,,388,,388,388,388,388,388,388,388,,,,',
'388,388,388,388,388,388,388,,,,,,,,,,388,,,388,388,388,388,388,388,388',
'388,388,388,,388,388,388,388,388,,,,,,,,,,,,,,,,,,,,388,,,388,388,,388',
'388,,,388,,388,,388,,388,,,,,,,,388,,,,,388,388,388,388,388,388,,,,388',
'388,395,395,395,,395,,,,395,395,,,,395,,395,395,395,395,395,395,395',
',,,,395,395,395,395,395,395,395,,,,,,,,,,395,,,395,395,395,395,395,395',
'395,395,395,395,,395,395,395,395,395,,,,,,,,,,,,,,,,,,,,395,,,395,,',
'395,395,,,395,,395,,,,395,,,,,,,,395,,,,,395,395,395,395,395,395,,,',
'395,395,397,397,397,,397,,,,397,397,,,,397,,397,397,397,397,397,397',
'397,,,,,397,397,397,397,397,397,397,,,,,,,,,,397,,,397,397,397,397,397',
'397,397,397,397,397,,397,397,397,397,397,,,,,,,,,,,,,,,,,,,,397,,,397',
',,397,397,,,397,,,,,,397,,,,,,,,397,,,,,397,397,397,397,397,397,,,,397',
'397,398,398,398,,398,,,,398,398,,,,398,,398,398,398,398,398,398,398',
',,,,398,398,398,398,398,398,398,,,,,,,,,,398,,,398,398,398,398,398,398',
'398,398,398,398,,398,398,398,398,398,,,,,,,,,,,,,,,,,,,,398,,,398,,',
'398,398,,,398,,,,,,398,,,,,,,,398,,,,,398,398,398,398,398,398,,,,398',
'398,399,399,399,,399,,,,399,399,,,,399,,399,399,399,399,399,399,399',
',,,,399,399,399,399,399,399,399,,,,,,,,,,399,,,399,399,399,399,399,399',
'399,399,399,399,,399,399,399,399,399,,,,,,,,,,,,,,,,,,,,399,,,399,,',
'399,399,,,399,,,,,,399,,,,,,,,399,,,,,399,399,399,399,399,399,,,,399',
'399,428,428,428,,428,,,,428,428,,,,428,,428,428,428,428,428,428,428',
',,,,428,428,428,428,428,428,428,,,,,,,,,,428,,,428,428,428,428,428,428',
'428,428,428,428,,428,428,428,428,428,,,,,,,,,,,,,,,,,,,,428,,,428,,',
'428,428,,,428,,428,,428,,428,,,,,,,,428,,,,,428,428,428,428,428,428',
',,,428,428,430,430,430,,430,,,,430,430,,,,430,,430,430,430,430,430,430',
'430,,,,,430,430,430,430,430,430,430,,,,,,,,,,430,,,430,430,430,430,430',
'430,430,430,430,430,,430,430,430,430,430,,,,,,,,,,,,,,,,,,,,430,,,430',
',,430,430,,,430,,430,,430,,430,,,,,,,,430,,,,,430,430,430,430,430,430',
',,,430,430,433,433,433,,433,,,,433,433,,,,433,,433,433,433,433,433,433',
'433,,,,,433,433,433,433,433,433,433,,,,,,,,,,433,,,433,433,433,433,433',
'433,433,433,433,433,,433,433,433,433,433,,,,,,,,,,,,,,,,,,,,433,,,433',
',,433,433,,,433,,,,,,433,,,,,,,,433,,,,,433,433,433,433,433,433,,,,433',
'433,447,447,447,,447,,,,447,447,,,,447,,447,447,447,447,447,447,447',
',,,,447,447,447,447,447,447,447,,,447,,,,,,,447,,,447,447,447,447,447',
'447,447,447,447,447,,447,447,447,447,447,,,,,,,,,,,,,,,,,,,,447,,,447',
',,447,447,,,447,,447,,447,,447,,,,,,,,447,,,,,447,447,447,447,447,447',
',,,447,447,458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458',
'458,,,,,458,458,458,458,458,458,458,,,,,,,,,,458,,,458,458,458,458,458',
'458,458,458,458,458,,458,458,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458',
',,458,458,,,458,,458,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458,',
',,458,458,465,465,465,,465,,,,465,465,,,,465,,465,465,465,465,465,465',
'465,,,,,465,465,465,465,465,465,465,,,,,,,,,,465,,,465,465,465,465,465',
'465,465,465,465,465,,465,465,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465',
',,465,465,,,465,,,,,,465,,,,,,,,465,,,,,465,465,465,465,465,465,,,,465',
'465,466,466,466,,466,,,,466,466,,,,466,,466,466,466,466,466,466,466',
',,,,466,466,466,466,466,466,466,,,,,,,,,,466,,,466,466,466,466,466,466',
'466,466,466,466,,466,466,466,466,466,,,,,,,,,,,,,,,,,,,,466,,,466,,',
'466,466,,,466,,,,,,466,,,,,,,,466,,,,,466,466,466,466,466,466,,,,466',
'466,467,467,467,,467,,,,467,467,,,,467,,467,467,467,467,467,467,467',
',,,,467,467,467,467,467,467,467,,,,,,,,,,467,,,467,467,467,467,467,467',
'467,467,467,467,,467,467,467,467,467,,,,,,,,,,,,,,,,,,,,467,,,467,,',
'467,467,,,467,,,,,,467,,,,,,,,467,,,,,467,467,467,467,467,467,,,,467',
'467,471,471,471,,471,,,,471,471,,,,471,,471,471,471,471,471,471,471',
',,,,471,471,471,471,471,471,471,,,471,,,,,,,471,,,471,471,471,471,471',
'471,471,471,471,471,,471,471,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471',
',,471,471,,,471,,,,,,471,,,,,,,,471,,,,,471,471,471,471,471,471,,,,471',
'471,473,473,473,,473,,,,473,473,,,,473,,473,473,473,473,473,473,473',
',,,,473,473,473,473,473,473,473,,,,,,,,,,473,,,473,473,473,473,473,473',
'473,473,473,473,,473,473,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473,,',
'473,473,,,473,,473,,,,473,,,,,,,,473,,,,,473,473,473,473,473,473,,,',
'473,473,478,478,478,,478,,,,478,478,,,,478,,478,478,478,478,478,478',
'478,,,,,478,478,478,478,478,478,478,,,,,,,,,,478,,,478,478,478,478,478',
'478,478,478,478,478,,478,478,478,478,478,,,,,,,,,,,,,,,,,,,,478,,,478',
',,478,478,,,478,,478,,,,478,,,,,,,,478,,,,,478,478,478,478,478,478,',
',,478,478,481,481,481,,481,,,,481,481,,,,481,,481,481,481,481,481,481',
'481,,,,,481,481,481,481,481,481,481,,,,,,,,,,481,,,481,481,481,481,481',
'481,481,481,481,481,,481,481,481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481',
',,481,481,,,481,,,,,,481,,,,,,,,481,,,,,481,481,481,481,481,481,,,,481',
'481,484,484,484,,484,,,,484,484,,,,484,,484,484,484,484,484,484,484',
',,,,484,484,484,484,484,484,484,,,,,,,,,,484,,,484,484,484,484,484,484',
'484,484,484,484,,484,484,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,,',
'484,484,,,484,,,,,,484,,,,,,,,484,,,,,484,484,484,484,484,484,,,,484',
'484,498,498,498,,498,,,,498,498,,,,498,,498,498,498,498,498,498,498',
',,,,498,498,498,498,498,498,498,,,,,,,,,,498,,,498,498,498,498,498,498',
'498,498,498,498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,',
'498,498,,,498,,498,,,,498,,,,,,,,498,,,,,498,498,498,498,498,498,,,',
'498,498,499,499,499,,499,,,,499,499,,,,499,,499,499,499,499,499,499',
'499,,,,,499,499,499,499,499,499,499,,,,,,,,,,499,,,499,499,499,499,499',
'499,499,499,499,499,,499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499',
',,499,499,,,499,,499,,,,499,,,,,,,,499,,,,,499,499,499,499,499,499,',
',,499,499,508,508,508,,508,,,,508,508,,,,508,,508,508,508,508,508,508',
'508,,,,,508,508,508,508,508,508,508,,,,,,,,,,508,,,508,508,508,508,508',
'508,508,508,508,508,,508,508,508,508,508,,,,,,,,,,,,,,,,,,,,508,,,508',
',,508,508,,,508,,508,,,,508,,,,,,,,508,,,,,508,508,508,508,508,508,',
',,508,508,512,512,512,,512,,,,512,512,,,,512,,512,512,512,512,512,512',
'512,,,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512,512,512',
'512,512,512,512,512,512,,512,512,512,512,512,,,,,,,,,,,,,,,,,,,,512',
',,512,,,512,512,,,512,,,,,,512,,,,,,,,512,,,,,512,512,512,512,512,512',
',,,512,512,536,536,536,536,536,536,536,536,536,536,536,536,536,536,536',
'536,536,536,536,536,536,536,536,536,,,536,536,536,536,536,536,536,536',
'536,536,,,,,,536,536,536,536,536,536,536,536,,,536,,,,,,,536,536,,536',
'536,536,536,,536,536,,,536,,,,,536,536,536,536,,,,,,,,,,,,,,536,536',
',536,536,536,536,536,536,536,536,536,,536,,,536,536,,,539,539,539,,539',
',,536,539,539,,,,539,,539,539,539,539,539,539,539,,,,,539,539,539,539',
'539,539,539,,,,,,,,,,539,,,539,539,539,539,539,539,539,539,539,539,',
'539,539,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,,',
',,539,,,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539,540,540,540',
',540,,,,540,540,,,,540,,540,540,540,540,540,540,540,,,,,540,540,540',
'540,540,540,540,,,,,,,,,,540,,,540,540,540,540,540,540,540,540,540,540',
',540,540,540,540,540,,,,,,,,,,,,,,,,,,,,540,,,540,,,540,540,,,540,,540',
',,,540,,,,,,,,540,,,,,540,540,540,540,540,540,,,,540,540,543,543,543',
',543,,,,543,543,,,,543,,543,543,543,543,543,543,543,,,,,543,543,543',
'543,543,543,543,,,,,,,,,,543,,,543,543,543,543,543,543,543,543,543,543',
',543,543,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543,,,543,,',
',,,543,,,,,,,,543,,,,,543,543,543,543,543,543,,,,543,543,544,544,544',
',544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,544,544,544',
'544,544,544,544,,,,,,,,,,544,,,544,544,544,544,544,544,544,544,544,544',
',544,544,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,,544,,',
',,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,548,548,548',
',548,,,,548,548,,,,548,,548,548,548,548,548,548,548,,,,,548,548,548',
'548,548,548,548,,,,,,,,,,548,,,548,548,548,548,548,548,548,548,548,548',
',548,548,548,548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,,548,548,,,548,,',
',,,548,,,,,,,,548,,,,,548,548,548,548,548,548,,,,548,548,551,551,551',
',551,,,,551,551,,,,551,,551,551,551,551,551,551,551,,,,,551,551,551',
'551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551,551,551,551,551,551',
',551,551,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,,551,,',
',,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551,558,558,558',
',558,,,,558,558,,,,558,,558,558,558,558,558,558,558,,,,,558,558,558',
'558,558,558,558,,,,,,,,,,558,,,558,558,558,558,558,558,558,558,558,558',
',558,558,558,558,558,,,,,,,,,,,,,,,,,,,,558,,,558,,,558,558,,,558,,',
',,,558,,,,,,,,558,,,,,558,558,558,558,558,558,,,,558,558,559,559,559',
',559,,,,559,559,,,,559,,559,559,559,559,559,559,559,,,,,559,559,559',
'559,559,559,559,,,,,,,,,,559,,,559,559,559,559,559,559,559,559,559,559',
',559,559,,,559,,,,,,,,,,,,,,,,,,,,559,,,559,,,559,559,,,559,,559,,559',
',,,,,,,,559,,,,,,559,559,559,559,559,559,,,,559,559,562,562,562,,562',
',,,562,562,,,,562,,562,562,562,562,562,562,562,,,,,562,562,562,562,562',
'562,562,,,,,,,,,,562,,,562,562,562,562,562,562,562,562,562,562,,562',
'562,562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,562,,,562,,,,,,562',
',,,,,,,562,,,,,562,562,562,562,562,562,,,,562,562,566,566,566,,566,',
',,566,566,,,,566,,566,566,566,566,566,566,566,,,,,566,566,566,566,566',
'566,566,,,,,,,,,,566,,,566,566,566,566,566,566,566,566,566,566,,566',
'566,566,566,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566,,,,,,566',
',,,,,,,566,,,,,566,566,566,566,566,566,,,,566,566,582,582,582,,582,',
',,582,582,,,,582,,582,582,582,582,582,582,582,,,,,582,582,582,582,582',
'582,582,,,,,,,,,,582,,,582,582,582,582,582,582,582,582,582,582,,582',
'582,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582,582,,,582,,582,,582',
',582,,,,,,,,582,,,,,582,582,582,582,582,582,,,,582,582,586,586,586,',
'586,,,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,586,586,586,586',
'586,586,586,,,,,,,,,,586,,,586,586,586,586,586,586,586,586,586,586,',
'586,586,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,,',
',,586,,,,,,,,586,,,,,586,586,586,586,586,586,,,,586,586,614,614,614',
',614,,,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,614,614,614',
'614,614,614,614,,,,,,,,,,614,,,614,614,614,614,614,614,614,614,614,614',
',614,614,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614,,',
',,,614,,,,,,,,614,,,,,614,614,614,614,614,614,,,,614,614,630,630,630',
',630,,,,630,630,,,,630,,630,630,630,630,630,630,630,,,,,630,630,630',
'630,630,630,630,,,,,,,,,,630,,,630,630,630,630,630,630,630,630,630,630',
',630,630,630,630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630,,',
',,,630,,,,,,,,630,,,,,630,630,630,630,630,630,,,,630,630,636,636,636',
',636,,,,636,636,,,,636,,636,636,636,636,636,636,636,,,,,636,636,636',
'636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636,636',
'636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636',
',,,,,636,,,,,,,,636,,,,,636,636,636,636,636,636,,,,636,636,681,681,681',
',681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,,681,681,681',
'681,681,681,681,,,,,,,,,,681,,,681,681,681,681,681,681,681,681,681,681',
',681,681,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,',
',,,681,,,,,,,,681,,,,,681,681,681,681,681,681,,,,681,681,682,682,682',
',682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,,682,682,682',
'682,682,682,682,,,,,,,,,,682,,,682,682,682,682,682,682,682,682,682,682',
',682,682,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,',
',,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682,682,692,692,692',
',692,,,,692,692,,,,692,,692,692,692,692,692,692,692,,,,,692,692,692',
'692,692,692,692,,,,,,,,,,692,,,692,692,692,692,692,692,692,692,692,692',
',692,692,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692,,',
',,,692,,,,,,,,692,,,,,692,692,692,692,692,692,,,,692,692,693,693,693',
',693,,,,693,693,,,,693,,693,693,693,693,693,693,693,,,,,693,693,693',
'693,693,693,693,,,,,,,,,,693,,,693,693,693,693,693,693,693,693,693,693',
',693,693,693,693,693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693,693,,,693,,',
',,,693,,,,,,,,693,,,,,693,693,693,693,693,693,,,,693,693,694,694,694',
',694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,,694,694,694',
'694,694,694,694,,,,,,,,,,694,,,694,694,694,694,694,694,694,694,694,694',
',694,694,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,',
',,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694,694,700,700,700',
',700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,700,700,700',
'700,700,700,700,,,,,,,,,,700,,,700,700,700,700,700,700,700,700,700,700',
',700,700,,,700,,239,239,239,239,239,239,239,239,239,239,239,,239,239',
',,239,239,700,,,700,,,700,700,,,700,,,,239,,239,,239,239,239,239,239',
'239,239,,239,,,700,700,700,700,700,700,,,,700,700,706,706,706,239,706',
',,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,706,706,706,706,706',
'706,706,,,,,,,,,,706,,,706,706,706,706,706,706,706,706,706,706,,706',
'706,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,,706,,706,,706',
',706,,,,,,,,706,,,,,706,706,706,706,706,706,,,,706,706,715,715,715,',
'715,,,,715,715,,,,715,,715,715,715,715,715,715,715,,,,,715,715,715,715',
'715,715,715,,,,,,,,,,715,,,715,715,715,715,715,715,715,715,715,715,',
'715,715,715,715,715,,,,,,,,,,,,,,,,,,,,715,,,715,,,715,715,,,715,,715',
',715,,715,,,,,,,,715,,,,,715,715,715,715,715,715,,,,715,715,717,717',
'717,,717,,,,717,717,,,,717,,717,717,717,717,717,717,717,,,,,717,717',
'717,717,717,717,717,,,,,,,,,,717,,,717,717,717,717,717,717,717,717,717',
'717,,717,717,717,717,717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,,717',
',717,,717,,717,,,,,,,,717,,,,,717,717,717,717,717,717,,,,717,717,730',
'730,730,,730,,,,730,730,,,,730,,730,730,730,730,730,730,730,,,,,730',
'730,730,730,730,730,730,,,,,,,,,,730,,,730,730,730,730,730,730,730,730',
'730,730,,730,730,,,730,,684,684,684,684,684,684,684,684,684,684,684',
',684,684,,,684,684,730,,,730,,,730,730,,,730,,,,684,,684,,684,684,684',
'684,684,684,684,,684,,,730,730,730,730,730,730,,,,730,730,736,736,736',
'684,736,,,,736,736,,,,736,,736,736,736,736,736,736,736,,,,,736,736,736',
'736,736,736,736,,,736,,,,,,,736,,,736,736,736,736,736,736,736,736,736',
'736,,736,736,736,736,736,,,,,,,,,,,,,,,,,,,,736,,,736,,,736,736,,,736',
',,,,,736,,,,,,,,736,,,,,736,736,736,736,736,736,,,,736,736,742,742,742',
',742,,,,742,742,,,,742,,742,742,742,742,742,742,742,,,,,742,742,742',
'742,742,742,742,,,,,,,,,,742,,,742,742,742,742,742,742,742,742,742,742',
',742,742,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742,,742',
',,,742,,,,,,,,742,,,,,742,742,742,742,742,742,,,,742,742,761,761,761',
',761,,,,761,761,,,,761,,761,761,761,761,761,761,761,,,,,761,761,761',
'761,761,761,761,,,,,,,,,,761,,,761,761,761,761,761,761,761,761,761,761',
',761,761,761,761,761,,,,,,,,,,,,,,,,,,,,761,,,761,,,761,761,,,761,,',
',,,761,,,,,,,,761,,,,,761,761,761,761,761,761,,,,761,761,770,770,770',
',770,,,,770,770,,,,770,,770,770,770,770,770,770,770,,,,,770,770,770',
'770,770,770,770,,,,,,,,,,770,,,770,770,770,770,770,770,770,770,770,770',
',770,770,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,,,770,770,,,770,,',
',,,770,,,,,,,,770,,,,,770,770,770,770,770,770,,,,770,770,771,771,771',
',771,,,,771,771,,,,771,,771,771,771,771,771,771,771,,,,,771,771,771',
'771,771,771,771,,,,,,,,,,771,,,771,771,771,771,771,771,771,771,771,771',
',771,771,,,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,,771,,771',
',,,,,,,,,,,,,,771,771,771,771,771,771,,,,771,771,782,782,782,,782,,',
',782,782,,,,782,,782,782,782,782,782,782,782,,,,,782,782,782,782,782',
'782,782,,,,,,,,,,782,,,782,782,782,782,782,782,782,782,782,782,,782',
'782,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,,782,,,,,,782',
',,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,788,788,788,,788,',
',,788,788,,,,788,,788,788,788,788,788,788,788,,,,,788,788,788,788,788',
'788,788,,,,,,,,,,788,,,788,788,788,788,788,788,788,788,788,788,,788',
'788,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788',
',,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788,790,790,790,,790,',
',,790,790,,,,790,,790,790,790,790,790,790,790,,,,,790,790,790,790,790',
'790,790,,,,,,,,,,790,,,790,790,790,790,790,790,790,790,790,790,,790',
'790,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,,,,,790',
',,,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,804,804,804,,804,',
',,804,804,,,,804,,804,804,804,804,804,804,804,,,,,804,804,804,804,804',
'804,804,,,,,,,,,,804,,,804,804,804,804,804,804,804,804,804,804,,804',
'804,804,804,804,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,804,,,804,,,,,,804',
',,,,,,,804,,,,,804,804,804,804,804,804,,,,804,804,822,822,822,,822,',
',,822,822,,,,822,,822,822,822,822,822,822,822,,,,,822,822,822,822,822',
'822,822,,,,,,,,,,822,,,822,822,822,822,822,822,822,822,822,822,,822',
'822,,,822,,679,679,679,679,679,679,679,679,679,679,679,,679,679,,,679',
'679,822,,,822,,,822,822,,,822,,,,679,,679,,679,679,679,679,679,679,679',
',679,,,822,822,822,822,822,822,,,,822,822,824,824,824,679,824,,,,824',
'824,,,,824,,824,824,824,824,824,824,824,,,,,824,824,824,824,824,824',
'824,,,,,,,,,,824,,,824,824,824,824,824,824,824,824,824,824,,824,824',
'824,824,824,,,,,,,,,,,,,,,,,,,,824,,,824,,,824,824,,,824,,824,,,,824',
',,,,,,,824,,,,,824,824,824,824,824,824,,,,824,824,829,829,829,,829,',
',,829,829,,,,829,,829,829,829,829,829,829,829,,,,,829,829,829,829,829',
'829,829,,,,,,,,,,829,,,829,829,829,829,829,829,829,829,829,829,,829',
'829,,,829,,376,376,376,376,376,376,376,376,376,376,376,,376,376,,,376',
'376,829,,,829,,,829,829,,,829,,,,376,,376,,376,376,376,376,376,376,376',
',376,,,829,829,829,829,829,829,,,,829,829,834,834,834,376,834,,,,834',
'834,,,,834,,834,834,834,834,834,834,834,,,,,834,834,834,834,834,834',
'834,,,,,,,,,,834,,,834,834,834,834,834,834,834,834,834,834,,834,834',
'834,834,834,,,,,,,,,,,,,,,,,,,,834,,,834,,,834,834,,,834,,834,,834,',
'834,,,,,,,,834,,,,,834,834,834,834,834,834,,,,834,834,837,837,837,,837',
',,,837,837,,,,837,,837,837,837,837,837,837,837,,,,,837,837,837,837,837',
'837,837,,,,,,,,,,837,,,837,837,837,837,837,837,837,837,837,837,,837',
'837,837,837,837,,,,,,,,,,,,,,,,,,,,837,,,837,,,837,837,,,837,,837,,837',
',837,,,,,,,,837,,,,,837,837,837,837,837,837,,,,837,837,863,863,863,',
'863,,,,863,863,,,,863,,863,863,863,863,863,863,863,,,,,863,863,863,863',
'863,863,863,,,,,,,,,,863,,,863,863,863,863,863,863,863,863,863,863,',
'863,863,,,863,,769,769,769,769,769,769,769,769,769,769,769,,769,769',
',,769,769,863,,,863,,,863,863,,,863,,,,769,,769,,769,769,769,769,769',
'769,769,,769,,,863,863,863,863,863,863,,,,863,863,866,866,866,769,866',
',,,866,866,,,,866,,866,866,866,866,866,866,866,,,,,866,866,866,866,866',
'866,866,,,,,,,,,,866,,,866,866,866,866,866,866,866,866,866,866,,866',
'866,866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,,866,,,,,,866',
',,,,,,,866,,,,,866,866,866,866,866,866,,,,866,866,869,869,869,,869,',
',,869,869,,,,869,,869,869,869,869,869,869,869,,,,,869,869,869,869,869',
'869,869,,,,,,,,,,869,,,869,869,869,869,869,869,869,869,869,869,,869',
'869,869,869,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,,869,,,,,,869',
',,,,,,,869,,,,,869,869,869,869,869,869,,,,869,869,877,877,877,,877,',
',,877,877,,,,877,,877,877,877,877,877,877,877,,,,,877,877,877,877,877',
'877,877,,,,,,,,,,877,,,877,877,877,877,877,877,877,877,877,877,,877',
'877,,,877,,390,390,390,390,390,390,390,390,390,390,390,,390,390,,,390',
'390,877,,,877,,,877,877,,,877,,,,390,,390,,390,390,390,390,390,390,390',
',390,,,877,877,877,877,877,877,,,,877,877,882,882,882,390,882,,,,882',
'882,,,,882,,882,882,882,882,882,882,882,,,,,882,882,882,882,882,882',
'882,,,,,,,,,,882,,,882,882,882,882,882,882,882,882,882,882,,882,882',
'882,882,882,,,,,,,,,,,,,,,,,,,,882,,,882,,,882,882,,,882,,882,,882,',
'882,,,,,,,,882,,,,,882,882,882,882,882,882,,,,882,882,888,888,888,,888',
',,,888,888,,,,888,,888,888,888,888,888,888,888,,,,,888,888,888,888,888',
'888,888,,,,,,,,,,888,,,888,888,888,888,888,888,888,888,888,888,,888',
'888,,,888,,602,602,602,602,602,602,602,602,602,602,602,,602,602,,,602',
'602,888,,,888,,,888,888,,,888,,,,602,,602,,602,602,602,602,602,602,602',
',602,,,888,888,888,888,888,888,,,,888,888,891,891,891,602,891,,,,891',
'891,,,,891,,891,891,891,891,891,891,891,,,,,891,891,891,891,891,891',
'891,,,,,,,,,,891,,,891,891,891,891,891,891,891,891,891,891,,891,891',
'891,891,891,,,,,,,,,,,,,,,,,,,,891,,,891,,,891,891,,,891,,,,,,891,,',
',,,,,891,,,,,891,891,891,891,891,891,,,,891,891,64,64,64,64,64,64,64',
'64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,,,64,64,64,64,64',
'64,64,64,64,64,,,,,,64,64,64,64,64,64,64,64,64,64,64,64,,,,,,64,64,',
'64,64,64,64,,64,64,,,64,,,,,64,64,64,64,,,,,,64,,,,,,,,64,64,,64,64',
'64,64,64,64,64,64,64,,64,,,64,666,666,666,666,666,666,666,666,666,666',
'666,666,666,666,666,666,666,666,666,666,666,666,666,666,,,666,666,666',
'666,666,666,666,666,666,666,,,,,,666,666,666,666,666,666,666,666,,,666',
',,,,,,666,666,,666,666,666,666,,666,666,,,666,,,,,666,666,666,666,,',
',,,,,,,,,,,666,666,,666,666,666,666,666,666,666,666,666,,666,,,666,583',
'583,583,583,583,583,583,583,583,583,583,,583,583,,,583,583,,,,583,,',
',,,,,,,,583,,583,,583,583,583,583,583,583,583,,583,,,,,,,,,,,,,,,,,583',
',583,425,425,425,425,425,425,425,425,425,425,425,,425,425,,,425,425',
',,,,,,,,,,,,,,425,,425,,425,425,425,425,425,425,425,,425,,,,,,,,393',
'393,,,393,,,,,425,425,393,393,,393,393,393,393,,393,393,,,393,,,,,393',
'393,393,393,,,,,,,,,,,,,,393,393,,393,393,393,393,393,393,393,393,393',
',393,501,501,393,,501,,,,,,,501,501,,501,501,501,501,,501,501,,,501',
',,,,501,501,501,501,,,,,,,,,,,,,,501,501,,501,501,501,501,501,501,501',
'501,501,,501,507,507,501,,507,,,,,,,507,507,,507,507,507,507,,507,507',
',,507,,,,,507,507,507,507,,,,,,,,,,,,,,507,507,,507,507,507,507,507',
'507,507,507,507,,507,509,509,507,,509,,,,,,,509,509,,509,509,509,509',
',509,509,,,509,,,,,509,509,509,509,,,,,,,,,,,,,,509,509,,509,509,509',
'509,509,509,509,509,509,,509,468,468,509,,468,,,,,,,468,468,,468,468',
'468,468,,468,468,,,468,,,,,468,468,468,468,,,,,,,,,,,,,,468,468,,468',
'468,468,468,468,468,468,468,468,,468,469,469,468,,469,,,,,,,469,469',
',469,469,469,469,,469,469,,,469,,,,,469,469,469,469,,,,,,,,,,,,,,469',
'469,,469,469,469,469,469,469,469,469,469,,469,,,469,733,733,733,733',
'733,733,733,733,733,733,733,,733,733,,,733,733,,,,,,,,,,,,,,,733,,733',
',733,733,733,733,733,733,733,,733,,,,,,,253,253,,,253,,,,,733,733,253',
'253,,253,253,253,253,,253,253,,,253,,,,,253,253,253,253,,,,,,,,,,,,',
',253,253,,253,253,253,253,253,253,253,253,253,,253,254,254,253,,254',
',,,,,,254,254,,254,254,254,254,,254,254,,,254,,,,,254,254,254,254,,',
',,,,,,,,,,,254,254,,254,254,254,254,254,254,254,254,254,,254,194,194',
'254,,194,,,,,,,194,194,,194,194,194,194,,194,194,,,194,,,,,194,194,194',
'194,,,,,,,,,,,,,,194,194,,194,194,194,194,194,194,194,194,194,,194,825',
'825,194,,825,,,,,,,825,825,,825,825,825,825,,825,825,,,825,,,,,825,825',
'825,825,,,,,,,,,,,,,,825,825,,825,825,825,825,825,825,825,825,825,,825',
'460,460,825,,460,,,,,,,460,460,,460,460,460,460,,460,460,,,460,,,,,460',
'460,460,460,,,,,,,,,,,,,,460,460,,460,460,460,460,460,460,460,460,460',
',460,826,826,460,,826,,,,,,,826,826,,826,826,826,826,,826,826,,,826',
',,,,826,826,826,826,,,,,,,,,,,,,,826,826,,826,826,826,826,826,826,826',
'826,826,,826,459,459,826,,459,,,,,,,459,459,,459,459,459,459,,459,459',
',,459,,,,,459,459,459,459,,,,,,,,,,,,,,459,459,,459,459,459,459,459',
'459,459,459,459,,459,500,500,459,,500,,,,,,,500,500,,500,500,500,500',
',500,500,,,500,,,,,500,500,500,500,,,,,,,,,,,,,,500,500,,500,500,500',
'500,500,500,500,500,500,,500,394,394,500,,394,,,,,,,394,394,,394,394',
'394,394,,394,394,,,394,,,,,394,394,394,394,,,,,,,,,,,,,,394,394,,394',
'394,394,394,394,394,394,394,394,,394,580,580,394,,580,,,,,,,580,580',
',580,580,580,580,,580,580,,,580,,,,,580,580,580,580,,,,,,,,,,,,,,580',
'580,,580,580,580,580,580,580,580,580,580,,580,195,195,580,,195,,,,,',
',195,195,,195,195,195,195,,195,195,,,195,,,,,195,195,195,195,,,,,,,',
',,,,,,195,195,,195,195,195,195,195,195,195,195,195,,195,581,581,195',
',581,,,,,,,581,581,,581,581,581,581,,581,581,,,581,,,,,581,581,581,581',
',,,,,,,,,,,,,581,581,,581,581,581,581,581,581,581,581,581,,581,,,581',
'482,482,482,482,482,482,482,482,482,482,482,,482,482,,,482,482,,,,,',
',,,,,,,,,482,,482,,482,482,482,482,482,482,482,,482,,19,19,19,19,19',
'19,19,19,19,19,19,,19,19,482,482,19,19,,,,,,,,,,,,,,,19,,19,,19,19,19',
'19,19,19,19,,19,,,,,,,,,,,,,,,,,19' ]
        racc_action_check = arr = ::Array.new(24171, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2575,   903,   nil,   166,   877,  4872,  4992,  5112,   565,   497,
   857,   839,   880,   409,   220,   244,   nil,  5224,  5344, 24046,
   832,   nil,  5464,  5584,  5704,   343,   158,  5824,  5944,   nil,
  1244,  6064,  6184,   nil,   636,   297,   684,   315,  6304,  6424,
  6544,   552,   420,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   288,  3180,  6664,  6784,  6904,    53,  7024,  7144,   nil,   nil,
   750,  7264,  7384,  7504, 22608,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -94,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7624,   nil,   nil,   nil,  7744,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   620,   nil,   877,
   nil,   nil,   nil,  7864,  7984,  8104,  8224,  8344,   994,   nil,
   416,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   110,   nil,  1849,  1970,
  8464,  8584,  8704,  8824, 23421, 23893,  8944,  9064,  9184,   nil,
   794,   111,   924,    70,   756,   806,  3059,   nil,   nil,  9304,
  9424,  9544,  9664,  9784,  9904, 10024, 10144, 10264, 10384, 10504,
 10624, 10744, 10864, 10984, 11104, 11224, 11344, 11464, 11584, 11704,
 11824, 11944, 12064, 12184, 12304, 12424,   nil,   nil,   nil, 19489,
   nil,   838,   841, 12544,   nil, 12664,   886,   nil,   nil,   nil,
   nil,   nil,   nil, 23303, 23362,   879, 12784, 12904,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 13024,   887,  2938,   895,   897,
   859, 13144,  2817,   434,   619,   934,   621,   908,   872,   137,
   nil,   910,   380,   nil,   nil,   193,   939,   941,   627,   nil,
   943,   nil, 13264,   nil,  1003,  1002,   551,   nil,   914,   327,
   429, 13384,   948,   411,   931,   400,   nil,   565,    -7,    10,
 13504, 13624,   216,   149,   914,     1,   674,   990,   -18,  1030,
   nil,   nil,   371,   374,   -20,   nil,   753,   nil,     9, 13744,
   nil,   nil,   211,   203,   -23,   -44,   -47,   267,   493,   392,
   nil,   344,   nil, 13864,   nil,   199,   189,   -33,   145,   -37,
   215,   nil,   913,   nil,   nil,   nil,   nil,   nil,   nil, 13984,
   nil,   nil,   nil,   nil,   -56,   -21,   nil,   nil,   750,   nil,
   -30,  4752,   nil,    62,   nil,   nil, 21409,   113,   317,   -72,
 14096,   nil,   nil,   106,   131,     0,   nil, 14216, 14336,   nil,
 22129,   nil,   nil, 22895, 23775, 14456,   114, 14576, 14696, 14816,
  1607,  2091,   572,   490,   204,   218,   227,   246,  2817,  2938,
  3059,  2575,  2454,  1849,  2696,  2212,  1244,  1365,  1486,  1728,
  1970,   396,   482,  2333,   997, 22829,   220,   nil, 14936,   nil,
 15056,   256,   nil, 15176,   212,   nil,   nil,   394,   nil,   nil,
   332,   298,   -62,   325,   429,   nil,   nil, 15296,    95,   170,
   413,   nil,   422,   392,   nil,   nil,   nil,   459, 15416, 23657,
 23539,   866,   470,   nil,   nil, 15536, 15656, 15776, 23131, 23190,
  7265, 15896,   583, 16016,   nil,   484,   nil,   nil, 16136,   nil,
   nil, 16256, 24000,   nil, 16376,   nil,   nil,   nil,  4632,   615,
   nil,   nil,  4269,    67,   114,   612,   620,  4148, 16496, 16616,
 23716, 22954,    26,   nil,   nil,   373,   nil, 23013, 16736, 23072,
   nil,   nil, 16856,   314,   -34,  3543,   927,   nil,   nil,   nil,
   -32,   nil,   nil,   nil,   524,   nil,   nil,   nil,   520,   nil,
   141,   nil,   nil,   516,   nil,   nil, 16976,   nil,   nil, 17088,
 17208,   nil,   315, 17328, 17448,   575,   nil,   nil, 17568,   577,
   nil, 17688,   -37,   -31,   630,   510,   585,  1118, 17808, 17928,
   nil,  2212, 18048,   571,   nil,   620, 18168,   nil,   622,   nil,
   611,   nil,   nil,   nil,   nil,   nil,   -50,   nil,   623,   633,
 23834, 23952, 18288, 22765,   143,   599, 18408,   nil,   648,   nil,
  2091,  1728,   nil,   -70,   nil,   647,    38,   144,   654,   341,
   860,   661, 22369,   686,   694,    24,   750,   nil,  1607,   637,
   701,   nil,   nil,   699, 18528,   nil,   nil,    18,   nil,   774,
   nil,   nil,   nil,   nil,   nil,   780,   nil,   781,   665,    11,
 18648,   704,    23,     4,    24,    -9, 18768,   257,   529,   nil,
   716,  4027,   248,   nil,   nil,   819,  3906,   560,   222,   707,
   710,   711,   nil,   nil,   nil,   nil,   nil,   712,   nil,   nil,
   nil,   nil,   795,   nil,   nil,   797, 22717,   771,   nil,   nil,
   nil,   nil,   nil,  3422,   nil,   nil,   nil,   nil,   nil, 21169,
   734, 18888, 19008,   nil, 19969,   nil, 13145,   nil,   nil,  7505,
   nil,  7385, 19128, 19248, 19368,   191,  6185,   nil,   751,  1118,
 19488,   nil,   785,   882,   775,   nil, 19608,   778,  2454,   nil,
   nil,   826,   827,   110,   915, 19728,   nil, 19848,   819,   nil,
   861,   840,   948,   388,   nil,   nil,  2333,   nil,   nil,    32,
 19968,   nil,   nil, 23238,   951,   nil, 20088,   952,  1486,  1365,
   nil,   nil, 20208,  4511,   nil,    25,   132,   nil,   964,   nil,
  4390,   nil,  1000,   915,   nil,   453,   nil,   216,   nil,   nil,
   439, 20328,   nil,   nil,   nil,   nil,   758,   nil,   nil, 21769,
 20448, 20568,   750,   812,   208,   296,   210,   246,   nil,   nil,
   nil,   nil, 20688,   nil,   367,   464,   447,   nil, 20808,   465,
 20928,   nil,   nil,   nil,   nil,   nil,  3785,   nil,   nil,   nil,
    31,   nil,   608,   609, 21048,   202,   nil,   nil,   628,   nil,
   551,   518,   520,   nil,   nil,   539,   537,   nil,   nil,   680,
   nil,   nil, 21168,   997, 21288, 23480, 23598,   649,   625, 21408,
  6065,   nil,   nil,   nil, 21528,   670,   nil, 21648,   743,   865,
  3664,   nil,   nil,   nil,   nil,   nil,   nil,  3301,   nil,   nil,
   391,   nil,   nil,   nil,  2696,   nil,   817,   848,   867,   384,
   197,   403,   613, 21768,   nil,   nil, 21888,   462,   nil, 22008,
   nil,   nil,   391,   660,   570,   718,   697, 22128,   624,   nil,
   258,   nil, 22248,   -81,   nil,   nil,   nil,   nil, 22368,   nil,
   nil, 22488,   nil,   nil,   468,   nil ]

racc_action_default = [
    -4,  -499,    -1,  -487,    -5,  -499,  -499,  -499,  -499,  -499,
  -499,  -499,  -499,  -499,  -271,   -32,   -33,  -499,  -499,   -38,
   -40,   -41,  -282,  -315,  -316,   -45,  -249,  -363,  -285,   -58,
    -4,   -62,   -67,   -68,  -499,  -430,  -499,  -499,  -499,  -499,
  -499,  -489,  -214,  -264,  -265,  -266,  -267,  -268,  -269,  -270,
  -477,    -4,  -499,  -498,  -469,  -288,  -499,  -499,  -292,  -295,
  -487,  -499,  -499,  -499,  -499,  -317,  -318,  -320,  -321,  -383,
  -384,  -385,  -386,  -387,  -401,  -390,  -403,  -403,  -394,  -399,
  -413,  -403,  -415,  -416,  -419,  -420,  -421,  -422,  -423,  -424,
  -425,  -426,  -427,  -428,  -429,  -432,  -433,  -499,    -3,  -488,
  -494,  -495,  -496,  -499,  -499,  -499,  -499,  -499,    -6,    -8,
  -499,   -93,   -94,   -95,   -96,   -97,   -98,   -99,  -100,  -101,
  -105,  -106,  -107,  -108,  -109,  -110,  -111,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,   -13,  -102,    -4,    -4,
  -499,  -499,  -499,  -498,  -499,  -499,  -499,  -499,  -499,   -36,
  -499,  -430,  -499,  -271,  -499,  -499,    -4,   -37,  -206,  -499,
  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,
  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,  -499,
  -499,  -499,  -499,  -499,  -499,  -499,  -353,  -355,   -42,  -215,
  -228,  -258,  -258,  -499,  -236,  -499,  -259,  -282,  -315,  -316,
  -472,   -43,   -44,  -499,  -499,   -50,  -498,  -499,  -287,  -358,
  -364,  -366,   -56,  -362,   -57,  -499,   -58,    -4,  -499,  -499,
   -63,   -65,    -4,   -72,  -499,  -499,   -79,  -285,  -489,  -499,
  -319,  -363,  -499,   -66,   -70,  -278,  -417,  -418,  -499,  -191,
  -192,  -207,  -499,  -490,  -375,  -499,  -274,  -216,  -489,  -491,
  -491,  -499,  -499,  -491,  -499,  -491,  -289,   -39,  -499,  -499,
  -499,  -499,  -487,  -499,  -488,  -430,  -499,  -499,  -271,  -499,
  -333,  -334,   -88,   -89,  -499,   -91,  -499,  -271,  -499,  -499,
  -430,  -308,   -93,   -94,  -131,  -132,  -148,  -153,  -160,  -163,
  -310,  -499,  -467,  -499,  -388,  -499,  -499,  -499,  -499,  -499,
  -499,   896,    -7,  -497,   -14,   -15,   -16,   -17,   -18,  -499,
   -10,   -11,   -12,  -103,  -499,  -499,   -21,   -29,  -171,  -259,
  -499,  -499,   -22,   -30,   -31,   -23,  -173,  -499,  -478,  -479,
  -226,  -480,  -481,  -478,  -249,  -479,  -361,  -483,  -484,   -28,
  -180,   -34,   -35,  -499,  -499,  -498,  -278,  -499,  -499,  -499,
  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
  -205,  -208,  -209,  -210,  -211,  -499,  -349,  -229,  -499,  -231,
  -499,  -258,  -256,  -499,  -249,  -478,  -479,  -249,   -48,   -51,
  -499,  -489,  -489,  -258,  -228,  -250,  -251,  -252,  -349,  -349,
  -499,  -284,  -499,   -59,  -276,   -71,   -64,  -499,  -498,  -499,
  -499,   -78,  -499,  -417,  -418,  -499,  -499,  -499,  -499,  -499,
  -212,  -499,  -498,  -498,  -273,  -489,  -217,  -218,  -493,  -492,
  -220,  -493,  -489,  -280,  -493,  -471,  -281,  -470,    -4,  -322,
  -323,  -324,    -4,  -499,  -499,  -499,  -499,    -4,  -499,  -498,
  -499,  -499,  -278,  -301,   -88,   -89,   -90,  -499,  -498,  -499,
  -304,  -434,  -499,  -499,  -499,    -4,  -447,  -312,  -485,  -486,
  -489,  -389,  -402,  -405,  -499,  -407,  -391,  -404,  -499,  -393,
  -499,  -396,  -398,  -499,  -414,    -9,  -499,   -19,   -20,  -499,
  -499,  -263,  -279,  -499,  -499,   -52,  -227,  -359,  -499,   -54,
  -360,  -499,  -478,  -479,  -482,  -277,  -499,  -171,  -499,  -499,
  -351,    -4,  -499,  -258,  -257,  -260,  -499,  -473,  -499,  -235,
  -499,  -474,   -46,  -356,   -47,  -357,  -349,  -222,  -499,  -499,
  -499,  -499,  -499,   -38,  -499,  -258,  -499,  -248,  -499,  -254,
    -4,    -4,  -283,   -59,   -69,  -499,  -478,  -479,  -226,   -75,
   -77,  -499,  -179,  -189,  -190,  -499,  -498,  -331,    -4,  -376,
  -498,  -377,  -378,  -499,  -499,  -260,  -221,  -498,  -325,  -498,
  -293,  -326,  -327,  -328,  -296,  -499,  -299,  -499,  -369,  -499,
  -499,  -499,  -478,  -479,  -482,  -277,  -499,   -88,   -89,   -92,
  -499,    -4,  -499,  -436,  -306,  -499,    -4,  -447,  -499,  -466,
  -466,  -466,  -446,  -448,  -449,  -450,  -451,  -452,  -453,  -456,
  -458,  -459,  -461,  -462,  -463,  -499,  -499,  -499,  -406,  -409,
  -410,  -411,  -412,    -4,  -392,  -395,  -397,  -400,  -104,  -172,
  -261,  -499,  -499,   -25,  -175,   -26,  -176,   -53,   -27,  -177,
   -55,  -178,  -499,  -499,  -499,  -279,  -213,  -335,  -337,  -347,
  -499,  -350,  -499,  -499,  -258,  -233,  -499,  -258,    -4,  -223,
  -224,  -226,  -226,  -489,  -499,  -499,  -241,  -499,  -258,  -253,
  -499,  -499,  -499,   -73,  -286,    -2,    -4,  -382,  -332,  -499,
  -499,  -380,  -275,  -489,  -499,  -329,  -499,  -499,    -4,    -4,
  -298,  -300,  -499,    -4,  -371,  -279,  -499,  -279,  -499,  -435,
    -4,  -309,  -499,  -489,  -438,  -499,  -442,  -499,  -444,  -445,
  -499,  -499,  -460,  -464,  -313,  -468,  -499,  -262,   -24,  -174,
  -499,  -338,   -80,  -499,  -499,   -87,  -346,  -499,  -348,  -352,
  -354,  -230,  -499,  -232,  -499,  -499,  -258,  -238,  -499,  -258,
  -499,  -247,  -255,  -365,  -367,  -381,    -4,  -379,  -219,  -290,
  -499,  -291,  -499,  -499,  -499,  -498,  -302,  -305,  -499,  -311,
  -499,  -466,  -466,  -454,  -465,  -466,  -499,  -457,  -455,  -447,
  -408,  -336,  -499,  -343,  -498,  -499,  -499,   -86,  -499,  -499,
  -258,   -49,  -225,  -237,  -499,  -258,  -243,  -499,  -258,  -375,
    -4,  -294,  -297,  -370,  -368,  -372,  -373,    -4,  -307,  -437,
  -499,  -440,  -441,  -443,    -4,  -339,  -342,  -499,  -499,   -82,
   -84,   -83,   -85,  -499,  -345,  -234,  -499,  -258,  -239,  -499,
  -242,  -374,  -498,  -499,  -466,  -499,  -499,  -499,   -81,  -344,
  -258,  -244,  -499,  -258,  -330,  -303,  -439,  -314,  -499,  -341,
  -240,  -499,  -245,  -340,  -258,  -246 ]

clist = [
'35,340,302,295,270,35,472,280,280,442,114,114,488,492,606,10,439,98',
'102,283,10,646,567,207,734,2,244,244,244,440,35,273,273,496,652,259',
'263,280,280,280,506,240,240,240,268,10,817,109,187,119,119,35,266,380',
'384,269,522,117,117,531,311,315,330,330,330,108,10,739,114,367,374,636',
'298,567,313,102,320,242,242,242,573,620,624,575,847,292,346,347,756',
'758,759,350,812,199,815,241,241,241,561,35,308,309,477,480,312,641,485',
'35,487,305,328,331,434,437,10,750,238,251,252,515,590,591,10,516,666',
'819,698,303,296,702,426,448,307,307,449,629,307,844,610,817,729,344',
'377,345,348,530,349,354,355,356,357,668,255,262,264,673,753,811,813',
'352,725,737,576,536,1,652,359,358,321,186,589,445,588,720,342,304,306',
'99,319,307,307,307,307,510,341,517,475,874,35,35,310,738,,,,366,372',
'375,,388,,389,,10,10,,35,,,,,,298,364,365,625,,,,,,10,,639,,,,,,,,269',
',,,,,,,,,676,,,,607,612,280,708,,851,852,380,384,853,,,,456,,244,244',
',370,370,,,35,,244,,273,35,391,392,444,240,,,884,,452,10,,240,,457,10',
'259,266,263,,269,,266,,,269,567,,,,,,,,687,,,567,690,242,242,886,,,',
',,601,242,,462,,854,,495,102,601,443,241,,,743,806,713,,652,241,,,,476',
'511,556,,,845,,,441,446,611,,493,494,,573,575,450,601,,,114,,,601,,',
',,,,,,,,,,727,,,,731,,,307,307,,,607,,607,550,,,,,388,,535,,119,,,514',
',595,,,117,,,,298,,,,,520,,,,,,,,,,567,,,,796,,,,,13,711,712,,,13,,',
',,631,,,587,,,,200,200,640,,,200,200,200,,388,,,645,13,274,274,429,',
'388,567,,,298,,,,,,563,,578,579,,35,13,200,200,35,,200,200,,35,200,316',
'326,326,585,10,840,388,545,10,621,621,549,388,10,617,,35,,619,298,613',
',,627,296,,846,616,298,643,644,10,,697,,,280,,13,,,114,200,200,200,200',
'13,370,605,683,685,,871,,688,,,642,,,273,572,35,,574,667,,,,,,,628,',
',,,10,678,607,119,,,,,,,703,117,307,,35,35,,748,,,,,752,,,714,,764,',
'10,10,,35,,550,,,,,721,722,,,,,,,10,,,13,13,200,200,200,200,,728,200',
'200,200,563,,,,35,,,13,607,35,,,,,,,,,,10,749,,,569,10,,754,,,,,,,114',
',,35,,280,280,,,,746,,,,,601,,768,10,,,,,,200,200,,,766,772,772,,808',
'200,,13,280,,35,274,13,,307,,776,778,,,,787,,,,10,,,35,,,,772,,,784',
',,,,35,35,,10,,35,821,797,,280,200,200,35,795,,10,10,,,785,10,,,621',
',802,803,10,,200,805,,789,273,,858,,,,798,,,800,200,,,,,,,786,,,,705',
',,,35,810,280,280,,,,,,280,875,,,,,10,307,,716,,,,,,14,839,772,772,',
'14,,,,772,388,,,200,,,,855,856,280,35,,,298,864,,,35,,,14,276,276,280',
'35,10,,,,,,,10,772,280,872,,,,10,,14,873,,,,,772,879,,,318,327,327,',
'200,,,772,867,,,889,,,,200,,,,,,,893,,,,,,200,,,,,,,,,,14,,,,,,,13,14',
',,13,,,781,,13,783,200,,,,,,,,,200,791,,,200,,,13,,,,,,,,,,,,,,,,,,',
',,,,,,,,,200,200,,,,200,,,,,,,,,,,274,,13,,,,,,,,,14,14,,,,,,833,,,836',
',200,,,,,,14,,13,13,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,,865,,,,,868,,,870',
',,,,,,200,,,,,13,,,,,13,,,14,,,,276,14,,,,881,,12,,,,,12,,,,,,890,,13',
'892,,,,,,,,200,,,895,,,,,12,,,,,,,,,773,773,,,,,,,,13,,,12,,,,,,,,,',
',,,,,13,,,,773,,,,,,200,,13,13,,,,13,,,,,,,13,,,,,,,,,12,,,,,,,,12,',
',,274,,,,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,773,773,200',
',,,,773,,,,,,,,,,,13,,,,,,,13,12,12,,,,,13,,,,,,,,,773,,,12,,,,14,,',
',14,,,773,,14,,,,,,,,,773,,,,,,,,,14,,,,,,,,,672,,,,,,,,,,,,,,,,,,,',
',12,,,,,12,,,,,,,,,276,,14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,14,14,,,,,,,',
',,,,,,,,,14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,14,,,,,14,,,,,,,,,,,,,,',
',,,,,,,,,,,,14,,,,,,,,,,,,,,,,,,,,,,,,,208,775,775,,239,239,239,,,,14',
',,,,,,,,,289,290,291,,,,,,14,,,,775,,,239,239,,,,14,14,,,,14,,,,,,,14',
',,,,,,,,,,,,,,,12,,,,12,276,,,,12,,,,,,,,,,,,,,,,,,12,,,14,,,,,,,,,',
',,,,,,,,,,,,,,,,775,775,,,,,,775,,,,,,,,,,12,14,,,,,,,14,,,,,,,14,,',
',,,,,,775,,,,,12,12,368,239,376,239,,,390,775,,,,,,,,,12,,775,208,400',
'401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417',
'418,419,420,421,422,423,424,425,,,,12,,,,239,12,239,,,,,,,,,,,239,239',
',,,,,,,239,,,,,,12,,,,,,,,,,,,,,,,,,,,,470,,,,,,,,,482,,,,,12,,,,,,',
',,,,,,,,,,,12,,,,,,,,,,,,12,12,,,,12,,,,,,,12,,,,,,,,,,,,,,,,,,,,,,',
'239,,,,,,,,,,,,,,,,,,,,,,,12,239,,390,557,376,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,239,,239,,,239,,,,,12,,,,,,,12,,583,,,,,12,,,,,,239,,,,,,,602',
'603,604,,,,,,239,,,,,239,,,239,,,239,,,,,,,,,,,,,,239,239,,,,,,,,,239',
',,,26,,,,,26,,,,,,,,,,,,26,26,,,,26,26,26,,,679,239,,26,684,686,,,,689',
',,691,,,,,,,696,,,,239,26,26,26,239,,26,26,,,26,,,,,,,,,,239,,,,239',
',,,369,373,,,,,,,,,,,,,,,,,,,,26,,,733,26,26,26,26,26,,,,,,,,,,,239',
',,,,,,,,,,,,431,,432,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,239,769,,,,',
',,,,,684,686,689,,,,,,26,26,26,26,26,26,239,,26,26,26,,,,,239,,239,26',
',,,,,,,,,,,,,,,,,,,,,,,239,,,,,,,,,,,,,,,,,,,239,,,,,,,26,26,769,541',
',,,,,26,,26,,,830,,26,,,,239,,239,,,,,,,,,,,,,,239,,,,,,,,,,,,,,,,,',
'26,26,239,,,,565,,568,,,571,239,,,239,,,,26,,,,,,584,,,,,,,,26,,,,,',
',,,,,239,,,239,,,,609,,,,,615,,,568,239,,615,,,,,,,239,,,,,,,369,,,',
',,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,680,,,,,,,,,,,,,,,,,,,26,,,704',
',,,707,,,,26,,,,,,,,,,,,565,26,,,718,,,,,,,,,,,,,,26,,,,26,,,,,26,,26',
',,,,,,,,26,,,,26,,,26,,,744,,,,,,,,,,,,,,,,,,,,,,,,,26,26,,,,26,,,,',
',,,,,,,,26,,,,,,,,767,,,,,,,,,,,,,26,,,,,,,,26,26,,,568,,,,,,,,,,,568',
',,26,,,,,,,,,,,,,,,,,,,,,,615,,,,,,26,,,,,26,,,,,26,,,818,,,,,,,,,,',
',,,,,,,,,,,,,26,,,835,,838,,,,26,,,,,,,,,,843,,,,,,,,,,,,,,,,26,,,,',
',,,,,,,,,565,,,568,26,,,,,,,,,,26,,26,26,,,,26,,,,,,,26,,,,880,,,883',
',,,,,,,,,,,,568,,,,,,,,,894,,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,',
',,,,,,26,,,,,,,,,,,,,,,,26,,,,,,,26,,,,,,,26' ]
        racc_goto_table = arr = ::Array.new(2867, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'41,44,19,3,39,41,4,52,52,29,45,45,76,76,5,14,32,8,83,40,14,85,133,15',
'77,2,60,60,60,53,41,41,41,79,128,57,57,52,52,52,42,26,26,26,37,14,130',
'11,11,49,49,41,36,30,30,2,119,48,48,119,91,41,41,41,41,9,14,92,45,21',
'21,93,26,133,8,83,14,56,56,56,58,78,78,58,94,51,116,116,127,127,127',
'116,126,23,126,54,54,54,33,41,13,13,55,55,13,95,55,41,55,56,43,43,30',
'30,14,96,28,28,28,97,33,33,14,98,99,100,101,54,23,102,104,106,23,23',
'107,108,23,109,110,130,111,114,19,115,117,118,120,13,13,13,13,121,31',
'31,31,122,123,125,129,9,6,5,34,50,1,128,24,9,16,12,61,62,64,65,72,73',
'74,10,80,23,23,23,23,82,86,87,88,126,41,41,89,90,,,,15,15,15,,45,,15',
',14,14,,41,,,,,,26,2,2,79,,,,,,14,,42,,,,,,,,2,,,,,,,,,,119,,,,53,53',
'52,33,,127,127,30,30,127,,,,40,,60,60,,54,54,,,41,,60,,41,41,23,23,26',
'26,,,77,,37,14,,26,,37,14,57,36,57,,2,,36,,,2,133,,,,,,,,32,,,133,32',
'56,56,127,,,,,,30,56,,51,,85,,8,83,30,54,54,,,76,78,29,,128,54,,,,51',
'83,19,,,5,,,28,28,21,,13,13,,58,58,28,30,,,45,,,30,,,,,,,,,,,,,53,,',
',53,,,23,23,,,53,,53,57,,,,,45,,11,,49,,,23,,19,,,48,,,,26,,,,,23,,',
',,,,,,,133,,,,76,,,,,18,30,30,,,18,,,,,19,,,60,,,,18,18,19,,,18,18,18',
',45,,,3,18,18,18,59,,45,133,,,26,,,,,,56,,51,51,,41,18,18,18,41,,18',
'18,,41,18,18,18,18,56,14,76,45,31,14,83,83,31,45,14,2,,41,,2,26,51,',
',2,23,,79,51,26,83,83,14,,39,,,52,,18,,,45,18,18,18,18,18,54,23,15,15',
',4,,15,,,13,,,41,31,41,,31,51,,,,,,,54,,,,,14,11,53,49,,,,,,,2,48,23',
',41,41,,3,,,,,3,,,26,,44,,14,14,,41,,57,,,,,2,2,,,,,,,14,,,18,18,18',
'18,18,18,,2,18,18,18,56,,,,41,,,18,53,41,,,,,,,,,,14,83,,,59,14,,83',
',,,,,,45,,,41,,52,52,,,,13,,,,,30,,15,14,,,,,,18,18,,,2,41,41,,3,18',
',18,52,,41,18,18,,23,,14,14,,,,60,,,,14,,,41,,,,41,,,2,,,,,41,41,,14',
',41,39,14,,52,18,18,41,2,,14,14,,,51,14,,,83,,2,2,14,,18,2,,56,41,,19',
',,,51,,,13,18,,,,,,,54,,,,59,,,,41,51,52,52,,,,,,52,3,,,,,14,23,,59',
',,,,,20,2,41,41,,20,,,,41,45,,,18,,,,14,14,52,41,,,26,14,,,41,,,20,20',
'20,52,41,14,,,,,,,14,41,52,2,,,,14,,20,2,,,,,41,14,,,20,20,20,,18,,',
'41,56,,,14,,,,18,,,,,,,14,,,,,,18,,,,,,,,,,20,,,,,,,18,20,,,18,,,59',
',18,59,18,,,,,,,,,18,59,,,18,,,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,18,',
',,18,,,,,,,,,,,18,,18,,,,,,,,,20,20,,,,,,59,,,59,,18,,,,,,20,,18,18',
',,,,,,,,,,,,,,,,18,,,,,,,,,,,,,59,,,,,59,,,59,,,,,,,18,,,,,18,,,,,18',
',,20,,,,20,20,,,,59,,17,,,,,17,,,,,,59,,18,59,,,,,,,,18,,,59,,,,,17',
',,,,,,,,18,18,,,,,,,,18,,,17,,,,,,,,,,,,,,,18,,,,18,,,,,,18,,18,18,',
',,18,,,,,,,18,,,,,,,,,17,,,,,,,,17,,,,18,,,,,,,,,,,,,,,,,,,,,,,,,18',
',,,,,,,,,,,,,,,,,,,,,,,,,18,18,18,,,,,18,,,,,,,,,,,18,,,,,,,18,17,17',
',,,,18,,,,,,,,,18,,,17,,,,20,,,,20,,,18,,20,,,,,,,,,18,,,,,,,,,20,,',
',,,,,,20,,,,,,,,,,,,,,,,,,,,,17,,,,,17,,,,,,,,,20,,20,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,20,20,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,20,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,25',
'20,20,,25,25,25,,,,20,,,,,,,,,,25,25,25,,,,,,20,,,,20,,,25,25,,,,20',
'20,,,,20,,,,,,,20,,,,,,,,,,,,,,,,17,,,,17,20,,,,17,,,,,,,,,,,,,,,,,',
'17,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,20,20,,,,,,20,,,,,,,,,,17,20,,,,,,',
'20,,,,,,,20,,,,,,,,,20,,,,,17,17,25,25,25,25,,,25,20,,,,,,,,,17,,20',
'25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25',
'25,25,25,25,,,,17,,,,25,17,25,,,,,,,,,,,25,25,,,,,,,,25,,,,,,17,,,,',
',,,,,,,,,,,,,,,,25,,,,,,,,,25,,,,,17,,,,,,,,,,,,,,,,,,17,,,,,,,,,,,',
'17,17,,,,17,,,,,,,17,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,,,,,,,,,,,,,,,,',
'17,25,,25,25,25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25,,25,,,25,,,,,17,,,,,',
',17,,25,,,,,17,,,,,,25,,,,,,,25,25,25,,,,,,25,,,,,25,,,25,,,25,,,,,',
',,,,,,,,25,25,,,,,,,,,25,,,,35,,,,,35,,,,,,,,,,,,35,35,,,,35,35,35,',
',25,25,,35,25,25,,,,25,,,25,,,,,,,25,,,,25,35,35,35,25,,35,35,,,35,',
',,,,,,,,25,,,,25,,,,22,22,,,,,,,,,,,,,,,,,,,,35,,,25,35,35,35,35,35',
',,,,,,,,,,25,,,,,,,,,,,,,22,,22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25',
'25,,,,,,,,,,25,25,25,,,,,,35,35,35,35,35,35,25,,35,35,35,,,,,25,,25',
'35,,,,,,,,,,,,,,,,,,,,,,,,25,,,,,,,,,,,,,,,,,,,25,,,,,,,35,35,25,22',
',,,,,35,,35,,,25,,35,,,,25,,25,,,,,,,,,,,,,,25,,,,,,,,,,,,,,,,,,35,35',
'25,,,,22,,22,,,22,25,,,25,,,,35,,,,,,22,,,,,,,,35,,,,,,,,,,,25,,,25',
',,,22,,,,,22,,,22,25,,22,,,,,,,25,,,,,,,22,,,,,,,,,35,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,22,,,,,,,,,,,,,,,,,,,35,,,22,,,,22,,,,35,,,,,,,,,',
',,22,35,,,22,,,,,,,,,,,,,,35,,,,35,,,,,35,,35,,,,,,,,,35,,,,35,,,35',
',,22,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,35,,,,,,,,,,,,,35,,,,,,,,22,,',
',,,,,,,,,,35,,,,,,,,35,35,,,22,,,,,,,,,,,22,,,35,,,,,,,,,,,,,,,,,,,',
',,22,,,,,,35,,,,,35,,,,,35,,,22,,,,,,,,,,,,,,,,,,,,,,,,35,,,22,,22,',
',,35,,,,,,,,,,22,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,22,,,22,35,,,,,,,,,',
'35,,35,35,,,,35,,,,,,,35,,,,22,,,22,,,,,,,,,,,,,22,,,,,,,,,22,,,,,,',
',,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,35,,,,,,,35',
',,,,,,35' ]
        racc_goto_check = arr = ::Array.new(2867, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   164,    25,   -48,  -288,  -458,  -446,   nil,    14,    60,
   174,    41,   162,    44,    15,     5,   107,  1098,   438,   -51,
   820,  -121,  1900,    76,    57,  1500,    19,   nil,    94,  -247,
  -141,   126,  -239,  -328,  -276,  2012,    22,    14,   nil,   -27,
   -13,     0,  -284,    48,   -63,     4,   nil,   nil,    51,    43,
  -200,    44,   -24,  -227,    73,  -197,    55,     9,  -354,   229,
     4,  -277,   -86,   nil,  -275,  -416,   nil,   nil,   nil,   nil,
   nil,   nil,   110,   121,   121,   nil,  -296,  -593,  -412,  -280,
   117,   nil,  -145,    15,   nil,  -495,   120,  -156,  -110,   132,
  -429,     1,  -557,  -432,  -722,  -405,  -529,  -212,  -217,  -393,
  -639,  -433,  -430,   nil,  -106,   nil,  -129,  -127,  -363,  -668,
  -335,  -470,   nil,   nil,    69,    69,    10,    66,  -203,  -289,
    67,  -373,  -370,  -491,   nil,  -598,  -663,  -561,  -482,  -597,
  -711,   nil,   nil,  -408 ]

racc_goto_default = [
   nil,   nil,   294,   nil,   nil,   735,   nil,     3,   nil,     4,
   314,   nil,   nil,   nil,   204,    16,    11,   205,   288,   nil,
   203,   nil,   246,    15,   nil,    19,    20,    21,   nil,    25,
   598,   nil,   nil,   nil,   nil,   279,    29,   nil,    31,    34,
    33,   201,   325,   nil,   116,   382,   115,   118,    70,    71,
   nil,   nil,    42,   297,   299,   nil,   300,   546,   547,   427,
   564,   nil,   nil,   257,   nil,   nil,    43,    44,    45,    46,
    47,    48,    49,   nil,   258,    55,   nil,   nil,   nil,   nil,
   nil,    62,   nil,   489,    63,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   237,   nil,   386,   nil,   nil,   nil,   nil,
   nil,   nil,    69,    72,    73,   nil,   nil,   nil,   nil,   527,
   nil,   nil,   nil,   648,   649,   650,   651,   nil,   814,   658,
   659,   662,   665,   250 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 132, :_reduce_1,
  4, 134, :_reduce_2,
  2, 133, :_reduce_3,
  0, 138, :_reduce_4,
  1, 138, :_reduce_5,
  2, 138, :_reduce_6,
  3, 138, :_reduce_7,
  0, 155, :_reduce_8,
  4, 140, :_reduce_9,
  3, 140, :_reduce_10,
  3, 140, :_reduce_11,
  3, 140, :_reduce_12,
  2, 140, :_reduce_13,
  3, 140, :_reduce_14,
  3, 140, :_reduce_15,
  3, 140, :_reduce_16,
  3, 140, :_reduce_17,
  3, 140, :_reduce_18,
  4, 140, :_reduce_19,
  4, 140, :_reduce_20,
  3, 140, :_reduce_21,
  3, 140, :_reduce_22,
  3, 140, :_reduce_23,
  6, 140, :_reduce_24,
  5, 140, :_reduce_25,
  5, 140, :_reduce_26,
  5, 140, :_reduce_27,
  3, 140, :_reduce_28,
  3, 140, :_reduce_29,
  3, 140, :_reduce_30,
  3, 140, :_reduce_31,
  1, 140, :_reduce_none,
  1, 154, :_reduce_none,
  3, 154, :_reduce_34,
  3, 154, :_reduce_35,
  2, 154, :_reduce_36,
  2, 154, :_reduce_37,
  1, 154, :_reduce_none,
  1, 144, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_42,
  2, 146, :_reduce_43,
  2, 146, :_reduce_44,
  1, 158, :_reduce_none,
  4, 158, :_reduce_46,
  4, 158, :_reduce_47,
  0, 165, :_reduce_48,
  5, 163, :_reduce_49,
  2, 157, :_reduce_50,
  3, 157, :_reduce_51,
  4, 157, :_reduce_52,
  5, 157, :_reduce_53,
  4, 157, :_reduce_54,
  5, 157, :_reduce_55,
  2, 157, :_reduce_56,
  2, 157, :_reduce_57,
  1, 147, :_reduce_58,
  3, 147, :_reduce_59,
  1, 168, :_reduce_60,
  3, 168, :_reduce_61,
  1, 167, :_reduce_62,
  2, 167, :_reduce_63,
  3, 167, :_reduce_64,
  2, 167, :_reduce_65,
  2, 167, :_reduce_66,
  1, 167, :_reduce_67,
  1, 170, :_reduce_none,
  3, 170, :_reduce_69,
  2, 169, :_reduce_70,
  3, 169, :_reduce_71,
  1, 171, :_reduce_72,
  4, 171, :_reduce_73,
  3, 171, :_reduce_74,
  3, 171, :_reduce_75,
  3, 171, :_reduce_76,
  3, 171, :_reduce_77,
  2, 171, :_reduce_78,
  1, 171, :_reduce_79,
  1, 145, :_reduce_80,
  4, 145, :_reduce_81,
  3, 145, :_reduce_82,
  3, 145, :_reduce_83,
  3, 145, :_reduce_84,
  3, 145, :_reduce_85,
  2, 145, :_reduce_86,
  1, 145, :_reduce_87,
  1, 173, :_reduce_88,
  1, 173, :_reduce_none,
  2, 174, :_reduce_90,
  1, 174, :_reduce_91,
  3, 174, :_reduce_92,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 178, :_reduce_98,
  1, 178, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 143, :_reduce_102,
  0, 181, :_reduce_103,
  4, 143, :_reduce_104,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 156, :_reduce_171,
  5, 156, :_reduce_172,
  3, 156, :_reduce_173,
  6, 156, :_reduce_174,
  5, 156, :_reduce_175,
  5, 156, :_reduce_176,
  5, 156, :_reduce_177,
  5, 156, :_reduce_178,
  4, 156, :_reduce_179,
  3, 156, :_reduce_180,
  3, 156, :_reduce_181,
  3, 156, :_reduce_182,
  3, 156, :_reduce_183,
  3, 156, :_reduce_184,
  3, 156, :_reduce_185,
  3, 156, :_reduce_186,
  3, 156, :_reduce_187,
  3, 156, :_reduce_188,
  4, 156, :_reduce_189,
  4, 156, :_reduce_190,
  2, 156, :_reduce_191,
  2, 156, :_reduce_192,
  3, 156, :_reduce_193,
  3, 156, :_reduce_194,
  3, 156, :_reduce_195,
  3, 156, :_reduce_196,
  3, 156, :_reduce_197,
  3, 156, :_reduce_198,
  3, 156, :_reduce_199,
  3, 156, :_reduce_200,
  3, 156, :_reduce_201,
  3, 156, :_reduce_202,
  3, 156, :_reduce_203,
  3, 156, :_reduce_204,
  3, 156, :_reduce_205,
  2, 156, :_reduce_206,
  2, 156, :_reduce_207,
  3, 156, :_reduce_208,
  3, 156, :_reduce_209,
  3, 156, :_reduce_210,
  3, 156, :_reduce_211,
  3, 156, :_reduce_212,
  5, 156, :_reduce_213,
  1, 156, :_reduce_none,
  1, 153, :_reduce_none,
  1, 150, :_reduce_216,
  2, 150, :_reduce_217,
  2, 150, :_reduce_218,
  5, 150, :_reduce_219,
  2, 150, :_reduce_220,
  3, 150, :_reduce_221,
  3, 188, :_reduce_222,
  4, 188, :_reduce_223,
  4, 188, :_reduce_224,
  6, 188, :_reduce_225,
  0, 189, :_reduce_226,
  1, 189, :_reduce_none,
  1, 159, :_reduce_228,
  2, 159, :_reduce_229,
  5, 159, :_reduce_230,
  2, 159, :_reduce_231,
  5, 159, :_reduce_232,
  4, 159, :_reduce_233,
  7, 159, :_reduce_234,
  3, 159, :_reduce_235,
  1, 159, :_reduce_236,
  4, 192, :_reduce_237,
  3, 192, :_reduce_238,
  5, 192, :_reduce_239,
  7, 192, :_reduce_240,
  2, 192, :_reduce_241,
  5, 192, :_reduce_242,
  4, 192, :_reduce_243,
  6, 192, :_reduce_244,
  7, 192, :_reduce_245,
  9, 192, :_reduce_246,
  3, 192, :_reduce_247,
  1, 192, :_reduce_248,
  0, 194, :_reduce_249,
  2, 162, :_reduce_250,
  1, 193, :_reduce_251,
  0, 195, :_reduce_252,
  3, 193, :_reduce_253,
  0, 196, :_reduce_254,
  4, 193, :_reduce_255,
  2, 191, :_reduce_256,
  2, 190, :_reduce_257,
  0, 190, :_reduce_258,
  1, 185, :_reduce_259,
  3, 185, :_reduce_260,
  3, 152, :_reduce_261,
  4, 152, :_reduce_262,
  2, 152, :_reduce_263,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_272,
  3, 183, :_reduce_273,
  0, 219, :_reduce_274,
  5, 183, :_reduce_275,
  3, 183, :_reduce_276,
  3, 183, :_reduce_277,
  2, 183, :_reduce_278,
  4, 183, :_reduce_279,
  3, 183, :_reduce_280,
  3, 183, :_reduce_281,
  1, 183, :_reduce_282,
  4, 183, :_reduce_283,
  3, 183, :_reduce_284,
  1, 183, :_reduce_285,
  5, 183, :_reduce_286,
  2, 183, :_reduce_287,
  1, 183, :_reduce_none,
  2, 183, :_reduce_289,
  6, 183, :_reduce_290,
  6, 183, :_reduce_291,
  0, 220, :_reduce_292,
  0, 221, :_reduce_293,
  7, 183, :_reduce_294,
  0, 222, :_reduce_295,
  0, 223, :_reduce_296,
  7, 183, :_reduce_297,
  5, 183, :_reduce_298,
  4, 183, :_reduce_299,
  5, 183, :_reduce_300,
  0, 224, :_reduce_301,
  0, 225, :_reduce_302,
  9, 183, :_reduce_303,
  0, 226, :_reduce_304,
  6, 183, :_reduce_305,
  0, 227, :_reduce_306,
  7, 183, :_reduce_307,
  0, 228, :_reduce_308,
  5, 183, :_reduce_309,
  0, 229, :_reduce_310,
  6, 183, :_reduce_311,
  0, 230, :_reduce_312,
  0, 231, :_reduce_313,
  9, 183, :_reduce_314,
  1, 183, :_reduce_315,
  1, 183, :_reduce_316,
  1, 183, :_reduce_317,
  1, 183, :_reduce_318,
  1, 149, :_reduce_none,
  1, 212, :_reduce_320,
  1, 215, :_reduce_321,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  2, 207, :_reduce_325,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 208, :_reduce_none,
  5, 208, :_reduce_330,
  1, 136, :_reduce_none,
  2, 136, :_reduce_332,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 232, :_reduce_335,
  3, 232, :_reduce_336,
  1, 233, :_reduce_none,
  2, 233, :_reduce_none,
  4, 233, :_reduce_339,
  7, 233, :_reduce_340,
  6, 233, :_reduce_341,
  4, 233, :_reduce_342,
  3, 233, :_reduce_343,
  5, 233, :_reduce_344,
  4, 233, :_reduce_345,
  2, 233, :_reduce_346,
  1, 233, :_reduce_347,
  2, 233, :_reduce_348,
  0, 164, :_reduce_349,
  2, 164, :_reduce_350,
  1, 164, :_reduce_351,
  3, 164, :_reduce_352,
  0, 235, :_reduce_353,
  5, 234, :_reduce_354,
  2, 160, :_reduce_355,
  4, 160, :_reduce_356,
  4, 160, :_reduce_357,
  2, 206, :_reduce_358,
  4, 206, :_reduce_359,
  4, 206, :_reduce_360,
  3, 206, :_reduce_361,
  2, 206, :_reduce_362,
  1, 206, :_reduce_363,
  0, 237, :_reduce_364,
  5, 205, :_reduce_365,
  0, 238, :_reduce_366,
  5, 205, :_reduce_367,
  5, 210, :_reduce_368,
  1, 239, :_reduce_none,
  4, 239, :_reduce_370,
  2, 239, :_reduce_371,
  1, 240, :_reduce_372,
  1, 240, :_reduce_none,
  6, 135, :_reduce_374,
  0, 135, :_reduce_375,
  1, 241, :_reduce_376,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  2, 242, :_reduce_379,
  1, 242, :_reduce_none,
  2, 137, :_reduce_381,
  1, 137, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 198, :_reduce_386,
  1, 244, :_reduce_387,
  2, 244, :_reduce_388,
  3, 245, :_reduce_389,
  1, 245, :_reduce_390,
  3, 199, :_reduce_391,
  4, 200, :_reduce_392,
  3, 201, :_reduce_393,
  0, 248, :_reduce_394,
  3, 248, :_reduce_395,
  1, 249, :_reduce_396,
  2, 249, :_reduce_397,
  3, 202, :_reduce_398,
  0, 251, :_reduce_399,
  3, 251, :_reduce_400,
  0, 246, :_reduce_401,
  2, 246, :_reduce_402,
  0, 247, :_reduce_403,
  2, 247, :_reduce_404,
  1, 250, :_reduce_405,
  2, 250, :_reduce_406,
  0, 253, :_reduce_407,
  4, 250, :_reduce_408,
  1, 252, :_reduce_409,
  1, 252, :_reduce_410,
  1, 252, :_reduce_411,
  1, 252, :_reduce_none,
  1, 179, :_reduce_413,
  3, 180, :_reduce_414,
  1, 243, :_reduce_415,
  1, 243, :_reduce_416,
  2, 243, :_reduce_417,
  2, 243, :_reduce_418,
  1, 172, :_reduce_419,
  1, 172, :_reduce_420,
  1, 172, :_reduce_421,
  1, 172, :_reduce_422,
  1, 172, :_reduce_423,
  1, 172, :_reduce_424,
  1, 172, :_reduce_425,
  1, 172, :_reduce_426,
  1, 172, :_reduce_427,
  1, 172, :_reduce_428,
  1, 172, :_reduce_429,
  1, 203, :_reduce_430,
  1, 148, :_reduce_431,
  1, 151, :_reduce_432,
  1, 151, :_reduce_433,
  1, 213, :_reduce_434,
  3, 213, :_reduce_435,
  2, 213, :_reduce_436,
  4, 216, :_reduce_437,
  2, 216, :_reduce_438,
  6, 254, :_reduce_439,
  4, 254, :_reduce_440,
  4, 254, :_reduce_441,
  2, 254, :_reduce_442,
  4, 254, :_reduce_443,
  2, 254, :_reduce_444,
  2, 254, :_reduce_445,
  1, 254, :_reduce_446,
  0, 254, :_reduce_447,
  1, 260, :_reduce_448,
  1, 260, :_reduce_449,
  1, 260, :_reduce_450,
  1, 260, :_reduce_451,
  1, 260, :_reduce_452,
  1, 255, :_reduce_453,
  3, 255, :_reduce_454,
  3, 261, :_reduce_455,
  1, 256, :_reduce_456,
  3, 256, :_reduce_457,
  1, 262, :_reduce_none,
  1, 262, :_reduce_none,
  2, 257, :_reduce_460,
  1, 257, :_reduce_461,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 259, :_reduce_464,
  2, 258, :_reduce_465,
  0, 258, :_reduce_466,
  1, 217, :_reduce_none,
  4, 217, :_reduce_468,
  0, 204, :_reduce_469,
  2, 204, :_reduce_470,
  2, 204, :_reduce_471,
  1, 187, :_reduce_472,
  3, 187, :_reduce_473,
  3, 264, :_reduce_474,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  0, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 214, :_reduce_494,
  1, 214, :_reduce_none,
  1, 141, :_reduce_none,
  2, 141, :_reduce_none,
  0, 184, :_reduce_498 ]

racc_reduce_n = 499

racc_shift_n = 896

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tUPLUS => 60,
  :tUMINUS => 61,
  :tUNARY_NUM => 62,
  :tPOW => 63,
  :tCMP => 64,
  :tEQ => 65,
  :tEQQ => 66,
  :tNEQ => 67,
  :tGEQ => 68,
  :tLEQ => 69,
  :tANDOP => 70,
  :tOROP => 71,
  :tMATCH => 72,
  :tNMATCH => 73,
  :tDOT => 74,
  :tDOT2 => 75,
  :tDOT3 => 76,
  :tAREF => 77,
  :tASET => 78,
  :tLSHFT => 79,
  :tRSHFT => 80,
  :tCOLON2 => 81,
  :tCOLON3 => 82,
  :tOP_ASGN => 83,
  :tASSOC => 84,
  :tLPAREN => 85,
  :tLPAREN2 => 86,
  :tRPAREN => 87,
  :tLPAREN_ARG => 88,
  :tLBRACK => 89,
  :tLBRACK2 => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tQWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tREGEXP_OPT => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tEQL => 129,
  :tLOWEST => 130 }

racc_nt_base = 131

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tREGEXP_OPT",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@2",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "opt_nl",
  "primary",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "block_par",
  "block_var",
  "do_block",
  "@20",
  "operation3",
  "@21",
  "@22",
  "when_args",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@23",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_2(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_9(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_12(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_14(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_18(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_19(val, _values, result)
                      if @context.in_def
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_28(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_47(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_48(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_49(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_50(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_51(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      method_call = @builder.call_method(nil, nil, val[0],
                                      lparen_t, args, rparen_t)

                      begin_t, block_args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_52(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)

                    
    result
end

def _reduce_53(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, block_args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_54(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_55(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, block_args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_57(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:yield, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_62(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_63(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[0] << @builder.splat(val[1], val[2])
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0] << @builder.splat(val[1])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_67(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

# reduce 68 omitted

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 89 omitted

def _reduce_90(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

def _reduce_98(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

def _reduce_102(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_103(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_104(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

def _reduce_171(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_172(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_173(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_174(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_175(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_176(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_177(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_178(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_179(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_180(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_181(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_182(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_183(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_185(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_190(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_191(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[3], val[4])
                    
    result
end

# reduce 214 omitted

# reduce 215 omitted

def _reduce_216(val, _values, result)
                      result = []
                    
    result
end

def _reduce_217(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_218(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_219(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_221(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_224(val, _values, result)
                      result = [ val[0], [ val[1] ], val[3] ]
                    
    result
end

def _reduce_225(val, _values, result)
                      result = [ val[0], val[1] << val[3], val[5] ]
                    
    result
end

def _reduce_226(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 227 omitted

def _reduce_228(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = val[0].concat(
                                [ @builder.splat(val[2], val[3]),
                                   *val[4] ])
                    
    result
end

def _reduce_231(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_232(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  @builder.splat(val[2], val[3]),
                                  *val[4] ]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = val[0].concat(
                                [ @builder.associate(nil, val[2], nil),
                                  *val[3] ])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = val[0].concat(
                                [ @builder.associate(nil, val[2], nil),
                                  @builder.splat(val[4], val[5]),
                                  *val[6] ])
                    
    result
end

def _reduce_235(val, _values, result)
                      result =  [ @builder.splat(val[0], val[1]),
                                  *val[2] ]
                    
    result
end

def _reduce_236(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_239(val, _values, result)
                      result =  [ val[0],
                                  @builder.splat(val[2], val[3]),
                                  *val[4] ]
                    
    result
end

def _reduce_240(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.splat(val[4], val[5])).
                                    concat(val[6]) ]
                    
    result
end

def _reduce_241(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  @builder.splat(val[2], val[3]),
                                  *val[4] ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  @builder.splat(val[4], val[5]),
                                  *val[6] ]
                    
    result
end

def _reduce_246(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    push(@builder.splat(val[6], val[7])).
                                    concat(val[8]) ]
                    
    result
end

def _reduce_247(val, _values, result)
                      result =  [ @builder.splat(val[0], val[1]),
                                  *val[2] ]
                    
    result
end

def _reduce_248(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_250(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_252(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_254(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_257(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

def _reduce_272(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_274(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[4])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_287(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 288 omitted

def _reduce_289(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_290(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_291(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_298(val, _values, result)
                      when_bodies       = val[3][0..-2]
                      else_t, else_body = val[3][-1]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_299(val, _values, result)
                      when_bodies       = val[2][0..-2]
                      else_t, else_body = val[2][-1]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.case(val[0], nil,
                                             [], val[2], val[3],
                                             val[4])
                    
    result
end

def _reduce_301(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_302(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_304(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_305(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_306(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_307(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_308(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_309(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_310(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_312(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_313(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 319 omitted

def _reduce_320(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_321(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

def _reduce_325(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

def _reduce_330(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 331 omitted

def _reduce_332(val, _values, result)
                      result = val
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = [ @builder.arg_expr(val[0]) ]
                    
    result
end

def _reduce_336(val, _values, result)
                      result = val[0] << @builder.arg_expr(val[2])
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result =  val[0].
                                  push(@builder.blockarg_expr(val[2], val[3]))
                    
    result
end

def _reduce_340(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2], val[3])).
                                  push(@builder.blockarg_expr(val[5], val[6]))
                    
    result
end

def _reduce_341(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2])).
                                  push(@builder.blockarg_expr(val[4], val[5]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2], val[3]))
                    
    result
end

def _reduce_343(val, _values, result)
                      result =  val[0].
                                  push(@builder.restarg_expr(val[2]))
                    
    result
end

def _reduce_344(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0], val[1]),
                                  @builder.blockarg_expr(val[3], val[4]) ]
                    
    result
end

def _reduce_345(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0]),
                                  @builder.blockarg_expr(val[2], val[3]) ]
                    
    result
end

def _reduce_346(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0], val[1]) ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result =  [ @builder.restarg_expr(val[0]) ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result =  [ @builder.blockarg_expr(val[0], val[1]) ]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_350(val, _values, result)
                      result = @builder.args(val[0], [], val[1])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2], false)
                    
    result
end

def _reduce_353(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_355(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_356(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_357(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_358(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_359(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_360(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_361(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_362(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_363(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_365(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_366(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_367(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 373 omitted

def _reduce_374(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_375(val, _values, result)
                      result = []
                    
    result
end

def _reduce_376(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 377 omitted

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 382 omitted

# reduce 383 omitted

# reduce 384 omitted

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_387(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_391(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_392(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = []
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = []
                    
    result
end

def _reduce_400(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = []
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = []
                    
    result
end

def _reduce_404(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_407(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_408(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_409(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_410(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_411(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 412 omitted

def _reduce_413(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_417(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_418(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_419(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_423(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_424(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_426(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_427(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_431(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_432(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_433(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_434(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_435(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_436(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.args(val[0], val[1], val[3])

                      @lexer.state = :expr_beg
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_439(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = []
                    
    result
end

def _reduce_448(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_450(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_455(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 458 omitted

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = []
                    
    result
end

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = []
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.pair_list_18(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

# reduce 475 omitted

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      yyerrok
                    
    result
end

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby18
  end   # module Parser
