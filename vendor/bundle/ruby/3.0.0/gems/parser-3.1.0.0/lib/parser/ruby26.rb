# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby26 < Parser::Base


  def version
    26
  end

  def default_encoding
    Encoding::UTF_8
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-590,611,550,215,216,-109,-107,-590,-590,-590,225,550,-590,-590,-590',
'780,-590,277,550,873,246,-88,550,591,780,-590,-590,-590,-590,-102,563',
'-74,986,593,564,-110,-590,-590,-104,-590,-590,-590,-590,-590,-105,-103',
'-107,-109,-110,1028,779,226,243,996,215,216,245,244,-105,779,215,216',
'996,-104,-103,-105,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590',
'-590,-590,-590,-590,118,-108,-590,-590,-590,117,768,-590,550,590,-590',
'-102,-106,-590,-590,996,-590,226,-590,592,-590,114,-590,-590,276,-590',
'-590,-590,-590,-590,-298,-590,-590,-590,-100,-98,706,-298,-298,-298',
'118,-106,941,-298,-298,117,-298,-590,872,118,-590,-590,-590,-590,117',
'-590,118,-590,-93,826,118,117,-590,-106,-101,117,-298,-298,226,-298',
'-298,-298,-298,-298,226,277,-104,-586,-587,-108,-96,-104,-105,-103,-107',
'-109,-110,-105,-103,-107,-109,-110,-95,-94,-96,986,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,277,223,-298,-298',
'-298,221,616,609,-586,-108,-298,-97,270,-298,-108,996,118,-95,-298,-102',
'-298,117,-298,-298,-102,-298,-298,-298,-298,-298,118,-298,-590,-298',
'-587,117,-96,459,753,-590,-590,-590,96,97,610,-590,-590,-298,-590,-106',
'-298,-298,276,-298,-106,-298,-503,-590,-110,215,216,118,-298,-108,272',
'-584,117,277,-590,-590,222,-590,-590,-590,-590,-590,-96,221,-99,-96',
'792,118,557,-95,970,578,117,276,226,-96,-97,96,97,568,-110,-104,215',
'216,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590,-590',
'-590,605,-102,-590,-590,-590,-492,617,-504,98,99,-590,-95,-492,-590',
'-95,-590,578,-584,-590,272,-590,-492,-590,-590,-95,-590,-590,-590,-590',
'-590,222,-590,-590,-590,-98,823,792,580,579,576,-584,118,276,-586,-97',
'272,117,-590,578,601,-590,-590,-590,-97,644,-590,600,98,99,-590,-590',
'-590,-590,-106,-103,-590,-590,-590,-590,683,-492,680,679,678,-590,681',
'845,-590,621,-586,580,579,578,-590,-97,823,792,-97,-590,-590,738,-590',
'-590,-590,-590,-590,118,-97,118,-271,-98,117,-590,117,683,598,680,679',
'678,221,681,595,580,579,576,612,270,246,-590,-590,-590,-590,-590,-590',
'-590,-590,-590,-590,-590,-590,-590,-590,-590,-104,-590,-590,-590,246',
'617,246,-98,246,-590,-98,578,-590,580,579,578,527,-590,984,-590,-98',
'-590,-590,740,-590,-590,-590,-590,-590,-298,-590,-590,-590,766,226,753',
'-298,-298,-298,-107,226,222,-298,-298,540,-298,-590,542,226,-590,-590',
'1000,-590,891,-590,540,540,-583,542,539,767,-590,-106,-100,226,-298',
'-298,223,-298,-298,-298,-298,-298,-109,-88,580,579,594,221,580,579,585',
'-95,540,-496,566,542,647,527,226,-105,-496,-104,533,568,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-489,658,-298',
'-298,-298,-101,616,-489,-107,663,-298,578,-583,-298,578,-110,-489,578',
'-298,664,-298,226,-298,-298,666,-298,-298,-298,-298,-298,-489,-298,702',
'-298,222,-583,-109,-489,-489,-489,-496,707,-489,-489,-489,-299,-489',
'-298,263,264,-298,-298,-299,-99,-489,-298,-489,-489,-489,215,216,-299',
'-298,-108,708,-489,-489,-489,557,-489,-489,-489,-489,-489,710,580,579',
'589,580,579,581,580,579,583,262,261,406,-495,-494,699,698,408,407,570',
'-495,-494,-489,-489,-489,-489,-489,-489,-489,-489,-489,-489,-489,-489',
'-489,-489,-299,221,-489,-489,-489,221,-489,-489,560,562,-489,561,456',
'-489,-489,727,-489,558,-489,737,-489,457,-489,-489,741,-489,-489,-489',
'-489,-489,-497,-489,-492,-489,742,398,-272,-497,557,-492,-492,-492,-495',
'-494,-492,-492,-492,-489,-492,502,-489,-489,-489,-489,754,-489,-492',
'-489,-492,-492,-492,544,-489,-489,84,543,222,489,-492,-492,222,-492',
'-492,-492,-492,-492,85,-336,226,489,246,221,-500,-498,-336,-499,86,226',
'530,-500,-498,771,-499,-336,772,-497,266,457,-492,-492,-492,-492,-492',
'-492,-492,-492,-492,-492,-492,-492,-492,-492,777,-299,-492,-492,-492',
'221,-492,-492,-299,782,-492,500,970,-492,-492,502,-492,-299,-492,528',
'-492,568,-492,-492,524,-492,-492,-492,-492,-492,-336,-492,-298,-492',
'222,-500,-498,658,-499,-298,-298,-298,226,272,-298,-298,-298,-492,-298',
'272,-492,-492,-492,-492,272,-492,658,-492,-298,-298,-298,226,-492,-492',
'246,281,-299,792,-298,-298,222,-298,-298,-298,-298,-298,612,221,800',
'221,803,-289,-492,-489,975,804,220,806,-289,-492,-489,808,810,973,521',
'218,818,-289,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,819,820,-298,-298,-298,792,769,-298,221,825,-298,-98',
'611,-298,-298,604,-298,226,-298,514,-298,-107,-298,-298,602,-298,-298',
'-298,-298,-298,222,-298,222,-298,-289,-492,-489,513,683,226,680,679',
'678,-73,681,-504,226,-298,127,-503,-298,-298,-298,-298,834,-298,502',
'-298,-591,-96,500,-273,-298,-108,498,-591,-591,-591,688,-105,-591,-591',
'-591,222,-591,812,226,489,691,844,225,246,461,-591,-591,-591,-591,967',
'460,680,679,678,-94,681,-591,-591,-93,-591,-591,-591,-591,-591,-103',
'-298,458,848,-102,221,658,865,-298,699,698,243,520,-587,692,245,244',
'-298,241,242,-271,518,-591,-591,-591,-591,-591,-591,-591,-591,-591,-591',
'-591,-591,-591,-591,869,-502,-591,-591,-591,226,889,-591,-502,226,-591',
'893,409,-591,-591,895,-591,-502,-591,396,-591,898,-591,-591,899,-591',
'-591,-591,-591,-591,-298,-591,-591,-591,222,902,226,906,-501,-274,683',
'226,680,679,678,-501,681,-591,908,803,-591,-591,-591,-591,-501,-591',
'-592,-591,911,913,915,688,-591,-592,-592,-592,-502,917,-592,-592,-592',
'691,-592,226,919,246,920,812,326,933,803,-592,-592,-592,-592,967,815',
'680,679,678,935,681,-592,-592,937,-592,-592,-592,-592,-592,939,-298',
'941,-501,699,698,941,243,-298,692,226,245,244,-587,241,242,947,-298',
'325,953,727,964,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592,-592',
'-592,-592,-592,971,266,-592,-592,-592,976,986,-592,217,803,-592,990',
'246,-592,-592,992,-592,994,-592,996,-592,996,-592,-592,663,-592,-592',
'-592,-592,-592,-298,-592,-592,-592,683,214,680,679,678,683,681,680,679',
'678,243,681,213,-592,245,244,-592,-592,-592,-592,1009,-592,-290,-592',
'1010,1011,941,941,-592,-290,-290,-290,941,1016,-290,-290,-290,812,-290',
'246,986,1019,812,-587,-586,226,815,212,-290,-290,-290,946,127,,,256',
'257,,-290,-290,,-290,-290,-290,-290,-290,683,,680,679,678,243,681,249',
',245,244,,241,242,,,247,,248,,,,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-290,-290,-290,,812,-290,-290,-290,,,-290,,,-290,,,-290',
'-290,,-290,,-290,,-290,,-290,-290,,-290,-290,-290,-290,-290,,-290,,-290',
'732,733,,,734,112,113,,683,,680,679,678,-290,681,,-290,-290,-290,-290',
',-290,-254,-290,,,,,-290,-254,-254,-254,,,-254,-254,-254,683,-254,680',
'679,678,688,681,,812,,-254,-254,,,,691,,,246,,,-254,-254,,-254,-254',
'-254,-254,-254,121,122,123,124,125,256,257,,686,121,122,123,124,125',
',,,696,695,699,698,243,,249,692,245,244,,241,242,,,247,-254,248,-419',
',,,,-254,,-419,-419,-419,272,-254,-419,-419,-419,226,-419,683,,680,679',
'678,,681,,-419,-419,-419,121,122,123,124,125,-254,-254,,-419,-419,,-419',
'-419,-419,-419,-419,,,,,-254,,,-254,,,812,683,-254,680,679,678,,681',
',-254,,,-419,-419,-419,-419,-419,-419,-419,-419,-419,-419,-419,-419',
'-419,-419,,,-419,-419,-419,,,-419,,272,-419,,812,-419,-419,,-419,,-419',
',-419,,-419,-419,,-419,-419,-419,-419,-419,-305,-419,-419,-419,,,,-305',
'-305,-305,,,-305,-305,-305,,-305,-419,246,,-419,-419,,-419,,-419,-305',
'-305,,,,,-419,,256,257,-305,-305,,-305,-305,-305,-305,-305,121,122,123',
'124,125,,243,,249,,245,244,,241,242,,,,,,,,-305,-305,-305,-305,-305',
'-305,-305,-305,-305,-305,-305,-305,-305,-305,,,-305,-305,-305,,,-305',
',281,-305,,,-305,-305,,-305,,-305,,-305,,-305,-305,,-305,-305,-305,-305',
'-305,,-305,-254,-305,,,,,,-254,-254,-254,,,-254,-254,-254,-305,-254',
'246,-305,-305,,-305,,-305,,-254,-254,-254,,,-305,,,256,257,,-254,-254',
',-254,-254,-254,-254,-254,,,,,,243,,,,245,244,,241,242,,,,,,,,,-254',
'-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,-254,,,-254',
'-254,-254,,,-254,,272,-254,,,-254,-254,,-254,,-254,,-254,,-254,-254',
',-254,-254,-254,-254,-254,,-254,-254,-254,,,,,,,,,,,,,,-254,,,-254,-254',
',-254,,-254,299,75,76,77,9,58,-254,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,78,28,27,106,105,107,108,,,19,,,,,606,8,46,301,10,110,109,111',
'100,57,102,101,103,,104,112,113,,96,97,42,43,41,246,250,251,252,253',
'263,264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,59,60,,,61,,35',
'243,,249,45,245,244,,241,242,262,261,247,20,248,,,,94,84,87,88,,89,91',
'90,92,,,,,85,93,,260,,-246,,,63,,86,98,99,5,75,76,77,9,58,,,,64,65,',
',,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,606',
'8,46,7,10,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41',
'246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256,257,,40,',
',33,,,59,60,,,61,,35,243,,249,45,245,244,,241,242,262,261,247,20,248',
',,,94,84,87,88,,89,91,90,92,,,,,85,93,,260,,,,,63,,86,98,99,299,75,76',
'77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107',
'108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,246,250,251,252,253,263,264,258,259,254,255,,239,240',
',,256,257,,40,,,303,,,59,60,,,61,,35,243,,249,45,245,244,,241,242,262',
'261,247,20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,260,,,,,63,,86',
'98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,246,250,251,252,253,263,264,258,259',
'254,255,,239,240,,,256,257,,40,,,33,,,59,60,,,61,,35,243,,249,45,245',
'244,,241,242,262,261,247,20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93',
',260,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109',
'111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,246,250,251,252',
'253,263,264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,59,60,,,61',
',35,243,,249,45,245,244,,241,242,262,261,247,20,248,,,,94,84,87,88,',
'89,91,90,92,,,,,85,93,226,260,,,,,63,,86,98,99,299,75,76,77,9,58,,,',
'64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19',
',,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,246,250,251,252,253,263,264,258,259,254,255,,239,240,,,256',
'257,,40,,,33,,,59,60,,,61,,35,243,,249,45,245,244,,241,242,262,261,247',
'20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,260,,,,,63,,86,98,99,299',
'75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106',
'105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104',
'112,113,,96,97,42,43,41,246,250,251,252,253,263,264,258,259,254,255',
',239,240,,,256,257,,40,,,33,,,59,60,,,61,,35,243,,249,45,245,244,,241',
'242,262,261,247,20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,260,,',
',,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100',
'57,102,101,103,,104,112,113,,96,97,42,43,41,246,250,251,252,253,263',
'264,258,259,254,255,,239,240,,,256,257,,40,,,33,,,59,60,,,61,,35,243',
',249,45,245,244,,241,242,262,261,247,20,248,,,,94,84,87,88,,89,91,90',
'92,,,,,85,93,,260,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301',
'10,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,246,250',
'251,252,253,263,264,258,259,254,255,,-611,-611,,,256,257,,40,,,33,,',
'59,60,,,61,,35,243,,249,45,245,244,,241,242,262,261,247,20,248,,,,94',
'84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,',
',19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,246,-611,-611,-611,-611,263,264,,,-611,-611,,,,,,256,257',
',40,,,303,,,59,60,,,61,,35,243,,249,45,245,244,,241,242,262,261,247',
'20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299',
'75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106',
'105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104',
'112,113,,96,97,42,43,41,246,-611,-611,-611,-611,263,264,,,-611,-611',
',,,,,256,257,,40,,,33,,,59,60,,,61,,35,243,,249,45,245,244,,241,242',
'262,261,247,20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86',
'98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,246,-611,-611,-611,-611,263,264,,,-611',
'-611,,,,,,256,257,,40,,,33,,,59,60,,,61,,35,243,,249,45,245,244,,241',
'242,262,261,247,20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63',
',86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,',
',,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57',
'102,101,103,,104,112,113,,96,97,42,43,41,246,-611,-611,-611,-611,263',
'264,,,-611,-611,,,,,,256,257,,40,,,33,,,59,60,,,61,,35,243,,249,45,245',
'244,,241,242,262,261,247,20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93',
',,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111',
'100,57,102,101,103,,104,112,113,,96,97,42,43,41,246,250,251,252,253',
'263,264,258,,254,255,,,,,,256,257,,40,,,33,,,59,60,,,61,,35,243,,249',
'45,245,244,,241,242,262,261,247,20,248,,,,94,84,87,88,,89,91,90,92,',
',,,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110',
'109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,246,250,251',
'252,253,263,264,,,254,255,,,,,,256,257,,40,,,33,,,59,60,,,61,,35,243',
',249,45,245,244,,241,242,262,261,247,20,248,,,,94,84,87,88,,89,91,90',
'92,,,,,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10',
'110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,246,250',
'251,252,253,263,264,258,259,254,255,,-611,-611,,,256,257,,40,,,33,,',
'59,60,,,61,,35,243,,249,45,245,244,,241,242,262,261,247,20,248,,,,94',
'84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,',
',19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,246,-611,-611,-611,-611,263,264,,,-611,-611,,,,,,256,257',
',40,,,303,,,59,60,,,61,,35,243,,249,45,245,244,,241,242,262,261,247',
'20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299',
'75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106',
'105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104',
'112,113,,96,97,42,43,41,246,-611,-611,-611,-611,263,264,,,-611,-611',
',,,,,256,257,,40,,,33,,,59,60,,,61,,35,243,,249,45,245,244,,241,242',
'262,261,247,20,248,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86',
'98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,246,,,,,,,,,,,,,,,,256,257,,40,,,33',
',,59,60,,,61,,35,243,,249,45,245,244,,241,242,,,,20,,,,,94,84,87,88',
',89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,',
'8,46,301,10,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,',
'94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,5,75,76,77,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,',
',19,,,,,,8,46,7,10,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299,75,76',
'77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107',
'108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,',
',,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299',
'75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106',
'105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104',
'112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35',
',,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86',
'98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60',
',,61,,35,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,',
',,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109,111,100',
'57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,',
'33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,',
',,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110',
'109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,',
',,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89',
'91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58,,,,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46',
'301,10,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,',
',,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,94,84',
'87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,299,75,76,77,9,58,,',
',64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19',
',,,,,8,46,301,10,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,',
',,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41',
',,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94',
'84,87,88,,89,91,90,92,,,,,85,93,226,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,',
',,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,',
',,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94',
'84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,,,,46',
',,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42,43,41,,,',
',,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45,,,294,,,,,,236',
',,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,',
',,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45,,,294,,,',
',,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98',
'99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,',
',238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45,,,294',
',,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,226,,,75,76,77,63,58',
'86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105',
'107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,',
',,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,',
',,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98',
'99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108',
',,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,75,76,77,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,',
',19,,,,,,8,46,,10,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,',
',,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41',
',,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94',
'84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,',
'68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238,,,',
',,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,294,,,,,,236',
',,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,75,76,77',
'9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107',
'108,,,19,,,,,,8,46,7,10,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,',
',,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108',
',,238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45',
',,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63',
'58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105',
'107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,',
',,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,316,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,922,,,237,,,59,60,,,61,,,,,,,,,,,,,,,,,',
',,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,',
',,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42,43,41',
',,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45,,,294,,,,,,236',
',,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,',
',,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45,,,294,,,',
',,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98',
'99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,',
',238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45,,,294',
',,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,316,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,59,60,,,61,,307,,,,,,,,,,,,',
',,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,316,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,312,,,237,,,59,60,,,61,,,683,,680,679,678,688,681',
',,,,,,,,691,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,324,,686,63,,86,98',
'99,75,76,77,,58,699,698,,64,65,692,,,68,,66,67,69,318,319,73,74,,,,',
',78,315,321,106,105,107,108,,,238,,,,,,,316,,,110,109,111,100,57,102',
'101,103,,104,112,113,,96,97,,,322,,,,,,,,,,,,,,,,,,,,928,,,237,,,59',
'60,,,61,,,,,,,,,,,,,,,,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75',
'76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315',
'321,106,105,107,108,,,238,,,,,,,316,,,110,109,111,100,57,102,101,103',
',104,112,113,,96,97,,,322,,,,,,,,,,,,,,,,,,,,922,,,237,,,59,60,,,61',
',,,,,,,,,,,,,,,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63',
'58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106',
'105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112',
'113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45',
',,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58',
'86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105',
'107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,',
',,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,',
',,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98',
'99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108',
',,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42',
'43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,288,,45,,,294,,,',
',,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,75',
'76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105',
'107,108,,,19,,,,,,8,46,,10,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,',
',,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,,,45',
',,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63',
'58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106',
'105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104',
'112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,',
',,,45,,,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76',
'77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106',
'105,107,108,,,19,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112',
'113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45',
',,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58',
'86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107',
'108,,,19,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,',
',,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98',
'99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,',
',19,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42',
'43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,20,',
',,,94,84,87,88,,89,91,90,92,,,,,85,93,118,,,,,117,63,,86,98,99,75,76',
'77,,58,,,,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105',
'107,108,,,238,,,,,,,316,,,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,,,322,,,,,,,,,,,,,,,,,,,,358,,,33,,,59,60,,,61,,35,,,,,,,,,,',
',,,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99',
'64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108',
',,238,,,,,,,316,,,110,109,111,363,57,102,101,364,,104,112,113,,96,97',
',,322,,,,,,,,,,,,,,,,,370,,,365,,,237,,,59,60,,,61,,,,,,,,,,,,,,,,,',
',,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,316,,,110,109,111,363,57,102,101,364,,104,112,113,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,365,,,237,,,59,60,,,61,,,683,,680,679,678,688,681',
',,,,,,,,691,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,686,63,,86,98,99',
'75,76,77,9,58,699,698,,64,65,692,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,19,,,,,,8,46,7,10,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60',
',,61,,35,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,',
',,398,63,,86,98,99,75,76,77,,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,78,28,27,106,105,107,108,,,19,,,,,,,46,,,110,109,111,100,57,102',
'101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93',
',,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,19,,,,,,,46,,,110,109,111,100,57,102,101,103',
',104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,',
'61,,,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76',
'77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106',
'105,107,108,,,19,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112',
'113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45',
',,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58',
'86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107',
'108,,,19,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,',
',,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,75,76',
'77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107',
'108,,,19,,,,,,8,46,,10,110,109,111,100,57,102,101,103,,104,112,113,',
'96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,',
',,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,641,,,,45,,,',
',,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108',
',,19,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42',
'43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,20,',
',,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,',
',,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41',
',,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,414,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,',
',,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,',
',,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,414,,,,45,,,,,,,,,236,,,,',
'94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,',
',46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,',
',,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94,84',
'87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,,46,,',
'110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,',
',,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94,84,87,88',
',89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,,,,46,,,110,109',
'111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,',
',,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91',
'90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,,,,46,,,110,109,111',
'100,57,102,101,103,293,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,',
',,231,,,237,,,59,60,,,61,,290,,288,,45,,,294,,,,,,236,,,,,94,291,87',
'88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66',
'67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,46,',
',110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,',
',,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87',
'88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,,,,46,,,110',
'109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,',
',,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89',
'91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,,46,,,110,109,111',
'100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231',
',,237,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,',
',,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73',
'74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,316,,,110,109,111,100',
'57,102,101,103,,104,112,113,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,237',
',,59,60,,,61,,,683,,680,679,678,688,681,,,,,,,,,691,,94,84,87,88,,89',
'91,90,92,,,,,85,93,,,,516,,686,63,,86,98,99,75,76,77,,58,699,698,,64',
'65,692,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108',
',,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,414,,,,45,,,,,,,,,236',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,316,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,,,322',
',,,,,,,,,,,,,,,,,,,312,,,308,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,94,84,87',
'88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66',
'67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,316',
',,110,109,111,100,57,102,101,103,,104,112,113,,96,97,,,322,,,,,,,,,',
',,,,,,,,,,312,,,308,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,94,84,87,88,,89',
'91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69',
'318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,316,,,110',
'109,111,100,57,102,101,103,,104,112,113,,96,97,,,322,,,,,,,,,,,,,,,',
',,,,312,,,308,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,94,84,87,88,,89,91,90',
'92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319',
'73,74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100',
'57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,',
',237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,',
',,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73',
'74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100',
'57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,',
',237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,',
',,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73',
'74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100',
'57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,',
',237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,',
',,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73',
'74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100',
'57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,',
',237,533,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92',
',,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,78,28,27,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57',
'102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237',
',,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85',
'93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',78,28,27,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60',
',,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75',
'76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27',
'106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104',
'112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,',
',,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77',
'63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105',
'107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,',
',,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,288,,45',
',,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63',
'58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106',
'105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104',
'112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,641',
',288,,45,,,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75',
'76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315',
'321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103',
',104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,',
'61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,',
'63,,86,98,99,75,76,77,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',78,28,27,106,105,107,108,,,19,,,,,,8,46,,10,110,109,111,100,57,102',
'101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59',
'60,,,61,,35,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93',
',,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103',
'293,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60',
',,61,,290,,288,,45,,,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,',
'85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,',
',,,,78,28,27,106,105,107,108,,,19,,,,,,,46,,,110,109,111,100,57,102',
'101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93',
',,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103',
',104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,',
'61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75',
'76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315',
'321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103',
',104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,',
'61,,745,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,',
'75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28',
'27,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,293',
'104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61',
',290,,288,,45,,,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93',
',,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78',
'28,27,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103',
'293,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60',
',,61,,290,,288,,45,,,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,',
'85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,',
',,,,78,28,27,106,105,107,108,,,19,,,,,,,46,,,110,109,111,100,57,102',
'101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93',
',,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,',
'78,315,321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60',
',,61,,290,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,',
',,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78',
'315,321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101',
'103,293,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59',
'60,,,61,,641,,,,45,,,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,',
'85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,',
',,,,78,28,27,106,105,107,108,,,19,,,,,,,46,,,110,109,111,100,57,102',
'101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'59,60,,,61,,,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93',
',,,75,76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,',
'78,315,321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101',
'103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60',
',,61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75',
'76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315',
'321,106,105,107,108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103',
',104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,',
'61,,,,,,45,,,,,,,,,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75',
'76,77,63,58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315',
'321,106,105,107,108,,,238,,,,,,,316,,,110,109,111,100,57,102,101,103',
',104,112,113,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,59,60,,,61',
',,,,,,,,,,,,,,,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63',
'58,86,98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105',
'107,108,,,19,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113',
',96,97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,',
',,,,,,20,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108',
',,238,,,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45',
',,294,,,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63',
'58,86,98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106',
'105,107,108,,,238,,,,,,,316,,,110,109,111,100,57,102,101,103,,104,112',
'113,,96,97,,,322,,,,,,,,,,,,,,,,,,,,312,,,308,,,59,60,,,61,,,683,,680',
'679,678,688,681,,,,,,,,,691,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,',
',686,63,,86,98,99,75,76,77,9,58,699,698,,64,65,692,,,68,,66,67,69,30',
'31,73,74,,,,,,78,28,27,106,105,107,108,,,19,,,,,,8,46,301,10,110,109',
'111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,,,,,,,,,,',
',,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,94,84,87,88,,89,91',
'90,92,,,,,85,93,,,,,,398,63,,86,98,99,75,76,77,,58,,,,64,65,,,,68,,66',
'67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,46,',
',110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43,41,,,,,,,',
',,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,,,94,84,87',
'88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65,,,,68,,66',
'67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238,,,,,,,46,',
',110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42,43,41,,,,',
',,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,288,,45,,,294,,,,,,236,,,,',
'94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42',
'43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,641,,288,,45,,,294',
',,,,,236,,,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86',
'98,99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107',
'108,,,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96',
'97,42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,',
',,236,,,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98',
'99,64,65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108',
',,238,,,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97',
'42,43,41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236',
',,,,94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,78,28,27,106,105,107,108,,,238,,,,',
',,46,,,110,109,111,100,57,102,101,103,293,104,112,113,,96,97,42,43,41',
',,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,290,,288,,45,,,294,,,,,,236',
',,,,94,291,87,88,,89,91,90,92,,,,,85,93,,,,75,76,77,63,58,86,98,99,64',
'65,,,,68,,66,67,69,318,319,73,74,,,,,,78,315,321,106,105,107,108,,,238',
',,,,,,46,,,110,109,111,100,57,102,101,103,,104,112,113,,96,97,42,43',
'41,,,,,,,,,,,,,,,,,,,,231,,,237,,,59,60,,,61,,,,,,45,,,,,,,,,236,,,',
',94,84,87,88,,89,91,90,92,,,,,85,93,,,,,,,63,,86,98,99,179,190,180,203',
'176,196,186,185,206,207,201,184,183,178,204,208,209,188,177,191,195',
'197,189,182,,,,198,205,200,199,192,202,187,175,194,193,,,,,,174,181',
'172,173,169,170,171,130,132,,,131,,,,,,,,163,164,,160,142,143,144,151',
'148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156,,141,162,159',
'158,167,154,155,149,147,139,161,140,,,168,94,,,,,,,,,,,,,,93,179,190',
'180,203,176,196,186,185,206,207,201,184,183,178,204,208,209,188,177',
'191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194,193,,,,,',
'174,181,172,173,169,170,171,130,132,,,131,,,,,,,,163,164,,160,142,143',
'144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156,,141',
'162,159,158,167,154,155,149,147,139,161,140,,,168,94,,,,,,,,,,,,,,93',
'179,190,180,203,176,196,186,185,206,207,201,184,183,178,204,208,209',
'188,177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194,193',
',,,,,174,181,172,173,169,170,171,130,132,,,131,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,,,168,94,,,,,,,,,,',
',,,93,179,190,180,203,176,196,186,185,206,207,201,184,183,178,204,208',
'209,188,177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194',
'193,,,,,,174,181,172,173,169,170,171,130,132,129,,131,,,,,,,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,',
',,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,,,168,94',
',,,,,,,,,,,,,93,179,190,180,203,176,196,186,185,206,207,201,184,183',
'178,204,208,209,188,177,191,195,197,189,182,,,,198,205,200,381,380,382',
'379,175,194,193,,,,,,174,181,172,173,376,377,378,374,132,102,101,375',
',104,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166',
'152,153,,,,,,386,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147',
'139,161,140,,,168,179,190,180,203,176,196,186,185,206,207,201,184,183',
'178,204,208,209,188,177,191,195,197,189,182,,,,198,205,200,199,192,202',
'187,175,194,193,,,,,,174,181,172,173,169,170,171,130,132,,,131,,,,,',
',,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153',
',,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140',
'622,440,168,,623,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146',
',,,165,166,152,153,,,,,,272,,,,,,,,157,156,,141,162,159,158,167,154',
'155,149,147,139,161,140,715,447,168,,716,,,,,,,,163,164,,160,142,143',
'144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,272,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,750,447,168,,749,,',
',,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153',
',,,,,272,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161',
'140,747,440,168,,748,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145',
'146,,,,165,166,152,153,,,,,,272,,,,,,,,157,156,,141,162,159,158,167',
'154,155,149,147,139,161,140,436,440,168,,437,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,272,,,,,,,,157',
'156,,141,162,159,158,167,154,155,149,147,139,161,140,487,440,168,,488',
',,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152',
'153,,,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161',
'140,443,447,168,,442,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145',
'146,,,,165,166,152,153,,,,,,272,,,,,,,,157,156,,141,162,159,158,167',
'154,155,149,147,139,161,140,624,447,168,,625,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,272,,,,,,,,157',
'156,,141,162,159,158,167,154,155,149,147,139,161,140,622,440,168,,623',
',,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152',
'153,,,,,,272,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139',
'161,140,1007,447,168,,1008,,,,,,,,163,164,,160,142,143,144,151,148,150',
',,145,146,,,,165,166,152,153,,,,,,272,,,,,,,,157,156,,141,162,159,158',
'167,154,155,149,147,139,161,140,487,440,168,,488,,,,,,,,163,164,,160',
'142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,272,,,,,,',
',157,156,,141,162,159,158,167,154,155,149,147,139,161,140,718,447,168',
',719,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166',
'152,153,,,,,,272,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147',
'139,161,140,1005,440,168,,1006,,,,,,,,163,164,,160,142,143,144,151,148',
'150,,,145,146,,,,165,166,152,153,,,,,,272,,,,,,,,157,156,,141,162,159',
'158,167,154,155,149,147,139,161,140,1002,447,168,,1001,,,,,,,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,272,',
',,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,651,440',
'168,,652,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165',
'166,152,153,,,,,,272,,,,,,,,157,156,,141,162,159,158,167,154,155,149',
'147,139,161,140,654,447,168,,655,,,,,,,,163,164,,160,142,143,144,151',
'148,150,,,145,146,,,,165,166,152,153,,,,,,272,,,,,,,,157,156,,141,162',
'159,158,167,154,155,149,147,139,161,140,713,440,168,,714,,,,,,,,163',
'164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,272',
',,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,624',
'447,168,,625,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,',
',,165,166,152,153,,,,,,272,,,,,,,,157,156,,141,162,159,158,167,154,155',
'149,147,139,161,140,,683,168,680,679,678,688,681,,683,,680,679,678,688',
'681,691,,,,,,,,691,,683,,680,679,678,688,681,,,,,,686,,,691,,,,,686',
'696,695,699,698,,,,692,696,695,699,698,,,,692,686,,683,,680,679,678',
'688,681,696,695,699,698,,,,692,691,,683,,680,679,678,688,681,,683,,680',
'679,678,688,681,691,,,,,686,,,691,,,,,,696,695,699,698,,,,692,686,,',
',,,,,686,696,695,699,698,,,,692,696,695,699,698,,,683,692,680,679,678',
'688,681,,683,,680,679,678,688,681,691,,,,,,,,691,,683,,680,679,678,688',
'681,,,,,,686,,,691,,,,,686,,,699,698,,,,692,696,695,699,698,,,,692,686',
',683,,680,679,678,688,681,,,699,698,,,,692,691,,683,,680,679,678,688',
'681,683,,680,679,678,688,681,,691,,,,,686,,691,,683,,680,679,678,688',
'681,699,698,,,,692,686,,691,,,,,686,,,,699,698,,,,692,,699,698,,,,692',
'686,,683,,680,679,678,688,681,696,695,699,698,,,,692,691,,683,,680,679',
'678,688,681,683,,680,679,678,688,681,,691,,,,,686,669,691,,,,,,,696',
'695,699,698,,,,692,686,,,,,,,686,,696,695,699,698,,,,692,,699,698,,',
',692' ]
        racc_action_table = arr = ::Array.new(24631, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'624,747,894,575,575,561,714,624,624,624,19,348,624,624,624,773,624,62',
'711,798,464,646,347,393,635,624,624,624,624,355,365,646,1017,394,365',
'359,624,624,1025,624,624,624,624,624,1005,926,1006,976,929,1020,773',
'19,464,1021,452,452,464,464,747,635,661,661,1022,828,356,713,624,624',
'624,624,624,624,624,624,624,624,624,624,624,624,837,1008,624,624,624',
'837,624,624,868,393,624,925,715,624,624,1023,624,575,624,394,624,1,624',
'624,62,624,624,624,624,624,749,624,624,624,561,714,552,749,749,749,894',
'1007,1026,749,749,894,749,624,798,348,624,624,624,624,348,624,711,624',
'355,711,347,711,624,624,359,347,749,749,452,749,749,749,749,749,661',
'631,1025,715,1008,716,651,1025,1005,926,1006,976,929,1005,926,1006,976',
'929,828,356,713,1027,749,749,749,749,749,749,749,749,749,749,749,749',
'749,749,317,421,749,749,749,384,749,434,1007,1008,749,715,384,749,1008',
'1034,868,787,749,925,749,868,749,749,925,749,749,749,749,749,552,749',
'443,749,716,552,651,232,841,443,443,443,41,41,435,443,443,749,443,1007',
'749,749,631,749,1007,749,229,443,421,571,571,352,749,749,317,364,352',
'26,443,443,384,443,443,443,443,443,651,969,716,651,897,832,897,787,969',
'504,832,317,432,651,654,322,322,969,232,841,346,346,443,443,443,443',
'443,443,443,443,443,443,443,443,443,443,422,229,443,443,443,364,443',
'230,41,41,443,787,364,443,787,718,586,364,443,26,443,364,443,443,787',
'443,443,443,443,443,969,443,443,443,652,987,987,504,504,504,364,571',
'26,654,654,444,571,443,388,418,443,443,750,443,504,443,415,322,322,750',
'750,750,443,443,230,750,750,718,750,946,364,946,946,946,718,946,770',
'750,454,718,586,586,588,718,654,701,701,654,750,750,586,750,750,750',
'750,750,297,654,3,413,652,297,718,3,815,410,815,815,815,24,815,404,388',
'388,388,748,24,466,750,750,750,750,750,750,750,750,750,750,750,750,750',
'750,718,770,750,750,750,467,750,468,652,469,750,652,395,750,588,588',
'391,326,750,946,750,652,750,750,588,750,750,750,750,750,442,750,750',
'750,622,491,607,442,442,442,748,495,24,442,442,342,442,750,342,965,750',
'750,965,750,815,750,339,338,363,339,338,623,750,750,326,511,442,442',
'17,442,442,442,442,442,326,512,395,395,395,367,391,391,391,607,667,382',
'367,667,515,458,517,622,382,607,522,367,442,442,442,442,442,442,442',
'442,442,442,442,442,442,442,363,525,442,442,442,17,442,363,623,534,442',
'392,363,442,389,17,363,390,442,535,442,536,442,442,537,442,442,442,442',
'442,100,442,549,442,367,363,458,100,100,100,382,553,100,100,100,564',
'100,442,44,44,442,442,564,442,100,442,100,100,100,14,14,564,442,442',
'554,363,100,100,555,100,100,100,100,100,556,392,392,392,389,389,389',
'390,390,390,44,44,129,381,380,803,803,129,129,369,381,380,100,100,100',
'100,100,100,100,100,100,100,100,100,100,100,564,357,100,100,100,228',
'100,100,357,360,100,358,228,100,100,573,100,357,100,583,100,228,100',
'100,591,100,100,100,100,100,379,100,103,100,593,354,599,379,353,103',
'103,103,381,380,103,103,103,100,103,343,100,100,100,100,608,100,103',
'100,103,103,103,341,100,100,82,340,357,613,103,103,228,103,103,103,103',
'103,82,47,336,618,330,328,378,377,47,376,82,626,328,378,377,627,376',
'47,628,379,630,328,103,103,103,103,103,103,103,103,103,103,103,103,103',
'103,634,521,103,103,103,921,103,103,521,636,103,638,921,103,103,640',
'103,521,103,327,103,921,103,103,323,103,103,103,103,103,47,103,625,103',
'328,378,377,648,376,625,625,625,650,321,625,625,625,103,625,653,103',
'103,103,103,656,103,657,103,625,625,625,316,103,103,660,315,521,662',
'625,625,921,625,625,625,625,625,437,927,671,16,672,313,375,374,927,674',
'16,675,313,375,374,676,685,927,312,16,693,313,625,625,625,625,625,625',
'625,625,625,625,625,625,625,625,697,700,625,625,625,703,625,625,420',
'709,625,437,436,625,625,420,625,712,625,306,625,437,625,625,420,625',
'625,625,625,625,927,625,16,625,313,375,374,305,947,304,947,947,947,302',
'947,39,721,625,301,38,625,625,625,625,725,625,289,625,447,436,286,744',
'625,625,285,447,447,447,800,436,447,447,447,420,447,947,746,271,800',
'755,238,479,234,447,447,447,447,1000,233,1000,1000,1000,39,1000,447',
'447,38,447,447,447,447,447,39,655,231,776,38,311,786,790,655,800,800',
'479,311,655,800,479,479,655,479,479,793,311,447,447,447,447,447,447',
'447,447,447,447,447,447,447,447,794,310,447,447,447,799,814,447,310',
'816,447,821,210,447,447,824,447,310,447,114,447,829,447,447,831,447',
'447,447,447,447,655,447,447,447,311,835,836,839,309,840,812,46,812,812',
'812,309,812,447,849,850,447,447,447,447,309,447,448,447,852,853,854',
'908,447,448,448,448,310,856,448,448,448,908,448,857,858,480,859,812',
'40,874,875,448,448,448,448,919,812,919,919,919,879,919,448,448,880,448',
'448,448,448,448,882,719,883,309,908,908,885,480,719,908,888,480,480',
'719,480,480,890,719,37,901,905,918,448,448,448,448,448,448,448,448,448',
'448,448,448,448,448,922,22,448,448,448,928,948,448,15,955,448,958,465',
'448,448,959,448,960,448,961,448,963,448,448,972,448,448,448,448,448',
'719,448,448,448,686,13,686,686,686,889,686,889,889,889,465,889,12,448',
'465,465,448,448,448,448,977,448,57,448,978,979,980,981,448,57,57,57',
'982,983,57,57,57,686,57,531,985,988,889,1001,1002,1004,686,10,57,57',
'57,889,7,,,531,531,,57,57,,57,57,57,57,57,891,,891,891,891,531,891,531',
',531,531,,531,531,,,531,,531,,,,57,57,57,57,57,57,57,57,57,57,57,57',
'57,57,,891,57,57,57,,,57,,,57,,,57,57,,57,,57,,57,,57,57,,57,57,57,57',
'57,,57,,57,579,579,,,579,579,579,,1016,,1016,1016,1016,57,1016,,57,57',
'57,57,,57,486,57,,,,,57,486,486,486,,,486,486,486,779,486,779,779,779',
'779,779,,1016,,486,486,,,,779,,,484,,,486,486,,486,486,486,486,486,335',
'335,335,335,335,484,484,,779,6,6,6,6,6,,,,779,779,779,779,484,,484,779',
'484,484,,484,484,,,484,486,484,27,,,,,486,,27,27,27,486,486,27,27,27',
'779,27,984,,984,984,984,,984,,27,27,27,300,300,300,300,300,486,486,',
'27,27,,27,27,27,27,27,,,,,486,,,486,,,984,986,486,986,986,986,,986,',
'486,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27',
'27,,986,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,28,27,27,27,,,,28,28',
'28,,,28,28,28,,28,27,471,,27,27,,27,,27,28,28,,,,,27,,471,471,28,28',
',28,28,28,28,28,509,509,509,509,509,,471,,471,,471,471,,471,471,,,,',
',,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28',
',,28,28,,28,,28,,28,,28,28,,28,28,28,28,28,,28,438,28,,,,,,438,438,438',
',,438,438,438,28,438,472,28,28,,28,,28,,438,438,438,,,28,,,472,472,',
'438,438,,438,438,438,438,438,,,,,,472,,,,472,472,,472,472,,,,,,,,,438',
'438,438,438,438,438,438,438,438,438,438,438,438,438,,,438,438,438,,',
'438,,438,438,,,438,438,,438,,438,,438,,438,438,,438,438,438,438,438',
',438,438,438,,,,,,,,,,,,,,438,,,438,438,,438,,438,551,551,551,551,551',
'551,438,,,551,551,,,,551,,551,551,551,551,551,551,551,,,,,,551,551,551',
'551,551,551,551,,,551,,,,,425,551,551,551,551,551,551,551,551,551,551',
'551,551,,551,551,551,,551,551,551,551,551,425,425,425,425,425,425,425',
'425,425,425,425,,425,425,,,425,425,,551,,,551,,,551,551,,,551,,551,425',
',425,551,425,425,,425,425,425,425,425,551,425,,,,551,551,551,551,,551',
'551,551,551,,,,,551,551,,425,,425,,,551,,551,551,551,0,0,0,0,0,0,,,',
'0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,431,0,0,0,0,0,0,0',
'0,0,0,0,0,,0,0,0,,0,0,0,0,0,431,431,431,431,431,431,431,431,431,431',
'431,,431,431,,,431,431,,0,,,0,,,0,0,,,0,,0,431,,431,0,431,431,,431,431',
'431,431,431,0,431,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,431,,,,,0,,0,0,0,308',
'308,308,308,308,308,,,,308,308,,,,308,,308,308,308,308,308,308,308,',
',,,,308,308,308,308,308,308,308,,,308,,,,,,308,308,308,308,308,308,308',
'308,308,308,308,308,,308,308,308,,308,308,308,308,308,283,283,283,283',
'283,283,283,283,283,283,283,,283,283,,,283,283,,308,,,308,,,308,308',
',,308,,308,283,,283,308,283,283,,283,283,283,283,283,308,283,,,,308',
'308,308,308,,308,308,308,308,,,,,308,308,,283,,,,,308,,308,308,308,572',
'572,572,572,572,572,,,,572,572,,,,572,,572,572,572,572,572,572,572,',
',,,,572,572,572,572,572,572,572,,,572,,,,,,572,572,572,572,572,572,572',
'572,572,572,572,572,,572,572,572,,572,572,572,572,572,752,752,752,752',
'752,752,752,752,752,752,752,,752,752,,,752,752,,572,,,572,,,572,572',
',,572,,572,752,,752,572,752,752,,752,752,752,752,752,572,752,,,,572',
'572,572,572,,572,572,572,572,,,,,572,572,,752,,,,,572,,572,572,572,351',
'351,351,351,351,351,,,,351,351,,,,351,,351,351,351,351,351,351,351,',
',,,,351,351,351,351,351,351,351,,,351,,,,,,351,351,351,351,351,351,351',
'351,351,351,351,351,,351,351,351,,351,351,351,351,351,483,483,483,483',
'483,483,483,483,483,483,483,,483,483,,,483,483,,351,,,351,,,351,351',
',,351,,351,483,,483,351,483,483,,483,483,483,483,483,351,483,,,,351',
'351,351,351,,351,351,351,351,,,,,351,351,483,483,,,,,351,,351,351,351',
'924,924,924,924,924,924,,,,924,924,,,,924,,924,924,924,924,924,924,924',
',,,,,924,924,924,924,924,924,924,,,924,,,,,,924,924,924,924,924,924',
'924,924,924,924,924,924,,924,924,924,,924,924,924,924,924,846,846,846',
'846,846,846,846,846,846,846,846,,846,846,,,846,846,,924,,,924,,,924',
'924,,,924,,924,846,,846,924,846,846,,846,846,846,846,846,924,846,,,',
'924,924,924,924,,924,924,924,924,,,,,924,924,,846,,,,,924,,924,924,924',
'792,792,792,792,792,792,,,,792,792,,,,792,,792,792,792,792,792,792,792',
',,,,,792,792,792,792,792,792,792,,,792,,,,,,792,792,792,792,792,792',
'792,792,792,792,792,792,,792,792,792,,792,792,792,792,792,21,21,21,21',
'21,21,21,21,21,21,21,,21,21,,,21,21,,792,,,792,,,792,792,,,792,,792',
'21,,21,792,21,21,,21,21,21,21,21,792,21,,,,792,792,792,792,,792,792',
'792,792,,,,,792,792,,21,,,,,792,,792,792,792,736,736,736,736,736,736',
',,,736,736,,,,736,,736,736,736,736,736,736,736,,,,,,736,736,736,736',
'736,736,736,,,736,,,,,,736,736,736,736,736,736,736,736,736,736,736,736',
',736,736,736,,736,736,736,736,736,532,532,532,532,532,532,532,532,532',
'532,532,,532,532,,,532,532,,736,,,736,,,736,736,,,736,,736,532,,532',
'736,532,532,,532,532,532,532,532,736,532,,,,736,736,736,736,,736,736',
'736,736,,,,,736,736,,532,,,,,736,,736,736,736,717,717,717,717,717,717',
',,,717,717,,,,717,,717,717,717,717,717,717,717,,,,,,717,717,717,717',
'717,717,717,,,717,,,,,,717,717,717,717,717,717,717,717,717,717,717,717',
',717,717,717,,717,717,717,717,717,462,462,462,462,462,462,462,462,462',
'462,462,,462,462,,,462,462,,717,,,717,,,717,717,,,717,,717,462,,462',
'717,462,462,,462,462,462,462,462,717,462,,,,717,717,717,717,,717,717',
'717,717,,,,,717,717,,,,,,,717,,717,717,717,303,303,303,303,303,303,',
',,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303,303',
'303,303,,,303,,,,,,303,303,303,303,303,303,303,303,303,303,303,303,',
'303,303,303,,303,303,303,303,303,474,474,474,474,474,474,474,,,474,474',
',,,,,474,474,,303,,,303,,,303,303,,,303,,303,474,,474,303,474,474,,474',
'474,474,474,474,303,474,,,,303,303,303,303,,303,303,303,303,,,,,303',
'303,,,,,,,303,,303,303,303,781,781,781,781,781,781,,,,781,781,,,,781',
',781,781,781,781,781,781,781,,,,,,781,781,781,781,781,781,781,,,781',
',,,,,781,781,781,781,781,781,781,781,781,781,781,781,,781,781,781,,781',
'781,781,781,781,476,476,476,476,476,476,476,,,476,476,,,,,,476,476,',
'781,,,781,,,781,781,,,781,,781,476,,476,781,476,476,,476,476,476,476',
'476,781,476,,,,781,781,781,781,,781,781,781,781,,,,,781,781,,,,,,,781',
',781,781,781,833,833,833,833,833,833,,,,833,833,,,,833,,833,833,833',
'833,833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,,833,833',
'833,833,833,833,833,833,833,833,833,833,,833,833,833,,833,833,833,833',
'833,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,833,,,833,,',
'833,833,,,833,,833,478,,478,833,478,478,,478,478,478,478,478,833,478',
',,,833,833,833,833,,833,833,833,833,,,,,833,833,,,,,,,833,,833,833,833',
'726,726,726,726,726,726,,,,726,726,,,,726,,726,726,726,726,726,726,726',
',,,,,726,726,726,726,726,726,726,,,726,,,,,,726,726,726,726,726,726',
'726,726,726,726,726,726,,726,726,726,,726,726,726,726,726,473,473,473',
'473,473,473,473,,,473,473,,,,,,473,473,,726,,,726,,,726,726,,,726,,726',
'473,,473,726,473,473,,473,473,473,473,473,726,473,,,,726,726,726,726',
',726,726,726,726,,,,,726,726,,,,,,,726,,726,726,726,722,722,722,722',
'722,722,,,,722,722,,,,722,,722,722,722,722,722,722,722,,,,,,722,722',
'722,722,722,722,722,,,722,,,,,,722,722,722,722,722,722,722,722,722,722',
'722,722,,722,722,722,,722,722,722,722,722,482,482,482,482,482,482,482',
'482,,482,482,,,,,,482,482,,722,,,722,,,722,722,,,722,,722,482,,482,722',
'482,482,,482,482,482,482,482,722,482,,,,722,722,722,722,,722,722,722',
'722,,,,,722,722,,,,,,,722,,722,722,722,237,237,237,237,237,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,237,237,237,237,237,237,237,237,237,237,237,237,,237',
'237,237,,237,237,237,237,237,481,481,481,481,481,481,481,,,481,481,',
',,,,481,481,,237,,,237,,,237,237,,,237,,237,481,,481,237,481,481,,481',
'481,481,481,481,237,481,,,,237,237,237,237,,237,237,237,237,,,,,237',
'237,,,,,,,237,,237,237,237,827,827,827,827,827,827,,,,827,827,,,,827',
',827,827,827,827,827,827,827,,,,,,827,827,827,827,827,827,827,,,827',
',,,,,827,827,827,827,827,827,827,827,827,827,827,827,,827,827,827,,827',
'827,827,827,827,463,463,463,463,463,463,463,463,463,463,463,,463,463',
',,463,463,,827,,,827,,,827,827,,,827,,827,463,,463,827,463,463,,463',
'463,463,463,463,827,463,,,,827,827,827,827,,827,827,827,827,,,,,827',
'827,,,,,,,827,,827,827,827,33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33',
'33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33',
'33,33,33,33,33,,33,33,33,,33,33,33,33,33,477,477,477,477,477,477,477',
',,477,477,,,,,,477,477,,33,,,33,,,33,33,,,33,,33,477,,477,33,477,477',
',477,477,477,477,477,33,477,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,',
',,,,33,,33,33,33,548,548,548,548,548,548,,,,548,548,,,,548,,548,548',
'548,548,548,548,548,,,,,,548,548,548,548,548,548,548,,,548,,,,,,548',
'548,548,548,548,548,548,548,548,548,548,548,,548,548,548,,548,548,548',
'548,548,475,475,475,475,475,475,475,,,475,475,,,,,,475,475,,548,,,548',
',,548,548,,,548,,548,475,,475,548,475,475,,475,475,475,475,475,548,475',
',,,548,548,548,548,,548,548,548,548,,,,,548,548,,,,,,,548,,548,548,548',
'350,350,350,350,350,350,,,,350,350,,,,350,,350,350,350,350,350,350,350',
',,,,,350,350,350,350,350,350,350,,,350,,,,,,350,350,350,350,350,350',
'350,350,350,350,350,350,,350,350,350,,350,350,350,350,350,470,,,,,,',
',,,,,,,,,470,470,,350,,,350,,,350,350,,,350,,350,470,,470,350,470,470',
',470,470,,,,350,,,,,350,350,350,350,,350,350,350,350,,,,,350,350,,,',
',,,350,,350,350,350,334,334,334,334,334,334,,,,334,334,,,,334,,334,334',
'334,334,334,334,334,,,,,,334,334,334,334,334,334,334,,,334,,,,,,334',
'334,334,334,334,334,334,334,334,334,334,334,,334,334,334,,334,334,334',
'334,334,,,,,,,,,,,,,,,,,,,,334,,,334,,,334,334,,,334,,334,,,,334,,,',
',,,,,334,,,,,334,334,334,334,,334,334,334,334,,,,,334,334,,,,,,,334',
',334,334,334,127,127,127,127,127,127,,,,127,127,,,,127,,127,127,127',
'127,127,127,127,,,,,,127,127,127,127,127,127,127,,,127,,,,,,127,127',
'127,127,127,127,127,127,127,127,127,127,,127,127,127,,127,127,127,127',
'127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,127,,,,127,,,,,,,',
',127,,,,,127,127,127,127,,127,127,127,127,,,,,127,127,,,,,,,127,,127',
'127,127,865,865,865,865,865,865,,,,865,865,,,,865,,865,865,865,865,865',
'865,865,,,,,,865,865,865,865,865,865,865,,,865,,,,,,865,865,865,865',
'865,865,865,865,865,865,865,865,,865,865,865,,865,865,865,865,865,,',
',,,,,,,,,,,,,,,,,865,,,865,,,865,865,,,865,,865,,,,865,,,,,,,,,865,',
',,,865,865,865,865,,865,865,865,865,,,,,865,865,,,,,,,865,,865,865,865',
'954,954,954,954,954,954,,,,954,954,,,,954,,954,954,954,954,954,954,954',
',,,,,954,954,954,954,954,954,954,,,954,,,,,,954,954,954,954,954,954',
'954,954,954,954,954,954,,954,954,954,,954,954,954,954,954,,,,,,,,,,',
',,,,,,,,,954,,,954,,,954,954,,,954,,954,,,,954,,,,,,,,,954,,,,,954,954',
'954,954,,954,954,954,954,,,,,954,954,,,,,,,954,,954,954,954,212,212',
'212,212,212,212,,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,',
'212,212,212,212,212,212,212,,,212,,,,,,212,212,212,212,212,212,212,212',
'212,212,212,212,,212,212,212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,,,212,,,,,,,,,212,,,,,212,212,212,212',
',212,212,212,212,,,,,212,212,,,,,,,212,,212,212,212,949,949,949,949',
'949,949,,,,949,949,,,,949,,949,949,949,949,949,949,949,,,,,,949,949',
'949,949,949,949,949,,,949,,,,,,949,949,949,949,949,949,949,949,949,949',
'949,949,,949,949,949,,949,949,949,949,949,,,,,,,,,,,,,,,,,,,,949,,,949',
',,949,949,,,949,,949,,,,949,,,,,,,,,949,,,,,949,949,949,949,,949,949',
'949,949,,,,,949,949,,,,,,,949,,949,949,949,932,932,932,932,932,932,',
',,932,932,,,,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932,932',
'932,932,,,932,,,,,,932,932,932,932,932,932,932,932,932,932,932,932,',
'932,932,932,,932,932,932,932,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932',
'932,,,932,,932,,,,932,,,,,,,,,932,,,,,932,932,932,932,,932,932,932,932',
',,,,932,932,,,,,,,932,,932,932,932,847,847,847,847,847,847,,,,847,847',
',,,847,,847,847,847,847,847,847,847,,,,,,847,847,847,847,847,847,847',
',,847,,,,,,847,847,847,847,847,847,847,847,847,847,847,847,,847,847',
'847,,847,847,847,847,847,,,,,,,,,,,,,,,,,,,,847,,,847,,,847,847,,,847',
',847,,,,847,,,,,,,,,847,,,,,847,847,847,847,,847,847,847,847,,,,,847',
'847,,,,,,,847,,847,847,847,931,931,931,931,931,931,,,,931,931,,,,931',
',931,931,931,931,931,931,931,,,,,,931,931,931,931,931,931,931,,,931',
',,,,,931,931,931,931,931,931,931,931,931,931,931,931,,931,931,931,,931',
'931,931,931,931,,,,,,,,,,,,,,,,,,,,931,,,931,,,931,931,,,931,,931,,',
',931,,,,,,,,,931,,,,,931,931,931,931,,931,931,931,931,,,,,931,931,,',
',225,225,225,931,225,931,931,931,225,225,,,,225,,225,225,225,225,225',
'225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225',
'225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,,,,,',
',,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,,225,,,,,225,225,225',
'225,,225,225,225,225,,,,,225,225,225,,,771,771,771,225,771,225,225,225',
'771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771,771,771,771,771',
'771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771,771,,771,771,771',
',771,771,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,,,771,771,,,771,,',
',,,771,,,,,,,,,771,,,,,771,771,771,771,,771,771,771,771,,,,,771,771',
',,,769,769,769,771,769,771,771,771,769,769,,,,769,,769,769,769,769,769',
'769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,,,769,,,769,769,769',
'769,769,769,769,769,,769,769,769,,769,769,769,769,769,,,,,,,,,,,,,,',
',,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,,,,769,,,,,769,769,769',
'769,,769,769,769,769,,,,,769,769,,,,768,768,768,769,768,769,769,769',
'768,768,,,,768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768',
'768,768,,,768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768,768,768',
',768,768,768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,',
',,,768,,,,,,,,,768,,,,,768,768,768,768,,768,768,768,768,,,,,768,768',
',,,767,767,767,768,767,768,768,768,767,767,,,,767,,767,767,767,767,767',
'767,767,,,,,,767,767,767,767,767,767,767,,,767,,,,,,,767,,,767,767,767',
'767,767,767,767,767,,767,767,767,,767,767,767,767,767,,,,,,,,,,,,,,',
',,,,,767,,,767,,,767,767,,,767,,,,,,767,,,,,,,,,767,,,,,767,767,767',
'767,,767,767,767,767,,,,,767,767,,,,236,236,236,767,236,767,767,767',
'236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236',
'236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236',
',236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,',
',,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236',
',,,766,766,766,236,766,236,236,236,766,766,,,,766,,766,766,766,766,766',
'766,766,,,,,,766,766,766,766,766,766,766,,,766,,,,,,,766,,,766,766,766',
'766,766,766,766,766,,766,766,766,,766,766,766,766,766,,,,,,,,,,,,,,',
',,,,,766,,,766,,,766,766,,,766,,,,,,766,,,,,,,,,766,,,,,766,766,766',
'766,,766,766,766,766,,,,,766,766,,,,239,239,239,766,239,766,766,766',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,',
',,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241',
',241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,',
',,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242',
'242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242',
'243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243',
',243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,',
',,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244',
'244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244',
'245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,',
',,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,257,257,257,256,257,256,256,256',
'257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,258,258,258,257,258,257,257,257,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,',
',,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258',
'258,,258,258,258,258,,,,,258,258,,,,259,259,259,258,259,258,258,258',
'259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259',
'259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259',
',259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,',
',,,259,,,,,,,,,259,,,,,259,259,259,259,,259,259,259,259,,,,,259,259',
',,,260,260,260,259,260,259,259,259,260,260,,,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,',
',,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260',
'260,,260,260,260,260,,,,,260,260,,,,265,265,265,260,265,260,260,260',
'265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265',
'265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265,265',
',265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,',
',,,265,,,,,,,,,265,,,,,265,265,265,265,,265,265,265,265,,,,,265,265',
',,,753,753,753,265,753,265,265,265,753,753,,,,753,,753,753,753,753,753',
'753,753,,,,,,753,753,753,753,753,753,753,,,753,,,,,,,753,,,753,753,753',
'753,753,753,753,753,,753,753,753,,753,753,753,753,753,,,,,,,,,,,,,,',
',,,,,753,,,753,,,753,753,,,753,,,,,,753,,,,,,,,,753,,,,,753,753,753',
'753,,753,753,753,753,,,,,753,753,,,,272,272,272,753,272,753,753,753',
'272,272,,,,272,,272,272,272,272,272,272,272,,,,,,272,272,272,272,272',
'272,272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272,272,272,272',
'272,,272,272,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272',
',272,,272,,272,,,272,,,,,,272,,,,,272,272,272,272,,272,272,272,272,',
',,,272,272,,,,273,273,273,272,273,272,272,272,273,273,,,,273,,273,273',
'273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273',
',,273,273,273,273,273,273,273,273,273,273,273,273,,273,273,273,273,273',
',,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273,,273,,,273,,',
',,,273,,,,,273,273,273,273,,273,273,273,273,,,,,273,273,,,,281,281,281',
'273,281,273,273,273,281,281,,,,281,,281,281,281,281,281,281,281,,,,',
',281,281,281,281,281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281',
'281,281,281,281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281',
',,281,,,281,281,,,281,,281,,281,,281,,,281,,,,,,281,,,,,281,281,281',
'281,,281,281,281,281,,,,,281,281,281,,,745,745,745,281,745,281,281,281',
'745,745,,,,745,,745,745,745,745,745,745,745,,,,,,745,745,745,745,745',
'745,745,,,745,,,,,,,745,,,745,745,745,745,745,745,745,745,,745,745,745',
',745,745,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745,,,745,,',
',,,745,,,,,,,,,745,,,,,745,745,745,745,,745,745,745,745,,,,,745,745',
',,,288,288,288,745,288,745,745,745,288,288,,,,288,,288,288,288,288,288',
'288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288',
'288,288,288,288,288,,288,288,288,,288,288,288,288,288,,,,,,,,,,,,,,',
',,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,,288,,,,,288,288,288',
'288,,288,288,288,288,,,,,288,288,,,,290,290,290,288,290,288,288,288',
'290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290',
'290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290,290,290',
',290,290,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,',
',,,290,,,,,,,,,290,,,,,290,290,290,290,,290,290,290,290,,,,,290,290',
',,,293,293,293,290,293,290,290,290,293,293,,,,293,,293,293,293,293,293',
'293,293,,,,,,293,293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293',
'293,293,293,293,293,,293,293,293,,293,293,293,293,293,,,,,,,,,,,,,,',
',,,,,293,,,293,,,293,293,,,293,,,,,,293,,,,,,,,,293,,,,,293,293,293',
'293,,293,293,293,293,,,,,293,293,,,,294,294,294,293,294,293,293,293',
'294,294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294,294,294,294',
'294,294,,,294,,,,,,,294,,,294,294,294,294,294,294,294,294,,294,294,294',
',294,294,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294,,',
',,,294,,,,,,,,,294,,,,,294,294,294,294,,294,294,294,294,,,,,294,294',
',,,,,,294,,294,294,294,299,299,299,299,299,,,,299,299,,,,299,,299,299',
'299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,299',
'299,,299,299,299,299,299,299,299,299,299,,299,299,299,,299,299,299,299',
'299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,299,,,,299,,,,,,,',
',299,,,,,299,299,299,299,,299,299,299,299,,,,,299,299,,,,723,723,723',
'299,723,299,299,299,723,723,,,,723,,723,723,723,723,723,723,723,,,,',
',723,723,723,723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723,723',
'723,723,,723,723,723,,723,723,723,723,723,,,,,,,,,,,,,,,,,,,,723,,,723',
',,723,723,,,723,,,,,,723,,,,,,,,,723,,,,,723,723,723,723,,723,723,723',
'723,,,,,723,723,,,,542,542,542,723,542,723,723,723,542,542,,,,542,,542',
'542,542,542,542,542,542,,,,,,542,542,542,542,542,542,542,,,542,,,,,',
',542,,,542,542,542,542,542,542,542,542,542,542,542,542,,542,542,542',
'542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,,,,,,542,,,542',
',,,,,542,,,,,542,542,542,542,,542,542,542,542,,,,,542,542,,,,,,,542',
',542,542,542,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5',
',,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,',
',,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,',
'973,973,973,5,973,5,5,5,973,973,,,,973,,973,973,973,973,973,973,973',
',,,,,973,973,973,973,973,973,973,,,973,,,,,,,973,,,973,973,973,973,973',
'973,973,973,973,973,973,973,,973,973,973,973,973,,,,,,,,,,,,,,,,,,,',
'973,,,973,,,973,973,,,973,,973,,973,,973,,,973,,,,,,973,,,,,973,973',
'973,973,,973,973,973,973,,,,,973,973,,,,20,20,20,973,20,973,973,973',
'20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,',
',,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,,,,',
',,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20',
'20,20,20,,,,,20,20,,,,920,920,920,20,920,20,20,20,920,920,,,,920,,920',
'920,920,920,920,920,920,,,,,,920,920,920,920,920,920,920,,,920,,,,,',
',920,,,920,920,920,920,920,920,920,920,,920,920,920,,920,920,,,920,',
',,,,,,,,,,,,,,,,,,920,,,920,,,920,920,,,920,,,,,,,,,,,,,,,,,,,,920,920',
'920,920,,920,920,920,920,,,,,920,920,,,,29,29,29,920,29,920,920,920',
'29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,',
',,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,',
',,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29',
'29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30',
'30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30',
'30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30',
',,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,',
',,,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31',
',,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31',
'31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31',
',31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34',
'34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34',
'34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35',
',35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35',
'35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,',
',35,35,,,35,,,1028,,1028,1028,1028,1028,1028,,,,,,,,,1028,,35,35,35',
'35,,35,35,35,35,,,,,35,35,,,,35,,1028,35,,35,35,35,869,869,869,,869',
'1028,1028,,869,869,1028,,,869,,869,869,869,869,869,869,869,,,,,,869',
'869,869,869,869,869,869,,,869,,,,,,,869,,,869,869,869,869,869,869,869',
'869,,869,869,869,,869,869,,,869,,,,,,,,,,,,,,,,,,,,869,,,869,,,869,869',
',,869,,,,,,,,,,,,,,,,,,,,869,869,869,869,,869,869,869,869,,,,,869,869',
',,,860,860,860,869,860,869,869,869,860,860,,,,860,,860,860,860,860,860',
'860,860,,,,,,860,860,860,860,860,860,860,,,860,,,,,,,860,,,860,860,860',
'860,860,860,860,860,,860,860,860,,860,860,,,860,,,,,,,,,,,,,,,,,,,,860',
',,860,,,860,860,,,860,,,,,,,,,,,,,,,,,,,,860,860,860,860,,860,860,860',
'860,,,,,860,860,,,,42,42,42,860,42,860,860,860,42,42,,,,42,,42,42,42',
'42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42',
'42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42',
',,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,43',
'43,43,42,43,42,42,42,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43',
'43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43',
'43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43',
',,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,45,45,45,43,45,43,43,43,45',
'45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,',
'45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45,45,,,,,,,,,,,,,',
',,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45,45,45,45,,45,45',
'45,45,,,,,45,45,,,,845,845,845,45,845,45,45,45,845,845,,,,845,,845,845',
'845,845,845,845,845,,,,,,845,845,845,845,845,845,845,,,845,,,,,,,845',
',,845,845,845,845,845,845,845,845,,845,845,845,,845,845,845,845,845',
',,,,,,,,,,,,,,,,,,,845,,,845,,,845,845,,,845,,,,,,845,,,,,,,,,845,,',
',,845,845,845,845,,845,845,845,845,,,,,845,845,,,,844,844,844,845,844',
'845,845,845,844,844,,,,844,,844,844,844,844,844,844,844,,,,,,844,844',
'844,844,844,844,844,,,844,,,,,,,844,,,844,844,844,844,844,844,844,844',
'844,844,844,844,,844,844,844,844,844,,,,,,,,,,,,,,,,,,,,844,,,844,,',
'844,844,,,844,,,,844,,844,,,844,,,,,,844,,,,,844,844,844,844,,844,844',
'844,844,,,,,844,844,,,,,,,844,,844,844,844,59,59,59,59,59,,,,59,59,',
',,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,59,59',
',59,59,59,59,59,59,59,59,59,,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,',
',,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,,,,,,,59,,,,,59,59,59,59,,59,59',
'59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,,60,,60,60,60,60',
'60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60',
'60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60',
',,60,,60,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60,60,',
',,61,61,61,60,61,60,60,60,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61',
'61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,61,61',
',61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,61',
',,,,,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,,64,64,64,61,64,61',
'61,61,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,',
'64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,',
',,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64',
'64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64,64,65,65,,,,65,,65',
'65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65',
'65,65,65,65,65,,65,65,65,,65,65,65,65,65,,,,,,,,,,,,,,,,,,,,65,,,65',
',,65,65,,,65,,,,,,65,,,,,,,,,65,,,,,65,65,65,65,,65,65,65,65,,,,,65',
'65,,,,68,68,68,65,68,65,65,65,68,68,,,,68,,68,68,68,68,68,68,68,,,,',
',68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68',
'68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,',
',,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,68,,,,,68,68,,68,68',
'68,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69',
'69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,',
'69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,69,,,,,,,,,,,,,,,,,,69,69',
'69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,,70',
',70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70',
'70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,70,,,70,,,70',
',,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,',
',,71,71,71,70,71,70,70,70,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71',
'71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71',
',71,71,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,915,,915,915,915',
'915,915,,,,,,,,,915,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,,,915,71',
',71,71,71,116,116,116,116,116,915,915,,116,116,915,,,116,,116,116,116',
'116,116,116,116,,,,,,116,116,116,116,116,116,116,,,116,,,,,,116,116',
'116,116,116,116,116,116,116,116,116,116,,116,116,116,,116,116,116,116',
'116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,116,,,,116,,,,,,,',
',116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116,,,,,,116,116,',
'116,116,116,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121',
'121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121',
'121,121,121,121,121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,',
',,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,,121,,,,,121,121,121',
'121,,121,121,121,121,,,,,121,121,,,,122,122,122,121,122,121,121,121',
'122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122',
'122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122',
',122,122,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,',
',,,122,,,,,,,,,122,,,,,122,122,122,122,,122,122,122,122,,,,,122,122',
',,,123,123,123,122,123,122,122,122,123,123,,,,123,,123,123,123,123,123',
'123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,,123,,,123,123,123',
'123,123,123,123,123,,123,123,123,,123,123,123,123,123,,,,,,,,,,,,,,',
',,,,,123,,,123,,,123,123,,,123,,,,,,123,,,,,,,,,123,,,,,123,123,123',
'123,,123,123,123,123,,,,,123,123,,,,124,124,124,123,124,123,123,123',
'124,124,,,,124,,124,124,124,124,124,124,124,,,,,,124,124,124,124,124',
'124,124,,,124,,,,,,,124,,,124,124,124,124,124,124,124,124,,124,124,124',
',124,124,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124,,',
',,,124,,,,,,,,,124,,,,,124,124,124,124,,124,124,124,124,,,,,124,124',
',,,,,,124,,124,124,124,125,125,125,125,125,,,,125,125,,,,125,,125,125',
'125,125,125,125,125,,,,,,125,125,125,125,125,125,125,,,125,,,,,,125',
'125,,125,125,125,125,125,125,125,125,125,,125,125,125,,125,125,125,125',
'125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125,125,,,125,,125,,,,125,,,,,,,',
',125,,,,,125,125,125,125,,125,125,125,125,,,,,125,125,,,,826,826,826',
'125,826,125,125,125,826,826,,,,826,,826,826,826,826,826,826,826,,,,',
',826,826,826,826,826,826,826,,,826,,,,,,,826,,,826,826,826,826,826,826',
'826,826,,826,826,826,,826,826,826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826',
',,826,826,,,826,,826,,,,826,,,,,,,,,826,,,,,826,826,826,826,,826,826',
'826,826,,,,,826,826,,,,823,823,823,826,823,826,826,826,823,823,,,,823',
',823,823,823,823,823,823,823,,,,,,823,823,823,823,823,823,823,,,823',
',,,,,,823,,,823,823,823,823,823,823,823,823,,823,823,823,,823,823,823',
'823,823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,,,,,823,,,,,,',
',,823,,,,,823,823,823,823,,823,823,823,823,,,,,823,823,,,,213,213,213',
'823,213,823,823,823,213,213,,,,213,,213,213,213,213,213,213,213,,,,',
',213,213,213,213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213,213',
'213,213,,213,213,213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213',
',,213,213,,,213,,213,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213,213',
'213,213,,,,,213,213,,,,214,214,214,213,214,213,213,213,214,214,,,,214',
',214,214,214,214,214,214,214,,,,,,214,214,214,214,214,214,214,,,214',
',,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214,,214,214,214',
'214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,214,,,,214,,,',
',,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214,,,,215,215',
'215,214,215,214,214,214,215,215,,,,215,,215,215,215,215,215,215,215',
',,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215',
'215,215,215,,215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215',
',,215,,,215,215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215,215,215,,215',
'215,215,215,,,,,215,215,,,,216,216,216,215,216,215,215,215,216,216,',
',,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216',
',,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,,216',
'216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216',
',,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216,,,,217',
'217,217,216,217,216,216,216,217,217,,,,217,,217,217,217,217,217,217',
'217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217',
'217,217,217,217,,217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,,,,,',
',217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,,217,,,,,217,217,217,217',
',217,217,217,217,,,,,217,217,,,,218,218,218,217,218,217,217,217,218',
'218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218',
'218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,218,218,218,218',
',218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,218',
',218,,218,,,218,,,,,,218,,,,,218,218,218,218,,218,218,218,218,,,,,218',
'218,,,,810,810,810,218,810,218,218,218,810,810,,,,810,,810,810,810,810',
'810,810,810,,,,,,810,810,810,810,810,810,810,,,810,,,,,,,810,,,810,810',
'810,810,810,810,810,810,,810,810,810,,810,810,810,810,810,,,,,,,,,,',
',,,,,,,,,810,,,810,,,810,810,,,810,,,,,,810,,,,,,,,,810,,,,,810,810',
'810,810,,810,810,810,810,,,,,810,810,,,,223,223,223,810,223,810,810',
'810,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223,223,223',
'223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223',
'223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223',
',,,,,223,,,,,,,,,223,,,,,223,223,223,223,,223,223,223,223,,,,,223,223',
',,,224,224,224,223,224,223,223,223,224,224,,,,224,,224,224,224,224,224',
'224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224',
'224,224,224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,',
',,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,,224,,,,,224,224,224',
'224,,224,224,224,224,,,,,224,224,,,,307,307,307,224,307,224,224,224',
'307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307,307,307,307,307',
'307,307,,,307,,,,,,,307,,,307,307,307,307,307,307,307,307,,307,307,307',
',307,307,,,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,,992,,992',
'992,992,992,992,,,,,,,,,992,,307,307,307,307,,307,307,307,307,,,,,307',
'307,,,,307,,992,307,,307,307,307,689,689,689,,689,992,992,,689,689,992',
',,689,,689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689,689',
',,689,,,,,,,689,,,689,689,689,689,689,689,689,689,,689,689,689,,689',
'689,689,689,689,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,689,,,689,,,,,,689',
',,,,,,,,689,,,,,689,689,689,689,,689,689,689,689,,,,,689,689,,,,663',
'663,663,689,663,689,689,689,663,663,,,,663,,663,663,663,663,663,663',
'663,,,,,,663,663,663,663,663,663,663,,,663,,,,,,,663,,,663,663,663,663',
'663,663,663,663,,663,663,663,,663,663,663,663,663,,,,,,,,,,,,,,,,,,',
',663,,,663,,,663,663,,,663,,663,,,,663,,,,,,,,,663,,,,,663,663,663,663',
',663,663,663,663,,,,,663,663,,,,658,658,658,663,658,663,663,663,658',
'658,,,,658,,658,658,658,658,658,658,658,,,,,,658,658,658,658,658,658',
'658,,,658,,,,,,,658,,,658,658,658,658,658,658,658,658,,658,658,658,',
'658,658,,,658,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,658,,,658,,,,,,,,,',
',,,,,,,,,,658,658,658,658,,658,658,658,658,,,,,658,658,,,,647,647,647',
'658,647,658,658,658,647,647,,,,647,,647,647,647,647,647,647,647,,,,',
',647,647,647,647,647,647,647,,,647,,,,,,,647,,,647,647,647,647,647,647',
'647,647,,647,647,647,,647,647,,,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647',
'647,,,647,,,,,,,,,,,,,,,,,,,,647,647,647,647,,647,647,647,647,,,,,647',
'647,,,,324,324,324,647,324,647,647,647,324,324,,,,324,,324,324,324,324',
'324,324,324,,,,,,324,324,324,324,324,324,324,,,324,,,,,,,324,,,324,324',
'324,324,324,324,324,324,,324,324,324,,324,324,,,324,,,,,,,,,,,,,,,,',
',,,324,,,324,,,324,324,,,324,,,,,,,,,,,,,,,,,,,,324,324,324,324,,324',
'324,324,324,,,,,324,324,,,,644,644,644,324,644,324,324,324,644,644,',
',,644,,644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644',
',,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644,,644',
'644,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644',
',,,,,,,,644,,,,,644,644,644,644,,644,644,644,644,,,,,644,644,,,,641',
'641,641,644,641,644,644,644,641,641,,,,641,,641,641,641,641,641,641',
'641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641,641',
'641,641,641,641,,641,641,641,,641,641,641,641,641,,,,,,,,,,,,,,,,,,',
',641,,,641,,,641,641,,,641,,,,,,641,,,,,,,,,641,,,,,641,641,641,641',
',641,641,641,641,,,,,641,641,,,,331,331,331,641,331,641,641,641,331',
'331,,,,331,,331,331,331,331,331,331,331,,,,,,331,331,331,331,331,331',
'331,,,331,,,,,,,331,,,331,331,331,331,331,331,331,331,,331,331,331,',
'331,331,331,331,331,,,,,,,,,,,,,,,,,,,,331,,,331,,,331,331,,,331,,,',
',,331,,,,,,,,,331,,,,,331,331,331,331,,331,331,331,331,,,,,331,331,',
',,333,333,333,331,333,331,331,331,333,333,,,,333,,333,333,333,333,333',
'333,333,,,,,,333,333,333,333,333,333,333,,,333,,,,,,,333,,,333,333,333',
'333,333,333,333,333,,333,333,333,,333,333,333,333,333,,,,,,,,,,,,,,',
',,,,,333,,,333,333,,333,333,,,333,,,,,,333,,,,,,,,,333,,,,,333,333,333',
'333,,333,333,333,333,,,,,333,333,,,,617,617,617,333,617,333,333,333',
'617,617,,,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617',
'617,617,,,617,,,,,,,617,,,617,617,617,617,617,617,617,617,,617,617,617',
',617,617,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,',
',,,617,,,,,,,,,617,,,,,617,617,617,617,,617,617,617,617,,,,,617,617',
',,,616,616,616,617,616,617,617,617,616,616,,,,616,,616,616,616,616,616',
'616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,,616,,,616,616,616',
'616,616,616,616,616,,616,616,616,,616,616,616,616,616,,,,,,,,,,,,,,',
',,,,,616,,,616,,,616,616,,,616,,,,,,616,,,,,,,,,616,,,,,616,616,616',
'616,,616,616,616,616,,,,,616,616,,,,612,612,612,616,612,616,616,616',
'612,612,,,,612,,612,612,612,612,612,612,612,,,,,,612,612,612,612,612',
'612,612,,,612,,,,,,,612,,,612,612,612,612,612,612,612,612,,612,612,612',
',612,612,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612,,,612,,',
',,,612,,,,,,,,,612,,,,,612,612,612,612,,612,612,612,612,,,,,612,612',
',,,611,611,611,612,611,612,612,612,611,611,,,,611,,611,611,611,611,611',
'611,611,,,,,,611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611',
'611,611,611,611,611,,611,611,611,,611,611,611,611,611,,,,,,,,,,,,,,',
',,,,,611,,,611,,,611,611,,,611,,,,,,611,,,,,,,,,611,,,,,611,611,611',
'611,,611,611,611,611,,,,,611,611,,,,610,610,610,611,610,611,611,611',
'610,610,,,,610,,610,610,610,610,610,610,610,,,,,,610,610,610,610,610',
'610,610,,,610,,,,,,,610,,,610,610,610,610,610,610,610,610,610,610,610',
'610,,610,610,610,610,610,,,,,,,,,,,,,,,,,,,,610,,,610,,,610,610,,,610',
',,,610,,610,,,610,,,,,,610,,,,,610,610,610,610,,610,610,610,610,,,,',
'610,610,,,,609,609,609,610,609,610,610,610,609,609,,,,609,,609,609,609',
'609,609,609,609,,,,,,609,609,609,609,609,609,609,,,609,,,,,,,609,,,609',
'609,609,609,609,609,609,609,609,609,609,609,,609,609,609,609,609,,,',
',,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,609,,609,,609,,,609,,,,,',
'609,,,,,609,609,609,609,,609,609,609,609,,,,,609,609,,,,606,606,606',
'609,606,609,609,609,606,606,,,,606,,606,606,606,606,606,606,606,,,,',
',606,606,606,606,606,606,606,,,606,,,,,,,606,,,606,606,606,606,606,606',
'606,606,,606,606,606,,606,606,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606',
',,606,606,,,606,,,,,,606,,,,,,,,,606,,,,,606,606,606,606,,606,606,606',
'606,,,,,606,606,,,,,,,606,,606,606,606,605,605,605,605,605,,,,605,605',
',,,605,,605,605,605,605,605,605,605,,,,,,605,605,605,605,605,605,605',
',,605,,,,,,605,605,,605,605,605,605,605,605,605,605,605,,605,605,605',
',605,605,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,605',
',,,605,,,,,,,,,605,,,,,605,605,605,605,,605,605,605,605,,,,,605,605',
',,,602,602,602,605,602,605,605,605,602,602,,,,602,,602,602,602,602,602',
'602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602',
'602,602,602,602,602,602,602,602,602,,602,602,602,602,602,,,,,,,,,,,',
',,,,,,,,602,,,602,,,602,602,,,602,,602,,602,,602,,,602,,,,,,602,,,,',
'602,602,602,602,,602,602,602,602,,,,,602,602,,,,349,349,349,602,349',
'602,602,602,349,349,,,,349,,349,349,349,349,349,349,349,,,,,,349,349',
'349,349,349,349,349,,,349,,,,,,,349,,,349,349,349,349,349,349,349,349',
',349,349,349,,349,349,349,349,349,,,,,,,,,,,,,,,,,,,,349,,,349,,,349',
'349,,,349,,,,,,349,,,,,,,,,349,,,,,349,349,349,349,,349,349,349,349',
',,,,349,349,,,,601,601,601,349,601,349,349,349,601,601,,,,601,,601,601',
'601,601,601,601,601,,,,,,601,601,601,601,601,601,601,,,601,,,,,,,601',
',,601,601,601,601,601,601,601,601,,601,601,601,,601,601,601,601,601',
',,,,,,,,,,,,,,,,,,,601,,,601,,,601,601,,,601,,,,,,601,,,,,,,,,601,,',
',,601,601,601,601,,601,601,601,601,,,,,601,601,,,,600,600,600,601,600',
'601,601,601,600,600,,,,600,,600,600,600,600,600,600,600,,,,,,600,600',
'600,600,600,600,600,,,600,,,,,,,600,,,600,600,600,600,600,600,600,600',
',600,600,600,,600,600,600,600,600,,,,,,,,,,,,,,,,,,,,600,,,600,,,600',
'600,,,600,,600,,,,600,,,,,,,,,600,,,,,600,600,600,600,,600,600,600,600',
',,,,600,600,,,,568,568,568,600,568,600,600,600,568,568,,,,568,,568,568',
'568,568,568,568,568,,,,,,568,568,568,568,568,568,568,,,568,,,,,,,568',
',,568,568,568,568,568,568,568,568,568,568,568,568,,568,568,568,568,568',
',,,,,,,,,,,,,,,,,,,568,,,568,,,568,568,,,568,,568,,568,,568,,,568,,',
',,,568,,,,,568,568,568,568,,568,568,568,568,,,,,568,568,,,,558,558,558',
'568,558,568,568,568,558,558,,,,558,,558,558,558,558,558,558,558,,,,',
',558,558,558,558,558,558,558,,,558,,,,,,,558,,,558,558,558,558,558,558',
'558,558,558,558,558,558,,558,558,558,558,558,,,,,,,,,,,,,,,,,,,,558',
',,558,,,558,558,,,558,,558,,558,,558,,,558,,,,,,558,,,,,558,558,558',
'558,,558,558,558,558,,,,,558,558,,,,370,370,370,558,370,558,558,558',
'370,370,,,,370,,370,370,370,370,370,370,370,,,,,,370,370,370,370,370',
'370,370,,,370,,,,,,,370,,,370,370,370,370,370,370,370,370,,370,370,370',
',370,370,370,370,370,,,,,,,,,,,,,,,,,,,,370,,,370,,,370,370,,,370,,',
',,,370,,,,,,,,,370,,,,,370,370,370,370,,370,370,370,370,,,,,370,370',
',,,557,557,557,370,557,370,370,370,557,557,,,,557,,557,557,557,557,557',
'557,557,,,,,,557,557,557,557,557,557,557,,,557,,,,,,,557,,,557,557,557',
'557,557,557,557,557,,557,557,557,,557,557,557,557,557,,,,,,,,,,,,,,',
',,,,,557,,,557,,,557,557,,,557,,557,,,,557,,,,,,,,,557,,,,,557,557,557',
'557,,557,557,557,557,,,,,557,557,,,,539,539,539,557,539,557,557,557',
'539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539',
'539,539,,,539,,,,,,,539,,,539,539,539,539,539,539,539,539,539,539,539',
'539,,539,539,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539',
',539,,,,539,,,539,,,,,,539,,,,,539,539,539,539,,539,539,539,539,,,,',
'539,539,,,,533,533,533,539,533,539,539,539,533,533,,,,533,,533,533,533',
'533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533',
'533,533,533,533,533,533,533,,533,533,533,,533,533,533,533,533,,,,,,',
',,,,,,,,,,,,,533,,,533,,,533,533,,,533,,,,,,533,,,,,,,,,533,,,,,533',
'533,533,533,,533,533,533,533,,,,,533,533,,,,528,528,528,533,528,533',
'533,533,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528',
'528,528,528,528,,,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528',
'528,528,,528,528,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528',
',,528,,,,,,528,,,,,,,,,528,,,,,528,528,528,528,,528,528,528,528,,,,',
'528,528,,,,527,527,527,528,527,528,528,528,527,527,,,,527,,527,527,527',
'527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527',
'527,527,527,527,527,527,527,,527,527,527,,527,527,527,527,527,,,,,,',
',,,,,,,,,,,,,527,,,527,,,527,527,,,527,,,,,,527,,,,,,,,,527,,,,,527',
'527,527,527,,527,527,527,527,,,,,527,527,,,,524,524,524,527,524,527',
'527,527,524,524,,,,524,,524,524,524,524,524,524,524,,,,,,524,524,524',
'524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524,524,524,524,,524',
'524,524,,524,524,,,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524',
',,,,,,,,,,,,,,,,,,,524,524,524,524,,524,524,524,524,,,,,524,524,,,,386',
'386,386,524,386,524,524,524,386,386,,,,386,,386,386,386,386,386,386',
'386,,,,,,386,386,386,386,386,386,386,,,386,,,,,,,386,,,386,386,386,386',
'386,386,386,386,,386,386,386,,386,386,386,386,386,,,,,,,,,,,,,,,,,,',
',386,,,386,,,386,386,,,386,,,,,,386,,,,,,,,,386,,,,,386,386,386,386',
',386,386,386,386,,,,,386,386,,,,518,518,518,386,518,386,386,386,518',
'518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518',
'518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,518,518,518,518',
',518,518,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,518',
',518,,518,,,518,,,,,,518,,,,,518,518,518,518,,518,518,518,518,,,,,518',
'518,,,,516,516,516,518,516,518,518,518,516,516,,,,516,,516,516,516,516',
'516,516,516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516,,,516,516',
'516,516,516,516,516,516,,516,516,516,,516,516,,,516,,,,,,,,,,,,,,,,',
',,,516,,,516,,,516,516,,,516,,,994,,994,994,994,994,994,,,,,,,,,994',
',516,516,516,516,,516,516,516,516,,,,,516,516,,,,,,994,516,,516,516',
'516,508,508,508,508,508,994,994,,508,508,994,,,508,,508,508,508,508',
'508,508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,,508,508,508',
'508,508,508,508,508,508,508,508,508,,508,508,508,,508,508,508,508,508',
',,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,508,,,,508,,,,,,,,,508',
',,,,508,508,508,508,,508,508,508,508,,,,,508,508,,,,,,508,508,,508,508',
'508,502,502,502,,502,,,,502,502,,,,502,,502,502,502,502,502,502,502',
',,,,,502,502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502,502,502',
'502,502,502,,502,502,502,,502,502,502,502,502,,,,,,,,,,,,,,,,,,,,502',
',,502,,,502,502,,,502,,,,,,502,,,,,,,,,502,,,,,502,502,502,502,,502',
'502,502,502,,,,,502,502,,,,500,500,500,502,500,502,502,502,500,500,',
',,500,,500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500',
',,500,,,,,,,500,,,500,500,500,500,500,500,500,500,500,500,500,500,,500',
'500,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,,500',
',500,,,500,,,,,,500,,,,,500,500,500,500,,500,500,500,500,,,,,500,500',
',,,498,498,498,500,498,500,500,500,498,498,,,,498,,498,498,498,498,498',
'498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,,,498,,,498,498,498',
'498,498,498,498,498,498,498,498,498,,498,498,498,498,498,,,,,,,,,,,',
',,,,,,,,498,,,498,,,498,498,,,498,,498,,498,,498,,,498,,,,,,498,,,,',
'498,498,498,498,,498,498,498,498,,,,,498,498,,,,461,461,461,498,461',
'498,498,498,461,461,,,,461,,461,461,461,461,461,461,461,,,,,,461,461',
'461,461,461,461,461,,,461,,,,,,,461,,,461,461,461,461,461,461,461,461',
',461,461,461,,461,461,461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461',
'461,,,461,,,,,,461,,,,,,,,,461,,,,,461,461,461,461,,461,461,461,461',
',,,,461,461,,,,460,460,460,461,460,461,461,461,460,460,,,,460,,460,460',
'460,460,460,460,460,,,,,,460,460,460,460,460,460,460,,,460,,,,,,,460',
',,460,460,460,460,460,460,460,460,,460,460,460,,460,460,460,460,460',
',,,,,,,,,,,,,,,,,,,460,,,460,,,460,460,,,460,,,,,,460,,,,,,,,,460,,',
',,460,460,460,460,,460,460,460,460,,,,,460,460,,,,459,459,459,460,459',
'460,460,460,459,459,,,,459,,459,459,459,459,459,459,459,,,,,,459,459',
'459,459,459,459,459,,,459,,,,,,,459,,,459,459,459,459,459,459,459,459',
',459,459,459,,459,459,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459',
'459,,,459,,,,,,459,,,,,,,,,459,,,,,459,459,459,459,,459,459,459,459',
',,,,459,459,,,,457,457,457,459,457,459,459,459,457,457,,,,457,,457,457',
'457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457',
',,457,457,457,457,457,457,457,457,457,457,457,457,,457,457,457,457,457',
',,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,457,,457,,457,,,457,,',
',,,457,,,,,457,457,457,457,,457,457,457,457,,,,,457,457,,,,414,414,414',
'457,414,457,457,457,414,414,,,,414,,414,414,414,414,414,414,414,,,,',
',414,414,414,414,414,414,414,,,414,,,,,,,414,,,414,414,414,414,414,414',
'414,414,,414,414,414,,414,414,414,414,414,,,,,,,,,,,,,,,,,,,,414,,,414',
',,414,414,,,414,,,,,,414,,,,,,,,,414,,,,,414,414,414,414,,414,414,414',
'414,,,,,414,414,,,,,,,414,,414,414,414,597,597,597,597,597,597,597,597',
'597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,597,,,,597',
'597,597,597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597',
'597,597,,,597,,,,,,,,597,597,,597,597,597,597,597,597,597,,,597,597',
',,,597,597,597,597,,,,,,,,,,,,,,597,597,,597,597,597,597,597,597,597',
'597,597,597,597,597,,,597,597,,,,,,,,,,,,,,597,405,405,405,405,405,405',
'405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405',
'405,,,,405,405,405,405,405,405,405,405,405,405,,,,,,405,405,405,405',
'405,405,405,405,405,,,405,,,,,,,,405,405,,405,405,405,405,405,405,405',
',,405,405,,,,405,405,405,405,,,,,,,,,,,,,,405,405,,405,405,405,405,405',
'405,405,405,405,405,405,405,,,405,405,,,,,,,,,,,,,,405,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9',
'9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,',
',,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,8,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8',
'8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,',
',,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,72,72,72,72,72',
'72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,,,,72,72,72',
'72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,72,72,72,72,72,,72,,',
',,,72,72,,72,72,72,72,72,72,72,,,72,72,,,,72,72,72,72,,,,,,72,,,,,,',
',72,72,,72,72,72,72,72,72,72,72,72,72,72,72,,,72,729,729,729,729,729',
'729,729,729,729,729,729,729,729,729,729,729,729,729,729,729,729,729',
'729,729,,,,729,729,729,729,729,729,729,729,729,729,,,,,,729,729,729',
'729,729,729,729,729,729,,,729,,,,,,,,729,729,,729,729,729,729,729,729',
'729,,,729,729,,,,729,729,729,729,,,,,,,,,,,,,,729,729,,729,729,729,729',
'729,729,729,729,729,729,729,729,529,529,729,,529,,,,,,,,529,529,,529',
'529,529,529,529,529,529,,,529,529,,,,529,529,529,529,,,,,,529,,,,,,',
',529,529,,529,529,529,529,529,529,529,529,529,529,529,529,560,560,529',
',560,,,,,,,,560,560,,560,560,560,560,560,560,560,,,560,560,,,,560,560',
'560,560,,,,,,560,,,,,,,,560,560,,560,560,560,560,560,560,560,560,560',
'560,560,560,604,604,560,,604,,,,,,,,604,604,,604,604,604,604,604,604',
'604,,,604,604,,,,604,604,604,604,,,,,,604,,,,,,,,604,604,,604,604,604',
'604,604,604,604,604,604,604,604,604,603,603,604,,603,,,,,,,,603,603',
',603,603,603,603,603,603,603,,,603,603,,,,603,603,603,603,,,,,,603,',
',,,,,,603,603,,603,603,603,603,603,603,603,603,603,603,603,603,219,219',
'603,,219,,,,,,,,219,219,,219,219,219,219,219,219,219,,,219,219,,,,219',
'219,219,219,,,,,,219,,,,,,,,219,219,,219,219,219,219,219,219,219,219',
'219,219,219,219,268,268,219,,268,,,,,,,,268,268,,268,268,268,268,268',
'268,268,,,268,268,,,,268,268,268,268,,,,,,,,,,,,,,268,268,,268,268,268',
'268,268,268,268,268,268,268,268,268,220,220,268,,220,,,,,,,,220,220',
',220,220,220,220,220,220,220,,,220,220,,,,220,220,220,220,,,,,,220,',
',,,,,,220,220,,220,220,220,220,220,220,220,220,220,220,220,220,456,456',
'220,,456,,,,,,,,456,456,,456,456,456,456,456,456,456,,,456,456,,,,456',
'456,456,456,,,,,,456,,,,,,,,456,456,,456,456,456,456,456,456,456,456',
'456,456,456,456,455,455,456,,455,,,,,,,,455,455,,455,455,455,455,455',
'455,455,,,455,455,,,,455,455,455,455,,,,,,455,,,,,,,,455,455,,455,455',
'455,455,455,455,455,455,455,455,455,455,975,975,455,,975,,,,,,,,975',
'975,,975,975,975,975,975,975,975,,,975,975,,,,975,975,975,975,,,,,,975',
',,,,,,,975,975,,975,975,975,975,975,975,975,975,975,975,975,975,567',
'567,975,,567,,,,,,,,567,567,,567,567,567,567,567,567,567,,,567,567,',
',,567,567,567,567,,,,,,567,,,,,,,,567,567,,567,567,567,567,567,567,567',
'567,567,567,567,567,566,566,567,,566,,,,,,,,566,566,,566,566,566,566',
'566,566,566,,,566,566,,,,566,566,566,566,,,,,,566,,,,,,,,566,566,,566',
'566,566,566,566,566,566,566,566,566,566,566,974,974,566,,974,,,,,,,',
'974,974,,974,974,974,974,974,974,974,,,974,974,,,,974,974,974,974,,',
',,,974,,,,,,,,974,974,,974,974,974,974,974,974,974,974,974,974,974,974',
'970,970,974,,970,,,,,,,,970,970,,970,970,970,970,970,970,970,,,970,970',
',,,970,970,970,970,,,,,,970,,,,,,,,970,970,,970,970,970,970,970,970',
'970,970,970,970,970,970,519,519,970,,519,,,,,,,,519,519,,519,519,519',
'519,519,519,519,,,519,519,,,,519,519,519,519,,,,,,519,,,,,,,,519,519',
',519,519,519,519,519,519,519,519,519,519,519,519,520,520,519,,520,,',
',,,,,520,520,,520,520,520,520,520,520,520,,,520,520,,,,520,520,520,520',
',,,,,520,,,,,,,,520,520,,520,520,520,520,520,520,520,520,520,520,520',
'520,559,559,520,,559,,,,,,,,559,559,,559,559,559,559,559,559,559,,,559',
'559,,,,559,559,559,559,,,,,,559,,,,,,,,559,559,,559,559,559,559,559',
'559,559,559,559,559,559,559,530,530,559,,530,,,,,,,,530,530,,530,530',
'530,530,530,530,530,,,530,530,,,,530,530,530,530,,,,,,530,,,,,,,,530',
'530,,530,530,530,530,530,530,530,530,530,530,530,530,,806,530,806,806',
'806,806,806,,728,,728,728,728,728,728,806,,,,,,,,728,,990,,990,990,990',
'990,990,,,,,,806,,,990,,,,,728,806,806,806,806,,,,806,728,728,728,728',
',,,728,990,,911,,911,911,911,911,911,990,990,990,990,,,,990,911,,913',
',913,913,913,913,913,,727,,727,727,727,727,727,913,,,,,911,,,727,,,',
',,911,911,911,911,,,,911,913,,,,,,,,727,913,913,913,913,,,,913,727,727',
'727,727,,,996,727,996,996,996,996,996,,935,,935,935,935,935,935,996',
',,,,,,,935,,937,,937,937,937,937,937,,,,,,996,,,937,,,,,935,,,996,996',
',,,996,935,935,935,935,,,,935,937,,939,,939,939,939,939,939,,,937,937',
',,,937,939,,941,,941,941,941,941,941,1011,,1011,1011,1011,1011,1011',
',941,,,,,939,,1011,,669,,669,669,669,669,669,939,939,,,,939,941,,669',
',,,,1011,,,,941,941,,,,941,,1011,1011,,,,1011,669,,547,,547,547,547',
'547,547,669,669,669,669,,,,669,547,,804,,804,804,804,804,804,808,,808',
'808,808,808,808,,804,,,,,547,547,808,,,,,,,547,547,547,547,,,,547,804',
',,,,,,808,,804,804,804,804,,,,804,,808,808,,,,808' ]
        racc_action_check = arr = ::Array.new(24631, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1920,   101,   nil,   270,   nil, 11209,  1358,  1126, 22816, 22688,
  1121,   nil,  1055,  1044,   567,  1074,   768,   416,   nil,   -79,
 11471,  2620,  1126,   nil,   334,   nil,   232,  1423,  1533, 11733,
 11864, 11995,   nil,  4020, 12126, 12257,   nil,  1001,   841,   837,
  1039,   171, 12658, 12789,   521, 12920,   927,   654,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1208,   nil, 13321,
 13452, 13583,    -8,   nil, 13714, 13845,   nil,   nil, 13976, 14115,
 14246, 14377, 22944,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   602,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   574,   nil,   nil,   686,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1035,   nil, 14516,   nil,   nil,   nil,
   nil, 14655, 14786, 14917, 15048, 15187,   nil,  4580,   nil,   577,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   895,   nil,  5000, 15580, 15711, 15842, 15973, 16104, 16235, 23362,
 23484,   nil,   nil, 16497, 16628,  5691,   nil,   nil,   582,   160,
   223,   927,   141,   823,   874,   nil,  6346,  3740,   869,  6608,
  6739,  6870,  7001,  7132,  7263,  7394,  7525,  7656,  7787,  7918,
  8049,  8180,  8311,  8442,  8573,  8704,  8835,  8966,  9097,  9228,
  9359,   nil,   nil,   nil,   nil,  9490,   nil,   nil, 23423,   nil,
   nil,   859,  9752,  9883,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 10014,   nil,  2060,   nil,   809,   805,   nil, 10276,   847,
 10407,   nil,   nil, 10538, 10669,   nil,   nil,   268,   nil, 10808,
  1412,   814,   778,  3040,   787,   825,   764, 16759,  2060,   977,
   940,   908,   805,   770,   nil,   742,   697,   165,   nil,   nil,
   nil,   720,   220,   657, 17422,   nil,   365,   719,   658,   nil,
   668, 17815,   nil, 17946,  4440,  1349,   602,   nil,   361,   360,
   625,   602,   349,   616,   nil,   nil,   250,    10,    -1, 19264,
  4300,  2340,   121,   676,   554,     5,    40,   578,   610,    11,
   639,   nil,   nil,   467,   230,   -21,   nil,   436,   nil,   530,
 19919,   nil,   nil,   nil,   772,   771,   662,   660,   659,   607,
   555,   554,   442,   nil,   118,   nil, 20836,   nil,   290,   498,
   501,   390,   495,   -37,   -27,   386,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   300, 22560,   nil,   nil,   nil,   nil,
   294,   nil,   nil,   268, 22293,   225,   nil,   nil,   208,   nil,
   809,   105,   259,   nil,   nil,  1780,   nil,   nil,   nil,   nil,
   nil,  1920,   148,   nil,    64,   101,   804,   756,  1645,   nil,
   nil,   nil,   464,   222,   258,   nil,   nil,   936,  1072,   nil,
   nil,   nil,    18,   nil,   290, 23606, 23545, 22162,   437, 22031,
 21900, 21769,  2900,  3880,   -46,  1098,   353,   373,   375,   377,
  4300,  1485,  1596,  3460,  3040,  4160,  3180,  4020,  3320,   893,
  1025,  3740,  3600,  2340,  1311,   nil,  1344,   nil,   nil,   nil,
   nil,   339,   nil,   nil,   nil,   345,   nil,   nil, 21638,   nil,
 21507,   nil, 21376,   nil,   215,   nil,   nil,   nil, 21237,  1538,
   nil,   369,   376,   nil,   nil,   389, 21098,   394, 20967, 23972,
 24033,   690,   439,   nil, 20705,   412,   nil, 20574, 20443, 23118,
 24155,  1159,  2760, 20312,   546,   554,   435,   478,   nil, 20181,
   nil,   nil, 11070,   nil,   nil,   nil,   nil, 24502,  4160,   564,
   nil,  1780,    90,   576,   599,   596,   609, 20050, 19788, 24094,
 23179,   -19,   nil,   nil,   512,   nil, 23789, 23728, 19657,   nil,
   nil,   213,  2200,   580,   nil,   -33,   nil,   nil,   nil,  1269,
   nil,   nil,   nil,   554,   nil,   nil,   258,   nil,   324,   nil,
   nil,   544,   nil,   554,   nil,   nil,   nil, 22432,   nil,   557,
 19526, 19395, 19133, 23301, 23240, 19002, 18863,   384,   614, 18732,
 18601, 18470, 18339,   625,   nil,   nil, 18208, 18077,   637,   nil,
   nil,   nil,   382,   409,     0,   798,   611,   613,   739,   nil,
   723,   130,   nil,   nil,   653,   -50,   766,   nil,   644,   nil,
   694, 17684,   nil,   nil, 17553,   nil,  -112, 17291,   670,   nil,
   678,   136,   312,   726,   256,   904,   731,   689, 17160,   nil,
   764,    24,   819, 17029,   nil,   nil,   nil,   388,   nil, 24463,
   nil,   711,   713,   nil,   718,   720,   724,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   715,  1135,   nil,   nil, 16898,
   nil,   nil,   nil,   811,   nil,   nil,   nil,   827,   nil,   nil,
   828,   374,   nil,   869,   nil,   nil,   nil,   nil,   nil,   878,
   nil,     6,   765,    41,   -18,    68,   135,  2900,   292,  1040,
   nil,   794,  3600, 10939,   nil,   923,  3460, 24306, 24225, 23057,
   nil,   nil,   nil,   nil,   nil,   nil,  2760,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   806, 10145,   824,   -85,   331,   110,
   354,   nil,  2200,  9621,   nil,   824,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  6477,  6215,  6084,  5953,
   292,  5822,   nil,   -59,   nil,   nil,   870,   nil,   nil,  1308,
   nil,  3180,   nil,   nil,   nil,   nil,   853,   183,   nil,   nil,
   979,   nil,  2620,   867,   929,   nil,   nil,   nil,    -9,   891,
   890,   nil,   nil,   534, 24519,   nil, 24217,   nil, 24526,   nil,
 16366,   nil,  1005,   nil,   889,   355,   895,   nil,   nil,   nil,
   nil,  1018,   nil, 15449,  1022,   nil, 15318,  3880,    39,  1028,
   nil,  1031,   141,  3320,   nil,  1042,   922,   -50,   nil,   926,
   922,   142,   nil,   nil, 13182, 13051,  2480,  5420,   nil,   931,
   932,   nil,   941,   942,   943,   nil,   974,   959,   955,   949,
 12527,   nil,   nil,   nil,   nil,  4720,   nil,   nil,    76, 12396,
   nil,   nil,   nil,   nil,  1005,   963,   nil,   nil,   nil,   973,
   977,   nil,   983,   985,   nil,   989,   nil,   nil,   996,  1140,
   999,  1201,   nil,   nil,   -10,   nil,   nil,   256,   nil,   nil,
   nil,  1126,   nil,   nil,   nil,  1047,   nil,   nil,  1021,   nil,
   nil, 24281,   nil, 24298,   nil, 14424,   nil,   nil,  1028,  1050,
 11602,   694,  1097,   nil,  2480,    79,    33,   766,  1102,    36,
   nil,  5560,  5280,   nil,   nil, 24366,   nil, 24383,   nil, 24422,
   nil, 24439,   nil,   nil,   nil,   nil,   320,   865,  1025,  5140,
   nil,   nil,   nil,   nil,  4860,  1028,   nil,   nil,  1030,  1034,
  1036,  1038,   nil,  1040,   nil,   353,   nil,   nil,   nil,   190,
 23911,   nil,  1169, 11340, 23850, 23667,    35,  1093,  1201,  1078,
  1079,  1080,  1085,  1086,  1389,  1093,  1427,   324,  1218,   nil,
 24242,   nil, 16806,   nil, 21145,   nil, 24358,   nil,   nil,   nil,
   914,  1140,  1141,   nil,  1101,    32,    34,   109,    69,   nil,
   nil, 24446,   nil,   nil,   nil,   nil,  1279,  -101,   nil,   nil,
   -84,   -80,   -71,   -38,   nil,    26,   -11,    42, 12304,   nil,
   nil,   nil,   nil,   nil,    72,   nil ]

racc_action_default = [
    -3,  -611,    -1,  -597,    -4,  -611,    -7,  -611,  -611,  -611,
  -611,   -30,  -611,  -611,   -34,  -611,  -611,  -289,   -46,  -599,
  -611,   -51,   -55,   -56,   -57,   -61,  -266,  -266,  -266,  -302,
  -332,  -333,   -73,   -12,   -77,   -85,   -87,  -611,  -501,  -502,
  -611,  -611,  -611,  -611,  -225,  -611,  -599,  -239,  -280,  -281,
  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -585,  -291,  -295,
  -610,  -575,  -310,  -312,  -611,  -611,   -53,   -53,  -597,  -611,
  -611,  -611,  -611,  -334,  -335,  -337,  -338,  -339,  -340,  -442,
  -443,  -444,  -445,  -446,  -467,  -449,  -450,  -469,  -471,  -454,
  -459,  -463,  -465,  -481,  -467,  -483,  -485,  -486,  -487,  -488,
  -583,  -490,  -491,  -584,  -493,  -494,  -495,  -496,  -497,  -498,
  -499,  -500,  -505,  -506,  -611,    -2,  -598,  -606,  -607,  -608,
    -6,  -611,  -611,  -611,  -611,  -611,    -8,    -3,   -18,  -611,
  -116,  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -128,
  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,
  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,
  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,
  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,
   -23,  -125,   -12,  -611,  -611,  -611,  -611,  -611,  -256,  -611,
  -611,  -595,  -596,  -611,  -611,  -599,  -600,   -50,  -611,  -501,
  -502,  -611,  -289,  -611,  -611,  -231,  -611,   -12,  -611,  -210,
  -211,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
  -611,  -240,  -241,  -242,  -243,  -611,  -406,  -408,  -611,  -593,
  -594,   -62,  -256,  -611,  -309,  -412,  -421,  -423,   -68,  -418,
   -69,  -599,   -70,  -246,  -261,  -270,  -270,  -265,  -611,  -271,
  -611,  -467,  -577,  -611,  -611,   -71,   -72,  -597,   -13,  -611,
   -16,  -611,   -75,   -12,  -599,  -611,   -78,   -81,   -12,   -93,
   -94,  -611,  -611,  -101,  -302,  -305,  -599,  -611,  -332,  -333,
  -336,  -419,  -611,   -83,  -611,   -89,  -299,  -484,  -611,  -219,
  -220,  -611,  -232,  -611,   -12,  -293,  -599,  -247,  -603,  -603,
  -611,  -611,  -603,  -611,  -311,  -397,   -52,  -611,  -611,  -611,
   -12,   -12,  -597,  -611,  -598,  -501,  -502,  -611,  -611,  -289,
  -611,  -350,  -351,  -111,  -112,  -611,  -114,  -611,  -289,  -509,
  -611,  -501,  -502,  -325,  -116,  -117,  -158,  -159,  -160,  -176,
  -181,  -188,  -191,  -327,  -611,  -573,  -611,  -447,  -611,  -611,
  -611,  -611,  -611,  -611,  -611,  -611,  1036,    -5,  -609,   -24,
   -25,   -26,   -27,   -28,  -611,  -611,   -20,   -21,   -22,  -126,
  -611,   -31,   -33,  -276,  -611,  -611,  -275,   -32,  -611,   -35,
  -611,  -289,   -43,   -45,  -199,  -251,  -271,   -47,   -48,   -36,
  -200,  -251,  -599,  -257,  -270,  -270,  -586,  -587,  -266,  -416,
  -588,  -589,  -587,  -586,  -266,  -415,  -417,  -588,  -589,   -42,
  -207,   -49,  -599,  -308,  -611,  -611,  -611,  -256,  -299,  -611,
  -611,  -611,  -208,  -209,  -212,  -213,  -214,  -215,  -216,  -217,
  -221,  -222,  -223,  -224,  -226,  -227,  -228,  -229,  -230,  -233,
  -234,  -235,  -236,  -599,  -244,  -427,  -266,  -586,  -587,   -59,
   -63,  -599,  -267,  -425,  -427,  -599,  -304,  -262,  -611,  -263,
  -611,  -268,  -611,  -272,  -611,  -580,  -582,   -11,  -598,   -15,
   -17,  -599,   -74,  -297,   -90,   -79,  -611,  -599,  -256,  -611,
  -611,  -100,  -611,  -484,  -611,   -86,   -91,  -611,  -611,  -611,
  -611,  -245,  -237,  -611,  -434,  -611,  -599,  -611,  -248,  -605,
  -604,  -250,  -605,  -300,  -301,  -576,  -313,  -533,   -12,  -341,
  -342,   -12,  -611,  -611,  -611,  -611,  -611,  -611,  -256,  -611,
  -611,  -299,   -53,  -111,  -112,  -113,  -611,  -611,  -256,  -321,
  -507,  -611,   -12,  -511,  -329,  -599,  -448,  -468,  -473,  -611,
  -475,  -451,  -470,  -611,  -472,  -453,  -611,  -456,  -611,  -458,
  -461,  -611,  -462,  -611,  -482,    -9,   -19,  -611,   -29,  -279,
  -611,  -611,  -256,  -611,  -611,  -611,  -611,  -420,  -611,  -258,
  -260,  -611,  -611,   -64,  -255,  -413,  -611,  -611,   -66,  -414,
  -307,  -601,  -586,  -587,  -586,  -587,  -599,  -611,  -611,  -428,
   -58,  -409,  -425,  -253,  -611,  -386,  -611,  -303,  -270,  -269,
  -273,  -611,  -578,  -579,  -611,   -14,   -76,  -611,   -82,   -88,
  -599,  -586,  -587,  -254,  -590,   -99,  -611,   -84,  -611,  -206,
  -218,  -599,  -610,  -610,  -292,  -294,  -296,  -603,  -398,  -533,
  -401,  -572,  -572,  -516,  -518,  -518,  -518,  -532,  -534,  -535,
  -536,  -537,  -538,  -539,  -540,  -541,  -611,  -543,  -545,  -547,
  -552,  -554,  -555,  -557,  -562,  -564,  -565,  -567,  -568,  -569,
  -611,  -610,  -343,  -610,   -54,  -344,  -345,  -316,  -317,  -611,
  -319,  -611,  -599,  -586,  -587,  -590,  -298,   -12,  -111,  -112,
  -115,  -599,   -12,  -611,  -323,  -611,   -12,  -533,  -533,  -611,
  -574,  -474,  -477,  -478,  -479,  -480,   -12,  -452,  -455,  -457,
  -460,  -464,  -466,  -127,  -277,  -611,  -599,  -586,  -587,  -587,
  -586,   -44,  -252,  -611,  -602,  -270,   -38,  -202,   -39,  -203,
   -65,   -40,  -205,   -41,  -204,   -67,  -611,  -611,  -611,  -611,
  -420,  -611,  -407,  -386,  -411,  -410,  -611,  -422,  -387,  -599,
  -389,   -12,  -424,  -264,  -274,  -581,   -80,  -420,   -92,  -306,
  -610,  -348,   -12,  -435,  -610,  -436,  -437,  -249,  -611,  -599,
  -611,  -514,  -515,  -611,  -611,  -525,  -611,  -528,  -611,  -530,
  -611,  -352,  -611,  -354,  -356,  -363,  -599,  -546,  -556,  -566,
  -570,  -611,  -346,  -611,  -611,  -318,  -611,   -12,  -420,  -611,
  -420,  -611,  -611,   -12,  -326,  -611,  -599,  -611,  -330,  -611,
  -278,  -420,   -37,  -201,  -259,  -611,  -238,   -12,   -60,  -572,
  -572,  -368,  -370,  -370,  -370,  -385,  -611,  -599,  -391,  -541,
  -549,  -550,  -560,  -426,   -10,   -12,  -441,  -349,  -611,  -611,
  -439,  -399,  -402,  -404,  -611,  -572,  -553,  -571,  -517,  -518,
  -518,  -544,  -518,  -518,  -563,  -518,  -541,  -558,  -599,  -611,
  -361,  -611,  -542,  -314,  -611,  -315,  -273,  -610,  -320,  -322,
  -508,  -611,  -328,  -510,  -512,  -511,  -476,  -429,  -611,  -366,
  -367,  -376,  -378,  -611,  -381,  -611,  -383,  -388,  -611,  -611,
  -611,  -548,  -611,  -440,   -12,  -501,  -502,  -611,  -611,  -289,
  -438,   -12,   -12,  -400,  -513,  -611,  -521,  -611,  -523,  -611,
  -526,  -611,  -529,  -531,  -353,  -355,  -359,  -611,  -364,   -12,
  -430,  -431,  -432,  -324,   -12,  -572,  -551,  -369,  -370,  -370,
  -370,  -370,  -561,  -370,  -390,  -599,  -393,  -395,  -396,  -559,
  -611,  -299,  -434,  -256,  -611,  -611,  -299,  -611,  -611,  -518,
  -518,  -518,  -518,  -357,  -611,  -362,  -611,  -610,  -611,  -365,
  -611,  -373,  -611,  -375,  -611,  -379,  -611,  -382,  -384,  -392,
  -611,  -298,  -590,  -433,  -599,  -586,  -587,  -590,  -298,  -403,
  -405,  -611,  -519,  -522,  -524,  -527,  -611,  -360,  -347,  -331,
  -370,  -370,  -370,  -370,  -394,  -420,  -518,  -358,  -611,  -371,
  -374,  -377,  -380,  -520,  -370,  -372 ]

clist = [
'224,383,662,29,267,275,279,344,29,556,284,284,284,320,320,337,432,268',
'219,499,119,416,417,29,347,348,269,333,352,285,285,285,29,29,29,126',
'29,429,133,133,327,346,346,449,306,346,6,726,320,320,320,6,138,138,128',
'211,548,551,438,444,338,116,29,821,136,136,323,29,29,490,491,29,525',
'639,227,639,350,351,115,884,642,399,400,401,402,119,565,304,968,286',
'286,286,282,295,296,271,278,280,346,346,346,346,133,634,453,335,781',
'486,790,853,2,948,538,541,607,945,545,816,302,29,339,342,642,430,29',
'29,29,29,29,450,29,628,388,962,120,586,588,535,369,373,636,966,395,353',
'1,856,336,536,334,824,855,582,584,587,587,384,569,360,546,857,496,341',
'6,385,631,874,340,985,499,968,965,403,668,6,871,547,798,331,597,931',
'932,485,493,512,639,639,494,773,950,794,642,868,427,428,387,389,390',
'391,439,284,632,451,452,392,1017,881,393,394,884,731,962,709,945,415',
'415,29,29,29,29,29,29,29,1024,918,670,736,29,29,29,723,455,704,405,879',
'412,362,1027,404,210,876,29,958,776,888,847,397,956,645,345,864,448',
'801,802,284,284,626,722,833,572,573,26,729,284,905,648,26,,411,422,',
',422,657,285,,29,29,422,,,26,285,,,29,,320,720,685,26,26,26,,26,438',
'444,275,522,,677,279,423,29,320,423,,29,,770,552,423,29,881,519,119',
',650,537,,26,,523,,,26,26,346,305,26,510,529,620,787,286,526,,492,29',
'515,504,,286,881,951,495,509,799,571,739,1018,739,,29,29,29,508,712',
'511,653,559,,,517,575,,450,721,430,653,119,633,783,507,29,637,725,26',
'574,,954,,26,26,26,26,26,269,26,302,29,646,,,302,828,786,649,881,653',
',746,,,830,836,837,653,,,,685,760,,608,,665,765,614,,639,827,677,603',
'619,642,,,555,841,909,910,756,758,659,439,133,761,763,284,,1003,797',
'438,444,,,,,,138,,596,,,730,934,,,,,29,136,,,627,614,854,,685,685,,795',
'26,26,26,26,26,26,26,677,677,,,26,26,26,448,811,783,,,880,,882,,320',
',26,439,284,,,,320,,,410,613,439,,661,29,,618,,,,757,759,,859,29,762',
'764,,831,526,,,835,,305,26,26,526,989,29,,439,284,789,26,,,,685,439',
'685,,284,448,29,,952,29,630,,711,638,26,448,29,,26,,,,,26,705,,29,717',
'842,,29,775,924,,,,,439,284,,,,,724,,448,,,,26,,448,305,959,667,960',
',305,949,29,29,,608,29,26,26,26,774,811,29,29,890,,796,29,29,,979,,',
',320,133,,,26,608,614,,448,619,901,320,,,860,138,,743,553,554,26,,,',
'907,751,859,136,859,422,,526,838,843,,,,415,,422,422,,788,755,422,422',
'757,759,764,762,685,1020,,,,,,832,,,1025,851,423,,811,,811,608,,892',
',,423,423,346,,608,423,423,,,,877,,,877,805,807,809,903,,26,,,29,,,',
',29,29,608,,29,,859,,,,978,,,,29,,,,,,866,,983,811,870,,843,,,,,29,988',
',133,858,,,,,,,944,26,860,,1004,860,,860,,860,,26,,858,,,894,29,811',
',811,,,,,,26,,29,,,,,346,,,,,,,422,26,,,26,,653,,,877,811,26,851,,851',
',851,,,29,,26,,29,,26,,,,29,,858,320,423,,701,,,703,,,320,900,29,860',
',860,904,860,852,860,,850,,26,26,,,26,,,29,,,26,26,,,,26,26,,,875,,',
'883,,885,,,,860,,,,,,,,,851,320,851,,851,,851,,,,,,,,,,,,,936,938,,940',
'942,,943,,,,29,,974,,,,,29,29,851,,16,,,,,16,,,999,,,343,,,29,439,284',
',,29,228,,,,,,,,,228,228,228,,16,311,311,,,29,26,,,,,26,26,,608,26,',
'955,,961,850,963,850,,850,26,16,,,448,,228,228,,448,228,357,367,367',
',829,980,26,981,,982,1012,1013,1014,1015,,,,,,,,,,839,912,914,916,,',
',,,,,26,,,,,,,,,,,26,,16,,,,,228,228,228,228,16,1033,16,,1021,,1022',
'850,1023,850,,850,863,850,,,,,,,26,,,867,26,1026,,,,,26,,,,,,13,,413',
'426,,13,1034,,26,850,,,,,,,,,,,,,897,,,,26,,,,,,,13,,,,,991,993,995',
'997,,998,,,,,,,,16,228,420,228,228,420,228,,13,923,,420,228,228,,,,',
'361,,,,,,,16,501,,503,,,505,506,,26,,,,,,,26,26,,,,,,,1029,1030,1031',
'1032,,,,,,,26,228,228,,1035,26,13,,,972,228,,,,,13,977,13,,,,,,,26,',
',,16,,,,16,,987,,311,16,,,,,,,,,,,,39,,,,311,39,,,,,,,,,16,,,,,,,,,',
',,,,,228,16,16,,39,310,310,,,,,,,,,599,,,,,,228,,,13,,418,,,418,39,',
',,,418,,228,,,356,372,372,372,,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,39,,,,,,,,,39,,39,640,,343,,643,,,,,228,,,13,,,,13,,,,,13,,,',
',,,,,,,,,,,,,,,,640,,,343,,,13,,,,,,,,,,,,426,16,,,13,13,,,,311,,228',
',,,,,311,,,,,,,,39,228,,,,,,,,,,,,,,,16,,744,16,,,,,,39,228,640,343',
',,,,,,,228,,,,16,,,,,,,,,,,,,,,,,,,784,,,785,,,,,,,420,228,,,16,,,,',
',420,420,793,,,420,420,,39,,,,39,,,,310,39,,,,,,,,,,,817,,,,,310,,,311',
',,,,,,39,,,,311,,,,,,,,,,,13,39,39,,,,,,,,,,,,,,,,,,,,,,,,840,,,,,,',
',,,,,,,13,,,13,,,38,,16,,,38,,16,228,,,16,,,,,,,13,,,16,,,,,,,,,,,,38',
'309,309,,,420,,,,,,,887,,418,,,,13,,,,,,418,418,38,,896,418,418,,,16',
',,355,371,371,371,,,,,16,,343,,,,,,,,,,,,,,,,,,,,,,,,,,,,,228,,,,16',
'39,,,38,,16,,,310,,,,38,17,38,,310,,17,16,,,,,,,,,,,,,921,,,,,16,,,39',
'927,,39,,,17,313,313,,13,,,,,13,,,,13,,,,,39,,,,,13,,,17,,,,,,,,,,359',
'368,368,,418,,,,,,969,,,,16,39,,38,,,,16,16,,,,,,,,,,13,,,,,,,16,,,38',
'13,16,,,17,,,,,,,,,17,310,17,,,,,228,,,,,310,,,,,,,,,,13,,,,,,13,,,',
',,,15,,,,,15,,13,,,,,,38,,,,38,,,,309,38,,,13,,,,930,,,,15,,,39,,309',
',,39,,,,39,,,38,,,,17,,421,39,,421,,15,,,,421,38,38,,,,,,,,,,,,17,,',
',,,,13,,,,,,,13,13,,,,,,,,39,,,,,,,,,13,,39,,,13,,15,,,,,,,,,15,,15',
',,,,,,,,,,,17,,,,17,,,39,313,17,,,,39,,,,,,,,,,,,313,,39,,,,,,,,17,',
',,,372,,,,,39,,,,926,,17,17,,,,,,,,,,,,,,,,,,,,,15,,15,,,15,,,,,38,15',
',,,,,,309,,,,,,,15,309,372,,,,39,,,,,,,39,39,,,,,,,,,,,38,,,38,,,39',
',,,,39,,,,,,,,,,,,,38,,,,,,,,,,,,,15,,,,15,,,,,15,,,,,,,,,,,38,,,,,',
',,,,,,,,,15,,,,,,,,,,,,,,17,,15,15,,,,,313,,,,,309,,,313,,,,,,,,309',
',,,,,,,,,,,,,,,17,,,17,,,,,,,,,,,,,,,,,,,,,17,,,,,,,735,,,,,,,,,,,,38',
',,,,38,,,,38,421,,,,17,,,,,38,421,421,,,,421,421,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,313,,,,,,,,38,,,313,,,,,,,,38,,15,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,38,,,,,,38,15,,,15,,,,,,17,,,,38,17,,,,17,,,,,,15,,371,,17,',
',38,,,,925,,235,,,,,,,,421,283,283,283,,,,,15,,,,15,,329,330,,332,15',
'15,,,,15,15,,,,17,,,,283,283,,,,,,17,,371,,,,38,,,,,,,38,38,,,,,,,,',
',,,,,,,,38,,,,17,38,,,,,17,,,,,,,,,,,,,,17,,,,,,,,,,,,,368,,,,,17,,',
',929,,,,,,,,15,,,,,15,,,,15,,,,,,,,,,15,,,,,,,,,,,,,,,,,15,,,,,,,368',
',,,17,,,,,,,17,17,,,,,,283,425,,15,431,283,,,,,431,17,,,15,,17,,,,,',
',235,,,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477',
'478,479,480,481,482,483,,15,,,484,,,15,,,,283,283,,,,,,,,283,15,,,,',
',283,,283,,,283,283,,,,,,15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,531,,532,',
',,,,,,,,,,,,,,,,,,,,,,,,15,,,,,,,15,15,,,,,,,,,,,,,,,,,15,,,,,15,,,',
',,,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283',
',431,431,431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,283,,283,,,,,',
',,,,,,,,,,283,,,,,,,,,431,660,,,,,,,,,,,283,,,283,,,,,,,,,,,,,,,283',
'283,,,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,431,283,,,,752,',
',283,283,431,431,,,,431,431,,,,,,,,,,,,,,,,,,,,,,,,283,,,283,,,,,,,',
',,,,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,,,,,431,,,,,,,,,,,,,431,431,431',
'431,,846,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,283',
',,,,,,,,,,,,,,,,,283,431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,283' ]
        racc_goto_table = arr = ::Array.new(3478, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'34,63,11,50,145,81,81,96,50,101,39,39,39,73,73,77,30,42,32,83,105,23',
'23,50,18,18,32,34,18,78,78,78,50,50,50,8,50,27,64,64,71,25,25,27,56',
'25,7,108,73,73,73,7,68,68,16,16,99,99,43,43,78,6,50,100,67,67,57,50',
'50,45,30,50,58,84,21,84,36,36,4,185,189,18,18,18,18,105,61,53,139,80',
'80,80,51,51,51,44,44,44,25,25,25,25,64,46,54,7,134,43,12,132,2,123,79',
'79,31,120,79,122,52,50,80,80,189,70,50,50,50,50,50,70,50,148,162,186',
'5,166,166,9,62,62,148,138,162,4,1,136,112,111,110,12,124,167,167,167',
'167,109,104,102,98,130,54,95,7,94,82,136,76,123,83,139,137,7,140,7,141',
'142,143,74,69,146,147,149,151,54,84,84,152,155,156,157,189,158,25,25',
'161,163,164,165,81,39,48,25,25,168,123,180,169,170,185,171,186,101,120',
'78,78,50,50,50,50,50,50,50,138,136,144,172,50,50,50,173,32,37,26,178',
'24,20,123,2,17,182,50,132,46,122,134,5,183,15,113,13,64,127,127,39,39',
'30,114,115,116,117,47,118,39,119,58,47,,21,21,,,21,58,78,,50,50,21,',
',47,78,,,50,,73,61,179,47,47,47,,47,43,43,81,34,,174,81,19,50,73,19',
',50,,31,18,19,50,180,32,105,,30,34,,47,,71,,,47,47,25,10,47,8,32,54',
'31,80,56,,51,50,57,162,,80,180,12,51,7,144,25,167,100,167,,50,50,50',
'6,30,53,43,32,,,53,25,,70,30,70,43,105,54,83,4,50,54,9,47,42,,108,,47',
'47,47,47,47,32,47,52,50,54,,,52,31,58,54,180,43,,30,,,31,144,144,43',
',,,179,45,,34,,54,45,81,,84,99,174,32,81,189,,,4,31,127,127,27,27,70',
'81,64,27,27,39,,11,79,43,43,,,,,,68,,16,,,54,127,,,,,50,67,,,34,81,133',
',179,179,,23,47,47,47,47,47,47,47,174,174,,,47,47,47,64,121,83,,,133',
',133,,73,,47,81,39,,,,73,,,10,44,81,,25,50,,44,,,,70,70,,179,50,70,70',
',9,56,,,9,,10,47,47,56,127,50,,81,39,54,47,,,,179,81,179,,39,64,50,',
'101,50,44,,78,80,47,64,50,,47,,,,,47,105,,50,36,27,,50,96,99,,,,,81',
'39,,,,,105,,64,,,,47,,64,10,133,80,133,,10,99,50,50,,34,50,47,47,47',
'145,121,50,50,121,,77,50,50,,133,,,,73,64,,,47,34,81,,64,81,9,73,,,181',
'68,,16,10,10,47,,,,9,7,179,67,179,21,,56,63,70,,,,78,,21,21,,56,80,21',
'21,70,70,70,70,179,133,,,,,,18,,,31,128,19,,121,,121,34,,54,,,19,19',
'25,,34,19,19,,,,128,,,128,177,177,177,54,,47,,,50,,,,,50,50,34,,50,',
'179,,,,9,,,,50,,,,,,77,,121,121,77,,70,,,,,50,9,,64,34,,,,,,,54,47,181',
',30,181,,181,,181,,47,,34,,,18,50,121,,121,,,,,,47,,50,,,,,25,,,,,,',
'21,47,,,47,,43,,,128,121,47,128,,128,,128,,,50,,47,,50,,47,,,,50,,34',
'73,19,,10,,,10,,,73,105,50,181,,181,105,181,131,181,,126,,47,47,,,47',
',,50,,,47,47,,,,47,47,,,126,,,131,,131,,,,181,,,,,,,,,128,73,128,,128',
',128,,,,,,,,,,,,,177,177,,177,177,,177,,,,50,,32,,,,,50,50,128,,29,',
',,,29,,,34,,,75,,,50,81,39,,,50,29,,,,,,,,,29,29,29,,29,29,29,,,50,47',
',,,,47,47,,34,47,,126,,131,126,131,126,,126,47,29,,,64,,29,29,,64,29',
'29,29,29,,10,131,47,131,,131,177,177,177,177,,,,,,,,,,10,129,129,129',
',,,,,,,47,,,,,,,,,,,47,,29,,,,,29,29,29,29,29,177,29,,131,,131,126,131',
'126,,126,10,126,,,,,,,47,,,10,47,131,,,,,47,,,,,,22,,75,75,,22,131,',
'47,126,,,,,,,,,,,,,10,,,,47,,,,,,,22,,,,,129,129,129,129,,129,,,,,,',
',29,29,29,29,29,29,29,,22,10,,29,29,29,,,,,22,,,,,,,29,75,,75,,,75,75',
',47,,,,,,,47,47,,,,,,,129,129,129,129,,,,,,,47,29,29,,129,47,22,,,10',
'29,,,,,22,10,22,,,,,,,47,,,,29,,,,29,,10,,29,29,,,,,,,,,,,,60,,,,29',
'60,,,,,,,,,29,,,,,,,,,,,,,,,29,29,29,,60,60,60,,,,,,,,,75,,,,,,29,,',
'22,,22,,,22,60,,,,,22,,29,,,60,60,60,60,,,,,,22,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,60,,,,,,,,,60,,60,75,,75,,75,,,,,29,,,22,,,,22,,,,',
'22,,,,,,,,,,,,,,,,,,,,75,,,75,,,22,,,,,,,,,,,,75,29,,,22,22,,,,29,,29',
',,,,,29,,,,,,,,60,29,,,,,,,,,,,,,,,29,,75,29,,,,,,60,29,75,75,,,,,,',
',29,,,,29,,,,,,,,,,,,,,,,,,,75,,,75,,,,,,,29,29,,,29,,,,,,29,29,75,',
',29,29,,60,,,,60,,,,60,60,,,,,,,,,,,75,,,,,60,,,29,,,,,,,60,,,,29,,',
',,,,,,,,22,60,60,,,,,,,,,,,,,,,,,,,,,,,,75,,,,,,,,,,,,,,22,,,22,,,59',
',29,,,59,,29,29,,,29,,,,,,,22,,,29,,,,,,,,,,,,59,59,59,,,29,,,,,,,75',
',22,,,,22,,,,,,22,22,59,,75,22,22,,,29,,,59,59,59,59,,,,,29,,75,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,29,,,,29,60,,,59,,29,,,60,,,,59,33,59,,60,,33',
'29,,,,,,,,,,,,,29,,,,,29,,,60,29,,60,,,33,33,33,,22,,,,,22,,,,22,,,',
',60,,,,,22,,,33,,,,,,,,,,33,33,33,,22,,,,,,29,,,,29,60,,59,,,,29,29',
',,,,,,,,,22,,,,,,,29,,,59,22,29,,,33,,,,,,,,,33,60,33,,,,,29,,,,,60',
',,,,,,,,,22,,,,,,22,,,,,,,28,,,,,28,,22,,,,,,59,,,,59,,,,59,59,,,22',
',,,22,,,,28,,,60,,59,,,60,,,,60,,,59,,,,33,,33,60,,33,,28,,,,33,59,59',
',,,,,,,,,,,33,,,,,,,22,,,,,,,22,22,,,,,,,,60,,,,,,,,,22,,60,,,22,,28',
',,,,,,,,28,,28,,,,,,,,,,,,33,,,,33,,,60,33,33,,,,60,,,,,,,,,,,,33,,60',
',,,,,,,33,,,,,60,,,,,60,,,,60,,33,33,,,,,,,,,,,,,,,,,,,,,28,,28,,,28',
',,,,59,28,,,,,,,59,,,,,,,28,59,60,,,,60,,,,,,,60,60,,,,,,,,,,,59,,,59',
',,60,,,,,60,,,,,,,,,,,,,59,,,,,,,,,,,,,28,,,,28,,,,,28,,,,,,,,,,,59',
',,,,,,,,,,,,,,28,,,,,,,,,,,,,,33,,28,28,,,,,33,,,,,59,,,33,,,,,,,,59',
',,,,,,,,,,,,,,,33,,,33,,,,,,,,,,,,,,,,,,,,,33,,,,,,,33,,,,,,,,,,,,59',
',,,,59,,,,59,33,,,,33,,,,,59,33,33,,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,33,,,,,,,,59,,,33,,,,,,,,59,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',59,,,,,,59,28,,,28,,,,,,33,,,,59,33,,,,33,,,,,,28,,59,,33,,,59,,,,59',
',35,,,,,,,,33,35,35,35,,,,,28,,,,28,,35,35,,35,28,28,,,,28,28,,,,33',
',,,35,35,,,,,,33,,59,,,,59,,,,,,,59,59,,,,,,,,,,,,,,,,,59,,,,33,59,',
',,,33,,,,,,,,,,,,,,33,,,,,,,,,,,,,33,,,,,33,,,,33,,,,,,,,28,,,,,28,',
',,28,,,,,,,,,,28,,,,,,,,,,,,,,,,,28,,,,,,,33,,,,33,,,,,,,33,33,,,,,',
'35,35,,28,35,35,,,,,35,33,,,28,,33,,,,,,,35,,,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,,28,,,35,,,28,,,,35,35,,,',
',,,,35,28,,,,,,35,,35,,,35,35,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,28,28,,,,,,,,,,,,,,,,,28,,',
',,28,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,,35,,',
',,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,35,35',
',,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,,,35,35,35',
'35,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,',
',,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,35,,,,,,,,35,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,35,35,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3478, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   144,   110,   nil,    75,   129,    58,    46,    28,  -197,
   294,  -532,  -554,  -541,   nil,  -261,    46,   229,   -40,    87,
   166,    54,  1099,  -192,    21,   -23,   104,  -180,  1939,   938,
  -202,  -318,     2,  1779,   -19,  2504,    10,  -321,   nil,   -19,
   nil,   nil,    -7,  -161,    69,  -202,  -390,   260,  -289,   nil,
     3,    63,    85,    54,  -121,   nil,    10,    31,  -252,  1653,
  1258,  -279,    68,   -71,    30,   nil,   nil,    56,    44,  -231,
   -94,    -1,   nil,   -21,   133,   888,   106,   -45,     0,  -226,
    60,   -21,  -322,  -267,  -425,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    91,   100,   -55,   nil,  -187,  -291,
  -638,  -344,    88,   nil,  -213,    17,   nil,   nil,  -526,    83,
    90,  -188,    87,   185,  -313,  -467,  -115,  -124,  -313,  -575,
  -774,  -199,  -569,  -780,  -629,   nil,    80,  -420,   -92,   179,
  -620,    77,  -670,  -313,  -529,   nil,  -634,  -749,  -778,  -831,
  -375,  -624,  -170,  -492,  -323,   -18,  -693,  -693,  -354,   -85,
   nil,   -94,   -91,   nil,   nil,  -442,  -709,  -474,  -603,   nil,
   nil,   112,    48,   108,   108,   108,  -256,  -238,   113,   115,
   115,  -370,  -355,  -341,  -248,   nil,   nil,    38,  -571,  -259,
  -599,  -139,  -561,  -662,   nil,  -727,  -780,   nil,   nil,  -420 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   354,   300,   nil,   nil,
   534,   nil,   822,   nil,   297,   298,   nil,   nil,   nil,    11,
    12,    18,   233,   nil,   nil,    14,   nil,   419,   234,   328,
   nil,   nil,   567,   232,   454,    21,   nil,   nil,   349,    22,
    23,    24,   nil,   656,   nil,   nil,   nil,   317,   nil,    25,
   314,   433,    32,   nil,   nil,    34,    37,    36,   nil,   229,
   230,   366,   nil,   135,   441,   134,   137,    80,    81,   nil,
   424,    95,    44,    47,   265,   289,   nil,   791,   434,   nil,
   435,   446,   615,   497,   287,   273,    48,    49,    50,    51,
    52,    53,    54,    55,    56,   nil,   274,    62,   nil,   nil,
   nil,   nil,   nil,    70,   nil,   549,    71,    72,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   813,   684,   nil,   814,   957,   849,   672,   nil,   673,   nil,
   nil,   674,   nil,   676,   nil,   778,   nil,   nil,   nil,   682,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   445,   nil,   nil,   635,   629,   nil,   nil,   nil,   nil,    79,
    82,    83,   nil,   nil,   nil,   nil,   nil,   577,   nil,   nil,
   nil,   nil,   nil,   nil,   878,   728,   671,   nil,   675,   886,
   687,   689,   690,   861,   693,   694,   862,   697,   700,   292 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  2, 150, :_reduce_8,
  3, 153, :_reduce_9,
  4, 154, :_reduce_10,
  2, 155, :_reduce_11,
  0, 159, :_reduce_12,
  1, 159, :_reduce_13,
  3, 159, :_reduce_14,
  2, 159, :_reduce_15,
  1, 160, :_reduce_none,
  2, 160, :_reduce_17,
  0, 171, :_reduce_18,
  4, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  3, 152, :_reduce_22,
  2, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  3, 152, :_reduce_28,
  4, 152, :_reduce_29,
  1, 152, :_reduce_none,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  3, 152, :_reduce_33,
  1, 152, :_reduce_none,
  3, 164, :_reduce_35,
  3, 164, :_reduce_36,
  6, 164, :_reduce_37,
  5, 164, :_reduce_38,
  5, 164, :_reduce_39,
  5, 164, :_reduce_40,
  5, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 172, :_reduce_none,
  3, 172, :_reduce_44,
  1, 172, :_reduce_none,
  1, 170, :_reduce_none,
  3, 170, :_reduce_47,
  3, 170, :_reduce_48,
  3, 170, :_reduce_49,
  2, 170, :_reduce_50,
  1, 170, :_reduce_none,
  1, 163, :_reduce_none,
  0, 183, :_reduce_53,
  3, 181, :_reduce_54,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 185, :_reduce_none,
  4, 185, :_reduce_58,
  0, 193, :_reduce_59,
  4, 190, :_reduce_60,
  1, 192, :_reduce_none,
  2, 184, :_reduce_62,
  3, 184, :_reduce_63,
  4, 184, :_reduce_64,
  5, 184, :_reduce_65,
  4, 184, :_reduce_66,
  5, 184, :_reduce_67,
  2, 184, :_reduce_68,
  2, 184, :_reduce_69,
  2, 184, :_reduce_70,
  2, 184, :_reduce_71,
  2, 184, :_reduce_72,
  1, 165, :_reduce_73,
  3, 165, :_reduce_74,
  1, 198, :_reduce_75,
  3, 198, :_reduce_76,
  1, 197, :_reduce_none,
  2, 197, :_reduce_78,
  3, 197, :_reduce_79,
  5, 197, :_reduce_80,
  2, 197, :_reduce_81,
  4, 197, :_reduce_82,
  2, 197, :_reduce_83,
  4, 197, :_reduce_84,
  1, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 201, :_reduce_none,
  3, 201, :_reduce_88,
  2, 200, :_reduce_89,
  3, 200, :_reduce_90,
  1, 203, :_reduce_91,
  3, 203, :_reduce_92,
  1, 202, :_reduce_93,
  1, 202, :_reduce_94,
  4, 202, :_reduce_95,
  3, 202, :_reduce_96,
  3, 202, :_reduce_97,
  3, 202, :_reduce_98,
  3, 202, :_reduce_99,
  2, 202, :_reduce_100,
  1, 202, :_reduce_101,
  1, 167, :_reduce_102,
  1, 167, :_reduce_103,
  4, 167, :_reduce_104,
  3, 167, :_reduce_105,
  3, 167, :_reduce_106,
  3, 167, :_reduce_107,
  3, 167, :_reduce_108,
  2, 167, :_reduce_109,
  1, 167, :_reduce_110,
  1, 206, :_reduce_111,
  1, 206, :_reduce_none,
  2, 207, :_reduce_113,
  1, 207, :_reduce_114,
  3, 207, :_reduce_115,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 211, :_reduce_121,
  1, 211, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 162, :_reduce_125,
  0, 214, :_reduce_126,
  4, 162, :_reduce_127,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  3, 180, :_reduce_199,
  3, 180, :_reduce_200,
  6, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  5, 180, :_reduce_204,
  5, 180, :_reduce_205,
  4, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  2, 180, :_reduce_210,
  2, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  3, 180, :_reduce_214,
  3, 180, :_reduce_215,
  3, 180, :_reduce_216,
  3, 180, :_reduce_217,
  4, 180, :_reduce_218,
  2, 180, :_reduce_219,
  2, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  1, 180, :_reduce_none,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  3, 180, :_reduce_230,
  2, 180, :_reduce_231,
  2, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  3, 180, :_reduce_237,
  6, 180, :_reduce_238,
  1, 180, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  3, 217, :_reduce_244,
  3, 217, :_reduce_245,
  1, 220, :_reduce_none,
  1, 221, :_reduce_none,
  2, 221, :_reduce_none,
  4, 221, :_reduce_249,
  2, 221, :_reduce_250,
  1, 215, :_reduce_none,
  3, 215, :_reduce_252,
  3, 226, :_reduce_253,
  0, 227, :_reduce_254,
  1, 227, :_reduce_none,
  0, 175, :_reduce_256,
  1, 175, :_reduce_none,
  2, 175, :_reduce_none,
  4, 175, :_reduce_259,
  2, 175, :_reduce_260,
  1, 196, :_reduce_261,
  2, 196, :_reduce_262,
  2, 196, :_reduce_263,
  4, 196, :_reduce_264,
  1, 196, :_reduce_265,
  0, 230, :_reduce_266,
  2, 189, :_reduce_267,
  2, 229, :_reduce_268,
  2, 228, :_reduce_269,
  0, 228, :_reduce_270,
  1, 223, :_reduce_271,
  2, 223, :_reduce_272,
  3, 223, :_reduce_273,
  4, 223, :_reduce_274,
  1, 169, :_reduce_275,
  1, 169, :_reduce_none,
  3, 168, :_reduce_277,
  4, 168, :_reduce_278,
  2, 168, :_reduce_279,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_290,
  0, 255, :_reduce_291,
  4, 218, :_reduce_292,
  0, 256, :_reduce_293,
  4, 218, :_reduce_294,
  0, 257, :_reduce_295,
  4, 218, :_reduce_296,
  3, 218, :_reduce_297,
  3, 218, :_reduce_298,
  2, 218, :_reduce_299,
  3, 218, :_reduce_300,
  3, 218, :_reduce_301,
  1, 218, :_reduce_302,
  4, 218, :_reduce_303,
  3, 218, :_reduce_304,
  1, 218, :_reduce_305,
  5, 218, :_reduce_306,
  4, 218, :_reduce_307,
  3, 218, :_reduce_308,
  2, 218, :_reduce_309,
  1, 218, :_reduce_none,
  2, 218, :_reduce_311,
  0, 258, :_reduce_312,
  3, 218, :_reduce_313,
  6, 218, :_reduce_314,
  6, 218, :_reduce_315,
  4, 218, :_reduce_316,
  4, 218, :_reduce_317,
  5, 218, :_reduce_318,
  4, 218, :_reduce_319,
  6, 218, :_reduce_320,
  0, 259, :_reduce_321,
  6, 218, :_reduce_322,
  0, 260, :_reduce_323,
  7, 218, :_reduce_324,
  0, 261, :_reduce_325,
  5, 218, :_reduce_326,
  0, 262, :_reduce_327,
  6, 218, :_reduce_328,
  0, 263, :_reduce_329,
  0, 264, :_reduce_330,
  9, 218, :_reduce_331,
  1, 218, :_reduce_332,
  1, 218, :_reduce_333,
  1, 218, :_reduce_334,
  1, 218, :_reduce_335,
  1, 174, :_reduce_none,
  1, 248, :_reduce_337,
  1, 251, :_reduce_338,
  1, 252, :_reduce_339,
  1, 195, :_reduce_340,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  2, 244, :_reduce_343,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 245, :_reduce_none,
  5, 245, :_reduce_347,
  1, 157, :_reduce_none,
  2, 157, :_reduce_349,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 265, :_reduce_352,
  3, 265, :_reduce_353,
  1, 268, :_reduce_354,
  3, 268, :_reduce_355,
  1, 267, :_reduce_none,
  4, 267, :_reduce_357,
  6, 267, :_reduce_358,
  3, 267, :_reduce_359,
  5, 267, :_reduce_360,
  2, 267, :_reduce_361,
  4, 267, :_reduce_362,
  1, 267, :_reduce_363,
  3, 267, :_reduce_364,
  4, 269, :_reduce_365,
  2, 269, :_reduce_366,
  2, 269, :_reduce_367,
  1, 269, :_reduce_368,
  2, 274, :_reduce_369,
  0, 274, :_reduce_370,
  6, 275, :_reduce_371,
  8, 275, :_reduce_372,
  4, 275, :_reduce_373,
  6, 275, :_reduce_374,
  4, 275, :_reduce_375,
  2, 275, :_reduce_none,
  6, 275, :_reduce_377,
  2, 275, :_reduce_378,
  4, 275, :_reduce_379,
  6, 275, :_reduce_380,
  2, 275, :_reduce_381,
  4, 275, :_reduce_382,
  2, 275, :_reduce_383,
  4, 275, :_reduce_384,
  1, 275, :_reduce_none,
  0, 279, :_reduce_386,
  1, 279, :_reduce_387,
  3, 280, :_reduce_388,
  1, 280, :_reduce_389,
  4, 280, :_reduce_390,
  1, 281, :_reduce_391,
  4, 281, :_reduce_392,
  1, 282, :_reduce_393,
  3, 282, :_reduce_394,
  1, 283, :_reduce_395,
  1, 283, :_reduce_none,
  0, 287, :_reduce_397,
  0, 288, :_reduce_398,
  4, 243, :_reduce_399,
  4, 285, :_reduce_400,
  1, 285, :_reduce_401,
  0, 291, :_reduce_402,
  4, 286, :_reduce_403,
  0, 292, :_reduce_404,
  4, 286, :_reduce_405,
  0, 294, :_reduce_406,
  4, 290, :_reduce_407,
  2, 186, :_reduce_408,
  4, 186, :_reduce_409,
  5, 186, :_reduce_410,
  5, 186, :_reduce_411,
  2, 242, :_reduce_412,
  4, 242, :_reduce_413,
  4, 242, :_reduce_414,
  3, 242, :_reduce_415,
  3, 242, :_reduce_416,
  3, 242, :_reduce_417,
  2, 242, :_reduce_418,
  1, 242, :_reduce_419,
  4, 242, :_reduce_420,
  0, 296, :_reduce_421,
  4, 241, :_reduce_422,
  0, 297, :_reduce_423,
  4, 241, :_reduce_424,
  0, 298, :_reduce_425,
  3, 191, :_reduce_426,
  0, 299, :_reduce_427,
  0, 300, :_reduce_428,
  4, 293, :_reduce_429,
  5, 246, :_reduce_430,
  1, 301, :_reduce_431,
  1, 301, :_reduce_none,
  6, 156, :_reduce_433,
  0, 156, :_reduce_434,
  1, 302, :_reduce_435,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  2, 303, :_reduce_438,
  1, 303, :_reduce_none,
  2, 158, :_reduce_440,
  1, 158, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 232, :_reduce_445,
  1, 305, :_reduce_446,
  2, 305, :_reduce_447,
  3, 306, :_reduce_448,
  1, 306, :_reduce_449,
  1, 306, :_reduce_450,
  3, 233, :_reduce_451,
  4, 234, :_reduce_452,
  3, 235, :_reduce_453,
  0, 310, :_reduce_454,
  3, 310, :_reduce_455,
  1, 311, :_reduce_456,
  2, 311, :_reduce_457,
  3, 237, :_reduce_458,
  0, 313, :_reduce_459,
  3, 313, :_reduce_460,
  3, 236, :_reduce_461,
  3, 238, :_reduce_462,
  0, 314, :_reduce_463,
  3, 314, :_reduce_464,
  0, 315, :_reduce_465,
  3, 315, :_reduce_466,
  0, 307, :_reduce_467,
  2, 307, :_reduce_468,
  0, 308, :_reduce_469,
  2, 308, :_reduce_470,
  0, 309, :_reduce_471,
  2, 309, :_reduce_472,
  1, 312, :_reduce_473,
  2, 312, :_reduce_474,
  0, 317, :_reduce_475,
  4, 312, :_reduce_476,
  1, 316, :_reduce_477,
  1, 316, :_reduce_478,
  1, 316, :_reduce_479,
  1, 316, :_reduce_none,
  1, 212, :_reduce_481,
  3, 213, :_reduce_482,
  1, 304, :_reduce_483,
  2, 304, :_reduce_484,
  1, 216, :_reduce_485,
  1, 216, :_reduce_486,
  1, 216, :_reduce_487,
  1, 216, :_reduce_488,
  1, 204, :_reduce_489,
  1, 204, :_reduce_490,
  1, 204, :_reduce_491,
  1, 204, :_reduce_492,
  1, 204, :_reduce_493,
  1, 205, :_reduce_494,
  1, 205, :_reduce_495,
  1, 205, :_reduce_496,
  1, 205, :_reduce_497,
  1, 205, :_reduce_498,
  1, 205, :_reduce_499,
  1, 205, :_reduce_500,
  1, 239, :_reduce_501,
  1, 239, :_reduce_502,
  1, 173, :_reduce_503,
  1, 173, :_reduce_504,
  1, 178, :_reduce_505,
  1, 178, :_reduce_506,
  0, 318, :_reduce_507,
  4, 249, :_reduce_508,
  0, 249, :_reduce_509,
  3, 253, :_reduce_510,
  0, 320, :_reduce_511,
  3, 253, :_reduce_512,
  4, 319, :_reduce_513,
  2, 319, :_reduce_514,
  2, 319, :_reduce_515,
  1, 319, :_reduce_516,
  2, 322, :_reduce_517,
  0, 322, :_reduce_518,
  6, 289, :_reduce_519,
  8, 289, :_reduce_520,
  4, 289, :_reduce_521,
  6, 289, :_reduce_522,
  4, 289, :_reduce_523,
  6, 289, :_reduce_524,
  2, 289, :_reduce_525,
  4, 289, :_reduce_526,
  6, 289, :_reduce_527,
  2, 289, :_reduce_528,
  4, 289, :_reduce_529,
  2, 289, :_reduce_530,
  4, 289, :_reduce_531,
  1, 289, :_reduce_532,
  0, 289, :_reduce_533,
  1, 284, :_reduce_534,
  1, 284, :_reduce_535,
  1, 284, :_reduce_536,
  1, 284, :_reduce_537,
  1, 266, :_reduce_none,
  1, 266, :_reduce_539,
  1, 324, :_reduce_540,
  1, 325, :_reduce_541,
  3, 325, :_reduce_542,
  1, 276, :_reduce_543,
  3, 276, :_reduce_544,
  1, 326, :_reduce_545,
  2, 327, :_reduce_546,
  1, 327, :_reduce_547,
  2, 328, :_reduce_548,
  1, 328, :_reduce_549,
  1, 270, :_reduce_550,
  3, 270, :_reduce_551,
  1, 321, :_reduce_552,
  3, 321, :_reduce_553,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  2, 271, :_reduce_556,
  1, 271, :_reduce_557,
  3, 330, :_reduce_558,
  3, 331, :_reduce_559,
  1, 277, :_reduce_560,
  3, 277, :_reduce_561,
  1, 323, :_reduce_562,
  3, 323, :_reduce_563,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 278, :_reduce_566,
  1, 278, :_reduce_567,
  1, 333, :_reduce_none,
  1, 333, :_reduce_none,
  2, 273, :_reduce_570,
  2, 272, :_reduce_571,
  0, 272, :_reduce_572,
  1, 254, :_reduce_none,
  3, 254, :_reduce_574,
  0, 240, :_reduce_575,
  2, 240, :_reduce_none,
  1, 225, :_reduce_577,
  3, 225, :_reduce_578,
  3, 334, :_reduce_579,
  2, 334, :_reduce_580,
  4, 334, :_reduce_581,
  2, 334, :_reduce_582,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 295, :_reduce_none,
  1, 295, :_reduce_none,
  1, 295, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 177, :_reduce_595,
  1, 177, :_reduce_596,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 199, :_reduce_601,
  2, 176, :_reduce_602,
  0, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 250, :_reduce_606,
  1, 250, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 222, :_reduce_610 ]

racc_reduce_n = 611

racc_shift_n = 1036

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "expr_value_do",
  "do",
  "@2",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@3",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@4",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@5",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@16",
  "@17",
  "f_args",
  "do_block",
  "@18",
  "@19",
  "do_body",
  "@20",
  "operation3",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@26",
  "@27",
  "args_tail",
  "@28",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_9(val, _values, result)
                      result = val
                    
    result
end

def _reduce_10(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_12(val, _values, result)
                      result = []
                    
    result
end

def _reduce_13(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 16 omitted

def _reduce_17(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_18(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 30 omitted

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_54(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_60(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.in_block = val[1].in_block
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 77 omitted

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_80(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 87 omitted

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 112 omitted

def _reduce_113(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_126(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_127(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

def _reduce_199(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 225 omitted

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = val
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      result = []
                    
    result
end

# reduce 257 omitted

# reduce 258 omitted

def _reduce_259(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_264(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_266(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_267(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = []
                    
    result
end

def _reduce_271(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

def _reduce_290(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_291(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_292(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_293(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_309(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 310 omitted

def _reduce_311(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_313(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_314(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_315(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_318(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_319(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_321(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_322(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_323(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_324(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_325(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_326(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_327(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_329(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_338(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_339(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_340(val, _values, result)
                      if @context.in_class && !@context.in_def && !(context.in_block || context.in_lambda)
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 341 omitted

# reduce 342 omitted

def _reduce_343(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = val
                    
    result
end

# reduce 350 omitted

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = []
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_378(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_387(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_388(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_391(val, _values, result)
                      result = []
                    
    result
end

def _reduce_392(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_393(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_395(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_398(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_399(val, _values, result)
                      @lexer.cmdarg.pop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_400(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_402(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_404(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_405(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_406(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_407(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_408(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_416(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_417(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_418(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_419(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_423(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_425(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_426(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_427(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_428(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_429(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_430(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = []
                    
    result
end

def _reduce_435(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 439 omitted

def _reduce_440(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

# reduce 443 omitted

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_448(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_449(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_452(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = []
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = []
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = []
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = []
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = []
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = []
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_475(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_476(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 480 omitted

def _reduce_481(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_484(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_485(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_507(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_508(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_510(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_511(val, _values, result)
                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_512(val, _values, result)
                      @context.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = []
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = []
                    
    result
end

def _reduce_534(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_535(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_537(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_545(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_559(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_560(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 564 omitted

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_567(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 568 omitted

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = []
                    
    result
end

# reduce 573 omitted

def _reduce_574(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = []
                    
    result
end

# reduce 576 omitted

def _reduce_577(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_578(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_579(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_582(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

def _reduce_595(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_596(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

def _reduce_601(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_602(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

def _reduce_606(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

def _reduce_610(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby26
  end   # module Parser
