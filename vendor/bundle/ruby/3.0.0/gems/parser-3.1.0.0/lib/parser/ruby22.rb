# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby22 < Parser::Base


  def version
    22
  end

  def default_encoding
    Encoding::UTF_8
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-581,270,538,216,217,270,-100,-581,-581,-581,559,538,-98,-581,-581,219',
'-581,270,-286,-105,617,582,-101,-99,-494,-581,617,240,115,-493,567,447',
'-104,114,-97,580,-581,-581,-100,-581,-581,-581,-581,-581,-99,-102,538',
'538,-91,-102,872,-83,115,216,217,616,220,114,-286,237,-69,616,528,239',
'238,530,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581',
'-581,-581,-98,265,-581,-581,-581,-97,601,581,269,-93,-581,446,269,-581',
'569,568,574,220,-581,-577,-581,579,-581,-581,269,-581,-581,-581,-581',
'-581,-289,-581,-581,-581,-91,-91,558,-289,-289,-289,115,-89,-289,-289',
'-289,114,-289,-581,-96,115,-581,-581,-90,-92,114,-581,-289,-289,-289',
'115,-101,-95,-101,-88,114,-101,-289,-289,538,-289,-289,-289,-289,-289',
'-91,-93,-100,-91,-93,871,831,-100,-99,-102,115,115,-91,-99,-102,114',
'114,695,695,695,-101,491,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,216,217,-289,-289,-289,-93,753,-289,-93,751',
'-289,750,-103,-289,-289,489,-289,-93,-289,617,-289,444,-289,-289,841',
'-289,-289,-289,-289,-289,550,-289,-479,-289,551,216,217,216,217,-479',
'-479,-479,-263,617,-479,-479,-479,-289,-479,-577,-289,-289,-289,-289',
'616,-289,-479,-289,-479,-479,-479,445,-103,270,516,-102,499,-100,-479',
'-479,-68,-479,-479,-479,-479,-479,115,-578,616,823,-99,114,567,818,786',
'115,115,115,-486,262,114,114,114,-92,220,-486,263,259,-479,-479,-479',
'-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,567,840,-479',
'-479,-479,-105,-479,-479,-104,-94,-479,216,217,-479,-479,265,-479,220',
'-479,115,-479,220,-479,-479,114,-479,-479,-479,-479,-479,-484,-479,-482',
'-479,569,568,570,-484,269,-482,-482,-482,-487,755,-482,-482,-482,-479',
'-482,-487,-479,-479,-479,-479,220,-479,-482,-479,-482,-482,-482,-415',
'-479,554,569,568,565,502,-482,-482,923,-482,-482,-482,-482,-482,-490',
'503,672,555,669,668,667,-490,670,786,672,544,669,668,667,115,670,93',
'94,478,114,516,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482',
'-482,-482,-482,567,-415,-482,-482,-482,510,-482,-482,-415,478,-482,93',
'94,-482,-482,567,-482,-415,-482,400,-482,567,-482,-482,-581,-482,-482',
'-482,-482,-482,-289,-482,-95,-482,274,-488,-415,-289,-289,-289,115,-104',
'-488,-289,-289,114,-289,-482,890,115,-482,-482,-482,-482,114,-482,987',
'-482,-581,95,96,-290,-482,843,569,568,-289,-289,-290,-289,-289,-289',
'-289,-289,727,798,-581,-290,214,569,568,583,567,-581,595,569,568,-489',
'-577,95,96,846,-581,848,-489,729,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-581,-581,-289,-289,-289,596,600',
'-581,220,850,-289,972,-577,-289,567,-96,-581,567,-289,852,-289,-91,-289',
'-289,-105,-289,-289,-289,-289,-289,-100,-289,-581,-289,220,-581,569',
'568,578,-581,-581,-581,81,854,-581,-581,-581,-289,-581,-482,-289,-289',
'-93,-94,82,-289,-482,-581,-581,-581,-581,-102,-103,528,83,-575,530,855',
'-581,-581,518,-581,-581,-581,-581,-581,387,519,569,568,565,569,568,572',
'-479,528,443,858,530,220,672,-479,669,668,667,632,670,860,-581,-581',
'-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,861,677',
'-581,-581,-581,-482,752,-581,216,217,-581,680,-482,-581,-581,807,-581',
'-575,-581,647,-581,-482,-581,-581,810,-581,-581,-581,-581,-581,-333',
'-581,-581,-581,262,737,528,-333,240,527,-575,263,736,-493,688,687,-333',
'-581,863,681,-581,-581,-581,-581,-485,-581,265,-581,818,786,-261,-485',
'-101,292,74,75,71,9,57,867,237,115,63,64,239,238,114,67,869,65,66,68',
'30,31,72,73,-262,-574,220,-90,-88,29,28,27,103,102,104,105,-99,-97,19',
'513,-494,688,687,605,8,45,294,10,107,106,108,97,56,99,98,100,731,101',
'109,110,730,93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253',
'-479,233,234,726,716,254,255,-479,40,888,-89,33,-574,220,58,59,-479',
'892,60,-98,35,237,517,243,44,239,238,677,235,236,247,245,241,20,242',
'-574,894,680,91,81,84,85,212,86,88,87,89,240,220,213,698,82,90,319,258',
'544,-238,220,211,62,900,83,95,96,292,74,75,71,9,57,688,687,554,63,64',
'681,691,903,67,923,65,66,68,30,31,72,73,220,555,907,-264,318,29,28,27',
'103,102,104,105,397,531,19,655,653,399,398,590,8,45,294,10,107,106,108',
'97,56,99,98,100,652,101,109,110,917,93,94,42,43,41,240,244,249,250,251',
'246,248,256,257,252,253,-289,233,234,-279,532,254,255,-289,40,924,-279',
'33,-578,925,58,59,-289,989,60,-279,35,237,259,243,44,239,238,491,235',
'236,247,245,241,20,242,936,798,938,91,81,84,85,508,86,88,87,89,940,942',
'509,944,82,90,944,258,220,647,950,507,62,521,83,95,96,5,74,75,71,9,57',
'953,954,441,63,64,959,716,798,67,442,65,66,68,30,31,72,73,962,443,964',
'966,968,29,28,27,103,102,104,105,721,722,19,968,723,109,110,605,8,45',
'7,10,107,106,108,97,56,99,98,100,220,101,109,110,544,93,94,42,43,41',
'240,244,249,250,251,246,248,256,257,252,253,-289,233,234,-492,636,254',
'255,-289,40,-83,-492,33,-578,979,58,59,-289,220,60,-492,35,237,215,243',
'44,239,238,389,235,236,247,245,241,20,242,548,220,220,91,81,84,85,-491',
'86,88,87,89,240,240,-491,989,82,90,240,258,210,209,240,-491,62,549,83',
'95,96,292,74,75,71,9,57,607,-578,554,63,64,-577,652,208,67,553,65,66',
'68,30,31,72,73,604,555,265,594,1004,29,28,27,103,102,104,105,1005,920',
'19,669,668,667,1006,670,8,45,294,10,107,106,108,97,56,99,98,100,944',
'101,109,110,944,93,94,42,43,41,240,244,249,250,251,246,248,256,257,252',
'253,-290,233,234,-290,944,254,255,-290,40,1011,-290,296,593,989,58,59',
'-290,220,60,-290,35,237,1014,243,44,239,238,1015,235,236,247,245,241',
'20,242,1016,968,968,91,81,84,85,-491,86,88,87,89,968,220,-491,123,82',
'90,589,258,-261,587,989,-491,62,584,83,95,96,292,74,75,71,9,57,111,944',
'-492,63,64,240,487,786,67,-492,65,66,68,30,31,72,73,220,-492,647,795',
'798,29,28,27,103,102,104,105,799,920,19,669,668,667,801,670,8,45,294',
'10,107,106,108,97,56,99,98,100,803,101,109,110,805,93,94,42,43,41,240',
'244,249,250,251,246,248,256,257,252,253,-289,233,234,977,265,254,255',
'-289,40,478,978,33,-578,813,58,59,-289,814,60,976,35,237,815,243,44',
'239,238,786,235,236,247,245,241,20,242,822,265,220,91,81,84,85,-279',
'86,88,87,89,968,489,-279,220,82,90,647,258,219,491,779,-279,62,220,83',
'95,96,292,74,75,71,9,57,,,546,63,64,,,,67,547,65,66,68,30,31,72,73,',
'545,,,,29,28,27,103,102,104,105,,,19,118,119,120,121,122,8,45,294,10',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,292,74,75,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,118,119,120,121,122,29,28,27,103',
'102,104,105,,,19,118,119,120,121,122,8,45,294,10,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256',
'257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44',
'239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,',
'82,90,,258,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,294,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,244,249,250',
'251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40',
',,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,292,74,75',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83',
'95,96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
'220,258,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,294,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,244,249,250',
'251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,292,74,75',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83',
'95,96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',258,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,294,10,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,244,249,250,251',
'246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,258,,,,,62,,83,95,96,5,74,75,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,7',
'10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,292,74,75,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
'672,19,669,668,667,,670,8,45,294,10,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,672,,669,668,667,,670,,807,,672,,669,668,667',
',670,949,,40,,,33,,,58,59,,240,60,,35,,,,44,,807,,,,,,,20,,810,807,',
'91,81,84,85,,86,88,87,89,,,237,,82,90,239,238,,235,236,,62,,83,95,96',
'292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,19,,,240,,,8,45,294,10,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,240,-600,-600,-600,-600,246,248,237,,-600',
'-600,239,238,,235,236,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44',
'239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,',
'82,90,,672,,669,668,667,62,670,83,95,96,292,74,75,71,9,57,,,,63,64,',
',,67,,65,66,68,30,31,72,73,,,,,807,29,28,27,103,102,104,105,,672,19',
'669,668,667,,670,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,240,-600,-600,-600,-600,246,248,,807,-600,-600,,,,,',
'254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245',
'241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,672,,669,668,667,62',
'670,83,95,96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,807,29,28,27,103,102,104,105,,,19,,,,,,8,45,294,10,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248',
'256,257,252,253,,-600,-600,,,254,255,,40,,,33,,,58,59,,,60,,35,237,',
'243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,672,,669,668,667,62,670,83,95,96,292,74,75,71,9,57,,,',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,807,29,28,27,103,102,104,105,',
',19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,240,-600,-600,-600,-600,246,248,,,-600,-600,,,,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,292,74,75,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,240,244,249,250,251,246,248,256,,252,253,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,292,74',
'75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,-600,-600',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95',
'96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,103,102,104,105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,,,241,20,242,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,',
'8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
'240,-600,-600,-600,-600,246,248,,,-600,-600,,,,,,254,255,,40,,,33,,',
'58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,5,74,75,71,9,57,',
',,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,',
'19,,,,,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,240,244,249,250,251,246,248,,,252,253,,,,,,254,255,,40,,,33,,',
'58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,292,74,75,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243',
'44,239,238,,235,236,,,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,294,10,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,,,,,,,,,,,,,,,',
'254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,241',
'20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,292',
'74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103',
'102,104,105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,,,241,20,242,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,,,,62,,83,95,96,292,74,75,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,294',
'10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,-600',
'-600,-600,-600,246,248,,,-600,-600,,,,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,-600,-600,-600',
'-600,246,248,,,-600,-600,,,,,,254,255,,225,,,231,,,58,59,,,60,,,237',
',243,44,239,238,,235,236,247,245,241,230,242,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,286,101,109,110,,93,94,42,43,41,240,,,,,,,,,,,,,,,,254',
'255,,225,,,231,,,58,59,,,60,,283,237,281,243,44,239,238,287,235,236',
',,,230,,,,,91,284,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,240,,,,,,,,,,,,,,,,254,255,,225,,,231,,,58,59,,,60,,,237,,',
'44,239,238,,235,236,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,',
',74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,240,,,,,,,,,,,,,,,,254,255,,225,,,231,',
',58,59,,,60,,,237,,243,44,239,238,,235,236,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,405,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,',
',82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,220,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,',
',107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
'286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87,89,,,,',
'82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,',
',,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98',
'100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87,89,',
',,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99',
'98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87',
'89,,,,,82,90,220,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,405,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,309,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,,,,,,,,,,,,,,305',
',,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,103,102,104,105,,,232,,,,,,,309,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60',
',,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103',
'102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,74,75,71,9,57,,,',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19',
',,,,,8,45,,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,115,,,,,114,62,,83,95,96,74,75,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,',
',91,284,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,',
',,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,',
',309,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,',
',,,,,,,,,,,,931,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,309,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,,,,,,,,,,,,',
',857,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56',
'99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,309,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,,,,,,,,,,,,',
',305,,,301,,,58,59,,,60,,300,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,309,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,,,,,,,,,,,,,,305,,,231',
',,58,59,,,60,,,672,,669,668,667,677,670,,,,,,,,,680,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,317,,675,62,,83,95,96,74,75,71,,57,688,687,,63',
'64,681,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105',
',,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,286,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,',
',,230,,,,,91,284,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,629,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,283,,,,44,,,287,,,,,,230,,,,,91,284,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,91,284',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75',
'71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'103,102,104,105,,,232,,,,,,,309,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,,,315,,,,,,,,,,,,,,,,,,,,349,,,33,,,58,59,,,60,,35,,,,,,',
',,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,309,,,107,106,108,354,56,99,98,355,,101,109,110,,93',
'94,,,315,,,,,,,,,,,,,,,,,361,,,356,,,231,,,58,59,,,60,,,,,,,,,,,,,,',
',,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,',
'232,,,,,,,309,,,107,106,108,354,56,99,98,355,,101,109,110,,93,94,,,315',
',,,,,,,,,,,,,,,,,,,356,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,309',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,,,,,,',
',,,,,,,857,,,231,,,58,59,,,60,,,672,,669,668,667,677,670,,,,,,,,,680',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,675,62,,83,95,96,74,75,71,9',
'57,688,687,,63,64,681,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,389,62,,83,95,96',
'74,75,71,,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103',
'102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105',
',,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,,,,62,,83,95,96,74,75,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,405,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,',
',82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,286',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,286',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',629,,,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87,89,,,,,82,90,,',
',74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104',
'105,,,232,,,,,,,309,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,309,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,,,,,,,,,,,,',
',305,,,301,,,58,59,,,60,,,672,,669,668,667,677,670,,,,,,,,,680,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,,,675,62,,83,95,96,74,75,71,9,57,688',
'687,,63,64,681,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,294,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,',
',,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,389,62,,83,95,96',
'74,75,71,,57,,,,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,286,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44',
',,287,,,,,,230,,,,,91,284,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103',
'102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,286,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,629,',
'281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',232,,,,,,,45,,,107,106,108,97,56,99,98,100,286,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,91,284,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105',
',,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,',
',,,,309,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,',
',,,,,,,,,,,,,,,305,,,231,,,58,59,,,60,,,672,,669,668,667,677,670,,,',
',,,,,680,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,505,,675,62,,83,95,96',
'74,75,71,,57,688,687,,63,64,681,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,',
',,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,',
',,,225,,,231,,,58,59,,,60,,629,,281,,44,,,287,,,,,,230,,,,,91,284,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,734,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,309,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,,,315,,,,,,,,,,,,,,,,,,',
',305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56',
'99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,286,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,91,284,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,283,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,521,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,,-280,,62,,83,95,96,-280,-280,-280,,,-280,-280',
'-280,,-280,,,,,,,,,,-280,-280,-280,,,,,,,,-280,-280,,-280,-280,-280',
'-280,-280,,,,,,,,,,,,,,,,,,,,,,,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,,,-280,-280,-280,,,-280,,,-280,,,-280',
'-280,,-280,,-280,,-280,,-280,-280,,-280,-280,-280,-280,-280,,-280,,-280',
',,,,,,,,,,,,,-280,,,-280,-280,-280,-280,-583,-280,,-280,,,,-583,-583',
'-583,,,-583,-583,-583,,-583,,,,,,,,,-583,-583,-583,-583,,,,,,,,-583',
'-583,,-583,-583,-583,-583,-583,,,,,,,,,,,,,,,,,,,,,,,-583,-583,-583',
'-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,-583,,,-583,-583,-583',
',,-583,,,-583,,,-583,-583,,-583,,-583,,-583,,-583,-583,,-583,-583,-583',
'-583,-583,,-583,-583,-583,,,,,,,,,,,,,,-583,,,-583,-583,-583,-583,-582',
'-583,,-583,,,,-582,-582,-582,,,-582,-582,-582,,-582,,,,,,,,,-582,-582',
'-582,-582,,,,,,,,-582,-582,,-582,-582,-582,-582,-582,,,,,,,,,,,,,,,',
',,,,,,,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582',
'-582,,,-582,-582,-582,,,-582,,,-582,,,-582,-582,,-582,,-582,,-582,,-582',
'-582,,-582,-582,-582,-582,-582,,-582,-582,-582,672,,669,668,667,677',
'670,,,,,,,-582,,680,-582,-582,-582,-582,-296,-582,,-582,,,,-296,-296',
'-296,,,-296,-296,-296,,-296,675,,,,,,,,,-296,-296,688,687,,,,681,,,-296',
'-296,,-296,-296,-296,-296,-296,,,,,,,,,,,,,,,,,,,,,,,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296',
',,-296,,274,-296,,,-296,-296,,-296,,-296,,-296,,-296,-296,,-296,-296',
'-296,-296,-296,,-296,-414,-296,,,,,,-414,-414,-414,,,-414,-414,-414',
'-296,-414,,-296,-296,,-296,,-296,,-414,-414,-414,,,,,,,,,-414,-414,',
'-414,-414,-414,-414,-414,,,,,,,,,,,,,,,,,,,,,,,-414,-414,-414,-414,-414',
'-414,-414,-414,-414,-414,-414,-414,-414,-414,,,-414,-414,-414,,,-414',
',265,-414,,,-414,-414,,-414,,-414,,-414,,-414,-414,,-414,-414,-414,-414',
'-414,,-414,-414,-414,,,,,,,,,,,,,,-414,,-244,-414,-414,,-414,,-414,-244',
'-244,-244,,,-244,-244,-244,,-244,,,,,,,,,-244,-244,-244,,,,,,,,,-244',
'-244,,-244,-244,-244,-244,-244,,,,,,,,,,,,,,,,,,,,,,,-244,-244,-244',
'-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,,,-244,-244,-244',
',,-244,,265,-244,,,-244,-244,,-244,,-244,,-244,,-244,-244,,-244,-244',
'-244,-244,-244,,-244,-244,-244,,,,,,,,,,,,,,-244,,-244,-244,-244,,-244',
',-244,-244,-244,-244,,,-244,-244,-244,672,-244,669,668,667,677,670,',
',,-244,-244,,,,680,,,,,,-244,-244,,-244,-244,-244,-244,-244,,,,,,,,672',
'675,669,668,667,677,670,,,,685,684,688,687,,680,,681,,672,,669,668,667',
'677,670,-244,,,,,,,-244,680,,,675,265,-244,,,,220,,,685,684,688,687',
',,,681,,,675,,,,,-244,-244,,,685,684,688,687,,,,681,,,,-244,,,-244,',
',,,-244,175,186,176,199,172,192,182,181,202,203,197,180,179,174,200',
'204,205,184,173,187,191,193,185,178,,,,194,201,196,195,188,198,183,171',
'190,189,,,,,,170,177,168,169,165,166,167,126,128,,,127,,,,,,,,159,160',
',156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,',
',,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,,,164,91',
',,,,,,,,,,,,,90,175,186,176,199,172,192,182,181,202,203,197,180,179',
'174,200,204,205,184,173,187,191,193,185,178,,,,194,201,196,195,188,198',
'183,171,190,189,,,,,,170,177,168,169,165,166,167,126,128,125,,127,,',
',,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149',
',,,,,,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136',
',,164,91,,,,,,,,,,,,,,90,175,186,176,199,172,192,182,181,202,203,197',
'180,179,174,200,204,205,184,173,187,191,193,185,178,,,,194,201,196,195',
'188,198,183,171,190,189,,,,,,170,177,168,169,165,166,167,126,128,,,127',
',,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148',
'149,,,,,,,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157',
'136,,,164,91,,,,,,,,,,,,,,90,175,186,176,199,172,192,182,181,202,203',
'197,180,179,174,200,204,205,184,173,187,191,193,185,178,,,,194,201,196',
'195,188,198,183,171,190,189,,,,,,170,177,168,169,165,166,167,126,128',
',,127,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162',
'148,149,,,,,,,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135',
'157,136,,,164,91,,,,,,,,,,,,,,90,175,186,176,199,172,192,182,181,202',
'203,197,180,179,174,200,204,205,184,173,187,191,193,185,178,,,,194,201',
'196,195,188,198,183,171,190,189,,,,,,170,177,168,169,165,166,167,126',
'128,,,127,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161',
'162,148,149,,,,,,,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143',
'135,157,136,,,164,175,186,176,199,172,192,182,181,202,203,197,180,179',
'174,200,204,205,184,173,187,191,193,185,178,,,,194,201,196,372,371,373',
'370,171,190,189,,,,,,170,177,168,169,367,368,369,365,128,99,98,366,',
'101,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148',
'149,,,,,,377,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135',
'157,136,640,418,164,,641,,,,,,,,159,160,,156,138,139,140,147,144,146',
',,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154',
'163,150,151,145,143,135,157,136,476,418,164,,477,,,,,,,,159,160,,156',
'138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153',
'152,,137,158,155,154,163,150,151,145,143,135,157,136,1002,425,164,,1003',
',,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148',
'149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135',
'157,136,1000,418,164,,1001,,,,,,,,159,160,,156,138,139,140,147,144,146',
',,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154',
'163,150,151,145,143,135,157,136,608,418,164,,609,,,,,,,,159,160,,156',
'138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,',
',153,152,,137,158,155,154,163,150,151,145,143,135,157,136,610,425,164',
',611,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162',
'148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143',
'135,157,136,974,425,164,,973,,,,,,,,159,160,,156,138,139,140,147,144',
'146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155',
'154,163,150,151,145,143,135,157,136,643,425,164,,644,,,,,,,,159,160',
',156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,',
',,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,608,418',
'164,,609,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161',
'162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145',
'143,135,157,136,610,425,164,,611,,,,,,,,159,160,,156,138,139,140,147',
'144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158',
'155,154,163,150,151,145,143,135,157,136,701,418,164,,702,,,,,,,,159',
'160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265',
',,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,703',
'425,164,,704,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,',
',,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151',
'145,143,135,157,136,706,425,164,,707,,,,,,,,159,160,,156,138,139,140',
'147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137',
'158,155,154,163,150,151,145,143,135,157,136,476,418,164,,477,,,,,,,',
'159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,',
',,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136',
'414,418,164,,415,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142',
',,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150',
'151,145,143,135,157,136,421,425,164,,420,,,,,,,,159,160,,156,138,139',
'140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152',
',137,158,155,154,163,150,151,145,143,135,157,136,,672,164,669,668,667',
'677,670,,672,,669,668,667,677,670,680,,,,,,,,680,,672,,669,668,667,677',
'670,,,,,,675,,,680,,,,,675,685,684,688,687,,,,681,685,684,688,687,,',
',681,675,,672,,669,668,667,677,670,685,684,688,687,,,,681,680,,672,',
'669,668,667,677,670,672,,669,668,667,677,670,,680,,,,,675,,680,,,,,',
',685,684,688,687,,,,681,675,,,,,,,675,,685,684,688,687,,,,681,,688,687',
',,672,681,669,668,667,677,670,672,,669,668,667,677,670,672,680,669,668',
'667,677,670,672,680,669,668,667,677,670,,680,,,,,,,680,675,,,,,,,675',
',,,688,687,,675,,681,,688,687,,675,,681,,688,687,,,,681,,688,687,,,672',
'681,669,668,667,677,670,,672,,669,668,667,677,670,680,,,,,,,,680,,672',
',669,668,667,677,670,,,,,,675,,,680,,,,,675,685,684,688,687,,,,681,685',
'684,688,687,,,,681,675,658,,,,,,,,685,684,688,687,,,,681' ]
        racc_action_table = arr = ::Array.new(25046, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'421,620,340,438,438,61,701,421,421,421,360,866,347,421,421,19,421,310',
'58,350,483,385,1002,825,224,421,482,450,834,223,382,228,548,834,346',
'384,421,421,1000,421,421,421,421,421,1021,1001,893,339,640,702,793,635',
'343,338,338,483,19,343,58,450,635,482,331,450,450,331,421,421,421,421',
'421,421,421,421,421,421,421,421,421,421,224,310,421,421,421,223,421',
'385,620,641,421,227,61,421,382,382,382,438,421,1002,421,384,421,421',
'310,421,421,421,421,421,611,421,421,421,640,701,360,611,611,611,340',
'347,611,611,611,340,611,421,350,866,421,421,825,421,866,421,611,611',
'611,360,1002,548,421,346,360,1002,611,611,699,611,611,611,611,611,640',
'641,1000,640,702,793,714,1000,1021,1001,893,339,640,1021,1001,893,339',
'540,541,826,703,628,611,611,611,611,611,611,611,611,611,611,611,611',
'611,611,650,650,611,611,611,641,611,611,641,609,611,608,704,611,611',
'626,611,641,611,474,611,225,611,611,754,611,611,611,611,611,356,611',
'97,611,356,564,564,560,560,97,97,97,733,621,97,97,97,611,97,703,611',
'611,611,611,474,611,97,611,97,97,97,226,611,26,444,609,294,608,97,97',
'295,97,97,97,97,97,699,704,621,699,754,699,380,990,990,540,541,826,373',
'375,540,541,826,703,650,373,375,619,97,97,97,97,97,97,97,97,97,97,97',
'97,97,97,379,738,97,97,97,226,97,97,444,704,97,524,524,97,97,26,97,564',
'97,560,97,297,97,97,560,97,97,97,97,97,371,97,100,97,380,380,380,371',
'26,100,100,100,370,614,100,100,100,97,100,370,97,97,97,97,612,97,100',
'97,100,100,100,781,97,922,379,379,379,298,100,100,922,100,100,100,100',
'100,369,299,810,922,810,810,810,369,810,898,949,898,949,949,949,3,949',
'315,315,602,3,319,100,100,100,100,100,100,100,100,100,100,100,100,100',
'100,575,781,100,100,100,305,100,100,781,597,100,41,41,100,100,386,100',
'781,100,206,100,577,100,100,706,100,100,100,100,100,420,100,319,100',
'308,368,781,420,420,420,290,319,368,420,420,290,420,100,810,559,100',
'100,100,100,559,100,949,100,643,315,315,551,100,756,575,575,420,420',
'551,420,420,420,420,420,575,757,706,551,15,386,386,386,383,706,414,577',
'577,367,706,41,41,759,706,760,367,577,420,420,420,420,420,420,420,420',
'420,420,420,420,420,420,643,706,420,420,420,415,420,643,918,761,420',
'918,643,420,493,15,643,381,420,763,420,414,420,420,15,420,420,420,420',
'420,414,420,610,420,764,643,383,383,383,610,610,610,79,765,610,610,610',
'420,610,366,420,420,415,420,79,420,366,610,610,610,610,415,420,334,79',
'355,334,766,610,610,321,610,610,610,610,610,111,321,493,493,493,381',
'381,381,365,656,321,770,656,309,807,365,807,807,807,493,807,774,610',
'610,610,610,610,610,610,610,610,610,610,610,610,610,775,795,610,610',
'610,355,610,610,17,17,610,795,355,610,610,807,610,355,610,780,610,355',
'610,610,807,610,610,610,610,610,46,610,610,610,24,592,330,46,451,330',
'355,24,591,38,795,795,46,610,784,795,610,610,610,610,372,610,314,610',
'690,690,787,372,610,820,820,820,820,820,820,788,451,829,820,820,451',
'451,829,820,791,820,820,820,820,820,820,820,588,354,794,591,38,820,820',
'820,820,820,820,820,591,38,820,316,39,798,798,433,820,820,820,820,820',
'820,820,820,820,820,820,820,582,820,820,820,580,820,820,820,820,820',
'433,433,433,433,433,433,433,433,433,433,433,354,433,433,572,562,433',
'433,354,820,809,39,820,354,811,820,820,354,816,820,39,820,433,320,433',
'820,433,433,843,433,433,433,433,433,820,433,354,819,843,820,820,820',
'820,14,820,820,820,820,323,45,14,543,820,820,40,433,542,433,328,14,820',
'828,820,820,820,618,618,618,618,618,618,843,843,856,618,618,843,537',
'832,618,856,618,618,618,618,618,618,618,833,856,836,837,37,618,618,618',
'618,618,618,618,125,332,618,525,523,125,125,409,618,618,618,618,618',
'618,618,618,618,618,618,618,522,618,618,618,853,618,618,618,618,618',
'409,409,409,409,409,409,409,409,409,409,409,707,409,409,306,333,409',
'409,707,618,857,306,618,707,859,618,618,707,1023,618,306,618,409,22',
'409,618,409,409,335,409,409,409,409,409,618,409,873,874,878,618,618',
'618,618,304,618,618,618,618,879,881,304,882,618,618,884,409,887,514',
'889,304,618,511,618,618,618,499,499,499,499,499,499,895,896,222,499',
'499,902,906,908,499,222,499,499,499,499,499,499,499,911,222,912,913',
'914,499,499,499,499,499,499,499,568,568,499,916,568,568,568,613,499',
'499,499,499,499,499,499,499,499,499,499,499,506,499,499,499,344,499',
'499,499,499,499,613,613,613,613,613,613,613,613,613,613,613,644,613',
'613,303,504,613,613,644,499,501,303,499,644,931,499,499,644,500,499',
'303,499,613,16,613,499,613,613,345,613,613,613,613,613,499,613,349,484',
'480,499,499,499,499,302,499,499,499,499,455,454,302,951,499,499,453',
'613,13,12,452,302,499,351,499,499,499,301,301,301,301,301,301,440,973',
'358,301,301,974,975,10,301,358,301,301,301,301,301,301,301,430,358,422',
'413,980,301,301,301,301,301,301,301,981,972,301,972,972,972,982,972',
'301,301,301,301,301,301,301,301,301,301,301,301,983,301,301,301,984',
'301,301,301,301,301,747,747,747,747,747,747,747,747,747,747,747,510',
'747,747,979,985,747,747,510,301,986,979,301,412,988,301,301,510,410',
'301,979,301,747,991,747,301,747,747,992,747,747,747,747,747,301,747',
'993,994,995,301,301,301,301,928,301,301,301,301,996,999,928,7,301,301',
'406,747,404,401,1012,928,301,395,301,301,301,863,863,863,863,863,863',
'1,1022,929,863,863,649,278,651,863,929,863,863,863,863,863,863,863,654',
'929,646,660,661,863,863,863,863,863,863,863,663,854,863,854,854,854',
'664,854,863,863,863,863,863,863,863,863,863,863,863,863,665,863,863',
'863,674,863,863,863,863,863,839,839,839,839,839,839,839,839,839,839',
'839,1003,839,839,930,645,839,839,1003,863,264,930,863,1003,682,863,863',
'1003,686,863,930,863,839,689,839,863,839,839,692,839,839,839,839,839',
'863,839,697,642,700,863,863,863,863,932,863,863,863,863,1024,279,932',
'639,863,863,637,839,232,282,634,932,863,709,863,863,863,536,536,536',
'536,536,536,,,348,536,536,,,,536,348,536,536,536,536,536,536,536,,348',
',,,536,536,536,536,536,536,536,,,536,498,498,498,498,498,536,536,536',
'536,536,536,536,536,536,536,536,536,,536,536,536,,536,536,536,536,536',
'742,742,742,742,742,742,742,742,742,742,742,,742,742,,,742,742,,536',
',,536,,,536,536,,,536,,536,742,,742,536,742,742,,742,742,742,742,742',
'536,742,,,,536,536,536,536,,536,536,536,536,,,,,536,536,,742,,,,,536',
',536,536,536,539,539,539,539,539,539,,,,539,539,,,,539,,539,539,539',
'539,539,539,539,293,293,293,293,293,539,539,539,539,539,539,539,,,539',
'6,6,6,6,6,539,539,539,539,539,539,539,539,539,539,539,539,,539,539,539',
',539,539,539,539,539,428,428,428,428,428,428,428,428,428,428,428,,428',
'428,,,428,428,,539,,,539,,,539,539,,,539,,539,428,,428,539,428,428,',
'428,428,428,428,428,539,428,,,,539,539,539,539,,539,539,539,539,,,,',
'539,539,,428,,,,,539,,539,539,539,326,326,326,326,326,326,,,,326,326',
',,,326,,326,326,326,326,326,326,326,,,,,,326,326,326,326,326,326,326',
',,326,,,,,,326,326,326,326,326,326,326,326,326,326,326,326,,326,326',
'326,,326,326,326,326,326,749,749,749,749,749,749,749,749,749,749,749',
',749,749,,,749,749,,326,,,326,,,326,326,,,326,,326,749,,749,326,749',
'749,,749,749,749,749,749,326,749,,,,326,326,326,326,,326,326,326,326',
',,,,326,326,,749,,,,,326,,326,326,326,33,33,33,33,33,33,,,,33,33,,,',
'33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33',
'33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,33,33,33,648,648,648,648',
'648,648,648,648,648,648,648,,648,648,,,648,648,,33,,,33,,,33,33,,,33',
',33,648,,648,33,648,648,,648,648,648,648,648,33,648,,,,33,33,33,33,',
'33,33,33,33,,,,,33,33,,648,,,,,33,,33,33,33,296,296,296,296,296,296',
',,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296',
'296,296,296,,,296,,,,,,296,296,296,296,296,296,296,296,296,296,296,296',
',296,296,296,,296,296,296,296,296,276,276,276,276,276,276,276,276,276',
'276,276,,276,276,,,276,276,,296,,,296,,,296,296,,,296,,296,276,,276',
'296,276,276,,276,276,276,276,276,296,276,,,,296,296,296,296,,296,296',
'296,296,,,,,296,296,,276,,,,,296,,296,296,296,725,725,725,725,725,725',
',,,725,725,,,,725,,725,725,725,725,725,725,725,,,,,,725,725,725,725',
'725,725,725,,,725,,,,,,725,725,725,725,725,725,725,725,725,725,725,725',
',725,725,725,,725,725,725,725,725,473,473,473,473,473,473,473,473,473',
'473,473,,473,473,,,473,473,,725,,,725,,,725,725,,,725,,725,473,,473',
'725,473,473,,473,473,473,473,473,725,473,,,,725,725,725,725,,725,725',
'725,725,,,,,725,725,473,473,,,,,725,,725,725,725,715,715,715,715,715',
'715,,,,715,715,,,,715,,715,715,715,715,715,715,715,,,,,,715,715,715',
'715,715,715,715,,,715,,,,,,715,715,715,715,715,715,715,715,715,715,715',
'715,,715,715,715,,715,715,715,715,715,21,21,21,21,21,21,21,21,21,21',
'21,,21,21,,,21,21,,715,,,715,,,715,715,,,715,,715,21,,21,715,21,21,',
'21,21,21,21,21,715,21,,,,715,715,715,715,,715,715,715,715,,,,,715,715',
',21,,,,,715,,715,715,715,786,786,786,786,786,786,,,,786,786,,,,786,',
'786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786,,,786,',
',,,,786,786,786,786,786,786,786,786,786,786,786,786,,786,786,786,,786',
'786,786,786,786,735,735,735,735,735,735,735,735,735,735,735,,735,735',
',,735,735,,786,,,786,,,786,786,,,786,,786,735,,735,786,735,735,,735',
'735,735,735,735,786,735,,,,786,786,786,786,,786,786,786,786,,,,,786',
'786,,735,,,,,786,,786,786,786,710,710,710,710,710,710,,,,710,710,,,',
'710,,710,710,710,710,710,710,710,,,,,,710,710,710,710,710,710,710,,',
'710,,,,,,710,710,710,710,710,710,710,710,710,710,710,710,,710,710,710',
',710,710,710,710,710,842,842,842,842,842,842,842,842,842,842,842,,842',
'842,,,842,842,,710,,,710,,,710,710,,,710,,710,842,,842,710,842,842,',
'842,842,842,842,842,710,842,,,,710,710,710,710,,710,710,710,710,,,,',
'710,710,,842,,,,,710,,710,710,710,773,773,773,773,773,773,,,,773,773',
',,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773,773,773',
',,773,,,,,,773,773,773,773,773,773,773,773,773,773,773,773,,773,773',
'773,,773,773,773,773,773,740,740,740,740,740,740,740,740,740,740,740',
',740,740,,,740,740,,773,,,773,,,773,773,,,773,,773,740,,740,773,740',
'740,,740,740,740,740,740,773,740,,,,773,773,773,773,,773,773,773,773',
',,,,773,773,,740,,,,,773,,773,773,773,231,231,231,231,231,231,,,,231',
'231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231',
'231,,,231,,,,,,231,231,231,231,231,231,231,231,231,231,231,231,,231',
'231,231,,231,231,231,231,231,520,520,520,520,520,520,520,520,520,520',
'520,,520,520,,,520,520,,231,,,231,,,231,231,,,231,,231,520,,520,231',
'520,520,,520,520,520,520,520,231,520,,,,231,231,231,231,,231,231,231',
'231,,,,,231,231,,520,,,,,231,,231,231,231,0,0,0,0,0,0,,,,0,0,,,,0,,0',
'0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0',
'0,,0,0,0,0,0,745,745,745,745,745,745,745,745,745,745,745,,745,745,,',
'745,745,,0,,,0,,,0,0,,,0,,0,745,,745,0,745,745,,745,745,745,745,745',
'0,745,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,745,,,,,0,,0,0,0,960,960,960,960',
'960,960,,,,960,960,,,,960,,960,960,960,960,960,960,960,,,,,,960,960',
'960,960,960,960,960,,888,960,888,888,888,,888,960,960,960,960,960,960',
'960,960,960,960,960,960,,960,960,960,,960,960,960,960,960,675,,675,675',
'675,,675,,888,,890,,890,890,890,,890,888,,960,,,960,,,960,960,,469,960',
',960,,,,960,,675,,,,,,,960,,675,890,,960,960,960,960,,960,960,960,960',
',,469,,960,960,469,469,,469,469,,960,,960,960,960,958,958,958,958,958',
'958,,,,958,958,,,,958,,958,958,958,958,958,958,958,,,,,,958,958,958',
'958,958,958,958,,,958,,,470,,,958,958,958,958,958,958,958,958,958,958',
'958,958,,958,958,958,,958,958,958,958,958,465,465,465,465,465,465,465',
'470,,465,465,470,470,,470,470,465,465,,958,,,958,,,958,958,,,958,,958',
'465,,465,958,465,465,,465,465,465,465,465,958,465,,,,958,958,958,958',
',958,958,958,958,,,,,958,958,,987,,987,987,987,958,987,958,958,958,952',
'952,952,952,952,952,,,,952,952,,,,952,,952,952,952,952,952,952,952,',
',,,987,952,952,952,952,952,952,952,,989,952,989,989,989,,989,952,952',
'952,952,952,952,952,952,952,952,952,952,,952,952,952,,952,952,952,952',
'952,466,466,466,466,466,466,466,,989,466,466,,,,,,466,466,,952,,,952',
',,952,952,,,952,,952,466,,466,952,466,466,,466,466,466,466,466,952,466',
',,,952,952,952,952,,952,952,952,952,,,,,952,952,,1011,,1011,1011,1011',
'952,1011,952,952,952,935,935,935,935,935,935,,,,935,935,,,,935,,935',
'935,935,935,935,935,935,,,,,1011,935,935,935,935,935,935,935,,,935,',
',,,,935,935,935,935,935,935,935,935,935,935,935,935,,935,935,935,,935',
'935,935,935,935,449,449,449,449,449,449,449,449,449,449,449,,449,449',
',,449,449,,935,,,935,,,935,935,,,935,,935,449,,449,935,449,449,,449',
'449,449,449,449,935,449,,,,935,935,935,935,,935,935,935,935,,,,,935',
'935,,950,,950,950,950,935,950,935,935,935,830,830,830,830,830,830,,',
',830,830,,,,830,,830,830,830,830,830,830,830,,,,,950,830,830,830,830',
'830,830,830,,,830,,,,,,830,830,830,830,830,830,830,830,830,830,830,830',
',830,830,830,,830,830,830,830,830,459,459,459,459,459,459,459,,,459',
'459,,,,,,459,459,,830,,,830,,,830,830,,,830,,830,459,,459,830,459,459',
',459,459,459,459,459,830,459,,,,830,830,830,830,,830,830,830,830,,,',
',830,830,,,,,,,830,,830,830,830,824,824,824,824,824,824,,,,824,824,',
',,824,,824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824,824',
',,824,,,,,,824,824,824,824,824,824,824,824,824,824,824,824,,824,824',
'824,,824,824,824,824,824,472,472,472,472,472,472,472,472,,472,472,,',
',,,472,472,,824,,,824,,,824,824,,,824,,824,472,,472,824,472,472,,472',
'472,472,472,472,824,472,,,,824,824,824,824,,824,824,824,824,,,,,824',
'824,,,,,,,824,,824,824,824,624,624,624,624,624,624,,,,624,624,,,,624',
',624,624,624,624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624',
',,,,,624,624,624,624,624,624,624,624,624,624,624,624,,624,624,624,,624',
'624,624,624,624,448,448,448,448,448,448,448,448,448,448,448,,448,448',
',,448,448,,624,,,624,,,624,624,,,624,,624,448,,448,624,448,448,,448',
'448,448,448,448,624,448,,,,624,624,624,624,,624,624,624,624,,,,,624',
'624,,,,,,,624,,624,624,624,934,934,934,934,934,934,,,,934,934,,,,934',
',934,934,934,934,934,934,934,,,,,,934,934,934,934,934,934,934,,,934',
',,,,,934,934,934,934,934,934,934,934,934,934,934,934,,934,934,934,,934',
'934,934,934,934,463,,,,,,,,,,,,,,,,463,463,,934,,,934,,,934,934,,,934',
',934,463,,463,934,463,463,,463,463,,,463,934,463,,,,934,934,934,934',
',934,934,934,934,,,,,934,934,,,,,,,934,,934,934,934,623,623,623,623',
'623,623,,,,623,623,,,,623,,623,623,623,623,623,623,623,,,,,,623,623',
'623,623,623,623,623,,,623,,,,,,623,623,623,623,623,623,623,623,623,623',
'623,623,,623,623,623,,623,623,623,623,623,464,464,464,464,464,464,464',
',,464,464,,,,,,464,464,,623,,,623,,,623,623,,,623,,623,464,,464,623',
'464,464,,464,464,464,464,464,623,464,,,,623,623,623,623,,623,623,623',
'623,,,,,623,623,,,,,,,623,,623,623,623,123,123,123,123,123,123,,,,123',
'123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123',
'123,,,123,,,,,,123,123,123,123,123,123,123,123,123,123,123,123,,123',
'123,123,,123,123,123,123,123,471,471,471,471,471,471,471,,,471,471,',
',,,,471,471,,123,,,123,,,123,123,,,123,,123,471,,471,123,471,471,,471',
'471,471,471,471,123,471,,,,123,123,123,123,,123,123,123,123,,,,,123',
'123,,,,,,,123,,123,123,123,927,927,927,927,927,927,,,,927,927,,,,927',
',927,927,927,927,927,927,927,,,,,,927,927,927,927,927,927,927,,,927',
',,,,,927,927,927,927,927,927,927,927,927,927,927,927,,927,927,927,,927',
'927,927,927,927,461,,,,,,,,,,,,,,,,461,461,,927,,,927,,,927,927,,,927',
',927,461,,461,927,461,461,,461,461,,,461,927,461,,,,927,927,927,927',
',927,927,927,927,,,,,927,927,,,,,,,927,,927,927,927,561,561,561,561',
'561,561,,,,561,561,,,,561,,561,561,561,561,561,561,561,,,,,,561,561',
'561,561,561,561,561,,,561,,,,,,561,561,561,561,561,561,561,561,561,561',
'561,561,,561,561,561,,561,561,561,561,561,460,,,,,,,,,,,,,,,,460,460',
',561,,,561,,,561,561,,,561,,561,460,,460,561,460,460,,460,460,,,460',
'561,460,,,,561,561,561,561,,561,561,561,561,,,,,561,561,,,,,,,561,,561',
'561,561,208,208,208,208,208,208,,,,208,208,,,,208,,208,208,208,208,208',
'208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,208,208,208,208',
'208,208,208,208,208,208,208,208,,208,208,208,,208,208,208,208,208,462',
',,,,,,,,,,,,,,,462,462,,208,,,208,,,208,208,,,208,,208,462,,462,208',
'462,462,,462,462,,,462,208,462,,,,208,208,208,208,,208,208,208,208,',
',,,208,208,,,,,,,208,,208,208,208,821,821,821,821,821,821,,,,821,821',
',,,821,,821,821,821,821,821,821,821,,,,,,821,821,821,821,821,821,821',
',,821,,,,,,821,821,821,821,821,821,821,821,821,821,821,821,,821,821',
'821,,821,821,821,821,821,467,467,467,467,467,467,467,,,467,467,,,,,',
'467,467,,821,,,821,,,821,821,,,821,,821,467,,467,821,467,467,,467,467',
'467,467,467,821,467,,,,821,821,821,821,,821,821,821,821,,,,,821,821',
',,,210,210,210,821,210,821,821,821,210,210,,,,210,,210,210,210,210,210',
'210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210',
'210,210,210,210,210,,210,210,210,,210,210,210,210,210,468,468,468,468',
'468,468,468,,,468,468,,,,,,468,468,,210,,,210,,,210,210,,,210,,,468',
',468,210,468,468,,468,468,468,468,468,210,468,,,,210,210,210,210,,210',
'210,210,210,,,,,210,210,,,,211,211,211,210,211,210,210,210,211,211,',
',,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211',
',,211,,,,,,,211,,,211,211,211,211,211,211,211,211,211,211,211,211,,211',
'211,211,211,211,456,,,,,,,,,,,,,,,,456,456,,211,,,211,,,211,211,,,211',
',211,456,211,456,211,456,456,211,456,456,,,,211,,,,,211,211,211,211',
',211,211,211,211,,,,,211,211,,,,752,752,752,211,752,211,211,211,752',
'752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752,752',
'752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752,752,752,',
'752,752,752,752,752,458,,,,,,,,,,,,,,,,458,458,,752,,,752,,,752,752',
',,752,,,458,,,752,458,458,,458,458,,,,752,,,,,752,752,752,752,,752,752',
'752,752,,,,,752,752,,,,751,751,751,752,751,752,752,752,751,751,,,,751',
',751,751,751,751,751,751,751,,,,,,751,751,751,751,751,751,751,,,751',
',,,,,,751,,,751,751,751,751,751,751,751,751,,751,751,751,,751,751,751',
'751,751,457,,,,,,,,,,,,,,,,457,457,,751,,,751,,,751,751,,,751,,,457',
',457,751,457,457,,457,457,,,,751,,,,,751,751,751,751,,751,751,751,751',
',,,,751,751,,,,214,214,214,751,214,751,751,751,214,214,,,,214,,214,214',
'214,214,214,214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214',
',,214,214,214,214,214,214,214,214,,214,214,214,,214,214,214,214,214',
',,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,',
',,214,214,214,214,,214,214,214,214,,,,,214,214,,,,215,215,215,214,215',
'214,214,214,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215',
'215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215',
',215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215',
'215,,,215,,215,,,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215,215',
',,,,215,215,,,,216,216,216,215,216,215,215,215,216,216,,,,216,,216,216',
'216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216',
',,216,216,216,216,216,216,216,216,,216,216,216,,216,216,216,216,216',
',,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216,,',
',,216,216,216,216,,216,216,216,216,,,,,216,216,,,,217,217,217,216,217',
'216,216,216,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217',
',,,,217,217,,,,218,218,218,217,218,217,217,217,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218',
',,218,218,218,218,218,218,218,218,,218,218,218,,218,218,218,218,218',
',,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,',
',,218,218,218,218,,218,218,218,218,,,,,218,218,,,,219,219,219,218,219',
'218,218,218,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219',
',,,,219,219,219,,,750,750,750,219,750,219,219,219,750,750,,,,750,,750',
'750,750,750,750,750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,',
',750,,,750,750,750,750,750,750,750,750,,750,750,750,,750,750,750,750',
'750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750,,,,,,750,,,,,,,,,750',
',,,,750,750,750,750,,750,750,750,750,,,,,750,750,,,,736,736,736,750',
'736,750,750,750,736,736,,,,736,,736,736,736,736,736,736,736,,,,,,736',
'736,736,736,736,736,736,,,736,,,,,,,736,,,736,736,736,736,736,736,736',
'736,,736,736,736,,736,736,736,736,736,,,,,,,,,,,,,,,,,,,,736,,,736,',
',736,736,,,736,,,,,,736,,,,,,,,,736,,,,,736,736,736,736,,736,736,736',
'736,,,,,736,736,,,,734,734,734,736,734,736,736,736,734,734,,,,734,,734',
'734,734,734,734,734,734,,,,,,734,734,734,734,734,734,734,,,734,,,,,',
',734,,,734,734,734,734,734,734,734,734,,734,734,734,,734,734,734,734',
'734,,,,,,,,,,,,,,,,,,,,734,,,734,,,734,734,,,734,,,,,,734,,,,,,,,,734',
',,,,734,734,734,734,,734,734,734,734,,,,,734,734,,,,711,711,711,734',
'711,734,734,734,711,711,,,,711,,711,711,711,711,711,711,711,,,,,,711',
'711,711,711,711,711,711,,,711,,,,,,,711,,,711,711,711,711,711,711,711',
'711,,711,711,711,,711,711,711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711,',
',711,711,,,711,,,,,,711,,,,,,,,,711,,,,,711,711,711,711,,711,711,711',
'711,,,,,711,711,,,,230,230,230,711,230,711,711,711,230,230,,,,230,,230',
'230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,',
',230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,230,230',
'230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,,230',
',,,,230,230,230,230,,230,230,230,230,,,,,230,230,,,,705,705,705,230',
'705,230,230,230,705,705,,,,705,,705,705,705,705,705,705,705,,,,,,705',
'705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705,705,705,705,705',
'705,,705,705,705,,705,705,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705,',
',705,705,,,705,,,,,,705,,,,,,,,,705,,,,,705,705,705,705,,705,705,705',
'705,,,,,705,705,,,,233,233,233,705,233,705,705,705,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233',
'233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,,233',
',,,,233,233,233,233,,233,233,233,233,,,,,233,233,,,,234,234,234,233',
'234,233,233,233,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234',
'234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234',
'234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,',
',234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234,234,234',
'234,,,,,234,234,,,,235,235,235,234,235,234,234,234,235,235,,,,235,,235',
'235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,',
',235,,,235,235,235,235,235,235,235,235,,235,235,235,,235,235,235,235',
'235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,,235',
',,,,235,235,235,235,,235,235,235,235,,,,,235,235,,,,236,236,236,235',
'236,235,235,235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236',
'236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236',
'236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,',
',236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236',
'236,,,,,236,236,,,,237,237,237,236,237,236,236,236,237,237,,,,237,,237',
'237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,',
',237,,,237,237,237,237,237,237,237,237,,237,237,237,,237,237,237,237',
'237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237',
',,,,237,237,237,237,,237,237,237,237,,,,,237,237,,,,238,238,238,237',
'238,237,237,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238',
'238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238',
'238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,',
',238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238',
'238,,,,,238,238,,,,239,239,239,238,239,238,238,238,239,239,,,,239,,239',
'239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,',
',239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239,239,239',
'239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,,239',
',,,,239,239,239,239,,239,239,239,239,,,,,239,239,,,,240,240,240,239',
'240,239,239,239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240',
'240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240',
'240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,',
',240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240',
'240,,,,,240,240,,,,241,241,241,240,241,240,240,240,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241',
',,,,241,241,241,241,,241,241,241,241,,,,,241,241,,,,242,242,242,241',
'242,241,241,241,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242',
'242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242',
'242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,',
',242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242,242,,242,242,242',
'242,,,,,242,242,,,,243,243,243,242,243,242,242,242,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243',
',,,,243,243,243,243,,243,243,243,243,,,,,243,243,,,,244,244,244,243',
'244,243,243,243,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244',
'244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244',
'244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,',
',244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244',
'244,,,,,244,244,,,,245,245,245,244,245,244,244,244,245,245,,,,245,,245',
'245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,',
',245,,,245,245,245,245,245,245,245,245,,245,245,245,,245,245,245,245',
'245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245',
',,,,245,245,245,245,,245,245,245,245,,,,,245,245,,,,246,246,246,245',
'246,245,245,245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246',
'246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246',
'246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,',
',246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246',
'246,,,,,246,246,,,,247,247,247,246,247,246,246,246,247,247,,,,247,,247',
'247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,',
',247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247,247',
'247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247',
',,,,247,247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248,247',
'248,247,247,247,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248',
'248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248',
'248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,',
',248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248',
'248,,,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,,,,249,,249',
'249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,',
',249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249,249',
'249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249',
',,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250,250,250,249',
'250,249,249,249,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,',
',250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250',
'250,,,,,250,250,,,,251,251,251,250,251,250,250,250,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251',
',,,,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252,252,252,251',
'252,251,251,251,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252',
'252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252',
'252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,',
',252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252',
'252,,,,,252,252,,,,253,253,253,252,253,252,252,252,253,253,,,,253,,253',
'253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,',
',253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,253,253',
'253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253',
',,,,253,253,253,253,,253,253,253,253,,,,,253,253,,,,254,254,254,253',
'254,253,253,253,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254',
'254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254',
'254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,',
',254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254',
'254,,,,,254,254,,,,255,255,255,254,255,254,254,254,255,255,,,,255,,255',
'255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,',
',255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255,255,255',
'255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255',
',,,,255,255,255,255,,255,255,255,255,,,,,255,255,,,,256,256,256,255',
'256,255,255,255,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,',
',256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256',
'256,,,,,256,256,,,,257,257,257,256,257,256,256,256,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,,257',
',,,,257,257,257,257,,257,257,257,257,,,,,257,257,,,,258,258,258,257',
'258,257,257,257,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258',
'258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258',
'258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,',
',258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258,258,,258,258,258',
'258,,,,,258,258,,,,678,678,678,258,678,258,258,258,678,678,,,,678,,678',
'678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678,,,,,',
',678,,,678,678,678,678,678,678,678,678,,678,678,678,,678,678,678,678',
'678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,,,,,678,,,,,,,,,678',
',,,,678,678,678,678,,678,678,678,678,,,,,678,678,,,,265,265,265,678',
'265,678,678,678,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265',
'265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265',
'265,265,265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265',
',,265,265,,,265,,265,,265,,265,,,265,,,,,,265,,,,,265,265,265,265,,265',
'265,265,265,,,,,265,265,,,,266,266,266,265,266,265,265,265,266,266,',
',,266,,266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266',
',,266,,,,,,,266,,,266,266,266,266,266,266,266,266,266,266,266,266,,266',
'266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266',
',266,,,266,,,,,,266,,,,,266,266,266,266,,266,266,266,266,,,,,266,266',
',,,274,274,274,266,274,266,266,266,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274',
'274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,,,,,,,,,',
',,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,,274,,,,',
'274,274,274,274,,274,274,274,274,,,,,274,274,274,,,652,652,652,274,652',
'274,274,274,652,652,,,,652,,652,652,652,652,652,652,652,,,,,,652,652',
'652,652,652,652,652,,,652,,,,,,,652,,,652,652,652,652,652,652,652,652',
',652,652,652,,652,652,652,652,652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652',
'652,,,652,,652,,,,652,,,,,,,,,652,,,,,652,652,652,652,,652,652,652,652',
',,,,652,652,,,,647,647,647,652,647,652,652,652,647,647,,,,647,,647,647',
'647,647,647,647,647,,,,,,647,647,647,647,647,647,647,,,647,,,,,,,647',
',,647,647,647,647,647,647,647,647,,647,647,647,,647,647,,,647,,,,,,',
',,,,,,,,,,,,,647,,,647,,,647,647,,,647,,,,,,,,,,,,,,,,,,,,647,647,647',
'647,,647,647,647,647,,,,,647,647,,,,281,281,281,647,281,647,647,647',
'281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281',
'281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281',
',281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,',
',,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281,,,,,281,281',
',,,636,636,636,281,636,281,281,281,636,636,,,,636,,636,636,636,636,636',
'636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636',
'636,636,636,636,636,,636,636,636,,636,636,,,636,,,,,,,,,,,,,,,,,,,,636',
',,636,,,636,636,,,636,,,,,,,,,,,,,,,,,,,,636,636,636,636,,636,636,636',
'636,,,,,636,636,,,,283,283,283,636,283,636,636,636,283,283,,,,283,,283',
'283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,',
',283,,,283,283,283,283,283,283,283,283,,283,283,283,,283,283,283,283',
'283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283',
',,,,283,283,283,283,,283,283,283,283,,,,,283,283,,,,286,286,286,283',
'286,283,283,283,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286',
'286,286,286,286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286',
'286,,286,286,286,,286,286,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,',
',286,286,,,286,,,,,,286,,,,,,,,,286,,,,,286,286,286,286,,286,286,286',
'286,,,,,286,286,,,,287,287,287,286,287,286,286,286,287,287,,,,287,,287',
'287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,',
',287,,,287,287,287,287,287,287,287,287,,287,287,287,,287,287,287,287',
'287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,,287',
',,,,287,287,287,287,,287,287,287,287,,,,,287,287,,,,632,632,632,287',
'632,287,287,287,632,632,,,,632,,632,632,632,632,632,632,632,,,,,,632',
'632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632,632,632',
'632,,632,632,632,,632,632,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,',
',632,632,,,632,,,,,,632,,,,,,,,,632,,,,,632,632,632,632,,632,632,632',
'632,,,,,632,632,,,,,,,632,,632,632,632,292,292,292,292,292,,,,292,292',
',,,292,,292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292',
',,292,,,,,,292,292,,292,292,292,292,292,292,292,292,292,,292,292,292',
',292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292',
',,,292,,,,,,,,,292,,,,,292,292,292,292,,292,292,292,292,,,,,292,292',
',,,629,629,629,292,629,292,292,292,629,629,,,,629,,629,629,629,629,629',
'629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629',
'629,629,629,629,629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,',
',,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,,629,,,,,629,629,629',
'629,,629,629,629,629,,,,,629,629,,,,67,67,67,629,67,629,629,629,67,67',
',,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67',
',,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,',
',,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67,67,67',
'67,,,,,67,67,67,,,,,67,67,,67,67,67,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5',
'5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5',
'5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5',
'5,,5,5,5,5,,,,,5,5,,,,976,976,976,5,976,5,5,5,976,976,,,,976,,976,976',
'976,976,976,976,976,,,,,,976,976,976,976,976,976,976,,,976,,,,,,,976',
',,976,976,976,976,976,976,976,976,976,976,976,976,,976,976,976,976,976',
',,,,,,,,,,,,,,,,,,,976,,,976,,,976,976,,,976,,976,,976,,976,,,976,,',
',,,976,,,,,976,976,976,976,,976,976,976,976,,,,,976,976,,,,20,20,20',
'976,20,976,976,976,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20',
'20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20',
'20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,',
',20,20,20,20,,20,20,20,20,,,,,20,20,,,,867,867,867,20,867,20,20,20,867',
'867,,,,867,,867,867,867,867,867,867,867,,,,,,867,867,867,867,867,867',
'867,,,867,,,,,,,867,,,867,867,867,867,867,867,867,867,,867,867,867,',
'867,867,,,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,,867,,,,,,,,,',
',,,,,,,,,,867,867,867,867,,867,867,867,867,,,,,867,867,,,,855,855,855',
'867,855,867,867,867,855,855,,,,855,,855,855,855,855,855,855,855,,,,',
',855,855,855,855,855,855,855,,,855,,,,,,,855,,,855,855,855,855,855,855',
'855,855,,855,855,855,,855,855,,,855,,,,,,,,,,,,,,,,,,,,855,,,855,,,855',
'855,,,855,,,,,,,,,,,,,,,,,,,,855,855,855,855,,855,855,855,855,,,,,855',
'855,,,,29,29,29,855,29,855,855,855,29,29,,,,29,,29,29,29,29,29,29,29',
',,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29',
'29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29',
',29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30',
'30,29,30,29,29,29,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30',
'30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30',
'30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,',
',,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30',
'30,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31',
',,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,',
',,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31',
'31,31,,31,31,31,31,,,,,31,31,,,,34,34,34,31,34,31,31,31,34,34,,,,34',
',34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34',
'34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,',
',34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34',
',,,35,35,35,34,35,34,34,34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35',
'35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35',
',35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,964,,964,964,964',
'964,964,,,,,,,,,964,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,964,35',
',35,35,35,841,841,841,,841,964,964,,841,841,964,,,841,,841,841,841,841',
'841,841,841,,,,,,841,841,841,841,841,841,841,,,841,,,,,,,841,,,841,841',
'841,841,841,841,841,841,,841,841,841,,841,841,841,841,841,,,,,,,,,,',
',,,,,,,,,841,,,841,,,841,841,,,841,,,,,,841,,,,,,,,,841,,,,,841,841',
'841,841,,841,841,841,841,,,,,841,841,,,,840,840,840,841,840,841,841',
'841,840,840,,,,840,,840,840,840,840,840,840,840,,,,,,840,840,840,840',
'840,840,840,,,840,,,,,,,840,,,840,840,840,840,840,840,840,840,840,840',
'840,840,,840,840,840,840,840,,,,,,,,,,,,,,,,,,,,840,,,840,,,840,840',
',,840,,,,840,,840,,,840,,,,,,840,,,,,840,840,840,840,,840,840,840,840',
',,,,840,840,,,,823,823,823,840,823,840,840,840,823,823,,,,823,,823,823',
'823,823,823,823,823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,,823',
',,823,823,823,823,823,823,823,823,,823,823,823,,823,823,823,823,823',
',,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,823,,,,823,,,,,,,,,823',
',,,,823,823,823,823,,823,823,823,823,,,,,823,823,,,,42,42,42,823,42',
'823,823,823,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42',
'42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42',
',,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42',
'42,42,,42,42,42,42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43',
',43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43',
'43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,',
'43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,',
'43,43,,,,44,44,44,43,44,43,43,43,44,44,,,,44,,44,44,44,44,44,44,44,',
',,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44',
'44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44',
',,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,818,818,818,44',
'818,44,44,44,818,818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818',
'818,818,818,818,818,,,818,,,,,,,818,,,818,818,818,818,818,818,818,818',
',818,818,818,,818,818,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818',
'818,,,818,,,,,,818,,,,,,,,,818,,,,,818,818,818,818,,818,818,818,818',
',,,,818,818,,,,59,59,59,818,59,818,818,818,59,59,,,,59,,59,59,59,59',
'59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59',
'59,59,59,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59',
',,59,,59,,,,59,,,59,,,,,,59,,,,,59,59,59,59,,59,59,59,59,,,,,59,59,',
',,60,60,60,59,60,59,59,59,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60',
'60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,60,60',
',60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60',
',,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,805,805,805,60,805',
'60,60,60,805,805,,,,805,,805,805,805,805,805,805,805,,,,,,805,805,805',
'805,805,805,805,,,805,,,,,,,805,,,805,805,805,805,805,805,805,805,,805',
'805,805,,805,805,805,805,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805,805',
',,805,,,,,,805,,,,,,,,,805,,,,,805,805,805,805,,805,805,805,805,,,,',
'805,805,,,,63,63,63,805,63,805,805,805,63,63,,,,63,,63,63,63,63,63,63',
'63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63',
',63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,',
',,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64',
'63,64,63,63,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64',
'64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64',
'64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64',
'64,64,64,,64,64,64,64,,,,,64,64,,,,377,377,377,64,377,64,64,64,377,377',
',,,377,,377,377,377,377,377,377,377,,,,,,377,377,377,377,377,377,377',
',,377,,,,,,,377,,,377,377,377,377,377,377,377,377,,377,377,377,,377',
'377,377,377,377,,,,,,,,,,,,,,,,,,,,377,,,377,,,377,377,,,377,,,,,,377',
',,,,,,,,377,,,,,377,377,377,377,,377,377,377,377,,,,,377,377,,,,68,68',
'68,377,68,377,377,377,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68',
'68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68',
',,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68,,,,,,,,,,,,,,,,,,68',
'68,68,68,,68,68,68,68,,,,,68,68,,,,69,69,69,68,69,68,68,68,69,69,,,',
'69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69',
'69,69,69,69,69,69,69,,69,69,69,,69,69,,,69,,,,,,,,,,,,,,,,,69,,,69,',
',69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69',
'69,,,,70,70,70,69,70,69,69,69,70,70,,,,70,,70,70,70,70,70,70,70,,,,',
',70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70',
'70,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,',
',,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,,,,767,767,767,70,767,70,70',
'70,767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767,767,767',
'767,767,767,,,767,,,,,,,767,,,767,767,767,767,767,767,767,767,,767,767',
'767,,767,767,,,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,,767,,,968',
',968,968,968,968,968,,,,,,,,,968,,767,767,767,767,,767,767,767,767,',
',,,767,767,,,,,,968,767,,767,767,767,113,113,113,113,113,968,968,,113',
'113,968,,,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113,113',
'113,113,,,113,,,,,,113,113,113,113,113,113,113,113,113,113,113,113,',
'113,113,113,,113,113,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113',
'113,,,113,,113,,,,113,,,,,,,,,113,,,,,113,113,113,113,,113,113,113,113',
',,,,113,113,,,,,,113,113,,113,113,113,118,118,118,,118,,,,118,118,,',
',118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118,118,118,',
',118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118,118,118,,118,118',
'118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118,,',
',,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,,118,118,,,,119,119',
'119,118,119,118,118,118,119,119,,,,119,,119,119,119,119,119,119,119',
',,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119',
'119,119,119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119',
',,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119,119,,119',
'119,119,119,,,,,119,119,,,,120,120,120,119,120,119,119,119,120,120,',
',,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120',
',,120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120,,120',
'120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120',
',,,,,,,,120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,121',
'121,121,120,121,120,120,120,121,121,,,,121,,121,121,121,121,121,121',
'121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121',
'121,121,121,121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,,,,,',
',121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,,121,,,,,121,121,121,121',
',121,121,121,121,,,,,121,121,,,,,,,121,,121,121,121,122,122,122,122',
'122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122',
'122,122,122,122,,,122,,,,,,122,122,,122,122,122,122,122,122,122,122',
'122,,122,122,122,,122,122,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,',
',122,122,,,122,,122,,,,122,,,,,,,,,122,,,,,122,122,122,122,,122,122',
'122,122,,,,,122,122,,,,755,755,755,122,755,122,122,122,755,755,,,,755',
',755,755,755,755,755,755,755,,,,,,755,755,755,755,755,755,755,,,755',
',,,,,,755,,,755,755,755,755,755,755,755,755,,755,755,755,,755,755,755',
'755,755,,,,,,,,,,,,,,,,,,,,755,,,755,,,755,755,,,755,,,,,,755,,,,,,',
',,755,,,,,755,755,755,755,,755,755,755,755,,,,,755,755,,,,753,753,753',
'755,753,755,755,755,753,753,,,,753,,753,753,753,753,753,753,753,,,,',
',753,753,753,753,753,753,753,,,753,,,,,,,753,,,753,753,753,753,753,753',
'753,753,,753,753,753,,753,753,753,753,753,,,,,,,,,,,,,,,,,,,,753,,,753',
',,753,753,,,753,,,,,,753,,,,,,,,,753,,,,,753,753,753,753,,753,753,753',
'753,,,,,753,753,,,,209,209,209,753,209,753,753,753,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
',209,,,209,209,209,209,209,209,209,209,,209,209,209,,209,209,209,209',
'209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,209,,,,209,,,,,,,',
',209,,,,,209,209,209,209,,209,209,209,209,,,,,209,209,,,,327,327,327',
'209,327,209,209,209,327,327,,,,327,,327,327,327,327,327,327,327,,,,',
',327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327',
'327,327,,327,327,327,,327,327,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327',
',,327,327,,,327,,,,,,327,,,,,,,,,327,,,,,327,327,327,327,,327,327,327',
'327,,,,,327,327,,,,530,530,530,327,530,327,327,327,530,530,,,,530,,530',
'530,530,530,530,530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,',
',530,,,530,530,530,530,530,530,530,530,530,530,530,530,,530,530,530',
'530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,,,,,530,,,530',
',,,,,530,,,,,530,530,530,530,,530,530,530,530,,,,,530,530,,,,527,527',
'527,530,527,530,530,530,527,527,,,,527,,527,527,527,527,527,527,527',
',,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527,527',
'527,527,527,527,527,527,527,,527,527,527,527,527,,,,,,,,,,,,,,,,,,,',
'527,,,527,,,527,527,,,527,,527,,,,527,,,527,,,,,,527,,,,,527,527,527',
'527,,527,527,527,527,,,,,527,527,,,,521,521,521,527,521,527,527,527',
'521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521,521',
'521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521,521,521',
',521,521,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,',
',,,521,,,,,,,,,521,,,,,521,521,521,521,,521,521,521,521,,,,,521,521',
',,,517,517,517,521,517,521,521,521,517,517,,,,517,,517,517,517,517,517',
'517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517',
'517,517,517,517,517,,517,517,517,,517,517,517,517,517,,,,,,,,,,,,,,',
',,,,,517,,,517,,,517,517,,,517,,,,,,517,,,,,,,,,517,,,,,517,517,517',
'517,,517,517,517,517,,,,,517,517,,,,516,516,516,517,516,517,517,517',
'516,516,,,,516,,516,516,516,516,516,516,516,,,,,,516,516,516,516,516',
'516,516,,,516,,,,,,,516,,,516,516,516,516,516,516,516,516,,516,516,516',
',516,516,516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,,',
',,,516,,,,,,,,,516,,,,,516,516,516,516,,516,516,516,516,,,,,516,516',
',,,513,513,513,516,513,516,516,516,513,513,,,,513,,513,513,513,513,513',
'513,513,,,,,,513,513,513,513,513,513,513,,,513,,,,,,,513,,,513,513,513',
'513,513,513,513,513,,513,513,513,,513,513,,,513,,,,,,,,,,,,,,,,,,,,513',
',,513,,,513,513,,,513,,,,,,,,,,,,,,,,,,,,513,513,513,513,,513,513,513',
'513,,,,,513,513,,,,341,341,341,513,341,513,513,513,341,341,,,,341,,341',
'341,341,341,341,341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,',
',341,,,341,341,341,341,341,341,341,341,,341,341,341,,341,341,341,341',
'341,,,,,,,,,,,,,,,,,,,,341,,,341,,,341,341,,,341,,,,,,341,,,,,,,,,341',
',,,,341,341,341,341,,341,341,341,341,,,,,341,341,,,,342,342,342,341',
'342,341,341,341,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342',
'342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342',
'342,,342,342,342,,342,342,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,',
',342,342,,,342,,,,,,342,,,,,,,,,342,,,,,342,342,342,342,,342,342,342',
'342,,,,,342,342,,,,507,507,507,342,507,342,342,342,507,507,,,,507,,507',
'507,507,507,507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,',
',507,,,507,507,507,507,507,507,507,507,507,507,507,507,,507,507,507',
'507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507,,507,,507,,507',
',,507,,,,,,507,,,,,507,507,507,507,,507,507,507,507,,,,,507,507,,,,505',
'505,505,507,505,507,507,507,505,505,,,,505,,505,505,505,505,505,505',
'505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505,505,505',
'505,505,505,505,,505,505,505,,505,505,,,505,,,,,,,,,,,,,,,,,,,,505,',
',505,,,505,505,,,505,,,966,,966,966,966,966,966,,,,,,,,,966,,505,505',
'505,505,,505,505,505,505,,,,,505,505,,,,,,966,505,,505,505,505,497,497',
'497,497,497,966,966,,497,497,966,,,497,,497,497,497,497,497,497,497',
',,,,,497,497,497,497,497,497,497,,,497,,,,,,497,497,497,497,497,497',
'497,497,497,497,497,497,,497,497,497,,497,497,497,497,497,,,,,,,,,,',
',,,,,,,,,497,,,497,,,497,497,,,497,,497,,,,497,,,,,,,,,497,,,,,497,497',
'497,497,,497,497,497,497,,,,,497,497,,,,,,497,497,,497,497,497,491,491',
'491,,491,,,,491,491,,,,491,,491,491,491,491,491,491,491,,,,,,491,491',
'491,491,491,491,491,,,491,,,,,,,491,,,491,491,491,491,491,491,491,491',
',491,491,491,,491,491,491,491,491,,,,,,,,,,,,,,,,,,,,491,,,491,,,491',
'491,,,491,,,,,,491,,,,,,,,,491,,,,,491,491,491,491,,491,491,491,491',
',,,,491,491,,,,489,489,489,491,489,491,491,491,489,489,,,,489,,489,489',
'489,489,489,489,489,,,,,,489,489,489,489,489,489,489,,,489,,,,,,,489',
',,489,489,489,489,489,489,489,489,489,489,489,489,,489,489,489,489,489',
',,,,,,,,,,,,,,,,,,,489,,,489,,,489,489,,,489,,,,489,,489,,,489,,,,,',
'489,,,,,489,489,489,489,,489,489,489,489,,,,,489,489,,,,487,487,487',
'489,487,489,489,489,487,487,,,,487,,487,487,487,487,487,487,487,,,,',
',487,487,487,487,487,487,487,,,487,,,,,,,487,,,487,487,487,487,487,487',
'487,487,487,487,487,487,,487,487,487,487,487,,,,,,,,,,,,,,,,,,,,487',
',,487,,,487,487,,,487,,487,,487,,487,,,487,,,,,,487,,,,,487,487,487',
'487,,487,487,487,487,,,,,487,487,,,,447,447,447,487,447,487,487,487',
'447,447,,,,447,,447,447,447,447,447,447,447,,,,,,447,447,447,447,447',
'447,447,,,447,,,,,,,447,,,447,447,447,447,447,447,447,447,,447,447,447',
',447,447,447,447,447,,,,,,,,,,,,,,,,,,,,447,,,447,,,447,447,,,447,,',
',,,447,,,,,,,,,447,,,,,447,447,447,447,,447,447,447,447,,,,,447,447',
',,,446,446,446,447,446,447,447,447,446,446,,,,446,,446,446,446,446,446',
'446,446,,,,,,446,446,446,446,446,446,446,,,446,,,,,,,446,,,446,446,446',
'446,446,446,446,446,,446,446,446,,446,446,446,446,446,,,,,,,,,,,,,,',
',,,,,446,,,446,,,446,446,,,446,,,,,,446,,,,,,,,,446,,,,,446,446,446',
'446,,446,446,446,446,,,,,446,446,,,,445,445,445,446,445,446,446,446',
'445,445,,,,445,,445,445,445,445,445,445,445,,,,,,445,445,445,445,445',
'445,445,,,445,,,,,,,445,,,445,445,445,445,445,445,445,445,,445,445,445',
',445,445,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445,,',
',,,445,,,,,,,,,445,,,,,445,445,445,445,,445,445,445,445,,,,,445,445',
',,,443,443,443,445,443,445,445,445,443,443,,,,443,,443,443,443,443,443',
'443,443,,,,,,443,443,443,443,443,443,443,,,443,,,,,,,443,,,443,443,443',
'443,443,443,443,443,443,443,443,443,,443,443,443,443,443,,,,,,,,,,,',
',,,,,,,,443,,,443,,,443,443,,,443,,443,,443,,443,,,443,,,,,,443,,,,',
'443,443,443,443,,443,443,443,443,,,,,443,443,,,,361,361,361,443,361',
'443,443,443,361,361,,,,361,,361,361,361,361,361,361,361,,,,,,361,361',
'361,361,361,361,361,,,361,,,,,,,361,,,361,361,361,361,361,361,361,361',
',361,361,361,,361,361,361,361,361,,,,,,,,,,,,,,,,,,,,361,,,361,,,361',
'361,,,361,,,,,,361,,,,,,,,,361,,,,,361,361,361,361,,361,361,361,361',
',,,,361,361,,,,405,405,405,361,405,361,361,361,405,405,,,,405,,405,405',
'405,405,405,405,405,,,,,,405,405,405,405,405,405,405,,,405,,,,,,,405',
',,405,405,405,405,405,405,405,405,,405,405,405,,405,405,405,405,405',
',,,,,,,,,,,,,,,,,,,405,,,405,,,405,405,,,405,,,,,,405,,,,,,,,,405,,',
',,405,405,405,405,,405,405,405,405,,,,,405,405,,,,300,300,300,405,300',
'405,405,405,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300',
'300,300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300',
',300,300,300,,300,300,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,',
',300,,,850,,850,850,850,850,850,,,,,,,,,850,,300,300,300,300,,300,300',
'300,300,,,,,300,300,,,,300,,850,300,,300,300,300,605,605,605,,605,850',
'850,,605,605,850,,,605,,605,605,605,605,605,605,605,,,,,,605,605,605',
'605,605,605,605,,,605,,,,,,,605,,,605,605,605,605,605,605,605,605,,605',
'605,605,,605,605,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605',
',,605,,,,,,605,,,,,,,,,605,,,,,605,605,605,605,,605,605,605,605,,,,',
'605,605,,,,604,604,604,605,604,605,605,605,604,604,,,,604,,604,604,604',
'604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604',
'604,604,604,604,604,604,604,,604,604,604,,604,604,604,604,604,,,,,,',
',,,,,,,,,,,,,604,,,604,,,604,604,,,604,,,,,,604,,,,,,,,,604,,,,,604',
'604,604,604,,604,604,604,604,,,,,604,604,,,,601,601,601,604,601,604',
'604,604,601,601,,,,601,,601,601,601,601,601,601,601,,,,,,601,601,601',
'601,601,601,601,,,601,,,,,,,601,,,601,601,601,601,601,601,601,601,,601',
'601,601,,601,601,601,601,601,,,,,,,,,,,,,,,,,,,,601,,,601,,,601,601',
',,601,,,,,,601,,,,,,,,,601,,,,,601,601,601,601,,601,601,601,601,,,,',
'601,601,,,,600,600,600,601,600,601,601,601,600,600,,,,600,,600,600,600',
'600,600,600,600,,,,,,600,600,600,600,600,600,600,,,600,,,,,,,600,,,600',
'600,600,600,600,600,600,600,,600,600,600,,600,600,600,600,600,,,,,,',
',,,,,,,,,,,,,600,,,600,,,600,600,,,600,,,,,,600,,,,,,,,,600,,,,,600',
'600,600,600,,600,600,600,600,,,,,600,600,,,,596,596,596,600,596,600',
'600,600,596,596,,,,596,,596,596,596,596,596,596,596,,,,,,596,596,596',
'596,596,596,596,,,596,,,,,,,596,,,596,596,596,596,596,596,596,596,,596',
'596,596,,596,596,596,596,596,,,,,,,,,,,,,,,,,,,,596,,,596,,,596,596',
',,596,,,,,,596,,,,,,,,,596,,,,,596,596,596,596,,596,596,596,596,,,,',
'596,596,,,,595,595,595,596,595,596,596,596,595,595,,,,595,,595,595,595',
'595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595,,,,,,,595,,,595',
'595,595,595,595,595,595,595,,595,595,595,,595,595,595,595,595,,,,,,',
',,,,,,,,,,,,,595,,,595,,,595,595,,,595,,,,,,595,,,,,,,,,595,,,,,595',
'595,595,595,,595,595,595,595,,,,,595,595,,,,594,594,594,595,594,595',
'595,595,594,594,,,,594,,594,594,594,594,594,594,594,,,,,,594,594,594',
'594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594,594,594,594',
'594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594,,,594',
'594,,,594,,,,594,,594,,,594,,,,,,594,,,,,594,594,594,594,,594,594,594',
'594,,,,,594,594,,,,593,593,593,594,593,594,594,594,593,593,,,,593,,593',
'593,593,593,593,593,593,,,,,,593,593,593,593,593,593,593,,,593,,,,,',
',593,,,593,593,593,593,593,593,593,593,593,593,593,593,,593,593,593',
'593,593,,,,,,,,,,,,,,,,,,,,593,,,593,,,593,593,,,593,,593,,593,,593',
',,593,,,,,,593,,,,,593,593,593,593,,593,593,593,593,,,,,593,593,,,,590',
'590,590,593,590,593,593,593,590,590,,,,590,,590,590,590,590,590,590',
'590,,,,,,590,590,590,590,590,590,590,,,590,,,,,,,590,,,590,590,590,590',
'590,590,590,590,,590,590,590,,590,590,590,590,590,,,,,,,,,,,,,,,,,,',
',590,,,590,,,590,590,,,590,,,,,,590,,,,,,,,,590,,,,,590,590,590,590',
',590,590,590,590,,,,,590,590,,,,589,589,589,590,589,590,590,590,589',
'589,,,,589,,589,589,589,589,589,589,589,,,,,,589,589,589,589,589,589',
'589,,,589,,,,,,,589,,,589,589,589,589,589,589,589,589,,589,589,589,',
'589,589,589,589,589,,,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,589',
',,,589,,,,,,,,,589,,,,,589,589,589,589,,589,589,589,589,,,,,589,589',
',,,317,317,317,589,317,589,589,589,317,317,,,,317,,317,317,317,317,317',
'317,317,,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317',
'317,317,317,317,317,,317,317,317,,317,317,,,317,,,,,,,,,,,,,,,,,,,,317',
',,317,,,317,317,,,317,,,,,,,,,,,,,,,,,,,,317,317,317,317,,317,317,317',
'317,,,,,317,317,,,,555,555,555,317,555,317,317,317,555,555,,,,555,,555',
'555,555,555,555,555,555,,,,,,555,555,555,555,555,555,555,,,555,,,,,',
',555,,,555,555,555,555,555,555,555,555,555,555,555,555,,555,555,555',
'555,555,,,,,,,,,,,,,,,,,,,,555,,,555,,,555,555,,,555,,555,,555,,555',
',,555,,,,,,555,,,,,555,555,555,555,,555,555,555,555,,,,,555,555,,,,545',
'545,545,555,545,555,555,555,545,545,,,,545,,545,545,545,545,545,545',
'545,,,,,,545,545,545,545,545,545,545,,,545,,,,,,,545,,,545,545,545,545',
'545,545,545,545,545,545,545,545,,545,545,545,545,545,,,,,,,,,,,,,,,',
',,,,545,,,545,,,545,545,,,545,,545,,545,,545,,,545,,,,,,545,,,,,545',
'545,545,545,,545,545,545,545,,,,,545,545,,,,544,544,544,545,544,545',
'545,545,544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544,544,544',
'544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544,544,,544',
'544,544,,544,544,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544',
',,544,,544,,,,544,,,,,,,,,544,,,,,544,544,544,544,,544,544,544,544,',
',,,544,544,,,,325,325,325,544,325,544,544,544,325,325,,,,325,,325,325',
'325,325,325,325,325,,,,,,325,325,325,325,325,325,325,,,325,,,,,,,325',
',,325,325,325,325,325,325,325,325,,325,325,325,,325,325,325,325,325',
',,,,,,,,,,,,,,,,,,,325,,,325,325,,325,325,,,325,,,,,,325,,,,,,,,,325',
',,,,325,325,325,325,,325,325,325,325,,,,,325,325,,,,,56,,325,,325,325',
'325,56,56,56,,,56,56,56,,56,,,,,,,,,,56,56,56,,,,,,,,56,56,,56,56,56',
'56,56,,,,,,,,,,,,,,,,,,,,,,,56,56,56,56,56,56,56,56,56,56,56,56,56,56',
',,56,56,56,,,56,,,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,,56',
',56,,,,,,,,,,,,,,56,,,56,56,56,56,426,56,,56,,,,426,426,426,,,426,426',
'426,,426,,,,,,,,,426,426,426,426,,,,,,,,426,426,,426,426,426,426,426',
',,,,,,,,,,,,,,,,,,,,,,426,426,426,426,426,426,426,426,426,426,426,426',
'426,426,,,426,426,426,,,426,,,426,,,426,426,,426,,426,,426,,426,426',
',426,426,426,426,426,,426,426,426,,,,,,,,,,,,,,426,,,426,426,426,426',
'425,426,,426,,,,425,425,425,,,425,425,425,,425,,,,,,,,,425,425,425,425',
',,,,,,,425,425,,425,425,425,425,425,,,,,,,,,,,,,,,,,,,,,,,425,425,425',
'425,425,425,425,425,425,425,425,425,425,425,,,425,425,425,,,425,,,425',
',,425,425,,425,,425,,425,,425,425,,425,425,425,425,425,,425,425,425',
'1016,,1016,1016,1016,1016,1016,,,,,,,425,,1016,425,425,425,425,28,425',
',425,,,,28,28,28,,,28,28,28,,28,1016,,,,,,,,,28,28,1016,1016,,,,1016',
',,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28',
',28,28,28,28,28,,28,27,28,,,,,,27,27,27,,,27,27,27,28,27,,28,28,,28',
',28,,27,27,27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27',
'27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27',
',27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27,,,,,,,,,,,,,,27,,416,27',
'27,,27,,27,416,416,416,,,416,416,416,,416,,,,,,,,,416,416,416,,,,,,',
',,416,416,,416,416,416,416,416,,,,,,,,,,,,,,,,,,,,,,,416,416,416,416',
'416,416,416,416,416,416,416,416,416,416,,,416,416,416,,,416,,416,416',
',,416,416,,416,,416,,416,,416,416,,416,416,416,416,416,,416,416,416',
',,,,,,,,,,,,,416,,475,416,416,,416,,416,475,475,475,,,475,475,475,616',
'475,616,616,616,616,616,,,,475,475,,,,616,,,,,,475,475,,475,475,475',
'475,475,,,,,,,,658,616,658,658,658,658,658,,,,616,616,616,616,,658,',
'616,,938,,938,938,938,938,938,475,,,,,,,475,938,,,658,475,475,,,,616',
',,658,658,658,658,,,,658,,,938,,,,,475,475,,,938,938,938,938,,,,938',
',,,475,,,475,,,,,475,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
',,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9',
'9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,',
',9,9,,,,,,,,,,,,,,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
',,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8',
'8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,',
',8,8,,,,,,,,,,,,,,8,396,396,396,396,396,396,396,396,396,396,396,396',
'396,396,396,396,396,396,396,396,396,396,396,396,,,,396,396,396,396,396',
'396,396,396,396,396,,,,,,396,396,396,396,396,396,396,396,396,,,396,',
',,,,,,396,396,,396,396,396,396,396,396,396,,,396,396,,,,396,396,396',
'396,,,,,,,,,,,,,,396,396,,396,396,396,396,396,396,396,396,396,396,396',
'396,,,396,396,,,,,,,,,,,,,,396,586,586,586,586,586,586,586,586,586,586',
'586,586,586,586,586,586,586,586,586,586,586,586,586,586,,,,586,586,586',
'586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586,586,586,586',
',,586,,,,,,,,586,586,,586,586,586,586,586,586,586,,,586,586,,,,586,586',
'586,586,,,,,,,,,,,,,,586,586,,586,586,586,586,586,586,586,586,586,586',
'586,586,,,586,586,,,,,,,,,,,,,,586,718,718,718,718,718,718,718,718,718',
'718,718,718,718,718,718,718,718,718,718,718,718,718,718,718,,,,718,718',
'718,718,718,718,718,718,718,718,,,,,,718,718,718,718,718,718,718,718',
'718,,,718,,,,,,,,718,718,,718,718,718,718,718,718,718,,,718,718,,,,718',
'718,718,718,,,,,,,,,,,,,,718,718,,718,718,718,718,718,718,718,718,718',
'718,718,718,,,718,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71',
'71,71,71,71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71',
'71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71',
'71,71,508,508,71,,508,,,,,,,,508,508,,508,508,508,508,508,508,508,,',
'508,508,,,,508,508,508,508,,,,,,508,,,,,,,,508,508,,508,508,508,508',
'508,508,508,508,508,508,508,508,261,261,508,,261,,,,,,,,261,261,,261',
'261,261,261,261,261,261,,,261,261,,,,261,261,261,261,,,,,,,,,,,,,,261',
'261,,261,261,261,261,261,261,261,261,261,261,261,261,978,978,261,,978',
',,,,,,,978,978,,978,978,978,978,978,978,978,,,978,978,,,,978,978,978',
'978,,,,,,978,,,,,,,,978,978,,978,978,978,978,978,978,978,978,978,978',
'978,978,977,977,978,,977,,,,,,,,977,977,,977,977,977,977,977,977,977',
',,977,977,,,,977,977,977,977,,,,,,977,,,,,,,,977,977,,977,977,977,977',
'977,977,977,977,977,977,977,977,441,441,977,,441,,,,,,,,441,441,,441',
'441,441,441,441,441,441,,,441,441,,,,441,441,441,441,,,,,,441,,,,,,',
',441,441,,441,441,441,441,441,441,441,441,441,441,441,441,442,442,441',
',442,,,,,,,,442,442,,442,442,442,442,442,442,442,,,442,442,,,,442,442',
'442,442,,,,,,442,,,,,,,,442,442,,442,442,442,442,442,442,442,442,442',
'442,442,442,923,923,442,,923,,,,,,,,923,923,,923,923,923,923,923,923',
'923,,,923,923,,,,923,923,923,923,,,,,,923,,,,,,,,923,923,,923,923,923',
'923,923,923,923,923,923,923,923,923,509,509,923,,509,,,,,,,,509,509',
',509,509,509,509,509,509,509,,,509,509,,,,509,509,509,509,,,,,,509,',
',,,,,,509,509,,509,509,509,509,509,509,509,509,509,509,509,509,518,518',
'509,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,,,518,518,,,,518',
'518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,518',
'518,518,518,518,519,519,518,,519,,,,,,,,519,519,,519,519,519,519,519',
'519,519,,,519,519,,,,519,519,519,519,,,,,,519,,,,,,,,519,519,,519,519',
'519,519,519,519,519,519,519,519,519,519,546,546,519,,546,,,,,,,,546',
'546,,546,546,546,546,546,546,546,,,546,546,,,,546,546,546,546,,,,,,546',
',,,,,,,546,546,,546,546,546,546,546,546,546,546,546,546,546,546,547',
'547,546,,547,,,,,,,,547,547,,547,547,547,547,547,547,547,,,547,547,',
',,547,547,547,547,,,,,,547,,,,,,,,547,547,,547,547,547,547,547,547,547',
'547,547,547,547,547,553,553,547,,553,,,,,,,,553,553,,553,553,553,553',
'553,553,553,,,553,553,,,,553,553,553,553,,,,,,553,,,,,,,,553,553,,553',
'553,553,553,553,553,553,553,553,553,553,553,554,554,553,,554,,,,,,,',
'554,554,,554,554,554,554,554,554,554,,,554,554,,,,554,554,554,554,,',
',,,554,,,,,,,,554,554,,554,554,554,554,554,554,554,554,554,554,554,554',
'212,212,554,,212,,,,,,,,212,212,,212,212,212,212,212,212,212,,,212,212',
',,,212,212,212,212,,,,,,212,,,,,,,,212,212,,212,212,212,212,212,212',
'212,212,212,212,212,212,213,213,212,,213,,,,,,,,213,213,,213,213,213',
'213,213,213,213,,,213,213,,,,213,213,213,213,,,,,,213,,,,,,,,213,213',
',213,213,213,213,213,213,213,213,213,213,213,213,,716,213,716,716,716',
'716,716,,799,,799,799,799,799,799,716,,,,,,,,799,,801,,801,801,801,801',
'801,,,,,,716,,,801,,,,,799,716,716,716,716,,,,716,799,799,799,799,,',
',799,801,,848,,848,848,848,848,848,801,801,801,801,,,,801,848,,846,',
'846,846,846,846,846,940,,940,940,940,940,940,,846,,,,,848,,940,,,,,',
',848,848,848,848,,,,848,846,,,,,,,940,,846,846,846,846,,,,846,,940,940',
',,942,940,942,942,942,942,942,944,,944,944,944,944,944,1006,942,1006',
'1006,1006,1006,1006,803,944,803,803,803,803,803,,1006,,,,,,,803,942',
',,,,,,944,,,,942,942,,1006,,942,,944,944,,803,,944,,1006,1006,,,,1006',
',803,803,,,962,803,962,962,962,962,962,,717,,717,717,717,717,717,962',
',,,,,,,717,,535,,535,535,535,535,535,,,,,,962,,,535,,,,,717,962,962',
'962,962,,,,962,717,717,717,717,,,,717,535,535,,,,,,,,535,535,535,535',
',,,535' ]
        racc_action_check = arr = ::Array.new(25046, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2938,  1265,   nil,   263,   nil, 12512,  1538,  1133, 23168, 23040,
  1020,   nil,   969,  1024,   740,   406,   935,   608,   nil,   -74,
 12774,  2238,   910,   nil,   593,   nil,   228, 22648, 22536, 13167,
 13298, 13429,   nil,  1818, 13560, 13691,   nil,   733,   593,   652,
   773,   364, 14223, 14354, 14485,   693,   589,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 22134,   nil,   -72, 14747,
 14878,   -20,   nil, 15140, 15271,   nil,   nil, 12373, 15533, 15664,
 15795, 23665,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   450,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   222,   nil,   nil,
   334,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   600,   nil, 16065,   nil,   nil,   nil,   nil, 16204, 16335,
 16466, 16597, 16736,  4338,   nil,   821,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   300,   nil,  4758, 17129,
  5029,  5160, 24580, 24641,  5553,  5684,  5815,  5946,  6077,  6208,
   nil,   nil,   910,   -57,   -62,   156,   165,   -51,   -55,   nil,
  6863,  2798,  1301,  7125,  7256,  7387,  7518,  7649,  7780,  7911,
  8042,  8173,  8304,  8435,  8566,  8697,  8828,  8959,  9090,  9221,
  9352,  9483,  9614,  9745,  9876, 10007, 10138, 10269, 10400,   nil,
   nil, 23787,   nil,   nil,  1248, 10662, 10793,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 10924,   nil,  1958,   nil,  1138,  1250,
   nil, 11317,  1304, 11579,   nil,   nil, 11710, 11841,   nil,   nil,
   324,   nil, 12111,  1523,   144,   118,  1958,   193,   279,   246,
 20027,  1118,  1020,   981,   880,   364,   841,   nil,   359,   483,
    -8,   nil,   nil,   nil,   603,   334,   604, 21476,   nil,   313,
   731,   517,   nil,   756,   nil, 22000,  1678, 17260,   702,   nil,
   542,   -68,   781,   806,   457,   855,   nil,   nil,    17,    35,
   -10, 18177, 18308,   -78,  1022,   947,    10,   -12,  1330,  1035,
    -5,  1091,   nil,   nil,   698,   564,   169,   nil,  1050,   nil,
     9, 19765,   nil,   nil,   nil,   531,   496,   424,   372,   301,
   267,   255,   613,   201,   nil,   202,   nil, 15402,   nil,   242,
   212,   481,   -30,   436,   -25,   -39,   369,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1142, 23296,   nil,   nil,   nil,
   nil,  1138,   nil,   nil,  1117, 19896,  1115,   nil,   nil,   838,
  1082,   nil,  1074,  1012,   412,   443, 22777,   nil,   nil,   nil,
   444,     0,  1055,   nil,   nil, 22402, 22268,   nil,  1538,   nil,
  1000,   nil,   nil,   698,   nil,   nil,   nil,   nil,   -33,   nil,
  1035, 23970, 24031, 19634,   168, 19503, 19372, 19241,  3918,  3498,
   -39,   608,  1046,  1042,  1037,  1036,  5160,  5422,  5291,  3638,
  4618,  4478,  4758,  4058,  4198,  3218,  3358,  4898,  5029,  3106,
  3193,  4338,  3778,  2098,   135, 22906,   nil,   nil,   nil,   nil,
   962,   nil,   -48,   -54,   961,   nil,   nil, 19110,   nil, 18979,
   nil, 18848,   nil,   478,   nil,   nil,   nil, 18709,  1398,   978,
   942,   931,   nil,   nil,   926, 18570,   904, 18439, 23726, 24153,
  1118,   886,   nil, 18046,   838,   nil, 17915, 17784, 24214, 24275,
  2798, 17653,   887,   869,   277,   787,   nil, 17522,   nil,   nil,
 17391,   nil,   nil,   nil,   nil, 24941,  1398,   839,   nil,  1538,
   145,   146,   814,   816, 21869, 21738, 24336, 24397,     8,   nil,
   nil,   398,   nil, 24458, 24519, 21607,   nil,   nil,   nil,   333,
   191,  4618,   690,   nil,   189,   nil,   nil,   nil,   961,   nil,
   nil,   nil,   659,   nil,   nil,   354,   nil,   375,   nil,   nil,
   624,   nil,   620,   nil,   nil,   nil, 23424,   nil,   589, 21345,
 21214,   592,   577, 21083, 20952, 20821, 20690,   327,   nil,   nil,
 20559, 20428,   301,   nil, 20297, 20166,   nil,   nil,   115,   113,
   556,   110,   226,   978,   213,   nil, 22870,   nil,   838,   260,
   -24,   159,   nil,  4198,  3918,   nil,    72,   nil,    88, 12242,
   nil,   nil, 11972,   nil,  1279,   -82, 11448,  1255,   nil,  1255,
    24,    65,  1282,   447,   978,  1250,  1151, 11186,  1818,  1204,
   154,  1258, 11055,   nil,  1152,   nil,   479,   nil, 22906,   nil,
  1152,  1153,   nil,  1161,  1167,  1181,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1176,  3093,   nil,   nil, 10531,   nil,
   nil,   nil,  1297,   nil,   nil,   nil,  1301,   nil,   nil,  1306,
   681,   nil,  1348,   nil,   nil,   nil,   nil,  1361,   nil,   136,
  1242,   -18,    25,   150,   178,  6994,   413,   838,   nil,  1265,
  2518,  6732,   nil,   nil,   151,  2238, 24703, 24924, 23552,   nil,
   nil,   nil,   nil,   nil,   nil,  2098,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    99,  6601,  2378,  6470,   nil,   170,   nil,
  2658,   nil,  1398,   nil,   nil,  2938,   nil,  1118,   nil,  1678,
  6339,  5422,  5291, 16998,   128, 16867,   344,   356,   nil,   372,
   374,   400,   nil,   434,   428,   432,   449, 15926,   nil,   nil,
   602,   nil,   nil,  2658,   508,   627,   nil,   nil,   nil,   nil,
   522,   338,   nil,   nil,   676,   nil,  2378,   563,   618,   nil,
   nil,   624,   nil,    22,   594,   581,   nil,   nil,   640, 24711,
   nil, 24728,   nil, 24864,   nil, 15009,   nil,   563,   nil,   651,
   329,   658,   nil,   nil,   nil,   nil,   783,   nil, 14616,   802,
   698,  4898,   nil, 14092,  3778,    -1,   147,   nil,   826,   577,
  3638,   nil,   843,   732,  -102,   nil,   737,   732,   nil,  1258,
 13961, 13830,  2518,   746,   nil,   nil, 24784,   nil, 24767,   nil,
 20074,   nil,   nil,   789,  1244, 13036,   770,   869,   nil,   815,
   nil,   nil,   nil,  1258,   nil,   nil,    -1, 12905,   nil,   nil,
   nil,   nil,   nil,   860,   818,   nil,   nil,   nil,   819,   829,
   nil,   830,   832,   nil,   835,   nil,   nil,   840,  3064,   839,
  3103,   nil,   nil,    34,   nil,   976,   977,   nil,   373,   nil,
   nil,   nil,   981,   nil,   nil,   nil,   902,   nil,   859,   nil,
   nil,   869,   871,   872,   873,   nil,   884,   nil,   402,   nil,
   nil,   nil,   288, 24092,   nil,   nil,   nil,  4478,  1160,  1190,
  1261,  1013,  1300,   nil,  4058,  3498,   nil,   nil, 22925,   nil,
 24791,   nil, 24843,   nil, 24850,   nil,   nil,   nil,   nil,   337,
  3578,   972,  3358,   nil,   nil,   nil,   nil,   nil,  3218,   nil,
  3078,   nil, 24916,   nil, 13738,   nil, 18617,   nil, 15973,   nil,
   nil,   nil,  1104,  1037,  1041,  1124, 12643, 23909, 23848,  1121,
  1033,  1145,  1027,  1041,  1045,  1066,  1071,  3298,  1075,  3344,
   260,  1208,  1213,  1097,  1098,  1099,  1109,   nil,   nil,  1113,
    26,    33,    10,  1258,   nil,   nil, 24857,   nil,   nil,   nil,
   nil,  3438,  1119,   nil,   nil,   nil, 22465,   nil,   nil,   nil,
   nil,    32,  1133,   799,  1249,   nil,   nil ]

racc_action_default = [
    -3,  -600,    -1,  -586,    -4,  -600,    -7,  -600,  -600,  -600,
  -600,   -29,  -600,  -600,  -600,  -279,  -600,   -40,   -43,  -588,
  -600,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -329,  -330,   -68,   -11,   -72,   -80,   -82,  -600,  -491,  -492,
  -600,  -600,  -600,  -600,  -600,  -588,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -576,  -281,  -283,  -599,
  -566,  -301,  -303,  -600,  -600,  -307,  -310,  -586,  -600,  -600,
  -600,  -600,  -331,  -332,  -334,  -335,  -432,  -433,  -434,  -435,
  -436,  -457,  -439,  -440,  -459,  -461,  -444,  -449,  -453,  -455,
  -471,  -459,  -473,  -475,  -476,  -477,  -478,  -574,  -480,  -481,
  -575,  -483,  -484,  -485,  -486,  -487,  -488,  -489,  -490,  -495,
  -496,  -600,    -2,  -587,  -595,  -596,  -597,    -6,  -600,  -600,
  -600,  -600,  -600,    -3,   -17,  -600,  -111,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -600,
  -600,  -246,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -588,
  -589,   -47,  -600,  -491,  -492,  -600,  -279,  -600,  -600,  -229,
  -600,   -11,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -401,
  -403,  -600,  -584,  -585,   -57,  -246,  -600,  -300,  -407,  -416,
  -418,   -63,  -413,   -64,  -588,   -65,  -238,  -251,  -260,  -260,
  -255,  -600,  -261,  -600,  -457,  -568,  -600,  -600,   -66,   -67,
  -586,   -12,  -600,   -15,  -600,   -70,   -11,  -588,  -600,   -73,
   -76,   -11,   -88,   -89,  -600,  -600,   -96,  -293,  -296,  -588,
  -600,  -329,  -330,  -333,  -414,  -600,   -78,  -600,   -84,  -290,
  -474,  -600,  -214,  -215,  -230,  -600,   -11,  -600,  -588,  -239,
  -592,  -592,  -600,  -600,  -592,  -600,  -302,  -392,   -49,  -600,
  -600,  -600,  -600,  -586,  -600,  -587,  -491,  -492,  -600,  -600,
  -279,  -600,  -345,  -346,  -106,  -107,  -600,  -109,  -600,  -279,
  -600,  -600,  -491,  -492,  -322,  -111,  -112,  -153,  -154,  -155,
  -171,  -176,  -183,  -186,  -324,  -600,  -564,  -600,  -437,  -600,
  -600,  -600,  -600,  -600,  -600,  -600,  -600,  1027,    -5,  -598,
   -23,   -24,   -25,   -26,   -27,  -600,  -600,   -19,   -20,   -21,
  -121,  -600,   -30,   -39,  -266,  -600,  -600,  -265,   -31,  -196,
  -588,  -247,  -260,  -260,  -577,  -578,  -256,  -411,  -579,  -580,
  -578,  -577,  -256,  -410,  -412,  -579,  -580,   -37,  -204,   -38,
  -600,   -41,   -42,  -194,  -261,   -44,   -45,   -46,  -588,  -299,
  -600,  -600,  -600,  -246,  -290,  -600,  -600,  -600,  -205,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -216,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -231,
  -232,  -233,  -234,  -588,  -381,  -256,  -577,  -578,   -54,   -58,
  -588,  -257,  -381,  -381,  -588,  -295,  -252,  -600,  -253,  -600,
  -258,  -600,  -262,  -600,  -571,  -573,   -10,  -587,   -14,    -3,
  -588,   -69,  -288,   -85,   -74,  -600,  -588,  -246,  -600,  -600,
   -95,  -600,  -474,  -600,   -81,   -86,  -600,  -600,  -600,  -600,
  -235,  -600,  -424,  -600,  -284,  -600,  -240,  -594,  -593,  -242,
  -594,  -291,  -292,  -567,  -304,  -524,   -11,  -336,  -337,   -11,
  -600,  -600,  -600,  -600,  -600,  -246,  -600,  -600,  -290,  -315,
  -106,  -107,  -108,  -600,  -600,  -246,  -318,  -497,  -498,  -600,
  -600,   -11,  -502,  -326,  -588,  -438,  -458,  -463,  -600,  -465,
  -441,  -460,  -600,  -462,  -443,  -600,  -446,  -600,  -448,  -451,
  -600,  -452,  -600,  -472,    -8,   -18,  -600,   -28,  -269,  -600,
  -600,  -415,  -600,  -248,  -250,  -600,  -600,   -59,  -245,  -408,
  -600,  -600,   -61,  -409,  -600,  -600,  -298,  -590,  -577,  -578,
  -577,  -578,  -588,  -194,  -600,  -382,  -588,  -384,   -11,   -53,
  -404,  -381,  -243,   -11,   -11,  -294,  -260,  -259,  -263,  -600,
  -569,  -570,  -600,   -13,  -600,   -71,  -600,   -77,   -83,  -588,
  -577,  -578,  -244,   -92,   -94,  -600,   -79,  -600,  -203,  -213,
  -588,  -599,  -599,  -282,  -588,  -287,  -592,  -393,  -524,  -396,
  -563,  -563,  -507,  -509,  -509,  -509,  -523,  -525,  -526,  -527,
  -528,  -529,  -530,  -531,  -532,  -600,  -534,  -536,  -538,  -543,
  -545,  -546,  -548,  -553,  -555,  -556,  -558,  -559,  -560,  -600,
  -599,  -338,  -599,  -308,  -339,  -340,  -311,  -600,  -314,  -600,
  -588,  -577,  -578,  -581,  -289,  -600,  -106,  -107,  -110,  -588,
   -11,  -600,  -500,  -320,  -600,   -11,  -524,  -524,  -600,  -565,
  -464,  -467,  -468,  -469,  -470,   -11,  -442,  -445,  -447,  -450,
  -454,  -456,  -122,  -267,  -600,  -197,  -600,  -591,  -260,   -33,
  -199,   -34,  -200,   -60,   -35,  -202,   -36,  -201,   -62,  -195,
  -600,  -600,  -600,  -600,  -415,  -600,  -563,  -563,  -363,  -365,
  -365,  -365,  -380,  -600,  -588,  -386,  -532,  -540,  -541,  -551,
  -600,  -406,  -405,   -11,  -600,  -600,  -254,  -264,  -572,   -16,
   -75,   -90,   -87,  -297,  -599,  -343,   -11,  -425,  -599,  -426,
  -427,  -600,  -241,  -600,  -588,  -600,  -505,  -506,  -600,  -600,
  -516,  -600,  -519,  -600,  -521,  -600,  -347,  -600,  -349,  -351,
  -358,  -588,  -537,  -547,  -557,  -561,  -600,  -341,  -600,  -600,
   -11,   -11,  -313,  -600,   -11,  -415,  -600,  -415,  -600,  -600,
   -11,  -323,  -600,  -588,  -600,  -327,  -600,  -268,   -32,  -198,
  -249,  -600,  -236,  -600,  -361,  -362,  -371,  -373,  -600,  -376,
  -600,  -378,  -383,  -600,  -600,  -600,  -539,  -600,  -402,  -600,
  -417,  -419,    -9,   -11,  -431,  -344,  -600,  -600,  -429,  -285,
  -394,  -397,  -399,  -600,  -563,  -544,  -562,  -508,  -509,  -509,
  -535,  -509,  -509,  -554,  -509,  -532,  -549,  -588,  -600,  -356,
  -600,  -533,  -305,  -600,  -306,  -600,  -600,  -263,  -599,  -316,
  -319,  -499,  -600,  -325,  -501,  -503,  -502,  -466,  -563,  -542,
  -364,  -365,  -365,  -365,  -365,  -552,  -365,  -385,  -588,  -388,
  -390,  -391,  -550,  -600,  -290,   -55,  -430,   -11,   -97,   -98,
  -600,  -600,  -105,  -428,   -11,   -11,  -395,  -504,  -600,  -512,
  -600,  -514,  -600,  -517,  -600,  -520,  -522,  -348,  -350,  -354,
  -600,  -359,   -11,  -309,  -312,  -420,  -421,  -422,   -11,  -321,
   -11,  -360,  -600,  -368,  -600,  -370,  -600,  -374,  -600,  -377,
  -379,  -387,  -600,  -289,  -581,  -424,  -246,  -600,  -600,  -104,
  -600,  -600,  -509,  -509,  -509,  -509,  -352,  -600,  -357,  -600,
  -599,  -600,  -600,  -365,  -365,  -365,  -365,  -389,  -423,  -588,
  -577,  -578,  -581,  -103,  -398,  -400,  -600,  -510,  -513,  -515,
  -518,  -600,  -355,  -342,  -317,  -328,  -600,  -366,  -369,  -372,
  -375,  -415,  -509,  -353,  -365,  -511,  -367 ]

clist = [
'218,329,374,26,410,129,129,651,26,268,272,523,277,277,277,416,422,543',
'2,278,278,278,260,26,134,134,325,132,132,336,124,207,26,26,26,488,26',
'407,264,271,273,313,313,429,339,340,536,539,343,330,6,591,432,338,338',
'6,261,338,480,715,627,316,627,479,475,630,26,26,129,112,26,113,221,816',
'116,313,313,313,320,693,696,379,439,514,526,529,760,784,533,299,552',
'883,295,659,763,811,618,948,862,390,391,392,393,761,623,624,630,297',
'338,338,338,338,921,919,880,915,26,117,575,577,380,26,26,26,26,26,26',
'386,819,275,288,289,666,344,279,279,279,485,116,360,364,395,571,573',
'576,576,830,561,571,562,718,906,958,705,821,342,762,820,341,337,501',
'880,328,6,331,334,627,627,764,488,630,654,394,6,327,326,375,918,556',
'351,657,951,870,535,793,534,333,934,935,474,482,483,955,788,277,417',
'866,378,948,406,376,620,381,382,1,406,435,436,437,438,426,26,26,26,26',
'697,794,26,26,26,26,26,26,796,797,388,332,887,883,915,921,997,383,384',
'26,385,612,720,725,711,586,988,853,773,416,422,714,621,277,277,878,396',
'403,754,353,666,278,277,875,880,909,402,408,206,278,633,427,431,26,26',
'710,637,873,,833,834,,26,1012,646,781,,,880,493,,879,708,881,,511,,',
'268,,26,,272,,26,639,606,1023,,26,,,313,,525,,642,,666,666,,911,524',
',844,845,642,540,541,313,767,504,,298,26,26,338,338,912,956,913,,728',
'700,728,,825,498,622,26,26,,625,709,642,827,560,512,,16,295,496,642',
'497,16,295,116,,635,26,899,481,564,,638,500,279,515,1013,484,506,,,',
'279,26,,776,,,,,16,,,,592,,129,,828,743,,,598,832,748,780,960,,603,824',
'563,,542,792,,134,627,116,132,630,,585,,,,352,,417,982,277,719,597,',
',557,,,602,,,937,,426,,432,,,,,26,,,993,,,,,614,674,,,598,,998,,,,,',
',16,,,,961,,,,,16,16,,,789,,,,,,,619,,,277,417,,,776,,,,,,26,417,26',
'401,757,,426,,,,26,650,313,783,,902,426,634,,,313,,,,26,,298,,277,417',
',,,,699,,766,417,277,26,,,26,,426,,14,,26,6,426,14,767,,,767,,767,26',
'767,515,,16,,26,,222,,515,430,,957,,927,,222,222,222,674,14,304,304',
',129,,16,,,772,,,298,626,592,790,,298,765,26,26,952,,134,26,26,132,',
'26,732,222,222,694,694,222,348,358,358,,,771,592,26,,,,598,26,26,603',
',712,713,656,,,791,674,674,,,1021,,406,313,,992,16,739,741,835,16,,744',
'746,313,16,431,,,14,,,,,222,222,222,222,14,14,,767,,767,891,767,,767',
',,16,592,,874,,,826,,,,592,515,829,,,338,904,,738,,,338,782,,,,,,26',
',,,,26,26,129,,,26,674,,674,,,,767,864,,26,,868,908,,,757,,757,,757',
'26,,,,,,765,,,,,947,806,,,14,222,222,222,,,222,222,222,222,222,222,766',
',766,999,,,758,,313,765,26,14,,,642,,,,,,,,838,26,,,800,802,804,,,,',
'893,,,,,13,,,759,338,13,,222,222,,,,,,,,222,26,,26,26,,,26,,,,690,,26',
'692,,,13,14,,,,14,,,,304,14,,,757,16,757,16,757,,757,,674,,,,313,304',
',,26,,,,,,14,222,313,,,,,,,,766,806,,,889,222,222,,16,,,16,,,,694,,971',
'901,,,,757,905,,222,,,,,,770,,16,,13,774,775,426,,,222,,,13,13,,,26',
',,,,,,26,26,,,,,,,,,,15,,,876,,15,876,26,,,430,277,417,26,,26,806,,806',
',,,,,16,,,426,,16,16,26,592,15,306,306,,,,,,222,,,882,,884,,,,,876,',
',758,,758,,758,939,941,,943,945,13,946,,,350,359,359,,836,,,,,986,806',
',,,,,,,,13,,,,914,,916,,14,,14,,,,,,304,,222,,,847,849,851,304,,15,',
'806,16,806,,222,859,16,15,15,,,,,,,,16,,865,14,,,14,,806,,,,222,,,,',
'13,,,,13,222,,,,13,,14,,,,1007,1008,1009,1010,895,896,,758,898,758,',
'758,,758,,,16,,983,13,984,,985,,,,,,,16,222,222,,,,222,222,,,222,1025',
',994,,995,15,996,926,,,,,,14,,,,,14,14,,758,,16,16,,,16,15,,,304,,16',
',,,,,,,,304,,,,1022,,,,,,,,,,1024,963,965,967,969,,970,335,,,16,,,,933',
'975,,,,,,,980,981,,,,,,,,,,15,,,,15,,,990,306,15,,222,,991,,,14,222',
',,,14,,,,306,,,,,,14,,,15,,,,,,,16,222,,,,,,16,16,1017,1018,1019,1020',
',,,,,,,13,,13,,,16,,,,,,16,856,16,,,,,14,39,1026,,,,39,,,,,,,14,,,,',
',,,13,,,13,,,,,,,,,,39,303,303,,,,,,,,404,222,13,14,14,,434,14,,,,,',
'14,,,,,,,,,,,,347,363,363,363,,,,,,,,,,922,,,,,,,,14,,,,930,,,,,,,,',
'13,,,,,13,13,,,,,39,,490,,492,,,494,495,39,39,,15,,15,,,,,,306,,,,,',
',,306,,,,,,,,,,,,14,,,,,,,14,14,,,15,,,15,,,,,,,,,,,14,,,,,,14,,14,',
',15,,,,,13,,724,,,13,,,222,,,,,,39,13,,,,,38,,,,,38,,,,,,,,,,,,39,,',
',,,,,588,,,,,,,15,38,302,302,,15,15,,,,,13,,,,,,,306,,,,,,13,,,,,306',
',,,,,,346,362,362,362,,,,,,,39,,,,39,,,,303,39,,,13,13,,,13,,,,,,13',
',,303,,,,628,,335,,631,39,38,,,,,,,,,38,38,15,,,,,15,,,,13,,,,,,15,',
',,,,,,628,,,335,,,,,,,,,,,,,,434,,,,,,,,,,,,,,,,,359,,,,,,15,,,,,,,',
',,13,,,15,,,,13,13,,,38,733,,,,628,335,,,,,,,,13,,,,,,13,,13,38,,,15',
'15,,,15,,,,,,15,,,,,777,,,778,,,,,,,,,,,,,,,,,359,,,787,,,,,15,,,,932',
',39,,39,,,,,,303,38,,,,38,,812,303,302,38,,,,,,,,,,,,,,,,302,,,,,39',
',,39,38,,,,,,,,,,,,,,,15,,,,,,39,15,15,,,,,837,,,,,,,,,,,,15,,,,,,15',
',15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,39,39,,,,,,,,,,,,303,,,886,',
',,,,,,303,,,,,,,,,,897,,,,,,,,,,,,,,,,,335,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,39,38,,38,,39,,,,302,,,,,,39,,302,,,,,,,,,,,,,,,,,,,,,,,38',
',,38,,,,,,,,,,,,,,363,,,,,,39,,38,,,,,,,,,,,39,,,,,,,,229,,,,,,,,,276',
'276,276,,,,,,,,,,,322,323,324,,39,39,,,39,,,,,,39,,38,276,276,,,38,38',
',,,,,,,,,,,302,,,,,363,,,,,,302,,39,,,,929,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,39,,38,,,,,39,39,,,,38,,,,,,,,,',
',,,39,,,,,,39,,39,,,,,,,,,,,,,,,,,,,,,362,,276,409,276,,38,428,433,',
',,,,,,,,,38,,,,229,,,448,449,450,451,452,453,454,455,456,457,458,459',
'460,461,462,463,464,465,466,467,468,469,470,471,472,473,,38,38,,,38',
'276,276,,,,38,,,,276,,,,,,,276,,276,,,276,276,,,,,,,,362,,,,,,,,38,',
',,928,,,,,,,,,,,,,,,,,,520,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'38,,,,,,,38,38,,,,,,,,,,,,,,,,,38,,,,,,38,,38,,,,,276,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,276,,428,613,409,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,276,,276,,276,,,,,,,,,,,,,,,,276,,,,,,,,,648,649,,,,,,,,',
',276,,,276,,,,,,,,,,,,,,276,276,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,276,735,,,276,276,740,742,,,,745,747,,,613,749,,,,,,,,,,,',
',,,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,',
',,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,839',
',,,,,,,,,,,,,740,742,747,745,,842,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,276,839,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(3071, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,67,56,41,23,57,57,10,41,71,71,8,33,33,33,37,37,92,2,68,68,68,141',
'41,61,61,31,60,60,86,15,15,41,41,41,73,41,27,38,38,38,64,64,27,17,17',
'89,89,17,68,7,24,18,29,29,7,36,29,23,98,74,50,74,39,37,181,41,41,57',
'4,41,6,20,90,96,64,64,64,63,91,91,154,47,51,69,69,129,11,69,49,54,177',
'45,140,132,119,40,117,12,17,17,17,17,130,40,40,181,46,29,29,29,29,135',
'134,172,178,41,5,158,158,155,41,41,41,41,41,41,155,11,44,44,44,166,4',
'70,70,70,47,96,55,55,2,159,159,159,159,112,113,159,114,115,116,110,109',
'108,107,121,106,105,104,47,172,103,7,70,70,74,74,127,73,181,102,7,7',
'101,100,99,133,95,93,136,120,137,138,139,88,85,142,143,144,146,147,148',
'149,33,71,150,153,117,68,84,72,156,157,1,68,29,29,29,29,57,41,41,41',
'41,92,140,41,41,41,41,41,41,124,124,5,66,119,177,178,135,134,160,161',
'41,162,23,163,164,165,62,120,132,40,37,37,8,42,33,33,170,30,28,24,19',
'166,68,33,174,172,175,20,20,16,68,14,20,20,41,41,111,51,132,,140,140',
',41,120,51,24,,,172,154,,130,54,130,,31,,,71,,41,,71,,41,23,47,120,',
'41,,,64,,31,,37,,166,166,,129,29,,124,124,37,17,17,64,173,50,,9,41,41',
'29,29,130,11,130,,159,23,159,,24,7,47,41,41,,47,23,37,24,29,63,,26,45',
'4,37,6,26,45,96,,47,41,91,44,29,,47,46,70,49,90,44,46,,,,70,41,,73,',
',,,26,,,,31,,57,,8,39,,,71,8,39,51,98,,71,89,36,,4,69,,61,74,96,60,181',
',15,,,,26,,71,130,33,47,38,,,96,,,38,,,124,,57,,18,,,,,41,,,130,,,,',
'31,171,,,71,,10,,,,,,,26,,,,124,,,,,26,26,,,27,,,,,,,38,,,33,71,,,73',
',,,,,41,71,41,9,123,,57,,,,41,29,64,47,,8,57,2,,,64,,,,41,,9,,33,71',
',,,,68,,171,71,33,41,,,41,,57,,22,,41,7,57,22,173,,,173,,173,41,173',
'49,,26,,41,,22,,49,26,,92,,89,,22,22,22,171,22,22,22,,57,,26,,,86,,',
'9,70,31,67,,9,31,41,41,89,,61,41,41,60,,41,15,22,22,96,96,22,22,22,22',
',,141,31,41,,,,71,41,41,71,,96,96,70,,,31,171,171,,,24,,68,64,,8,26',
'20,20,56,26,,20,20,64,26,20,,,22,,,,,22,22,22,22,22,22,,173,,173,47',
'173,,173,,,26,31,,123,,,17,,,,31,49,17,,,29,47,,70,,,29,49,,,,,,41,',
',,,41,41,57,,,41,171,,171,,,,173,67,,41,,67,123,,,123,,123,,123,41,',
',,,,31,,,,,47,118,,,22,22,22,22,,,22,22,22,22,22,22,171,,171,23,,,125',
',64,31,41,22,,,37,,,,,,,,20,41,,,169,169,169,,,,,17,,,,,21,,,128,29',
'21,,22,22,,,,,,,,22,41,,41,41,,,41,,,,9,,41,9,,,21,22,,,,22,,,,22,22',
',,123,26,123,26,123,,123,,171,,,,64,22,,,41,,,,,,22,22,64,,,,,,,,171',
'118,,,118,22,22,,26,,,26,,,,96,,31,96,,,,123,96,,22,,,,,,9,,26,,21,9',
'9,57,,,22,,,21,21,,,41,,,,,,,41,41,,,,,,,,,,25,,,125,,25,125,41,,,26',
'33,71,41,,41,118,,118,,,,,,26,,,57,,26,26,41,31,25,25,25,,,,,,22,,,128',
',128,,,,,125,,,125,,125,,125,169,169,,169,169,21,169,,,25,25,25,,9,',
',,,118,118,,,,,,,,,21,,,,128,,128,,22,,22,,,,,,22,,22,,,126,126,126',
'22,,25,,118,26,118,,22,9,26,25,25,,,,,,,,26,,9,22,,,22,,118,,,,22,,',
',,21,,,,21,22,,,,21,,22,,,,169,169,169,169,9,9,,125,9,125,,125,,125',
',,26,,128,21,128,,128,,,,,,,26,22,22,,,,22,22,,,22,169,,128,,128,25',
'128,9,,,,,,22,,,,,22,22,,125,,26,26,,,26,25,,,22,,26,,,,,,,,,22,,,,128',
',,,,,,,,,128,126,126,126,126,,126,65,,,26,,,,26,9,,,,,,,9,9,,,,,,,,',
',25,,,,25,,,9,25,25,,22,,9,,,22,22,,,,22,,,,25,,,,,,22,,,25,,,,,,,26',
'22,,,,,,26,26,126,126,126,126,,,,,,,,21,,21,,,26,,,,,,26,22,26,,,,,22',
'53,126,,,,53,,,,,,,22,,,,,,,,21,,,21,,,,,,,,,,53,53,53,,,,,,,,65,22',
'21,22,22,,65,22,,,,,,22,,,,,,,,,,,,53,53,53,53,,,,,,,,,,22,,,,,,,,22',
',,,22,,,,,,,,,21,,,,,21,21,,,,,53,,65,,65,,,65,65,53,53,,25,,25,,,,',
',25,,,,,,,,25,,,,,,,,,,,,22,,,,,,,22,22,,,25,,,25,,,,,,,,,,,22,,,,,',
'22,,22,,,25,,,,,21,,25,,,21,,,22,,,,,,53,21,,,,,52,,,,,52,,,,,,,,,,',
',53,,,,,,,,65,,,,,,,25,52,52,52,,25,25,,,,,21,,,,,,,25,,,,,,21,,,,,25',
',,,,,,52,52,52,52,,,,,,,53,,,,53,,,,53,53,,,21,21,,,21,,,,,,21,,,53',
',,,65,,65,,65,53,52,,,,,,,,,52,52,25,,,,,25,,,,21,,,,,,25,,,,,,,,65',
',,65,,,,,,,,,,,,,,65,,,,,,,,,,,,,,,,,25,,,,,,25,,,,,,,,,,21,,,25,,,',
'21,21,,,52,65,,,,65,65,,,,,,,,21,,,,,,21,,21,52,,,25,25,,,25,,,,,,25',
',,,,65,,,65,,,,,,,,,,,,,,,,,25,,,65,,,,,25,,,,25,,53,,53,,,,,,53,52',
',,,52,,65,53,52,52,,,,,,,,,,,,,,,,52,,,,,53,,,53,52,,,,,,,,,,,,,,,25',
',,,,,53,25,25,,,,,65,,,,,,,,,,,,25,,,,,,25,,25,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,53,,,,,53,53,,,,,,,,,,,,53,,,65,,,,,,,,53,,,,,,,,,,65,,,,,,',
',,,,,,,,,,65,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,52,,52,,53,,,,52',
',,,,,53,,52,,,,,,,,,,,,,,,,,,,,,,,52,,,52,,,,,,,,,,,,,,53,,,,,,53,,52',
',,,,,,,,,,53,,,,,,,,32,,,,,,,,,32,32,32,,,,,,,,,,,32,32,32,,53,53,,',
'53,,,,,,53,,52,32,32,,,52,52,,,,,,,,,,,,52,,,,,53,,,,,,52,,53,,,,53',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,53,,52',
',,,,53,53,,,,52,,,,,,,,,,,,,53,,,,,,53,,53,,,,,,,,,,,,,,,,,,,,,52,,32',
'32,32,,52,32,32,,,,,,,,,,,52,,,,32,,,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,,52,52,,,52,32,32,,,,52',
',,,32,,,,,,,32,,32,,,32,32,,,,,,,,52,,,,,,,,52,,,,52,,,,,,,,,,,,,,,',
',,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,,,52,52,,,,,,,',
',,,,,,,,,52,,,,,,52,,52,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'32,,32,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,32,,,,,',
',,,,,,,,,,32,,,,,,,,,32,32,,,,,,,,,,32,,,32,,,,,,,,,,,,,,32,32,,,,,',
',,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32,32,32,32,,,,32,32',
',,32,32,,,,,,,,,,,,,,,,,,,,,,,,32,,,32,,,,,,,,,,,,,,,,,,,,32,,,,,,,',
',,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,32,,32,,,,,,,,,,,,,,32,32,32,32,,32,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,32',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32' ]
        racc_goto_check = arr = ::Array.new(3071, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   204,    18,   nil,    66,   112,    68,    50,  -315,   295,
  -515,  -564,  -686,   nil,  -232,    22,   254,   -19,  -163,   186,
    52,   804,   546,  -207,  -359,   948,   354,  -172,    43,   -10,
   127,   -19,  2094,   -17,   nil,   nil,    32,  -197,    12,  -201,
  -378,     3,  -231,   nil,   100,    59,    74,  -137,   nil,    55,
    26,  -234,  1534,  1320,  -266,    70,   -69,    -3,   nil,   nil,
    19,    16,  -160,    37,     7,  1154,   167,   -58,   -10,  -246,
   105,   -17,  -274,  -244,  -427,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   129,   126,   -32,   nil,  -152,  -293,
  -617,  -461,  -327,   111,   nil,  -182,    71,   nil,  -503,   105,
   118,   116,  -353,   104,    97,    93,  -536,    89,  -542,  -396,
  -747,  -286,  -567,  -217,  -225,  -413,  -684,  -791,    76,  -580,
  -709,  -460,   nil,  -112,  -437,   156,   297,  -448,   191,  -530,
  -513,   nil,  -522,  -677,  -741,  -742,  -355,  -611,  -154,  -473,
  -442,     0,  -684,  -684,   -70,   nil,   -79,   -79,  -706,  -459,
  -592,   nil,   nil,   118,     0,    36,   117,   117,  -264,  -238,
   145,   145,   146,  -331,  -331,  -319,  -403,   nil,   nil,   129,
  -549,   -80,  -685,  -291,  -537,  -583,   nil,  -710,  -733,   nil,
   nil,  -424 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   345,   293,   nil,   522,
   nil,   817,   nil,   290,   291,   nil,   nil,   nil,    11,    12,
    18,   228,   321,   nil,   nil,   226,   227,   nil,   nil,    17,
   nil,   440,    21,    22,    23,    24,   nil,   645,   nil,   nil,
   nil,   310,   nil,    25,   411,    32,   nil,   nil,    34,    37,
    36,   nil,   223,   224,   357,   nil,   131,   419,   130,   133,
    77,    78,   nil,    92,    46,   282,   nil,   785,   412,   nil,
   413,   424,   599,   486,   280,   266,    47,    48,    49,    50,
    51,    52,    53,    54,    55,   nil,   267,    61,   nil,   nil,
   nil,   nil,   nil,   nil,    69,   nil,   537,    70,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   808,   673,   nil,
   809,   910,   756,   661,   nil,   662,   nil,   nil,   663,   nil,
   665,   615,   nil,   nil,   nil,   671,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   423,   nil,   nil,   nil,   nil,
   nil,    76,    79,    80,   nil,   nil,   nil,   nil,   nil,   566,
   nil,   nil,   nil,   nil,   nil,   nil,   877,   717,   660,   nil,
   664,   885,   676,   678,   679,   768,   682,   683,   769,   686,
   689,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 145, :_reduce_none,
  2, 146, :_reduce_2,
  0, 147, :_reduce_3,
  1, 147, :_reduce_4,
  3, 147, :_reduce_5,
  2, 147, :_reduce_6,
  1, 149, :_reduce_none,
  4, 149, :_reduce_8,
  4, 152, :_reduce_9,
  2, 153, :_reduce_10,
  0, 157, :_reduce_11,
  1, 157, :_reduce_12,
  3, 157, :_reduce_13,
  2, 157, :_reduce_14,
  1, 158, :_reduce_none,
  4, 158, :_reduce_16,
  0, 174, :_reduce_17,
  4, 151, :_reduce_18,
  3, 151, :_reduce_19,
  3, 151, :_reduce_20,
  3, 151, :_reduce_21,
  2, 151, :_reduce_22,
  3, 151, :_reduce_23,
  3, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  4, 151, :_reduce_28,
  1, 151, :_reduce_none,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  6, 151, :_reduce_32,
  5, 151, :_reduce_33,
  5, 151, :_reduce_34,
  5, 151, :_reduce_35,
  5, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  1, 151, :_reduce_none,
  3, 162, :_reduce_41,
  3, 162, :_reduce_42,
  1, 173, :_reduce_none,
  3, 173, :_reduce_44,
  3, 173, :_reduce_45,
  3, 173, :_reduce_46,
  2, 173, :_reduce_47,
  1, 173, :_reduce_none,
  1, 161, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 178, :_reduce_none,
  4, 178, :_reduce_53,
  0, 186, :_reduce_54,
  5, 183, :_reduce_55,
  1, 185, :_reduce_none,
  2, 177, :_reduce_57,
  3, 177, :_reduce_58,
  4, 177, :_reduce_59,
  5, 177, :_reduce_60,
  4, 177, :_reduce_61,
  5, 177, :_reduce_62,
  2, 177, :_reduce_63,
  2, 177, :_reduce_64,
  2, 177, :_reduce_65,
  2, 177, :_reduce_66,
  2, 177, :_reduce_67,
  1, 163, :_reduce_68,
  3, 163, :_reduce_69,
  1, 190, :_reduce_70,
  3, 190, :_reduce_71,
  1, 189, :_reduce_none,
  2, 189, :_reduce_73,
  3, 189, :_reduce_74,
  5, 189, :_reduce_75,
  2, 189, :_reduce_76,
  4, 189, :_reduce_77,
  2, 189, :_reduce_78,
  4, 189, :_reduce_79,
  1, 189, :_reduce_80,
  3, 189, :_reduce_81,
  1, 193, :_reduce_none,
  3, 193, :_reduce_83,
  2, 192, :_reduce_84,
  3, 192, :_reduce_85,
  1, 195, :_reduce_86,
  3, 195, :_reduce_87,
  1, 194, :_reduce_88,
  1, 194, :_reduce_89,
  4, 194, :_reduce_90,
  3, 194, :_reduce_91,
  3, 194, :_reduce_92,
  3, 194, :_reduce_93,
  3, 194, :_reduce_94,
  2, 194, :_reduce_95,
  1, 194, :_reduce_96,
  1, 170, :_reduce_97,
  1, 170, :_reduce_98,
  4, 170, :_reduce_99,
  3, 170, :_reduce_100,
  3, 170, :_reduce_101,
  3, 170, :_reduce_102,
  3, 170, :_reduce_103,
  2, 170, :_reduce_104,
  1, 170, :_reduce_105,
  1, 198, :_reduce_106,
  1, 198, :_reduce_none,
  2, 199, :_reduce_108,
  1, 199, :_reduce_109,
  3, 199, :_reduce_110,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 203, :_reduce_116,
  1, 203, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 160, :_reduce_120,
  0, 206, :_reduce_121,
  4, 160, :_reduce_122,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  3, 176, :_reduce_194,
  5, 176, :_reduce_195,
  3, 176, :_reduce_196,
  5, 176, :_reduce_197,
  6, 176, :_reduce_198,
  5, 176, :_reduce_199,
  5, 176, :_reduce_200,
  5, 176, :_reduce_201,
  5, 176, :_reduce_202,
  4, 176, :_reduce_203,
  3, 176, :_reduce_204,
  3, 176, :_reduce_205,
  3, 176, :_reduce_206,
  3, 176, :_reduce_207,
  3, 176, :_reduce_208,
  3, 176, :_reduce_209,
  3, 176, :_reduce_210,
  3, 176, :_reduce_211,
  3, 176, :_reduce_212,
  4, 176, :_reduce_213,
  2, 176, :_reduce_214,
  2, 176, :_reduce_215,
  3, 176, :_reduce_216,
  3, 176, :_reduce_217,
  3, 176, :_reduce_218,
  3, 176, :_reduce_219,
  3, 176, :_reduce_220,
  3, 176, :_reduce_221,
  3, 176, :_reduce_222,
  3, 176, :_reduce_223,
  3, 176, :_reduce_224,
  3, 176, :_reduce_225,
  3, 176, :_reduce_226,
  3, 176, :_reduce_227,
  3, 176, :_reduce_228,
  2, 176, :_reduce_229,
  2, 176, :_reduce_230,
  3, 176, :_reduce_231,
  3, 176, :_reduce_232,
  3, 176, :_reduce_233,
  3, 176, :_reduce_234,
  3, 176, :_reduce_235,
  6, 176, :_reduce_236,
  1, 176, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  4, 210, :_reduce_241,
  2, 210, :_reduce_242,
  3, 215, :_reduce_243,
  0, 216, :_reduce_244,
  1, 216, :_reduce_none,
  0, 167, :_reduce_246,
  1, 167, :_reduce_none,
  2, 167, :_reduce_none,
  4, 167, :_reduce_249,
  2, 167, :_reduce_250,
  1, 188, :_reduce_251,
  2, 188, :_reduce_252,
  2, 188, :_reduce_253,
  4, 188, :_reduce_254,
  1, 188, :_reduce_255,
  0, 219, :_reduce_256,
  2, 182, :_reduce_257,
  2, 218, :_reduce_258,
  2, 217, :_reduce_259,
  0, 217, :_reduce_260,
  1, 212, :_reduce_261,
  2, 212, :_reduce_262,
  3, 212, :_reduce_263,
  4, 212, :_reduce_264,
  1, 172, :_reduce_265,
  1, 172, :_reduce_none,
  3, 171, :_reduce_267,
  4, 171, :_reduce_268,
  2, 171, :_reduce_269,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_280,
  0, 244, :_reduce_281,
  4, 208, :_reduce_282,
  0, 245, :_reduce_283,
  0, 246, :_reduce_284,
  6, 208, :_reduce_285,
  0, 247, :_reduce_286,
  4, 208, :_reduce_287,
  3, 208, :_reduce_288,
  3, 208, :_reduce_289,
  2, 208, :_reduce_290,
  3, 208, :_reduce_291,
  3, 208, :_reduce_292,
  1, 208, :_reduce_293,
  4, 208, :_reduce_294,
  3, 208, :_reduce_295,
  1, 208, :_reduce_296,
  5, 208, :_reduce_297,
  4, 208, :_reduce_298,
  3, 208, :_reduce_299,
  2, 208, :_reduce_300,
  1, 208, :_reduce_none,
  2, 208, :_reduce_302,
  0, 248, :_reduce_303,
  3, 208, :_reduce_304,
  6, 208, :_reduce_305,
  6, 208, :_reduce_306,
  0, 249, :_reduce_307,
  0, 250, :_reduce_308,
  7, 208, :_reduce_309,
  0, 251, :_reduce_310,
  0, 252, :_reduce_311,
  7, 208, :_reduce_312,
  5, 208, :_reduce_313,
  4, 208, :_reduce_314,
  0, 253, :_reduce_315,
  0, 254, :_reduce_316,
  9, 208, :_reduce_317,
  0, 255, :_reduce_318,
  6, 208, :_reduce_319,
  0, 256, :_reduce_320,
  7, 208, :_reduce_321,
  0, 257, :_reduce_322,
  5, 208, :_reduce_323,
  0, 258, :_reduce_324,
  6, 208, :_reduce_325,
  0, 259, :_reduce_326,
  0, 260, :_reduce_327,
  9, 208, :_reduce_328,
  1, 208, :_reduce_329,
  1, 208, :_reduce_330,
  1, 208, :_reduce_331,
  1, 208, :_reduce_332,
  1, 166, :_reduce_none,
  1, 238, :_reduce_334,
  1, 241, :_reduce_335,
  1, 233, :_reduce_none,
  1, 233, :_reduce_none,
  2, 233, :_reduce_338,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  1, 234, :_reduce_none,
  5, 234, :_reduce_342,
  1, 155, :_reduce_none,
  2, 155, :_reduce_344,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 261, :_reduce_347,
  3, 261, :_reduce_348,
  1, 264, :_reduce_349,
  3, 264, :_reduce_350,
  1, 263, :_reduce_none,
  4, 263, :_reduce_352,
  6, 263, :_reduce_353,
  3, 263, :_reduce_354,
  5, 263, :_reduce_355,
  2, 263, :_reduce_356,
  4, 263, :_reduce_357,
  1, 263, :_reduce_358,
  3, 263, :_reduce_359,
  4, 265, :_reduce_360,
  2, 265, :_reduce_361,
  2, 265, :_reduce_362,
  1, 265, :_reduce_363,
  2, 270, :_reduce_364,
  0, 270, :_reduce_365,
  6, 271, :_reduce_366,
  8, 271, :_reduce_367,
  4, 271, :_reduce_368,
  6, 271, :_reduce_369,
  4, 271, :_reduce_370,
  2, 271, :_reduce_none,
  6, 271, :_reduce_372,
  2, 271, :_reduce_373,
  4, 271, :_reduce_374,
  6, 271, :_reduce_375,
  2, 271, :_reduce_376,
  4, 271, :_reduce_377,
  2, 271, :_reduce_378,
  4, 271, :_reduce_379,
  1, 271, :_reduce_none,
  0, 184, :_reduce_381,
  1, 184, :_reduce_382,
  3, 275, :_reduce_383,
  1, 275, :_reduce_384,
  4, 275, :_reduce_385,
  1, 276, :_reduce_386,
  4, 276, :_reduce_387,
  1, 277, :_reduce_388,
  3, 277, :_reduce_389,
  1, 278, :_reduce_390,
  1, 278, :_reduce_none,
  0, 282, :_reduce_392,
  0, 283, :_reduce_393,
  4, 232, :_reduce_394,
  4, 280, :_reduce_395,
  1, 280, :_reduce_396,
  0, 286, :_reduce_397,
  4, 281, :_reduce_398,
  0, 287, :_reduce_399,
  4, 281, :_reduce_400,
  0, 288, :_reduce_401,
  5, 285, :_reduce_402,
  2, 179, :_reduce_403,
  4, 179, :_reduce_404,
  5, 179, :_reduce_405,
  5, 179, :_reduce_406,
  2, 231, :_reduce_407,
  4, 231, :_reduce_408,
  4, 231, :_reduce_409,
  3, 231, :_reduce_410,
  3, 231, :_reduce_411,
  3, 231, :_reduce_412,
  2, 231, :_reduce_413,
  1, 231, :_reduce_414,
  4, 231, :_reduce_415,
  0, 290, :_reduce_416,
  5, 230, :_reduce_417,
  0, 291, :_reduce_418,
  5, 230, :_reduce_419,
  5, 236, :_reduce_420,
  1, 292, :_reduce_421,
  1, 292, :_reduce_none,
  6, 154, :_reduce_423,
  0, 154, :_reduce_424,
  1, 293, :_reduce_425,
  1, 293, :_reduce_none,
  1, 293, :_reduce_none,
  2, 294, :_reduce_428,
  1, 294, :_reduce_none,
  2, 156, :_reduce_430,
  1, 156, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 221, :_reduce_435,
  1, 296, :_reduce_436,
  2, 296, :_reduce_437,
  3, 297, :_reduce_438,
  1, 297, :_reduce_439,
  1, 297, :_reduce_440,
  3, 222, :_reduce_441,
  4, 223, :_reduce_442,
  3, 224, :_reduce_443,
  0, 301, :_reduce_444,
  3, 301, :_reduce_445,
  1, 302, :_reduce_446,
  2, 302, :_reduce_447,
  3, 226, :_reduce_448,
  0, 304, :_reduce_449,
  3, 304, :_reduce_450,
  3, 225, :_reduce_451,
  3, 227, :_reduce_452,
  0, 305, :_reduce_453,
  3, 305, :_reduce_454,
  0, 306, :_reduce_455,
  3, 306, :_reduce_456,
  0, 298, :_reduce_457,
  2, 298, :_reduce_458,
  0, 299, :_reduce_459,
  2, 299, :_reduce_460,
  0, 300, :_reduce_461,
  2, 300, :_reduce_462,
  1, 303, :_reduce_463,
  2, 303, :_reduce_464,
  0, 308, :_reduce_465,
  4, 303, :_reduce_466,
  1, 307, :_reduce_467,
  1, 307, :_reduce_468,
  1, 307, :_reduce_469,
  1, 307, :_reduce_none,
  1, 204, :_reduce_471,
  3, 205, :_reduce_472,
  1, 295, :_reduce_473,
  2, 295, :_reduce_474,
  1, 207, :_reduce_475,
  1, 207, :_reduce_476,
  1, 207, :_reduce_477,
  1, 207, :_reduce_478,
  1, 196, :_reduce_479,
  1, 196, :_reduce_480,
  1, 196, :_reduce_481,
  1, 196, :_reduce_482,
  1, 196, :_reduce_483,
  1, 197, :_reduce_484,
  1, 197, :_reduce_485,
  1, 197, :_reduce_486,
  1, 197, :_reduce_487,
  1, 197, :_reduce_488,
  1, 197, :_reduce_489,
  1, 197, :_reduce_490,
  1, 228, :_reduce_491,
  1, 228, :_reduce_492,
  1, 165, :_reduce_493,
  1, 165, :_reduce_494,
  1, 169, :_reduce_495,
  1, 169, :_reduce_496,
  1, 239, :_reduce_497,
  0, 309, :_reduce_498,
  4, 239, :_reduce_499,
  2, 239, :_reduce_500,
  3, 242, :_reduce_501,
  0, 311, :_reduce_502,
  3, 242, :_reduce_503,
  4, 310, :_reduce_504,
  2, 310, :_reduce_505,
  2, 310, :_reduce_506,
  1, 310, :_reduce_507,
  2, 313, :_reduce_508,
  0, 313, :_reduce_509,
  6, 284, :_reduce_510,
  8, 284, :_reduce_511,
  4, 284, :_reduce_512,
  6, 284, :_reduce_513,
  4, 284, :_reduce_514,
  6, 284, :_reduce_515,
  2, 284, :_reduce_516,
  4, 284, :_reduce_517,
  6, 284, :_reduce_518,
  2, 284, :_reduce_519,
  4, 284, :_reduce_520,
  2, 284, :_reduce_521,
  4, 284, :_reduce_522,
  1, 284, :_reduce_523,
  0, 284, :_reduce_524,
  1, 279, :_reduce_525,
  1, 279, :_reduce_526,
  1, 279, :_reduce_527,
  1, 279, :_reduce_528,
  1, 262, :_reduce_none,
  1, 262, :_reduce_530,
  1, 315, :_reduce_531,
  1, 316, :_reduce_532,
  3, 316, :_reduce_533,
  1, 272, :_reduce_534,
  3, 272, :_reduce_535,
  1, 317, :_reduce_536,
  2, 318, :_reduce_537,
  1, 318, :_reduce_538,
  2, 319, :_reduce_539,
  1, 319, :_reduce_540,
  1, 266, :_reduce_541,
  3, 266, :_reduce_542,
  1, 312, :_reduce_543,
  3, 312, :_reduce_544,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  2, 267, :_reduce_547,
  1, 267, :_reduce_548,
  3, 321, :_reduce_549,
  3, 322, :_reduce_550,
  1, 273, :_reduce_551,
  3, 273, :_reduce_552,
  1, 314, :_reduce_553,
  3, 314, :_reduce_554,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  2, 274, :_reduce_557,
  1, 274, :_reduce_558,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  2, 269, :_reduce_561,
  2, 268, :_reduce_562,
  0, 268, :_reduce_563,
  1, 243, :_reduce_none,
  3, 243, :_reduce_565,
  0, 229, :_reduce_566,
  2, 229, :_reduce_none,
  1, 214, :_reduce_568,
  3, 214, :_reduce_569,
  3, 325, :_reduce_570,
  2, 325, :_reduce_571,
  4, 325, :_reduce_572,
  2, 325, :_reduce_573,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 175, :_reduce_none,
  1, 175, :_reduce_none,
  2, 191, :_reduce_590,
  2, 168, :_reduce_591,
  0, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 240, :_reduce_595,
  1, 240, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_none,
  0, 211, :_reduce_599 ]

racc_reduce_n = 600

racc_shift_n = 1027

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@22",
  "@23",
  "f_args",
  "do_block",
  "@24",
  "@25",
  "@26",
  "operation3",
  "@27",
  "@28",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@29",
  "@30",
  "args_tail",
  "@31",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_58(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_121(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_122(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

def _reduce_194(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      result = []
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_254(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_255(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_257(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_304(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_314(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_318(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_319(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_320(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_321(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_322(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_323(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_324(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_335(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = val
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = []
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_382(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = []
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_390(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_394(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_395(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_399(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_401(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_403(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_416(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_418(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = []
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 426 omitted

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_436(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_442(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = []
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = []
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = []
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = []
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_466(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_474(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_499(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_500(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_503(val, _values, result)
                      @context.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = []
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      result = []
                    
    result
end

def _reduce_525(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_526(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_535(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_536(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 545 omitted

# reduce 546 omitted

def _reduce_547(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 559 omitted

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_562(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = []
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_566(val, _values, result)
                      result = []
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_569(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_591(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

def _reduce_595(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby22
  end   # module Parser
