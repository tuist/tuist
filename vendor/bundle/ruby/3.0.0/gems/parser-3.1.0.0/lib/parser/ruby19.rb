# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby19 < Parser::Base


  def version
    19
  end

  def default_encoding
    Encoding::BINARY
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-455,280,71,72,68,9,54,-455,-455,-455,60,61,-455,-455,-455,64,-455,62',
'63,65,29,30,69,70,-455,260,-455,-455,-455,28,27,26,95,94,96,97,-455',
'-455,19,-455,-455,-455,-455,-455,8,44,-99,10,99,98,100,89,53,91,90,92',
'543,93,101,102,522,87,88,41,42,40,-455,-455,-455,-455,-455,-455,-455',
'-455,-455,-455,-455,-455,-455,-455,-101,210,-455,-455,-455,39,-455,-455',
'32,-100,-455,55,56,-455,-455,57,-455,34,-455,564,-455,43,-455,-455,-455',
'-455,-455,-455,-455,20,-455,259,-455,-102,86,78,81,82,211,83,84,553',
'-98,888,79,85,-455,-455,-455,-455,-533,-455,59,-455,80,-455,522,-533',
'-533,-533,-96,-97,-533,-533,-533,-82,-533,671,-104,671,512,-68,522,514',
'-529,-533,-533,-533,-533,-103,-99,542,563,522,522,-99,-533,-533,103',
'-533,-533,-533,-533,-533,107,-98,-101,785,-530,106,671,107,555,554,565',
'-92,106,760,-99,207,208,207,208,-100,-91,499,-533,-533,-533,-533,-533',
'-533,-533,-533,-533,-533,-533,-533,-533,-533,78,534,-533,-533,-533,535',
'726,-533,-93,79,-533,207,208,-533,-533,115,-533,-89,-533,80,-533,199',
'-533,-533,-533,-533,-533,-533,-533,200,-533,-533,-533,107,-103,-87,-88',
'107,106,107,107,201,106,-95,106,106,-533,-533,-533,-533,-458,-533,206',
'-533,-94,-100,107,-458,-458,-458,-529,106,-458,-458,-458,250,-458,107',
'107,211,107,211,106,106,-458,106,-458,-458,-458,-98,-101,260,759,-90',
'-98,-101,-458,-458,304,-458,-458,-458,-458,-458,207,208,599,-100,-92',
'-90,724,107,-100,305,260,599,106,599,774,211,652,651,650,599,653,372',
'-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458,-458',
'598,-466,-458,-458,-458,385,-458,-458,-466,598,-458,598,725,-458,-458',
'255,-458,598,-458,-99,-458,428,-458,-458,-458,-458,-458,-458,-458,636',
'-458,528,-458,430,-92,-90,-469,259,255,577,553,306,307,431,-526,-533',
'-458,-458,-458,-458,-281,-458,210,-458,211,-458,846,-281,-281,-281,259',
'-101,-281,-281,-281,-470,-281,107,502,463,-92,-90,106,-92,-90,503,-281',
'-281,-281,-92,-90,472,-90,-533,427,-96,-281,-281,-99,-281,-281,-281',
'-281,-281,780,636,-455,-533,-458,-462,429,555,554,-455,-533,-458,-462',
'474,-526,-529,703,476,-455,-533,-97,803,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-526,-533,-281,-281,-281,-533',
'727,-281,-399,578,-281,-67,-533,-281,-281,211,-281,-529,-281,-104,-281',
'-533,-281,-281,-281,-281,-281,-281,-281,-281,-281,-470,-281,484,-98',
'485,-281,-281,-281,-533,205,-469,-281,-281,492,-281,-281,-281,-281,-281',
'264,-281,-92,-281,-460,-102,231,-527,-101,107,-399,-460,207,208,106',
'-281,-281,-399,-281,-281,-281,-281,-281,211,-88,774,-399,652,651,650',
'-97,653,512,-95,-87,514,107,553,228,-104,-96,106,230,229,-399,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-458,553',
'-281,-281,-281,255,582,-458,-455,499,-281,496,-527,-281,-463,-455,-458',
'500,-281,501,-281,-463,-281,-281,-281,-281,-281,-281,-281,-533,-281',
'553,-281,231,-527,710,-533,-533,-533,555,554,558,-533,-533,928,-533',
'-281,-281,507,-93,-464,-281,-94,231,-533,-102,107,-464,-103,508,530',
'106,555,554,560,-533,-533,531,-533,-533,-533,-533,-533,780,636,515,529',
'737,-89,652,651,650,553,653,-98,228,107,207,208,230,229,106,555,554',
'556,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533',
'-533,-465,231,-533,-533,-533,657,583,-465,512,516,-533,511,252,-533',
'661,660,664,663,-533,253,-533,476,-533,-533,-533,-533,-533,-533,-533',
'528,-533,-533,-533,228,555,554,551,230,229,226,227,512,374,-461,514',
'548,-533,-533,736,-91,-461,-533,549,207,208,-100,280,71,72,68,9,54,382',
'532,-282,60,61,384,383,533,64,-282,62,63,65,29,30,69,70,566,-282,494',
'495,569,28,27,26,95,94,96,97,-260,774,19,652,651,650,571,653,8,44,211',
'10,99,98,100,89,53,91,90,92,575,93,101,102,576,87,88,41,42,40,774,255',
'652,651,650,-282,653,774,770,652,651,650,-282,653,586,589,-281,892,231',
'39,231,-282,32,-281,231,55,56,231,-530,57,211,34,-281,211,211,43,774',
'770,652,651,650,-82,653,20,657,618,773,211,86,78,81,82,505,83,84,664',
'663,629,79,85,280,71,72,68,9,54,59,636,80,60,61,667,528,657,64,674,62',
'63,65,29,30,69,70,702,664,663,705,-261,28,27,26,95,94,96,97,711,774',
'19,652,651,650,463,653,8,44,463,10,99,98,100,89,53,91,90,92,211,93,101',
'102,729,87,88,41,42,40,774,474,652,651,650,538,653,774,770,652,651,650',
'913,653,476,629,-281,773,211,39,255,539,32,-281,255,55,56,629,-530,57',
'231,34,-281,231,750,43,774,770,652,651,650,-260,653,20,657,754,211,762',
'86,78,81,82,764,83,84,664,663,767,79,85,280,71,72,68,9,54,59,768,80',
'60,61,776,777,657,64,636,62,63,65,29,30,69,70,784,664,663,211,211,28',
'27,26,95,94,96,97,697,698,19,793,699,101,102,587,8,44,-262,10,99,98',
'100,89,53,91,90,92,802,93,101,102,805,87,88,41,42,40,231,235,240,241',
'242,237,239,247,248,243,244,-274,224,225,538,807,245,246,-274,39,810',
'537,282,811,736,55,56,-274,817,57,539,34,228,818,234,43,230,229,226',
'227,238,236,232,20,233,820,821,629,86,78,81,82,830,83,84,736,844,490',
'79,85,211,249,-534,-237,491,848,59,850,80,-534,-534,-534,856,489,-534',
'-534,-534,774,-534,652,651,650,858,653,231,211,861,-534,-534,-534,-534',
'815,-263,652,651,650,868,653,-534,-534,869,-534,-534,-534,-534,-534',
'774,872,652,651,650,-468,653,877,657,211,228,881,-468,884,230,229,226',
'227,886,664,663,-468,-534,-534,-534,-534,-534,-534,-534,-534,-534,-534',
'-534,-534,-534,-534,888,770,-534,-534,-534,-467,888,-534,211,893,-534',
'896,-467,-534,-534,897,-534,902,-534,904,-534,-467,-534,-534,-534,-534',
'-534,-534,-534,-274,-534,-534,-534,907,875,909,-274,888,888,914,507',
'876,921,922,930,-274,-534,-534,-534,-534,874,-534,211,-534,5,71,72,68',
'9,54,942,888,-468,60,61,888,888,946,64,-468,62,63,65,29,30,69,70,930',
'-468,949,950,952,28,27,26,95,94,96,97,888,815,19,652,651,650,888,653',
'8,44,7,10,99,98,100,89,53,91,90,92,888,93,101,102,-530,87,88,41,42,40',
'774,-529,652,651,650,930,653,888,774,930,652,651,650,,653,,,,,39,,,32',
',,55,56,,,57,774,34,652,651,650,43,653,770,737,-467,652,651,650,20,653',
'657,-467,,86,78,81,82,,83,84,-467,664,663,79,85,280,71,72,68,9,54,59',
'770,80,60,61,,,,64,657,62,63,65,29,30,69,70,,661,660,664,663,28,27,26',
'95,94,96,97,,774,19,652,651,650,,653,8,44,,10,99,98,100,89,53,91,90',
'92,,93,101,102,,87,88,41,42,40,110,111,112,113,114,425,,774,770,652',
'651,650,426,653,,,203,-325,,39,,427,32,204,-325,55,56,,,57,-282,34,202',
'-325,,43,774,-282,652,651,650,,653,20,657,,-282,,86,78,81,82,,83,84',
'664,663,,79,85,280,71,72,68,9,54,59,,80,60,61,,,657,64,,62,63,65,29',
'30,69,70,,664,663,,,28,27,26,95,94,96,97,,,19,110,111,112,113,114,8',
'44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,110,111',
'112,113,114,,,,774,,652,651,650,,653,,-281,,,39,,,32,-281,,55,56,,-530',
'57,,34,-281,,,43,,,655,,652,651,650,20,653,657,,,86,78,81,82,,83,84',
',664,663,79,85,280,71,72,68,9,54,59,,80,60,61,,,,64,657,62,63,65,29',
'30,69,70,,661,660,664,663,28,27,26,95,94,96,97,,,19,110,111,112,113',
'114,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,',
',,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,655,,652,651,650,20',
'653,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60,61,,',
',64,657,62,63,65,29,30,69,70,,661,660,664,663,28,27,26,95,94,96,97,',
',19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42',
'40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,737,,652,651',
'650,20,653,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60',
'61,,,,64,657,62,63,65,29,30,69,70,,661,660,664,663,28,27,26,95,94,96',
'97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,737,,652,651',
'650,20,653,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60',
'61,,,,64,657,62,63,65,29,30,69,70,,661,660,664,663,28,27,26,95,94,96',
'97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,655,,652,651',
'650,20,653,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60',
'61,,,,64,657,62,63,65,29,30,69,70,,661,660,664,663,28,27,26,95,94,96',
'97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,655,,652,651',
'650,20,653,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60',
'61,,,,64,657,62,63,65,29,30,69,70,,661,660,664,663,28,27,26,95,94,96',
'97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,655,,652,651',
'650,20,653,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60',
'61,,,,64,657,62,63,65,29,30,69,70,,661,660,664,663,28,27,26,95,94,96',
'97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,231,,,,,,,,,,,,,,,,245,246,,39,,,32,,,55,56,,,57,,34,228,,234',
'43,230,229,226,227,,,232,20,233,,,,86,78,81,82,,83,84,,,,79,85,280,71',
'72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95',
'94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87',
'88,41,42,40,231,,,,,,,,,,,,,,,,245,246,,39,,,32,,,55,56,,,57,,34,228',
',234,43,230,229,226,227,,,232,20,233,,,,86,78,81,82,,83,84,,,,79,85',
'280,71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27',
'26,95,94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,231,235,240,241,242,237,239,247,,243,244,,,,,,245,246',
',39,,,32,,,55,56,,,57,,34,228,,234,43,230,229,226,227,238,236,232,20',
'233,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60,61,,',
',64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44,',
'10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,231,-552,-552',
'-552,-552,237,239,,,-552,-552,,,,,,245,246,,39,,,32,,,55,56,,,57,,34',
'228,,234,43,230,229,226,227,238,236,232,20,233,,,,86,78,81,82,,83,84',
',,,79,85,280,71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70',
',,,,,28,27,26,95,94,96,97,,,19,,,,,587,8,44,,10,99,98,100,89,53,91,90',
'92,,93,101,102,,87,88,41,42,40,231,235,240,241,242,237,239,247,248,243',
'244,,224,225,,,245,246,,39,,,32,,,55,56,,,57,,34,228,,234,43,230,229',
'226,227,238,236,232,20,233,,,,86,78,81,82,,83,84,,,,79,85,,249,-535',
',,,59,,80,-535,-535,-535,,,-535,-535,-535,655,-535,652,651,650,,653',
',,,-535,-535,-535,-535,,,,,,,,-535,-535,,-535,-535,-535,-535,-535,,',
',,,,,,657,644,,,,,,,,661,660,664,663,,-535,-535,-535,-535,-535,-535',
'-535,-535,-535,-535,-535,-535,-535,-535,,,-535,-535,-535,,,-535,,,-535',
',,-535,-535,,-535,,-535,,-535,,-535,-535,-535,-535,-535,-535,-535,,-535',
'-535,-535,,,,,,,,,,,,,,-535,-535,-535,-535,,-535,,-535,280,71,72,68',
'9,54,,,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97',
',,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42',
'40,231,-552,-552,-552,-552,237,239,,,-552,-552,,,,,,245,246,,39,,,282',
',,55,56,,,57,,34,228,,234,43,230,229,226,227,238,236,232,20,233,,,,86',
'78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44,,10,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,231,-552,-552,-552,-552,237',
'239,,,-552,-552,,,,,,245,246,,39,,,32,,,55,56,,,57,,34,228,,234,43,230',
'229,226,227,238,236,232,20,233,,,,86,78,81,82,,83,84,,,,79,85,280,71',
'72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95',
'94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87',
'88,41,42,40,231,,,,,,,,,,,,,,,,245,246,,39,,,32,,,55,56,,,57,,34,228',
',234,43,230,229,226,227,,,232,20,233,,,,86,78,81,82,,83,84,,,,79,85',
'280,71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27',
'26,95,94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,231,-552,-552,-552,-552,237,239,,,-552,-552,,,,,,245',
'246,,39,,,32,,,55,56,,,57,,34,228,,234,43,230,229,226,227,238,236,232',
'20,233,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44',
',10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,231,-552,-552',
'-552,-552,237,239,,,-552,-552,,,,,,245,246,,39,,,32,,,55,56,,,57,,34',
'228,,234,43,230,229,226,227,238,236,232,20,233,,,,86,78,81,82,,83,84',
',,,79,85,280,71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70',
',,,,,28,27,26,95,94,96,97,,,19,,,,,572,8,44,,10,99,98,100,89,53,91,90',
'92,,93,101,102,,87,88,41,42,40,231,235,240,241,242,237,239,247,248,243',
'244,,224,225,,,245,246,,39,,,32,,,55,56,,,57,,34,228,,234,43,230,229',
'226,227,238,236,232,20,233,,,,86,78,81,82,,83,84,,,,79,85,,249,-275',
',,,59,,80,-275,-275,-275,,,-275,-275,-275,655,-275,652,651,650,,653',
',,,,-275,-275,-275,,,,,,,,-275,-275,,-275,-275,-275,-275,-275,,,,,,',
',,657,692,,,,,,,,661,660,664,663,,-275,-275,-275,-275,-275,-275,-275',
'-275,-275,-275,-275,-275,-275,-275,,,-275,-275,-275,,,-275,,,-275,,',
'-275,-275,,-275,,-275,,-275,,-275,-275,-275,-275,-275,-275,-275,,-275',
',-275,,,,,,,,,,,,,,-275,-275,-275,-275,,-275,,-275,280,71,72,68,9,54',
',,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19',
',,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,231',
'235,240,241,242,237,239,,,243,244,,,,,,245,246,,39,,,32,,,55,56,,,57',
',34,228,,234,43,230,229,226,227,238,236,232,20,233,,,,86,78,81,82,,83',
'84,,,,79,85,280,71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69',
'70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90',
'92,,93,101,102,,87,88,41,42,40,231,235,240,241,242,237,239,247,248,243',
'244,,-552,-552,,,245,246,,39,,,282,,,55,56,,,57,,34,228,,234,43,230',
'229,226,227,238,236,232,20,233,,,,86,78,81,82,,83,84,,,,79,85,280,71',
'72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95',
'94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87',
'88,41,42,40,231,235,240,241,242,237,239,247,248,243,244,,-552,-552,',
',245,246,,39,,,32,,,55,56,,,57,,34,228,,234,43,230,229,226,227,238,236',
'232,20,233,,,,86,78,81,82,,83,84,,,,79,85,5,71,72,68,9,54,59,,80,60',
'61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8',
'44,7,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,231,,,',
',,,,,,,,,,,,245,246,,39,,,32,,,55,56,,,57,,34,228,,234,43,230,229,226',
'227,,,232,20,233,,,,86,78,81,82,,83,84,,,,79,85,280,71,72,68,9,54,59',
',80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19',
',,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,231',
'-552,-552,-552,-552,237,239,,,-552,-552,,,,,,245,246,,39,,,32,,,55,56',
',,57,,34,228,,234,43,230,229,226,227,238,236,232,20,233,,,,86,78,81',
'82,,83,84,,,,79,85,280,71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53',
'91,90,92,,93,101,102,,87,88,41,42,40,231,,,,,,,,,,,,,,,,245,246,,39',
',,32,,,55,56,,,57,,34,228,,234,43,230,229,226,227,,,,20,,,,,86,78,81',
'82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,231,,,,,,,,,,,,,,,,245,246,,216,,',
'222,,,55,56,,,57,,,228,,234,43,230,229,226,227,,,,221,,,,,86,78,81,82',
',83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,231,,,,,,,,,,,,,,,,245,246,,216,,',
'222,,,55,56,,,57,,,228,,,43,230,229,226,227,,,,221,,,,,86,78,81,82,',
'83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,295,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,,655,301,652,651,650,,653,,,,,,,,,,,,,,,291',
',,287,,,55,56,,,57,,,,,,657,692,,,,,,,,661,660,664,663,86,78,81,82,',
'83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,295,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88',
',,301,,,,,,,,,,,,,,,,,,,,291,,,287,,,55,56,,,57,,,,,,,,,,,,,,,,,,,86',
'78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65',
'29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89',
'53,91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,273,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,',
'79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28',
'27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101',
'102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,273,',
'271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81',
'82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,',
'55,56,,,57,,273,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
'211,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293',
'294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101',
'102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,613,',
',,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80',
'60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,',
',,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,',
',,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82',
',83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54',
'59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96',
'97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42',
'40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,',
'86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89',
'53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222',
',,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,211,71',
'72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95',
'94,96,97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88',
'41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,20',
',,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97',
',,223,,,,,,,295,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,,,301',
',,,,,,,,,,,,,,,,,,,871,,,222,,,55,56,,,57,,,,,,,,,,,,,,,,,,,86,78,81',
'82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298',
'69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53',
'91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,',
'55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72',
'68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,',
'71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87',
'88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,',
',221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64',
',62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28',
'27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,',
',,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,9,54,59,,80,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44',
',10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,',
',,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,,,,,,,20,,,,,86,78,81,82,,83',
'84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,',
',,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',273,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,',
'54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97',
',,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101,102,,87,88,41,42',
'40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,273,,271,,43,,,,,,,,221',
',,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,295,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,,,301,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,,245,246,,291,,,222,,,55,56,,,57,,,228',
',234,,230,229,226,227,238,236,232,,233,,,,86,78,81,82,,83,84,,,,79,85',
',249,,487,,,59,,80,71,72,68,,54,,,,60,61,,,,64,,62,63,65,29,30,69,70',
',,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92',
',93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81',
'82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298',
'69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53',
'91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222',
',,55,56,,,57,,,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,',
'71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101',
'102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,613,',
'271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,390,,,,43,,,,,,,,221,,,,,86,78',
'81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297',
'298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89',
'53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222',
',,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71',
'72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300',
'95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87',
'88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,708,,,,43,,,',
',,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,',
',,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44',
',,99,98,100,89,53,91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,',
',,,,,,,,,216,,,222,,,55,56,,,57,,273,,271,,43,,,,,,,,221,,,,,86,78,81',
'82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30',
'69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,295,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88',
',,301,,,,,,,,,,,,,,,,,,,,291,,,287,,,55,56,,,57,,286,,,,,,,,,,,,,,,',
',86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89',
'53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222',
',,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72',
'68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95',
'94,96,97,,,223,,,,,,,295,,,99,98,100,89,53,91,90,92,,93,101,102,,87',
'88,,,301,231,235,240,241,242,237,239,247,248,243,244,,224,225,,,245',
'246,,291,,,222,,,55,56,,,57,,,228,,234,,230,229,226,227,238,236,232',
',233,,,,86,78,81,82,,83,84,,,,79,85,,249,,303,,,59,,80,71,72,68,,54',
',,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101,102,,87,88,41,42,40,',
',,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,273,,271,,43,,,,,,,,221,,',
',,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100',
'89,53,91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216',
',,222,,,55,56,,,57,,273,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,',
',,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,',
',,293,294,300,95,94,96,97,,,223,,,,,,,295,,,99,98,100,89,53,91,90,92',
',93,101,102,,87,88,,,301,,,,,,,,,,,,,,,,,,,,336,,,32,,,55,56,,,57,,34',
',,,,,,,,,,,,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60',
'61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,273,,,,43,,,,,,,,221,,,,,86,78',
'81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53',
'91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222',
',,55,56,,,57,,273,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'95,94,96,97,,,19,,,,,,8,44,7,10,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55,56,,,57,,34,,,,43,,',
',,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,',
',,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,',
',,295,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,,,301,,,,,,,,,,',
',,,,,,,,,291,,,287,,,55,56,,,57,,,,,,,,,,,,,,,,,,,86,78,81,82,,83,84',
',,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,',
',28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93',
'101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,',
',,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80',
'60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,',
',,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,',
',,,,,,,,,,,,,216,,,222,,,55,56,,,57,,390,,,,43,,,,,,,,221,,,,,86,78',
'81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297',
'298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89',
'53,91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101',
'102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,613,',
',,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80',
'60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,390,,,,43,,,,,,,,221,,,,,86,78',
'81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101,102,,87,88,41,42,40,',
',,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,273,,271,,43,,,,,,,,221,,',
',,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89',
'53,91,90,92,,93,101,102,,87,88,41,42,40,231,235,240,241,242,237,239',
'247,248,243,244,,224,225,,,245,246,,216,,,222,,,55,56,,,57,,,228,,234',
'43,230,229,226,227,238,236,232,20,233,,,,86,78,81,82,,83,84,,,,79,85',
'107,249,,,,106,59,,80,71,72,68,,54,,,,60,61,,,,64,,62,63,65,29,30,69',
'70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92',
',93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,',
'80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81',
'82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298',
'69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53',
'91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,',
'55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72',
'68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94',
'96,97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,20,,',
',,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63',
'65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98',
'100,89,53,91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97',
',,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40',
',,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86',
'78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65',
'297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,',
',,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61',
',,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,',
',,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,',
',,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82',
',83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,',
',,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61',
',,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,',
',,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,',
',,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82',
',83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97',
',,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40',
',,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86',
'78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65',
'297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,',
',,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61',
',,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,',
',,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,',
',,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82',
',83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97',
',,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40',
',,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86',
'78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65',
'297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,',
',,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61',
',,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,',
',,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,',
',,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82',
',83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69',
'70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91',
'90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55',
'56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97',
',,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40',
',,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86',
'78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65',
'297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,295,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,,,301,,,,,,,,,,,,,,,,,,,,827,,,222',
',,55,56,,,57,,,,,,,,,,,,,,,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94',
'96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,',
',,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,',
'71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'95,94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,41,42,40,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',,245,246,,39,,,32,,,55,56,,,57,,34,228,,234,43,230,229,226,227,238',
'236,232,20,233,,,,86,78,81,82,,83,84,,,,79,85,,249,,,,374,59,,80,71',
'72,68,,54,,,,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96',
'97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42',
'40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86',
'78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65',
'297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101',
'102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,271',
',43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80',
'60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81',
'82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298',
'69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53',
'91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,',
'55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72',
'68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95',
'94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101,102,,87',
'88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,613,,271,,43',
',,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44',
',,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,',
',,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84',
',,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,',
',28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101',
'102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43',
',,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,9,54,59,,80,60,61',
',,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44',
'7,10,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,,245,246,,39,,,32,,,55,56',
',,57,,34,228,,234,43,230,229,226,227,238,236,232,20,233,,,,86,78,81',
'82,,83,84,,,,79,85,,249,,,,374,59,,80,71,72,68,,54,,,,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100',
'89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,',
'222,,,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,',
'71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26',
'95,94,96,97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87',
'88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,',
',20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64',
',62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44',
',,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,',
',,,,,,216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83',
'84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70',
',,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90',
'92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56',
',,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54',
'59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96',
'97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101,102,,87,88,41',
'42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,273,,,,43,,,,,,,,221',
',,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,44,,,99',
'98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,',
',216,,,222,,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,',
',79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,',
',293,294,300,95,94,96,97,,,223,,,,,,,44,,,99,98,100,89,53,91,90,92,',
'93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57',
',,,,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59',
',80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,275,93,101,102,,87,88,41,42,40,',
',,,,,,,,,,,,,,,,,,216,,,222,,,55,56,,,57,,273,,271,,43,,,,,,,,221,,',
',,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63',
'65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,,44,,,99,98,100,89',
'53,91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216,,,222',
',,55,56,,,57,,,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72',
'68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95',
'94,96,97,,,223,,,,,,,295,,,99,98,100,341,53,91,90,342,,93,101,102,,87',
'88,,,301,,,,,,,,,,,,,,,,,,,,343,,,222,,,55,56,,,57,,,,,,,,,,,,,,,,,',
',86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63',
'65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223,,,,,,,295,,,99,98',
'100,341,53,91,90,342,,93,101,102,,87,88,,,301,,,,,,,,,,,,,,,,,348,,',
'343,,,222,,,55,56,,,57,,,,,,,,,,,,,,,,,,,86,78,81,82,,83,84,,,,79,85',
',71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294',
'300,95,94,96,97,,,223,,,,,,,295,,,99,98,100,89,53,91,90,92,,93,101,102',
',87,88,,,301,,,,,,,,,,,,,,,,,,,,291,,,287,,,55,56,,,57,,,,,,,,,,,,,',
',,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62',
'63,65,29,30,69,70,,,,,,28,27,26,95,94,96,97,,,223,,,,,,,44,,,99,98,100',
'89,53,91,90,92,275,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,216',
',,222,,,55,56,,,57,,273,,271,,43,,,,,,,,221,,,,,86,78,81,82,,83,84,',
',,79,85,,71,72,68,,54,59,,80,60,61,,,,64,,62,63,65,297,298,69,70,,,',
',,293,294,300,95,94,96,97,,,223,,,,,,,295,,,99,98,100,89,53,91,90,92',
',93,101,102,,87,88,,,301,,,,,,,,,,,,,,,,,,,,291,,,287,,,55,56,,,57,',
',,,,,,,,,,,,,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68,,54,59,,80,60',
'61,,,,64,,62,63,65,297,298,69,70,,,,,,293,294,300,95,94,96,97,,,223',
',,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42,40,,,,',
',,,,,,,,,,,,,,,216,,,222,505,,55,56,,,57,,,,,,43,,,,,,,,221,,,,,86,78',
'81,82,,83,84,,,,79,85,,71,72,68,9,54,59,,80,60,61,,,,64,,62,63,65,29',
'30,69,70,,,,,,28,27,26,95,94,96,97,,,19,,,,,,8,44,,10,99,98,100,89,53',
'91,90,92,,93,101,102,,87,88,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,32,,,55',
'56,,,57,,34,,,,43,,,,,,,,20,,,,,86,78,81,82,,83,84,,,,79,85,,71,72,68',
',54,59,,80,60,61,,,,64,,62,63,65,29,30,69,70,,,,,,28,27,26,95,94,96',
'97,,,19,,,,,,,44,,,99,98,100,89,53,91,90,92,,93,101,102,,87,88,41,42',
'40,231,235,240,241,242,237,239,247,248,243,244,,224,225,,,245,246,,216',
',,222,,,55,56,,,57,,,228,,234,43,230,229,226,227,238,236,232,20,233',
',,,86,78,81,82,,83,84,,,,79,85,211,249,-243,,,,59,,80,-243,-243,-243',
',,-243,-243,-243,,-243,,,,,,,,,,-243,,,,,,,,,,-243,-243,,-243,-243,-243',
'-243,-243,,,,,,,,,,,,-243,,,,,,,-243,-243,-243,,,-243,-243,-243,,-243',
',,,,,-243,,,,-243,,,-243,,,,,255,-243,-243,-243,,-243,-243,-243,-243',
'-243,,,,,,,,,,,,,,-243,,,,,,,,,-243,,,,,-243,,-243,-243,-243,-243,-243',
'-243,-243,-243,,-243,,-243,,,,,255,-243,-243,-243,-243,,,,,,,,,-243',
'-243,,-243,-243,-243,-243,-243,,,-243,,,,,,,,,,,,,,-243,,,,,-243,-243',
'-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,-243,,,-243',
'-243,-243,,,-243,,255,-243,,,-243,-243,,-243,,-243,,-243,,-243,-243',
'-243,-243,-243,-243,-243,-288,-243,-243,-243,,,,-288,-288,-288,,,-288',
'-288,-288,,-288,-243,-243,,-243,,-243,,,,-288,-288,,,,,,,,,-288,-288',
',-288,-288,-288,-288,-288,,,,,,,,,,,,,,,,,,,,,,,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,,,-288,-288,-288,',
',-288,,264,-288,,,-288,-288,,-288,,-288,,-288,,-288,-288,-288,-288,-288',
'-288,-288,-398,-288,,-288,,,,-398,-398,-398,,,-398,-398,-398,,-398,-288',
'-288,,-288,,-288,,,-398,-398,-398,,,,,,,,,-398,-398,,-398,-398,-398',
'-398,-398,,,,,,,,,,,,,,,,,,,,,,,-398,-398,-398,-398,-398,-398,-398,-398',
'-398,-398,-398,-398,-398,-398,,,-398,-398,-398,,,-398,,255,-398,,,-398',
'-398,,-398,,-398,,-398,,-398,-398,-398,-398,-398,-398,-398,,-398,-398',
'-398,,,,,,,,,,,,,,-398,-398,,-398,,-398,166,177,167,190,163,183,173',
'172,193,194,188,171,170,165,191,195,196,175,164,178,182,184,176,169',
',,,185,192,187,186,179,189,174,162,181,180,,,,,,161,168,159,160,156',
'157,158,118,120,117,,119,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,,,155,86,,,,,,,,,,,85,166,177,167,190,163,183',
'173,172,193,194,188,171,170,165,191,195,196,175,164,178,182,184,176',
'169,,,,185,192,187,186,179,189,174,162,181,180,,,,,,161,168,159,160',
'156,157,158,118,120,,,119,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,,,155,86,,,,,,,,,,,85,166,177,167,190,163,183',
'173,172,193,194,188,171,170,165,191,195,196,175,164,178,182,184,176',
'169,,,,185,192,187,186,179,189,174,162,181,180,,,,,,161,168,159,160',
'156,157,158,118,120,,,119,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,,,155,86,,,,,,,,,,,85,166,177,167,190,163,183',
'173,172,193,194,188,171,170,165,191,195,196,175,164,178,182,184,176',
'169,,,,185,192,187,186,179,189,174,162,181,180,,,,,,161,168,159,160',
'156,157,158,118,120,,,119,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,,,155,86,,,,,,,,,,,85,166,177,167,190,163,183',
'173,172,193,194,188,171,170,165,191,195,196,175,164,178,182,184,176',
'169,,,,185,192,187,186,179,189,174,162,181,180,,,,,,161,168,159,160',
'156,157,158,118,120,,,119,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,,,155,166,177,167,190,163,183,173,172,193,194',
'188,171,170,165,191,195,196,175,164,178,182,184,176,169,,,,185,192,187',
'359,358,360,357,162,181,180,,,,,,161,168,159,160,354,355,356,352,120',
'91,90,353,,93,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,',
',153,154,140,141,,,,,,364,,,,,,,,145,144,,129,150,147,146,142,143,137',
'135,127,149,128,679,409,155,,680,,,,,,,,151,152,,148,130,131,132,139',
'136,138,,,133,134,,,,153,154,140,141,,,,,,255,,,,,,,,145,144,,129,150',
'147,146,142,143,137,135,127,149,128,592,409,155,,593,,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,255,',
',,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,590,402,155',
',591,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154',
'140,141,,,,,,255,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127',
'149,128,939,409,155,,938,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,255,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,625,409,155,,626,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,255,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,622,402,155,,623,,',
',,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141',
',,,,,255,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
'590,402,155,,591,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134',
',,,153,154,140,141,,,,,,255,,,,,,,,145,144,,129,150,147,146,142,143',
'137,135,127,149,128,592,409,155,,593,,,,,,,,151,152,,148,130,131,132',
'139,136,138,,,133,134,,,,153,154,140,141,,,,,,255,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,460,402,155,,461,,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,460,402',
'155,,461,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153',
'154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127',
'149,128,405,409,155,,404,,,,,,,,151,152,,148,130,131,132,139,136,138',
',,133,134,,,,153,154,140,141,,,,,,255,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,398,402,155,,399,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,255,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,460,402,155,,461,,',
',,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141',
',,,,,255,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128',
'682,409,155,,683,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134',
',,,153,154,140,141,,,,,,255,,,,,,,,145,144,,129,150,147,146,142,143',
'137,135,127,149,128,677,402,155,,678,,,,,,,,151,152,,148,130,131,132',
'139,136,138,,,133,134,,,,153,154,140,141,,,,,,255,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,917,402,155,,918,,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,255',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,919,409',
'155,,920,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153',
'154,140,141,,,,,,255,,,,,,,,145,144,,129,150,147,146,142,143,137,135',
'127,149,128,,,155,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,',
'231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,',
',,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,',
'228,,234,,230,229,226,227,238,236,232,,233,,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230',
'229,226,227,238,236,232,,233,,231,235,240,241,242,237,239,247,248,243',
'244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238',
'236,232,,233,,231,235,240,241,242,237,239,247,248,243,244,,224,225,',
'249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233',
',231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,',
',,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,',
'228,,234,,230,229,226,227,238,236,232,,233,,,,,,,,,,,,,,,,,249' ]
        racc_action_table = arr = ::Array.new(23289, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'89,54,54,54,54,54,54,89,89,89,54,54,89,89,89,54,89,54,54,54,54,54,54',
'54,89,58,89,89,89,54,54,54,54,54,54,54,89,89,54,89,89,89,89,89,54,54',
'917,54,54,54,54,54,54,54,54,54,347,54,54,54,675,54,54,54,54,54,89,89',
'89,89,89,89,89,89,89,89,89,89,89,89,678,19,89,89,89,54,89,89,54,679',
'89,54,54,89,89,54,89,54,89,370,89,54,89,89,89,89,89,89,89,54,89,58,89',
'680,54,54,54,54,19,54,54,371,787,958,54,54,89,89,89,89,592,89,54,89',
'54,89,326,592,592,592,333,334,592,592,592,617,592,788,337,524,318,617',
'753,318,679,592,592,592,592,532,917,347,370,327,849,917,592,592,1,592',
'592,592,592,592,675,940,918,675,680,675,525,347,371,371,371,678,347',
'643,677,550,550,633,633,919,679,428,592,592,592,592,592,592,592,592',
'592,592,592,592,592,592,76,343,592,592,592,343,592,592,680,76,592,544',
'544,592,592,7,592,787,592,76,592,10,592,592,592,592,592,592,592,12,592',
'592,592,693,428,333,334,788,693,524,326,13,788,337,524,326,592,592,592',
'592,92,592,16,592,532,592,753,92,92,92,919,753,92,92,92,22,92,327,849',
'550,525,633,327,849,92,525,92,92,92,940,918,25,643,677,940,918,92,92',
'36,92,92,92,92,92,422,422,468,919,623,622,590,544,919,39,296,467,544',
'458,773,44,773,773,773,605,773,103,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,468,356,92,92,92,197,92,92,356,467,92,458,591,92,92,25,92,605',
'92,590,92,216,92,92,92,92,92,92,92,854,92,854,92,218,623,622,214,25',
'296,398,561,40,40,219,341,625,92,92,92,92,593,92,223,92,422,92,773,593',
'593,593,296,591,593,593,593,215,593,687,308,254,623,622,687,623,622',
'308,593,593,593,623,622,268,398,682,308,214,593,593,398,593,593,593',
'593,593,666,666,341,625,353,360,217,561,561,341,625,353,360,269,341',
'625,561,272,341,625,215,728,593,593,593,593,593,593,593,593,593,593',
'593,593,593,593,341,625,593,593,593,682,593,593,746,399,593,281,682',
'593,593,283,593,682,593,217,593,682,593,593,593,593,593,593,593,404',
'593,38,593,284,728,285,404,404,404,682,15,37,404,404,291,404,593,593',
'593,593,294,593,399,593,358,593,434,342,399,543,746,358,509,509,543',
'404,404,746,404,404,404,404,404,295,38,892,746,892,892,892,38,892,642',
'15,37,642,278,368,434,15,37,278,434,434,746,404,404,404,404,404,404',
'404,404,404,404,404,404,404,404,342,369,404,404,404,300,404,342,352',
'305,404,302,342,404,357,352,342,306,404,307,404,357,404,404,404,404',
'404,404,404,405,404,367,404,310,342,573,405,405,405,368,368,368,405',
'405,892,405,404,404,313,404,355,404,305,435,405,404,3,355,305,314,335',
'3,369,369,369,405,405,335,405,405,405,405,405,931,931,319,335,598,573',
'598,598,598,366,598,573,435,330,17,17,435,435,330,367,367,367,405,405',
'405,405,405,405,405,405,405,405,405,405,405,405,354,454,405,405,405',
'598,405,354,317,320,405,317,24,405,598,598,598,598,405,24,405,322,405',
'405,405,405,405,405,405,331,405,405,405,454,366,366,366,454,454,454',
'454,321,332,359,321,362,405,405,598,405,359,405,362,325,325,405,636',
'636,636,636,636,636,117,336,877,636,636,117,117,338,636,877,636,636',
'636,636,636,636,636,380,877,301,301,386,636,636,636,636,636,636,636',
'388,844,636,844,844,844,391,844,636,636,394,636,636,636,636,636,636',
'636,636,636,396,636,636,636,397,636,636,636,636,636,770,406,770,770',
'770,535,770,884,844,884,884,884,535,884,414,424,626,844,436,636,437',
'535,636,626,438,636,636,439,626,636,465,636,626,469,482,636,952,770',
'952,952,952,483,952,636,884,486,770,488,636,636,636,636,493,636,636',
'884,884,497,636,636,750,750,750,750,750,750,636,506,636,750,750,521',
'526,952,750,527,750,750,750,750,750,750,750,558,952,952,564,570,750',
'750,750,750,750,750,750,574,657,750,657,657,657,579,657,750,750,584',
'750,750,750,750,750,750,750,750,750,594,750,750,750,596,750,750,750',
'750,750,846,610,846,846,846,870,846,942,657,942,942,942,870,942,612',
'619,683,657,621,750,624,870,750,683,627,750,750,628,683,750,631,750',
'683,632,634,750,909,846,909,909,909,637,909,750,942,638,641,646,750',
'750,750,750,647,750,750,942,942,648,750,750,32,32,32,32,32,32,750,655',
'750,32,32,662,665,909,32,668,32,32,32,32,32,32,32,673,909,909,676,685',
'32,32,32,32,32,32,32,554,554,32,690,554,554,554,417,32,32,707,32,32',
'32,32,32,32,32,32,32,712,32,32,32,730,32,32,32,32,32,417,417,417,417',
'417,417,417,417,417,417,417,292,417,417,345,731,417,417,292,32,732,345',
'32,734,735,32,32,292,737,32,345,32,417,739,417,32,417,417,417,417,417',
'417,417,32,417,741,742,745,32,32,32,32,756,32,32,761,772,290,32,32,775',
'417,409,417,290,778,32,781,32,409,409,409,790,290,409,409,409,907,409',
'907,907,907,794,907,453,795,798,409,409,409,409,736,799,736,736,736',
'812,736,409,409,813,409,409,409,409,409,946,819,946,946,946,289,946',
'827,907,833,453,834,289,835,453,453,453,453,838,907,907,289,409,409',
'409,409,409,409,409,409,409,409,409,409,409,409,839,946,409,409,409',
'288,841,409,843,845,409,851,288,409,409,852,409,857,409,862,409,288',
'409,409,409,409,409,409,409,828,409,409,409,863,826,864,828,865,867',
'871,873,826,878,879,894,828,409,409,409,409,826,409,916,409,115,115',
'115,115,115,115,923,924,825,115,115,925,926,927,115,825,115,115,115',
'115,115,115,115,929,825,932,933,934,115,115,115,115,115,115,115,935',
'869,115,869,869,869,936,869,115,115,115,115,115,115,115,115,115,115',
'115,115,937,115,115,115,938,115,115,115,115,115,930,939,930,930,930',
'947,930,956,888,957,888,888,888,,888,,,,,115,,,115,,,115,115,,,115,893',
'115,893,893,893,115,893,930,904,824,904,904,904,115,904,888,824,,115',
'115,115,115,,115,115,824,888,888,115,115,545,545,545,545,545,545,115',
'893,115,545,545,,,,545,904,545,545,545,545,545,545,545,,904,904,904',
'904,545,545,545,545,545,545,545,,928,545,928,928,928,,928,545,545,,545',
'545,545,545,545,545,545,545,545,,545,545,545,,545,545,545,545,545,481',
'481,481,481,481,213,,886,928,886,886,886,213,886,,,14,45,,545,,213,545',
'14,45,545,545,,,545,492,545,14,45,,545,810,492,810,810,810,,810,545',
'886,,492,,545,545,545,545,,545,545,886,886,,545,545,701,701,701,701',
'701,701,545,,545,701,701,,,810,701,,701,701,701,701,701,701,701,,810',
'810,,,701,701,701,701,701,701,701,,,701,6,6,6,6,6,701,701,,701,701,701',
'701,701,701,701,701,701,,701,701,701,,701,701,701,701,701,616,616,616',
'616,616,,,,767,,767,767,767,,767,,920,,,701,,,701,920,,701,701,,920',
'701,,701,920,,,701,,,692,,692,692,692,701,692,767,,,701,701,701,701',
',701,701,,767,767,701,701,740,740,740,740,740,740,701,,701,740,740,',
',,740,692,740,740,740,740,740,740,740,,692,692,692,692,740,740,740,740',
'740,740,740,,,740,279,279,279,279,279,740,740,,740,740,740,740,740,740',
'740,740,740,,740,740,740,,740,740,740,740,740,,,,,,,,,,,,,,,,,,,,740',
',,740,,,740,740,,,740,,740,,,,740,,,881,,881,881,881,740,881,,,,740',
'740,740,740,,740,740,,,,740,740,782,782,782,782,782,782,740,,740,782',
'782,,,,782,881,782,782,782,782,782,782,782,,881,881,881,881,782,782',
'782,782,782,782,782,,,782,,,,,,782,782,,782,782,782,782,782,782,782',
'782,782,,782,782,782,,782,782,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782',
',,782,782,,,782,,782,,,,782,,,807,,807,807,807,782,807,,,,782,782,782',
'782,,782,782,,,,782,782,823,823,823,823,823,823,782,,782,823,823,,,',
'823,807,823,823,823,823,823,823,823,,807,807,807,807,823,823,823,823',
'823,823,823,,,823,,,,,,823,823,,823,823,823,823,823,823,823,823,823',
',823,823,823,,823,823,823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823',
'823,,,823,,823,,,,823,,,805,,805,805,805,823,805,,,,823,823,823,823',
',823,823,,,,823,823,783,783,783,783,783,783,823,,823,783,783,,,,783',
'805,783,783,783,783,783,783,783,,805,805,805,805,783,783,783,783,783',
'783,783,,,783,,,,,,783,783,,783,783,783,783,783,783,783,783,783,,783',
'783,783,,783,783,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783',
',,783,,783,,,,783,,,764,,764,764,764,783,764,,,,783,783,783,783,,783',
'783,,,,783,783,222,222,222,222,222,222,783,,783,222,222,,,,222,764,222',
'222,222,222,222,222,222,,764,764,764,764,222,222,222,222,222,222,222',
',,222,,,,,,222,222,,222,222,222,222,222,222,222,222,222,,222,222,222',
',222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,222',
',,,222,,,762,,762,762,762,222,762,,,,222,222,222,222,,222,222,,,,222',
'222,786,786,786,786,786,786,222,,222,786,786,,,,786,762,786,786,786',
'786,786,786,786,,762,762,762,762,786,786,786,786,786,786,786,,,786,',
',,,,786,786,,786,786,786,786,786,786,786,786,786,,786,786,786,,786,786',
'786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,786,,,,786',
',,644,,644,644,644,786,644,,,,786,786,786,786,,786,786,,,,786,786,691',
'691,691,691,691,691,786,,786,691,691,,,,691,644,691,691,691,691,691',
'691,691,,644,644,644,644,691,691,691,691,691,691,691,,,691,,,,,,691',
'691,,691,691,691,691,691,691,691,691,691,,691,691,691,,691,691,691,691',
'691,446,,,,,,,,,,,,,,,,446,446,,691,,,691,,,691,691,,,691,,691,446,',
'446,691,446,446,446,446,,,446,691,446,,,,691,691,691,691,,691,691,,',
',691,691,831,831,831,831,831,831,691,,691,831,831,,,,831,,831,831,831',
'831,831,831,831,,,,,,831,831,831,831,831,831,831,,,831,,,,,,831,831',
',831,831,831,831,831,831,831,831,831,,831,831,831,,831,831,831,831,831',
'445,,,,,,,,,,,,,,,,445,445,,831,,,831,,,831,831,,,831,,831,445,,445',
'831,445,445,445,445,,,445,831,445,,,,831,831,831,831,,831,831,,,,831',
'831,523,523,523,523,523,523,831,,831,523,523,,,,523,,523,523,523,523',
'523,523,523,,,,,,523,523,523,523,523,523,523,,,523,,,,,,523,523,,523',
'523,523,523,523,523,523,523,523,,523,523,523,,523,523,523,523,523,456',
'456,456,456,456,456,456,456,,456,456,,,,,,456,456,,523,,,523,,,523,523',
',,523,,523,456,,456,523,456,456,456,456,456,456,456,523,456,,,,523,523',
'523,523,,523,523,,,,523,523,832,832,832,832,832,832,523,,523,832,832',
',,,832,,832,832,832,832,832,832,832,,,,,,832,832,832,832,832,832,832',
',,832,,,,,,832,832,,832,832,832,832,832,832,832,832,832,,832,832,832',
',832,832,832,832,832,452,452,452,452,452,452,452,,,452,452,,,,,,452',
'452,,832,,,832,,,832,832,,,832,,832,452,,452,832,452,452,452,452,452',
'452,452,832,452,,,,832,832,832,832,,832,832,,,,832,832,520,520,520,520',
'520,520,832,,832,520,520,,,,520,,520,520,520,520,520,520,520,,,,,,520',
'520,520,520,520,520,520,,,520,,,,,595,520,520,,520,520,520,520,520,520',
'520,520,520,,520,520,520,,520,520,520,520,520,595,595,595,595,595,595',
'595,595,595,595,595,,595,595,,,595,595,,520,,,520,,,520,520,,,520,,520',
'595,,595,520,595,595,595,595,595,595,595,520,595,,,,520,520,520,520',
',520,520,,,,520,520,,595,410,,,,520,,520,410,410,410,,,410,410,410,519',
'410,519,519,519,,519,,,,410,410,410,410,,,,,,,,410,410,,410,410,410',
'410,410,,,,,,,,,519,519,,,,,,,,519,519,519,519,,410,410,410,410,410',
'410,410,410,410,410,410,410,410,410,,,410,410,410,,,410,,,410,,,410',
'410,,410,,410,,410,,410,410,410,410,410,410,410,,410,410,410,,,,,,,',
',,,,,,410,410,410,410,,410,,410,282,282,282,282,282,282,,,,282,282,',
',,282,,282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282',
',,282,,,,,,282,282,,282,282,282,282,282,282,282,282,282,,282,282,282',
',282,282,282,282,282,449,449,449,449,449,449,449,,,449,449,,,,,,449',
'449,,282,,,282,,,282,282,,,282,,282,449,,449,282,449,449,449,449,449',
'449,449,282,449,,,,282,282,282,282,,282,282,,,,282,282,895,895,895,895',
'895,895,282,,282,895,895,,,,895,,895,895,895,895,895,895,895,,,,,,895',
'895,895,895,895,895,895,,,895,,,,,,895,895,,895,895,895,895,895,895',
'895,895,895,,895,895,895,,895,895,895,895,895,448,448,448,448,448,448',
'448,,,448,448,,,,,,448,448,,895,,,895,,,895,895,,,895,,895,448,,448',
'895,448,448,448,448,448,448,448,895,448,,,,895,895,895,895,,895,895',
',,,895,895,901,901,901,901,901,901,895,,895,901,901,,,,901,,901,901',
'901,901,901,901,901,,,,,,901,901,901,901,901,901,901,,,901,,,,,,901',
'901,,901,901,901,901,901,901,901,901,901,,901,901,901,,901,901,901,901',
'901,447,,,,,,,,,,,,,,,,447,447,,901,,,901,,,901,901,,,901,,901,447,',
'447,901,447,447,447,447,,,447,901,447,,,,901,901,901,901,,901,901,,',
',901,901,903,903,903,903,903,903,901,,901,903,903,,,,903,,903,903,903',
'903,903,903,903,,,,,,903,903,903,903,903,903,903,,,903,,,,,,903,903',
',903,903,903,903,903,903,903,903,903,,903,903,903,,903,903,903,903,903',
'451,451,451,451,451,451,451,,,451,451,,,,,,451,451,,903,,,903,,,903',
'903,,,903,,903,451,,451,903,451,451,451,451,451,451,451,903,451,,,,903',
'903,903,903,,903,903,,,,903,903,199,199,199,199,199,199,903,,903,199',
'199,,,,199,,199,199,199,199,199,199,199,,,,,,199,199,199,199,199,199',
'199,,,199,,,,,,199,199,,199,199,199,199,199,199,199,199,199,,199,199',
'199,,199,199,199,199,199,450,450,450,450,450,450,450,,,450,450,,,,,',
'450,450,,199,,,199,,,199,199,,,199,,199,450,,450,199,450,450,450,450',
'450,450,450,199,450,,,,199,199,199,199,,199,199,,,,199,199,792,792,792',
'792,792,792,199,,199,792,792,,,,792,,792,792,792,792,792,792,792,,,',
',,792,792,792,792,792,792,792,,,792,,,,,393,792,792,,792,792,792,792',
'792,792,792,792,792,,792,792,792,,792,792,792,792,792,393,393,393,393',
'393,393,393,393,393,393,393,,393,393,,,393,393,,792,,,792,,,792,792',
',,792,,792,393,,393,792,393,393,393,393,393,393,393,792,393,,,,792,792',
'792,792,,792,792,,,,792,792,,393,53,,,,792,,792,53,53,53,,,53,53,53',
'546,53,546,546,546,,546,,,,,53,53,53,,,,,,,,53,53,,53,53,53,53,53,,',
',,,,,,546,546,,,,,,,,546,546,546,546,,53,53,53,53,53,53,53,53,53,53',
'53,53,53,53,,,53,53,53,,,53,,,53,,,53,53,,53,,53,,53,,53,53,53,53,53',
'53,53,,53,,53,,,,,,,,,,,,,,53,53,53,53,,53,,53,608,608,608,608,608,608',
',,,608,608,,,,608,,608,608,608,608,608,608,608,,,,,,608,608,608,608',
'608,608,608,,,608,,,,,,608,608,,608,608,608,608,608,608,608,608,608',
',608,608,608,,608,608,608,608,608,455,455,455,455,455,455,455,,,455',
'455,,,,,,455,455,,608,,,608,,,608,608,,,608,,608,455,,455,608,455,455',
'455,455,455,455,455,608,455,,,,608,608,608,608,,608,608,,,,608,608,287',
'287,287,287,287,287,608,,608,287,287,,,,287,,287,287,287,287,287,287',
'287,,,,,,287,287,287,287,287,287,287,,,287,,,,,,287,287,,287,287,287',
'287,287,287,287,287,287,,287,287,287,,287,287,287,287,287,432,432,432',
'432,432,432,432,432,432,432,432,,432,432,,,432,432,,287,,,287,,,287',
'287,,,287,,287,432,,432,287,432,432,432,432,432,432,432,287,432,,,,287',
'287,287,287,,287,287,,,,287,287,607,607,607,607,607,607,287,,287,607',
'607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607,607,607,607',
'607,,,607,,,,,,607,607,,607,607,607,607,607,607,607,607,607,,607,607',
'607,,607,607,607,607,607,433,433,433,433,433,433,433,433,433,433,433',
',433,433,,,433,433,,607,,,607,,,607,607,,,607,,607,433,,433,607,433',
'433,433,433,433,433,433,607,433,,,,607,607,607,607,,607,607,,,,607,607',
'0,0,0,0,0,0,607,,607,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0',
',,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,444,,,,,,,,,,,,,,,,444',
'444,,0,,,0,,,0,0,,,0,,0,444,,444,0,444,444,444,444,,,444,0,444,,,,0',
'0,0,0,,0,0,,,,0,0,600,600,600,600,600,600,0,,0,600,600,,,,600,,600,600',
'600,600,600,600,600,,,,,,600,600,600,600,600,600,600,,,600,,,,,,600',
'600,,600,600,600,600,600,600,600,600,600,,600,600,600,,600,600,600,600',
'600,443,443,443,443,443,443,443,,,443,443,,,,,,443,443,,600,,,600,,',
'600,600,,,600,,600,443,,443,600,443,443,443,443,443,443,443,600,443',
',,,600,600,600,600,,600,600,,,,600,600,686,686,686,686,686,686,600,',
'600,686,686,,,,686,,686,686,686,686,686,686,686,,,,,,686,686,686,686',
'686,686,686,,,686,,,,,,686,686,,686,686,686,686,686,686,686,686,686',
',686,686,686,,686,686,686,686,686,440,,,,,,,,,,,,,,,,440,440,,686,,',
'686,,,686,686,,,686,,686,440,,440,686,440,440,440,440,,,,686,,,,,686',
'686,686,686,,686,686,,,,686,686,,20,20,20,,20,686,,686,20,20,,,,20,',
'20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20',
'20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,441,,,,,,,,,,,,,,,,441,441',
',20,,,20,,,20,20,,,20,,,441,,441,20,441,441,441,441,,,,20,,,,,20,20',
'20,20,,20,20,,,,20,20,,221,221,221,,221,20,,20,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,221,221,221',
'442,,,,,,,,,,,,,,,,442,442,,221,,,221,,,221,221,,,221,,,442,,,221,442',
'442,442,442,,,,221,,,,,221,221,221,221,,221,221,,,,221,221,,629,629',
'629,,629,221,,221,629,629,,,,629,,629,629,629,629,629,629,629,,,,,,629',
'629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629,629,629,629,629',
'629,,629,629,629,,629,629,,860,629,860,860,860,,860,,,,,,,,,,,,,,,629',
',,629,,,629,629,,,629,,,,,,860,860,,,,,,,,860,860,860,860,629,629,629',
'629,,629,629,,,,629,629,,768,768,768,,768,629,,629,768,768,,,,768,,768',
'768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,',
',768,,,768,768,768,768,768,768,768,768,,768,768,768,,768,768,768,768',
'768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,,,,,768,,,,,,,,768',
',,,,768,768,768,768,,768,768,,,,768,768,,618,618,618,,618,768,,768,618',
'618,,,,618,,618,618,618,618,618,618,618,,,,,,618,618,618,618,618,618',
'618,,,618,,,,,,,618,,,618,618,618,618,618,618,618,618,,618,618,618,',
'618,618,,,618,,,,,,,,,,,,,,,,,,,,618,,,618,,,618,618,,,618,,,,,,,,,',
',,,,,,,,,618,618,618,618,,618,618,,,,618,618,,255,255,255,,255,618,',
'618,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255',
'255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,255,255',
'255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,255,,255,,255,,,,,,,,255,,,,,255,255,255,255,,255,255,,,,255',
'255,,256,256,256,,256,255,,255,256,256,,,,256,,256,256,256,256,256,256',
'256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256',
'256,256,256,256,256,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,',
',,,,256,,,256,,,256,256,,,256,,256,,256,,256,,,,,,,,256,,,,,256,256',
'256,256,,256,256,,,,256,256,,780,780,780,,780,256,,256,780,780,,,,780',
',780,780,780,780,780,780,780,,,,,,780,780,780,780,780,780,780,,,780',
',,,,,,780,,,780,780,780,780,780,780,780,780,,780,780,780,,780,780,780',
'780,780,,,,,,,,,,,,,,,,,,,,780,,,780,,,780,780,,,780,,,,,,780,,,,,,',
',780,,,,,780,780,780,780,,780,780,,,,780,780,,264,264,264,,264,780,',
'780,264,264,,,,264,,264,264,264,264,264,264,264,,,,,,264,264,264,264',
'264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264,264,264,264,264',
'264,264,,264,264,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264',
',,264,,264,,264,,264,,,,,,,,264,,,,,264,264,264,264,,264,264,,,,264',
'264,264,785,785,785,,785,264,,264,785,785,,,,785,,785,785,785,785,785',
'785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785,785,785',
'785,785,785,785,785,,785,785,785,,785,785,785,785,785,,,,,,,,,,,,,,',
',,,,,785,,,785,,,785,785,,,785,,785,,,,785,,,,,,,,785,,,,,785,785,785',
'785,,785,785,,,,785,785,,681,681,681,,681,785,,785,681,681,,,,681,,681',
'681,681,681,681,681,681,,,,,,681,681,681,681,681,681,681,,,681,,,,,',
',681,,,681,681,681,681,681,681,681,681,,681,681,681,,681,681,681,681',
'681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,,,,,681,,,,,,,,681',
',,,,681,681,681,681,,681,681,,,,681,681,,235,235,235,,235,681,,681,235',
'235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,',
',,235,,,,,,,,235,,,,,235,235,235,235,,235,235,,,,235,235,,613,613,613',
',613,235,,235,613,613,,,,613,,613,613,613,613,613,613,613,,,,,,613,613',
'613,613,613,613,613,,,613,,,,,,,613,,,613,613,613,613,613,613,613,613',
',613,613,613,,613,613,613,613,613,,,,,,,,,,,,,,,,,,,,613,,,613,,,613',
'613,,,613,,,,,,613,,,,,,,,613,,,,,613,613,613,613,,613,613,,,,613,613',
',271,271,271,,271,613,,613,271,271,,,,271,,271,271,271,271,271,271,271',
',,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271',
'271,271,271,,271,271,271,,271,271,271,271,271,,,,,,,,,,,,,,,,,,,,271',
',,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,,,271,271,271,271,,271,271',
',,,271,271,,802,802,802,,802,271,,271,802,802,,,,802,,802,802,802,802',
'802,802,802,,,,,,802,802,802,802,802,802,802,,,802,,,,,,,802,,,802,802',
'802,802,802,802,802,802,802,802,802,802,,802,802,802,802,802,,,,,,,',
',,,,,,,,,,,,802,,,802,,,802,802,,,802,,,,802,,802,,,,,,,,802,,,,,802',
'802,802,802,,802,802,,,,802,802,,803,803,803,,803,802,,802,803,803,',
',,803,,803,803,803,803,803,803,803,,,,,,803,803,803,803,803,803,803',
',,803,,,,,,,803,,,803,803,803,803,803,803,803,803,,803,803,803,,803',
'803,803,803,803,,,,,,,,,,,,,,,,,,,,803,,,803,,,803,803,,,803,,,,,,803',
',,,,,,,803,,,,,803,803,803,803,,803,803,,,,803,803,,210,210,210,,210',
'803,,803,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210',
'210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210',
'210,210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210',
',,210,,,,,,210,,,,,,,,210,,,,,210,210,210,210,,210,210,,,,210,210,210',
'209,209,209,,209,210,,210,209,209,,,,209,,209,209,209,209,209,209,209',
',,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209',
'209,209,209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209',
',,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209,209,,209,209',
',,,209,209,,273,273,273,,273,209,,209,273,273,,,,273,,273,273,273,273',
'273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273',
'273,273,273,273,273,273,,273,273,273,,273,273,273,273,273,,,,,,,,,,',
',,,,,,,,,273,,,273,,,273,273,,,273,,,,,,273,,,,,,,,273,,,,,273,273,273',
'273,,273,273,,,,273,273,,275,275,275,,275,273,,273,275,275,,,,275,,275',
'275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,',
',275,,,275,275,275,275,275,275,275,275,,275,275,275,,275,275,275,275',
'275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,,,,,275,,,,,,,,275',
',,,,275,275,275,275,,275,275,,,,275,275,,817,817,817,,817,275,,275,817',
'817,,,,817,,817,817,817,817,817,817,817,,,,,,817,817,817,817,817,817',
'817,,,817,,,,,,,817,,,817,817,817,817,817,817,817,817,,817,817,817,',
'817,817,,,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817,,,,,,,,,',
',,,,,,,,,817,817,817,817,,817,817,,,,817,817,,587,587,587,,587,817,',
'817,587,587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587',
'587,587,587,,,587,,,,,,,587,,,587,587,587,587,587,587,587,587,,587,587',
'587,,587,587,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587',
',,,,,587,,,,,,,,587,,,,,587,587,587,587,,587,587,,,,587,587,,586,586',
'586,,586,587,,587,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586',
'586,586,586,586,586,586,,,586,,,,,,,586,,,586,586,586,586,586,586,586',
'586,,586,586,586,,586,586,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,',
',586,586,,,586,,,,,,586,,,,,,,,586,,,,,586,586,586,586,,586,586,,,,586',
'586,,208,208,208,,208,586,,586,208,208,,,,208,,208,208,208,208,208,208',
'208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208',
'208,208,208,208,,208,208,208,,208,208,208,208,208,,,,,,,,,,,,,,,,,,',
',208,,,208,,,208,208,,,208,,,,,,208,,,,,,,,208,,,,,208,208,208,208,',
'208,208,,,,208,208,,583,583,583,,583,208,,208,583,583,,,,583,,583,583',
'583,583,583,583,583,,,,,,583,583,583,583,583,583,583,,,583,,,,,,,583',
',,583,583,583,583,583,583,583,583,,583,583,583,,583,583,583,583,583',
',,,,,,,,,,,,,,,,,,,583,,,583,,,583,583,,,583,,,,,,583,,,,,,,,583,,,',
',583,583,583,583,,583,583,,,,583,583,,582,582,582,,582,583,,583,582',
'582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582,582',
'582,,,582,,,,,,,582,,,582,582,582,582,582,582,582,582,,582,582,582,',
'582,582,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582,582,,,582,,,',
',,582,,,,,,,,582,,,,,582,582,582,582,,582,582,,,,582,582,,207,207,207',
',207,582,,582,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207',
'207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207',
',207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207',
'207,,,207,,,,,,207,,,,,,,,207,,,,,207,207,207,207,,207,207,,,,207,207',
',280,280,280,280,280,207,,207,280,280,,,,280,,280,280,280,280,280,280',
'280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,280,280,,280,280,280',
'280,280,280,280,280,280,,280,280,280,,280,280,280,280,280,,,,,,,,,,',
',,,,,,,,,280,,,280,,,280,280,,,280,,280,,,,280,,,,,,,,280,,,,,280,280',
'280,280,,280,280,,,,280,280,,28,28,28,,28,280,,280,28,28,,,,28,,28,28',
'28,28,28,28,28,,,,,,28,28,28,28,28,28,28,,,28,,,,,,,28,,,28,28,28,28',
'28,28,28,28,28,28,28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,28,,,28,',
',28,28,,,28,,28,,28,,28,,,,,,,,28,,,,,28,28,28,28,,28,28,,,,28,28,,29',
'29,29,,29,28,,28,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29',
'29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29',
'29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,,,,,',
'29,,,,,29,29,29,29,,29,29,,,,29,29,,286,286,286,,286,29,,29,286,286',
',,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286',
',,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286,,286',
'286,,,286,716,716,716,716,716,716,716,716,716,716,716,,716,716,,,716',
'716,,286,,,286,,,286,286,,,286,,,716,,716,,716,716,716,716,716,716,716',
',716,,,,286,286,286,286,,286,286,,,,286,286,,716,,286,,,286,,286,578',
'578,578,,578,,,,578,578,,,,578,,578,578,578,578,578,578,578,,,,,,578',
'578,578,578,578,578,578,,,578,,,,,,,578,,,578,578,578,578,578,578,578',
'578,,578,578,578,,578,578,578,578,578,,,,,,,,,,,,,,,,,,,,578,,,578,',
',578,578,,,578,,,,,,578,,,,,,,,578,,,,,578,578,578,578,,578,578,,,,578',
'578,,577,577,577,,577,578,,578,577,577,,,,577,,577,577,577,577,577,577',
'577,,,,,,577,577,577,577,577,577,577,,,577,,,,,,,577,,,577,577,577,577',
'577,577,577,577,,577,577,577,,577,577,577,577,577,,,,,,,,,,,,,,,,,,',
',577,,,577,,,577,577,,,577,,,,,,577,,,,,,,,577,,,,,577,577,577,577,',
'577,577,,,,577,577,,576,576,576,,576,577,,577,576,576,,,,576,,576,576',
'576,576,576,576,576,,,,,,576,576,576,576,576,576,576,,,576,,,,,,,576',
',,576,576,576,576,576,576,576,576,576,576,576,576,,576,576,576,576,576',
',,,,,,,,,,,,,,,,,,,576,,,576,,,576,576,,,576,,,,576,,576,,,,,,,,576',
',,,,576,576,576,576,,576,576,,,,576,576,,575,575,575,,575,576,,576,575',
'575,,,,575,,575,575,575,575,575,575,575,,,,,,575,575,575,575,575,575',
'575,,,575,,,,,,,575,,,575,575,575,575,575,575,575,575,575,575,575,575',
',575,575,575,575,575,,,,,,,,,,,,,,,,,,,,575,,,575,,,575,575,,,575,,575',
',575,,575,,,,,,,,575,,,,,575,575,575,575,,575,575,,,,575,575,,206,206',
'206,,206,575,,575,206,206,,,,206,,206,206,206,206,206,206,206,,,,,,206',
'206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206,206,206',
'206,,206,206,206,,206,206,206,206,206,,,,,,,,,,,,,,,,,,,,206,,,206,',
',206,206,,,206,,206,,,,206,,,,,,,,206,,,,,206,206,206,206,,206,206,',
',,206,206,,572,572,572,,572,206,,206,572,572,,,,572,,572,572,572,572',
'572,572,572,,,,,,572,572,572,572,572,572,572,,,572,,,,,,,572,,,572,572',
'572,572,572,572,572,572,,572,572,572,,572,572,572,572,572,,,,,,,,,,',
',,,,,,,,,572,,,572,,,572,572,,,572,,,,,,572,,,,,,,,572,,,,,572,572,572',
'572,,572,572,,,,572,572,,571,571,571,,571,572,,572,571,571,,,,571,,571',
'571,571,571,571,571,571,,,,,,571,571,571,571,571,571,571,,,571,,,,,',
',571,,,571,571,571,571,571,571,571,571,,571,571,571,,571,571,571,571',
'571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571,571,,,571,,571,,,,571,,,,,,,',
'571,,,,,571,571,571,571,,571,571,,,,571,571,,30,30,30,,30,571,,571,30',
'30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,',
'30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,',
',,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,,,,,,30,,,,,30,30,30,30,',
'30,30,,,,30,30,,205,205,205,,205,30,,30,205,205,,,,205,,205,205,205',
'205,205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205',
'205,205,205,205,205,205,205,,205,205,205,,205,205,205,205,205,,,,,,',
',,,,,,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,,,205,205',
'205,205,,205,205,,,,205,205,,33,33,33,,33,205,,205,33,33,,,,33,,33,33',
'33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33',
'33,33,33,33,,33,33,33,,33,33,,,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33',
',,33,,33,,,,,,,,,,,,,,,,,33,33,33,33,,33,33,,,,33,33,,542,542,542,,542',
'33,,33,542,542,,,,542,,542,542,542,542,542,542,542,,,,,,542,542,542',
'542,542,542,542,,,542,,,,,,,542,,,542,542,542,542,542,542,542,542,,542',
'542,542,,542,542,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542',
',,542,,,,,,542,,,,,,,,542,,,,,542,542,542,542,,542,542,,,,542,542,,34',
'34,34,,34,542,,542,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34',
'34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,',
'34,714,714,714,714,714,714,714,714,714,714,714,,714,714,,,714,714,,34',
',,34,,,34,34,,,34,,,714,,714,,714,714,714,714,714,714,714,,714,,,,34',
'34,34,34,,34,34,,,,34,34,,714,,34,,,34,,34,539,539,539,,539,,,,539,539',
',,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539,539,539',
',,539,,,,,,,539,,,539,539,539,539,539,539,539,539,539,539,539,539,,539',
'539,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,539,,539',
',539,,,,,,,,539,,,,,539,539,539,539,,539,539,,,,539,539,,874,874,874',
',874,539,,539,874,874,,,,874,,874,874,874,874,874,874,874,,,,,,874,874',
'874,874,874,874,874,,,874,,,,,,,874,,,874,874,874,874,874,874,874,874',
'874,874,874,874,,874,874,874,874,874,,,,,,,,,,,,,,,,,,,,874,,,874,,',
'874,874,,,874,,874,,874,,874,,,,,,,,874,,,,,874,874,874,874,,874,874',
',,,874,874,,65,65,65,,65,874,,874,65,65,,,,65,,65,65,65,65,65,65,65',
',,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65,65,65,65,65,65,,65',
'65,65,,65,65,,,65,,,,,,,,,,,,,,,,,,,,65,,,65,,,65,65,,,65,,65,,,,,,',
',,,,,,,,,,65,65,65,65,,65,65,,,,65,65,,528,528,528,,528,65,,65,528,528',
',,,528,,528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528',
',,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528,528,528,,528',
'528,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,528,,',
',528,,,,,,,,528,,,,,528,528,528,528,,528,528,,,,528,528,,202,202,202',
',202,528,,528,202,202,,,,202,,202,202,202,202,202,202,202,,,,,,202,202',
'202,202,202,202,202,,,202,,,,,,,202,,,202,202,202,202,202,202,202,202',
'202,202,202,202,,202,202,202,202,202,,,,,,,,,,,,,,,,,,,,202,,,202,,',
'202,202,,,202,,202,,202,,202,,,,,,,,202,,,,,202,202,202,202,,202,202',
',,,202,202,,5,5,5,5,5,202,,202,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5',
'5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,',
',,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5,,303',
'303,303,,303,5,,5,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303',
'303,303,303,303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303',
'303,,303,303,303,,303,303,,,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303',
',,303,,,,,,,,,,,,,,,,,,,303,303,303,303,,303,303,,,,303,303,,201,201',
'201,,201,303,,303,201,201,,,,201,,201,201,201,201,201,201,201,,,,,,201',
'201,201,201,201,201,201,,,201,,,,,,,201,,,201,201,201,201,201,201,201',
'201,,201,201,201,,201,201,201,201,201,,,,,,,,,,,,,,,,,,,,201,,,201,',
',201,201,,,201,,,,,,201,,,,,,,,201,,,,,201,201,201,201,,201,201,,,,201',
'201,,200,200,200,,200,201,,201,200,200,,,,200,,200,200,200,200,200,200',
'200,,,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200,200',
'200,200,200,200,,200,200,200,,200,200,200,200,200,,,,,,,,,,,,,,,,,,',
',200,,,200,,,200,200,,,200,,200,,,,200,,,,,,,,200,,,,,200,200,200,200',
',200,200,,,,200,200,,514,514,514,,514,200,,200,514,514,,,,514,,514,514',
'514,514,514,514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514',
',,514,514,514,514,514,514,514,514,514,514,514,514,,514,514,514,514,514',
',,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,,,,,514,,,,,,,,514,,,',
',514,514,514,514,,514,514,,,,514,514,,511,511,511,,511,514,,514,511',
'511,,,,511,,511,511,511,511,511,511,511,,,,,,511,511,511,511,511,511',
'511,,,511,,,,,,,511,,,511,511,511,511,511,511,511,511,511,511,511,511',
',511,511,511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,,511',
',,,511,,,,,,,,511,,,,,511,511,511,511,,511,511,,,,511,511,,507,507,507',
',507,511,,511,507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507,507',
'507,507,507,507,507,,,507,,,,,,,507,,,507,507,507,507,507,507,507,507',
',507,507,507,,507,507,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507',
'507,,,507,,507,,,,507,,,,,,,,507,,,,,507,507,507,507,,507,507,,,,507',
'507,,505,505,505,,505,507,,507,505,505,,,,505,,505,505,505,505,505,505',
'505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505,505,505',
'505,505,505,505,,505,505,505,,505,505,505,505,505,,,,,,,,,,,,,,,,,,',
',505,,,505,,,505,505,,,505,,,,,,505,,,,,,,,505,,,,,505,505,505,505,',
'505,505,,,,505,505,,501,501,501,,501,505,,505,501,501,,,,501,,501,501',
'501,501,501,501,501,,,,,,501,501,501,501,501,501,501,,,501,,,,,,,501',
',,501,501,501,501,501,501,501,501,,501,501,501,,501,501,501,501,501',
',,,,,,,,,,,,,,,,,,,501,,,501,,,501,501,,,501,,,,,,501,,,,,,,,501,,,',
',501,501,501,501,,501,501,,,,501,501,,500,500,500,,500,501,,501,500',
'500,,,,500,,500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500',
'500,,,500,,,,,,,500,,,500,500,500,500,500,500,500,500,,500,500,500,',
'500,500,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,',
',,500,,,,,,,,500,,,,,500,500,500,500,,500,500,,,,500,500,,499,499,499',
',499,500,,500,499,499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499',
'499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499,499,499,499,499',
',499,499,499,,499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499',
'499,,,499,,,,,,499,,,,,,,,499,,,,,499,499,499,499,,499,499,,,,499,499',
',529,529,529,,529,499,,499,529,529,,,,529,,529,529,529,529,529,529,529',
',,,,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529',
'529,529,529,529,529,529,529,,529,529,529,529,529,,,,,,,,,,,,,,,,,,,',
'529,,,529,,,529,529,,,529,,529,,529,,529,,,,,,,,529,,,,,529,529,529',
'529,,529,529,,,,529,529,,64,64,64,,64,529,,529,64,64,,,,64,,64,64,64',
'64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64',
'64,64,64,,64,64,64,,64,64,64,64,64,721,721,721,721,721,721,721,721,721',
'721,721,,721,721,,,721,721,,64,,,64,,,64,64,,,64,,,721,,721,64,721,721',
'721,721,721,721,721,64,721,,,,64,64,64,64,,64,64,,,,64,64,64,721,,,',
'64,64,,64,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61',
'61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61',
',61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,,',
',,,61,,,,,61,61,61,61,,61,61,,,,61,61,,364,364,364,,364,61,,61,364,364',
',,,364,,364,364,364,364,364,364,364,,,,,,364,364,364,364,364,364,364',
',,364,,,,,,,364,,,364,364,364,364,364,364,364,364,,364,364,364,,364',
'364,364,364,364,,,,,,,,,,,,,,,,,,,,364,,,364,,,364,364,,,364,,,,,,364',
',,,,,,,364,,,,,364,364,364,364,,364,364,,,,364,364,,390,390,390,,390',
'364,,364,390,390,,,,390,,390,390,390,390,390,390,390,,,,,,390,390,390',
'390,390,390,390,,,390,,,,,,,390,,,390,390,390,390,390,390,390,390,,390',
'390,390,,390,390,390,390,390,,,,,,,,,,,,,,,,,,,,390,,,390,,,390,390',
',,390,,,,,,390,,,,,,,,390,,,,,390,390,390,390,,390,390,,,,390,390,,60',
'60,60,,60,390,,390,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60',
'60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,,60,60,60,,60,60,60',
'60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,,,,,,60,,,,',
'60,60,60,60,,60,60,,,,60,60,,57,57,57,,57,60,,60,57,57,,,,57,,57,57',
'57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57',
'57,57,57,57,57,57,57,57,,57,57,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,',
',57,57,,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,,57,57,,234,234',
'234,,234,57,,57,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234',
'234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234',
'234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,',
',234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,,234,234,,,,234',
'234,,237,237,237,,237,234,,234,237,237,,,,237,,237,237,237,237,237,237',
'237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237',
'237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,,,,,,,,,',
',237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,',
'237,237,,,,237,237,,233,233,233,,233,237,,237,233,233,,,,233,,233,233',
'233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233',
',,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233,233',
',,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,',
',233,233,233,233,,233,233,,,,233,233,,232,232,232,,232,233,,233,232',
'232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232',
'232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,',
'232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,',
',,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232,,238,238,238',
',238,232,,232,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238',
',238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238',
'238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,,238,238,,,,238,238',
',708,708,708,,708,238,,238,708,708,,,,708,,708,708,708,708,708,708,708',
',,,,,708,708,708,708,708,708,708,,,708,,,,,,,708,,,708,708,708,708,708',
'708,708,708,,708,708,708,,708,708,708,708,708,,,,,,,,,,,,,,,,,,,,708',
',,708,,,708,708,,,708,,,,,,708,,,,,,,,708,,,,,708,708,708,708,,708,708',
',,,708,708,,231,231,231,,231,708,,708,231,231,,,,231,,231,231,231,231',
'231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231',
'231,231,231,231,231,231,,231,231,231,,231,231,231,231,231,,,,,,,,,,',
',,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231',
'231,,231,231,,,,231,231,,710,710,710,,710,231,,231,710,710,,,,710,,710',
'710,710,710,710,710,710,,,,,,710,710,710,710,710,710,710,,,710,,,,,',
',710,,,710,710,710,710,710,710,710,710,,710,710,710,,710,710,710,710',
'710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,,710,,,,,,710,,,,,,,,710',
',,,,710,710,710,710,,710,710,,,,710,710,,239,239,239,,239,710,,710,239',
'239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,',
',,239,,,,,,,,239,,,,,239,239,239,239,,239,239,,,,239,239,,230,230,230',
',230,239,,239,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230',
'230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230',
',230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230',
'230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,,230,230,,,,230,230',
',229,229,229,,229,230,,230,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,,229,229',
',,,229,229,,228,228,228,,228,229,,229,228,228,,,,228,,228,228,228,228',
'228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,,,228,,,228,228',
'228,228,228,228,228,228,,228,228,228,,228,228,228,228,228,,,,,,,,,,',
',,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228',
'228,,228,228,,,,228,228,,227,227,227,,227,228,,228,227,227,,,,227,,227',
'227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,',
',227,,,227,227,227,227,227,227,227,227,,227,227,227,,227,227,227,227',
'227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227',
',,,,227,227,227,227,,227,227,,,,227,227,,226,226,226,,226,227,,227,226',
'226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226,226,226,226,226',
'226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,226,,226,226,226,',
'226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,',
',,226,,,,,,,,226,,,,,226,226,226,226,,226,226,,,,226,226,,724,724,724',
',724,226,,226,724,724,,,,724,,724,724,724,724,724,724,724,,,,,,724,724',
'724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724,724,724,724,724',
',724,724,724,,724,724,724,724,724,,,,,,,,,,,,,,,,,,,,724,,,724,,,724',
'724,,,724,,,,,,724,,,,,,,,724,,,,,724,724,724,724,,724,724,,,,724,724',
',725,725,725,,725,724,,724,725,725,,,,725,,725,725,725,725,725,725,725',
',,,,,725,725,725,725,725,725,725,,,725,,,,,,,725,,,725,725,725,725,725',
'725,725,725,,725,725,725,,725,725,725,725,725,,,,,,,,,,,,,,,,,,,,725',
',,725,,,725,725,,,725,,,,,,725,,,,,,,,725,,,,,725,725,725,725,,725,725',
',,,725,725,,726,726,726,,726,725,,725,726,726,,,,726,,726,726,726,726',
'726,726,726,,,,,,726,726,726,726,726,726,726,,,726,,,,,,,726,,,726,726',
'726,726,726,726,726,726,,726,726,726,,726,726,726,726,726,,,,,,,,,,',
',,,,,,,,,726,,,726,,,726,726,,,726,,,,,,726,,,,,,,,726,,,,,726,726,726',
'726,,726,726,,,,726,726,,727,727,727,,727,726,,726,727,727,,,,727,,727',
'727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727,,,727,,,,,',
',727,,,727,727,727,727,727,727,727,727,,727,727,727,,727,727,727,727',
'727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,,,,,727,,,,,,,,727',
',,,,727,727,727,727,,727,727,,,,727,727,,225,225,225,,225,727,,727,225',
'225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225',
'225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225,,225,225,225,',
'225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,,,',
',,225,,,,,,,,225,,,,,225,225,225,225,,225,225,,,,225,225,,729,729,729',
',729,225,,225,729,729,,,,729,,729,729,729,729,729,729,729,,,,,,729,729',
'729,729,729,729,729,,,729,,,,,,,729,,,729,729,729,729,729,729,729,729',
',729,729,729,,729,729,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729',
'729,,,729,,,,,,729,,,,,,,,729,,,,,729,729,729,729,,729,729,,,,729,729',
',240,240,240,,240,729,,729,240,240,,,,240,,240,240,240,240,240,240,240',
',,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240',
'240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240',
',,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,,240,240',
',,,240,240,,241,241,241,,241,240,,240,241,241,,,,241,,241,241,241,241',
'241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241',
'241,241,241,241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,',
',,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,,241,241,,,,241,241,,242,242,242,,242,241,,241,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242',
',,,,242,242,242,242,,242,242,,,,242,242,,243,243,243,,243,242,,242,243',
'243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243',
'243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243,',
'243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,',
',,243,,,,,,,,243,,,,,243,243,243,243,,243,243,,,,243,243,,244,244,244',
',244,243,,243,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244',
'244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244',
',244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244',
'244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,,244,244,,,,244,244',
',224,224,224,,224,244,,244,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224',
',,,224,224,,245,245,245,,245,224,,224,245,245,,,,245,,245,245,245,245',
'245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245',
'245,245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,',
',,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245',
'245,,245,245,,,,245,245,,246,246,246,,246,245,,245,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246',
',,,,246,246,246,246,,246,246,,,,246,246,,247,247,247,,247,246,,246,247',
'247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247',
'247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,',
'247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,',
',,247,,,,,,,,247,,,,,247,247,247,247,,247,247,,,,247,247,,248,248,248',
',248,247,,247,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248',
'248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248',
',248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248',
'248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,,248,248,,,,248,248',
',249,249,249,,249,248,,248,249,249,,,,249,,249,249,249,249,249,249,249',
',,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249',
'249,249,249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249',
',,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,,249,249',
',,,249,249,,754,754,754,,754,249,,249,754,754,,,,754,,754,754,754,754',
'754,754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,,,754,,,754,754',
'754,754,754,754,754,754,,754,754,754,,754,754,,,754,,,,,,,,,,,,,,,,',
',,,754,,,754,,,754,754,,,754,,,,,,,,,,,,,,,,,,,754,754,754,754,,754',
'754,,,,754,754,,41,41,41,,41,754,,754,41,41,,,,41,,41,41,41,41,41,41',
'41,,,,,,41,41,41,41,41,41,41,,,41,,,,,,,41,,,41,41,41,41,41,41,41,41',
',41,41,41,,41,41,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,,41,,',
',,,41,,,,,,,,41,,,,,41,41,41,41,,41,41,,,,41,41,,112,112,112,,112,41',
',41,112,112,,,,112,,112,112,112,112,112,112,112,,,,,,112,112,112,112',
'112,112,112,,,112,,,,,,,112,,,112,112,112,112,112,112,112,112,,112,112',
'112,,112,112,112,112,112,,,,,,,,,,,,,,,,,,,,112,,,112,,,112,112,,,112',
',,,,,112,,,,,,,,112,,,,,112,112,112,112,,112,112,,,,112,112,,480,480',
'480,480,480,112,,112,480,480,,,,480,,480,480,480,480,480,480,480,,,',
',,480,480,480,480,480,480,480,,,480,,,,,,480,480,,480,480,480,480,480',
'480,480,480,480,,480,480,480,,480,480,480,480,480,719,719,719,719,719',
'719,719,719,719,719,719,,719,719,,,719,719,,480,,,480,,,480,480,,,480',
',480,719,,719,480,719,719,719,719,719,719,719,480,719,,,,480,480,480',
'480,,480,480,,,,480,480,,719,,,,480,480,,480,315,315,315,,315,,,,315',
'315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315,315,315,315,315',
'315,,,315,,,,,,,315,,,315,315,315,315,315,315,315,315,,315,315,315,',
'315,315,315,315,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,,',
',,315,,,,,,,,315,,,,,315,315,315,315,,315,315,,,,315,315,,476,476,476',
',476,315,,315,476,476,,,,476,,476,476,476,476,476,476,476,,,,,,476,476',
'476,476,476,476,476,,,476,,,,,,,476,,,476,476,476,476,476,476,476,476',
',476,476,476,,476,476,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476',
'476,,,476,,,,,,476,,,,,,,,476,,,,,476,476,476,476,,476,476,,,,476,476',
',474,474,474,,474,476,,476,474,474,,,,474,,474,474,474,474,474,474,474',
',,,,,474,474,474,474,474,474,474,,,474,,,,,,,474,,,474,474,474,474,474',
'474,474,474,474,474,474,474,,474,474,474,474,474,,,,,,,,,,,,,,,,,,,',
'474,,,474,,,474,474,,,474,,,,474,,474,,,,,,,,474,,,,,474,474,474,474',
',474,474,,,,474,474,,42,42,42,,42,474,,474,42,42,,,,42,,42,42,42,42',
'42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42',
'42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,',
',42,,,,,,42,,,,,,,,42,,,,,42,42,42,42,,42,42,,,,42,42,,43,43,43,,43',
'42,,42,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,',
',43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,,',
',,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,43,,,,,43,43,43',
'43,,43,43,,,,43,43,,472,472,472,,472,43,,43,472,472,,,,472,,472,472',
'472,472,472,472,472,,,,,,472,472,472,472,472,472,472,,,472,,,,,,,472',
',,472,472,472,472,472,472,472,472,472,472,472,472,,472,472,472,472,472',
',,,,,,,,,,,,,,,,,,,472,,,472,,,472,472,,,472,,472,,472,,472,,,,,,,,472',
',,,,472,472,472,472,,472,472,,,,472,472,,111,111,111,,111,472,,472,111',
'111,,,,111,,111,111,111,111,111,111,111,,,,,,111,111,111,111,111,111',
'111,,,111,,,,,,,111,,,111,111,111,111,111,111,111,111,,111,111,111,',
'111,111,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,,',
',,111,,,,,,,,111,,,,,111,111,111,111,,111,111,,,,111,111,,110,110,110',
',110,111,,111,110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110,110',
'110,110,110,110,110,,,110,,,,,,,110,,,110,110,110,110,110,110,110,110',
',110,110,110,,110,110,110,110,110,,,,,,,,,,,,,,,,,,,,110,,,110,,,110',
'110,,,110,,,,,,110,,,,,,,,110,,,,,110,110,110,110,,110,110,,,,110,110',
',105,105,105,105,105,110,,110,105,105,,,,105,,105,105,105,105,105,105',
'105,,,,,,105,105,105,105,105,105,105,,,105,,,,,,105,105,105,105,105',
'105,105,105,105,105,105,105,,105,105,105,,105,105,105,105,105,709,709',
'709,709,709,709,709,709,709,709,709,,709,709,,,709,709,,105,,,105,,',
'105,105,,,105,,105,709,,709,105,709,709,709,709,709,709,709,105,709',
',,,105,105,105,105,,105,105,,,,105,105,,709,,,,105,105,,105,328,328',
'328,,328,,,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328',
'328,328,328,328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328',
',328,328,328,,328,328,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328',
'328,,,328,,,,,,328,,,,,,,,328,,,,,328,328,328,328,,328,328,,,,328,328',
',329,329,329,,329,328,,328,329,329,,,,329,,329,329,329,329,329,329,329',
',,,,,329,329,329,329,329,329,329,,,329,,,,,,,329,,,329,329,329,329,329',
'329,329,329,,329,329,329,,329,329,329,329,329,,,,,,,,,,,,,,,,,,,,329',
',,329,,,329,329,,,329,,,,,,329,,,,,,,,329,,,,,329,329,329,329,,329,329',
',,,329,329,,236,236,236,,236,329,,329,236,236,,,,236,,236,236,236,236',
'236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236',
'236,236,236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,',
',,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236',
'236,,236,236,,,,236,236,,431,431,431,,431,236,,236,431,431,,,,431,,431',
'431,431,431,431,431,431,,,,,,431,431,431,431,431,431,431,,,431,,,,,',
',431,,,431,431,431,431,431,431,431,431,,431,431,431,,431,431,431,431',
'431,,,,,,,,,,,,,,,,,,,,431,,,431,,,431,431,,,431,,,,,,431,,,,,,,,431',
',,,,431,431,431,431,,431,431,,,,431,431,,56,56,56,,56,431,,431,56,56',
',,,56,,56,56,56,56,56,56,56,,,,,,56,56,56,56,56,56,56,,,56,,,,,,,56',
',,56,56,56,56,56,56,56,56,56,56,56,56,,56,56,56,56,56,,,,,,,,,,,,,,',
',,,,,56,,,56,,,56,56,,,56,,56,,,,56,,,,,,,,56,,,,,56,56,56,56,,56,56',
',,,56,56,,430,430,430,,430,56,,56,430,430,,,,430,,430,430,430,430,430',
'430,430,,,,,,430,430,430,430,430,430,430,,,430,,,,,,,430,,,430,430,430',
'430,430,430,430,430,,430,430,430,,430,430,430,430,430,,,,,,,,,,,,,,',
',,,,,430,,,430,,,430,430,,,430,,,,,,430,,,,,,,,430,,,,,430,430,430,430',
',430,430,,,,430,430,,429,429,429,,429,430,,430,429,429,,,,429,,429,429',
'429,429,429,429,429,,,,,,429,429,429,429,429,429,429,,,429,,,,,,,429',
',,429,429,429,429,429,429,429,429,,429,429,429,,429,429,429,429,429',
',,,,,,,,,,,,,,,,,,,429,,,429,,,429,429,,,429,,,,,,429,,,,,,,,429,,,',
',429,429,429,429,,429,429,,,,429,429,,427,427,427,,427,429,,429,427',
'427,,,,427,,427,427,427,427,427,427,427,,,,,,427,427,427,427,427,427',
'427,,,427,,,,,,,427,,,427,427,427,427,427,427,427,427,427,427,427,427',
',427,427,427,427,427,,,,,,,,,,,,,,,,,,,,427,,,427,,,427,427,,,427,,427',
',427,,427,,,,,,,,427,,,,,427,427,427,427,,427,427,,,,427,427,,348,348',
'348,,348,427,,427,348,348,,,,348,,348,348,348,348,348,348,348,,,,,,348',
'348,348,348,348,348,348,,,348,,,,,,,348,,,348,348,348,348,348,348,348',
'348,,348,348,348,,348,348,348,348,348,,,,,,,,,,,,,,,,,,,,348,,,348,',
',348,348,,,348,,,,,,348,,,,,,,,348,,,,,348,348,348,348,,348,348,,,,348',
'348,,67,67,67,,67,348,,348,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67',
'67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67',
',67,67,,,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,,,,,,,,,,,',
',,67,67,67,67,,67,67,,,,67,67,,66,66,66,,66,67,,67,66,66,,,,66,,66,66',
'66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66',
'66,66,66,66,,66,66,66,,66,66,,,66,,,,,,,,,,,,,,,,,66,,,66,,,66,,,66',
'66,,,66,,,,,,,,,,,,,,,,,,,66,66,66,66,,66,66,,,,66,66,,496,496,496,',
'496,66,,66,496,496,,,,496,,496,496,496,496,496,496,496,,,,,,496,496',
'496,496,496,496,496,,,496,,,,,,,496,,,496,496,496,496,496,496,496,496',
',496,496,496,,496,496,,,496,,,,,,,,,,,,,,,,,,,,496,,,496,,,496,496,',
',496,,,,,,,,,,,,,,,,,,,496,496,496,496,,496,496,,,,496,496,,489,489',
'489,,489,496,,496,489,489,,,,489,,489,489,489,489,489,489,489,,,,,,489',
'489,489,489,489,489,489,,,489,,,,,,,489,,,489,489,489,489,489,489,489',
'489,489,489,489,489,,489,489,489,489,489,,,,,,,,,,,,,,,,,,,,489,,,489',
',,489,489,,,489,,489,,489,,489,,,,,,,,489,,,,,489,489,489,489,,489,489',
',,,489,489,,487,487,487,,487,489,,489,487,487,,,,487,,487,487,487,487',
'487,487,487,,,,,,487,487,487,487,487,487,487,,,487,,,,,,,487,,,487,487',
'487,487,487,487,487,487,,487,487,487,,487,487,,,487,,,,,,,,,,,,,,,,',
',,,487,,,487,,,487,487,,,487,,,,,,,,,,,,,,,,,,,487,487,487,487,,487',
'487,,,,487,487,,312,312,312,,312,487,,487,312,312,,,,312,,312,312,312',
'312,312,312,312,,,,,,312,312,312,312,312,312,312,,,312,,,,,,,312,,,312',
'312,312,312,312,312,312,312,,312,312,312,,312,312,312,312,312,,,,,,',
',,,,,,,,,,,,,312,,,312,312,,312,312,,,312,,,,,,312,,,,,,,,312,,,,,312',
'312,312,312,,312,312,,,,312,312,,114,114,114,114,114,312,,312,114,114',
',,,114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114',
',,114,,,,,,114,114,,114,114,114,114,114,114,114,114,114,,114,114,114',
',114,114,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114',
',,,114,,,,,,,,114,,,,,114,114,114,114,,114,114,,,,114,114,,113,113,113',
',113,114,,114,113,113,,,,113,,113,113,113,113,113,113,113,,,,,,113,113',
'113,113,113,113,113,,,113,,,,,,,113,,,113,113,113,113,113,113,113,113',
',113,113,113,,113,113,113,113,113,457,457,457,457,457,457,457,457,457',
'457,457,,457,457,,,457,457,,113,,,113,,,113,113,,,113,,,457,,457,113',
'457,457,457,457,457,457,457,113,457,,,,113,113,113,113,,113,113,,,,113',
'113,457,457,462,,,,113,,113,462,462,462,,,462,462,462,,462,,,,,,,,,',
'462,,,,,,,,,,462,462,,462,462,462,462,462,,,,,,,,,,,,459,,,,,,,459,459',
'459,,,459,459,459,,459,,,,,,462,,,,459,,,462,,,,,462,462,459,459,,459',
'459,459,459,459,,,,,,,,,,,,,,462,,,,,,,,,400,,,,,462,,400,400,400,462',
'459,400,400,400,,400,,459,,,,,459,459,400,400,400,,,,,,,,,400,400,,400',
'400,400,400,400,,,459,,,,,,,,,,,,,,459,,,,,459,400,400,400,400,400,400',
'400,400,400,400,400,400,400,400,,,400,400,400,,,400,,400,400,,,400,400',
',400,,400,,400,,400,400,400,400,400,400,400,27,400,400,400,,,,27,27',
'27,,,27,27,27,,27,400,400,,400,,400,,,,27,27,,,,,,,,,27,27,,27,27,27',
'27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27',
',,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,27,27,27,27,27,26',
'27,,27,,,,26,26,26,,,26,26,26,,26,27,27,,27,,27,,,26,26,26,,,,,,,,,26',
'26,,26,26,26,26,26,,,,,,,,,,,,,,,,,,,,,,,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,,,26,26,26,,,26,,26,26,,,26,26,,26,,26,,26,,26,26,26',
'26,26,26,26,,26,26,26,,,,,,,,,,,,,,26,26,,26,,26,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8',
'8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8',
'8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,8,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9',
',,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9',
'9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,9,568,568,568,568,568,568,568,568',
'568,568,568,568,568,568,568,568,568,568,568,568,568,568,568,568,,,,568',
'568,568,568,568,568,568,568,568,568,,,,,,568,568,568,568,568,568,568',
'568,568,,,568,,,,,,,,568,568,,568,568,568,568,568,568,568,,,568,568',
',,,568,568,568,568,,,,,,,,,,,,,,568,568,,568,568,568,568,568,568,568',
'568,568,568,568,,,568,568,,,,,,,,,,,568,381,381,381,381,381,381,381',
'381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381',
',,,381,381,381,381,381,381,381,381,381,381,,,,,,381,381,381,381,381',
'381,381,381,381,,,381,,,,,,,,381,381,,381,381,381,381,381,381,381,,',
'381,381,,,,381,381,381,381,,,,,,,,,,,,,,381,381,,381,381,381,381,381',
'381,381,381,381,381,381,,,381,381,,,,,,,,,,,381,694,694,694,694,694',
'694,694,694,694,694,694,694,694,694,694,694,694,694,694,694,694,694',
'694,694,,,,694,694,694,694,694,694,694,694,694,694,,,,,,694,694,694',
'694,694,694,694,694,694,,,694,,,,,,,,694,694,,694,694,694,694,694,694',
'694,,,694,694,,,,694,694,694,694,,,,,,,,,,,,,,694,694,,694,694,694,694',
'694,694,694,694,694,694,694,,,694,68,68,68,68,68,68,68,68,68,68,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,,,,68,68,68,68,68,68,68,68,68,68',
',,,,,68,68,68,68,68,68,68,68,68,68,68,68,,68,,,,,,68,68,,68,68,68,68',
'68,68,68,,,68,68,,,,68,68,68,68,,,,,,68,,,,,,,,68,68,,68,68,68,68,68',
'68,68,68,68,68,68,531,531,68,,531,,,,,,,,531,531,,531,531,531,531,531',
'531,531,,,531,531,,,,531,531,531,531,,,,,,531,,,,,,,,531,531,,531,531',
'531,531,531,531,531,531,531,531,531,503,503,531,,503,,,,,,,,503,503',
',503,503,503,503,503,503,503,,,503,503,,,,503,503,503,503,,,,,,503,',
',,,,,,503,503,,503,503,503,503,503,503,503,503,503,503,503,502,502,503',
',502,,,,,,,,502,502,,502,502,502,502,502,502,502,,,502,502,,,,502,502',
'502,502,,,,,,502,,,,,,,,502,502,,502,502,502,502,502,502,502,502,502',
'502,502,913,913,502,,913,,,,,,,,913,913,,913,913,913,913,913,913,913',
',,913,913,,,,913,913,913,913,,,,,,913,,,,,,,,913,913,,913,913,913,913',
'913,913,913,913,913,913,913,491,491,913,,491,,,,,,,,491,491,,491,491',
'491,491,491,491,491,,,491,491,,,,491,491,491,491,,,,,,491,,,,,,,,491',
'491,,491,491,491,491,491,491,491,491,491,491,491,490,490,491,,490,,',
',,,,,490,490,,490,490,490,490,490,490,490,,,490,490,,,,490,490,490,490',
',,,,,490,,,,,,,,490,490,,490,490,490,490,490,490,490,490,490,490,490',
'425,425,490,,425,,,,,,,,425,425,,425,425,425,425,425,425,425,,,425,425',
',,,425,425,425,425,,,,,,425,,,,,,,,425,425,,425,425,425,425,425,425',
'425,425,425,425,425,426,426,425,,426,,,,,,,,426,426,,426,426,426,426',
'426,426,426,,,426,426,,,,426,426,426,426,,,,,,426,,,,,,,,426,426,,426',
'426,426,426,426,426,426,426,426,426,426,252,252,426,,252,,,,,,,,252',
'252,,252,252,252,252,252,252,252,,,252,252,,,,252,252,252,252,,,,,,',
',,,,,,,252,252,,252,252,252,252,252,252,252,252,252,252,252,253,253',
'252,,253,,,,,,,,253,253,,253,253,253,253,253,253,253,,,253,253,,,,253',
'253,253,253,,,,,,,,,,,,,,253,253,,253,253,253,253,253,253,253,253,253',
'253,253,204,204,253,,204,,,,,,,,204,204,,204,204,204,204,204,204,204',
',,204,204,,,,204,204,204,204,,,,,,204,,,,,,,,204,204,,204,204,204,204',
'204,204,204,204,204,204,204,203,203,204,,203,,,,,,,,203,203,,203,203',
'203,203,203,203,203,,,203,203,,,,203,203,203,203,,,,,,203,,,,,,,,203',
'203,,203,203,203,203,203,203,203,203,203,203,203,538,538,203,,538,,',
',,,,,538,538,,538,538,538,538,538,538,538,,,538,538,,,,538,538,538,538',
',,,,,538,,,,,,,,538,538,,538,538,538,538,538,538,538,538,538,538,538',
'537,537,538,,537,,,,,,,,537,537,,537,537,537,537,537,537,537,,,537,537',
',,,537,537,537,537,,,,,,537,,,,,,,,537,537,,537,537,537,537,537,537',
'537,537,537,537,537,530,530,537,,530,,,,,,,,530,530,,530,530,530,530',
'530,530,530,,,530,530,,,,530,530,530,530,,,,,,530,,,,,,,,530,530,,530',
'530,530,530,530,530,530,530,530,530,530,875,875,530,,875,,,,,,,,875',
'875,,875,875,875,875,875,875,875,,,875,875,,,,875,875,875,875,,,,,,875',
',,,,,,,875,875,,875,875,875,875,875,875,875,875,875,875,875,876,876',
'875,,876,,,,,,,,876,876,,876,876,876,876,876,876,876,,,876,876,,,,876',
'876,876,876,,,,,,876,,,,,,,,876,876,,876,876,876,876,876,876,876,876',
'876,876,876,,,876,504,504,504,504,504,504,504,504,504,504,504,,504,504',
',,504,504,,,,,,,,,,,,,,,504,,504,,504,504,504,504,504,504,504,,504,',
'266,266,266,266,266,266,266,266,266,266,266,,266,266,,504,266,266,,',
',,,,,,,,,,,,266,,266,,266,266,266,266,266,266,266,,266,,801,801,801',
'801,801,801,801,801,801,801,801,,801,801,,266,801,801,,,,,,,,,,,,,,',
'801,,801,,801,801,801,801,801,801,801,,801,,21,21,21,21,21,21,21,21',
'21,21,21,,21,21,,801,21,21,,,,,,,,,,,,,,,21,,21,,21,21,21,21,21,21,21',
',21,,804,804,804,804,804,804,804,804,804,804,804,,804,804,,21,804,804',
',,,,,,,,,,,,,,804,,804,,804,804,804,804,804,804,804,,804,,630,630,630',
'630,630,630,630,630,630,630,630,,630,630,,804,630,630,,,,,,,,,,,,,,',
'630,,630,,630,630,630,630,630,630,630,,630,,723,723,723,723,723,723',
'723,723,723,723,723,,723,723,,630,723,723,,,,,,,,,,,,,,,723,,723,,723',
'723,723,723,723,723,723,,723,,412,412,412,412,412,412,412,412,412,412',
'412,,412,412,,723,412,412,,,,,,,,,,,,,,,412,,412,,412,412,412,412,412',
'412,412,,412,,,,,,,,,,,,,,,,,412' ]
        racc_action_check = arr = ::Array.new(23289, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4401,   168,   nil,   509,   nil, 10792,  1504,   114, 21163, 21287,
   120,   nil,   104,   165,  1384,   424,   127,   630,   nil,    -8,
  4776, 22977,   248,   nil,   623,   266, 21033, 20924,  8276,  8401,
  9534,   nil,   993,  9784, 10034,   nil,   169,   425,   415,   258,
   320, 17050, 17808, 17933,   193,  1385,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  3893,     0,   nil, 19066, 12925,     0,   nil,
 12800, 12425,   nil,   nil, 12292, 10417, 19816, 19691, 21771,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    95,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     0,
   nil,   nil,   260,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   325,   nil, 18433,   nil,   nil,   nil,   nil,
 18308, 18183, 17175, 20566, 20441,  1254,   nil,   697,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   216,   nil,  3640,
 11167, 11042, 10667, 22491, 22431,  9659,  9159,  8026,  7651,  6901,
  6776,   nil,   nil,  1373,   290,   319,   306,   354,   238,   297,
   nil,  4901,  2129,   303, 16175, 15300, 14675, 14550, 14425, 14300,
 14175, 13800, 13425, 13300, 13050,  6151, 18816, 13175, 13550, 14050,
 15550, 15675, 15800, 15925, 16050, 16300, 16425, 16550, 16675, 16800,
   nil,   nil, 22311, 22371,   313,  5401,  5526,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  5776,   nil, 22885,   nil,   292,   318,
   nil,  6401,   364,  7026,   nil,  7151,   nil,   nil,   430,  1629,
  8151,   346,  3140,   359,   413,   376,  8526,  4151,  1129,  1093,
  1039,   459,   993,   nil,   431,   417,   289,   nil,   nil,   nil,
   495,   708,   461, 10917,   nil,   502,   530,   532,   331,   nil,
   546,   nil, 20316,   620,   629, 17433,   nil,   570,    24,   560,
   585,   603,   622,   nil,   nil,   705,   124,   151, 18566, 18691,
   539,   701,   599,   116,   117,   562,   696,   124,   733,   nil,
   nil,   359,   502,   160,   nil,   996,   nil,    55, 19566,   nil,
   nil,   nil,   510,   361,   611,   552,   264,   516,   447,   654,
   362,   nil,   656,   nil, 12550,   nil,   601,   550,   497,   520,
    39,    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   655, 21535,   nil,   nil,   nil,   nil,   659,   nil,   650,   nil,
 12675,   656,   nil,  3765,   663,   nil,   670,   674,   293,   393,
 20815,   nil,   nil,   nil,   499,   608,   721,   nil,   nil,  1121,
  3007,   nil, 23161,   nil,   688,   nil,   nil,   993,   nil,   nil,
   nil,   nil,   268,   nil,   734, 22191, 22251, 19441,   109, 19316,
 19191, 18941,  4151,  4276,   460,   566,   761,   763,   767,   770,
  4651,  4776,  4901,  4526,  4401,  2504,  2379,  3390,  3265,  3140,
  3640,  3515,  2754,  1077,   623,  4026,  2629, 20566,   243, 20749,
   nil,   nil, 20694,   nil,   nil,   713,   nil,   241,   232,   716,
   nil,   nil, 18058,   nil, 17683,   nil, 17558,   nil,   nil,   nil,
 17300,  1406,   717,   721,   nil,   nil,   725, 20191,   730, 20066,
 22131, 22071,  1398,   772,   nil,   nil, 19941,   737,   nil, 12042,
 11917, 11792, 21951, 21891, 22839, 11667,   862, 11542,   nil,   496,
   nil, 11417,   nil,   nil, 11292,   nil,   nil,   nil,   nil,  2971,
  2879,   868,   nil,  2629,   123,   154,   865,   875, 10542, 12167,
 22671, 21831,   135,   nil,   nil,   737,   nil, 22611, 22551, 10167,
   nil,   nil,  9909,   403,   185,  1379,  3857,   nil,   nil,   nil,
   153,   nil,   nil,   nil,   976,   nil,   nil,   nil,   774,   nil,
   nil,   320,   nil,   nil,   765,   nil,   nil,   nil, 21411,   nil,
   767,  9409,  9284,   528,   810,  9034,  8909,  8784,  8659,   814,
   nil,   nil,  7901,  7776,   818,   nil,  7526,  7401,   nil,   nil,
   224,   266,   130,   390,   798,  2879,   800,   nil,   605,   nil,
  4526,   nil,   nil,   nil,   nil,   249,   nil,  4276,  4026,   nil,
   806,   nil,   861,  6276,   nil,   nil,  1531,    16,  5276,   820,
   nil,   826,   285,   284,   865,   360,   748,   869,   832,  5026,
 23069,   898,   901,   155,   960,   nil,   743,   846,   892,   nil,
   nil,   854,   426,   159,  2307,   nil,   852,   857,   862,   nil,
   nil,   nil,   nil,   nil,   nil,   866,   nil,   854,   nil,   nil,
   nil,   nil,   954,   nil,   nil,   955,   421,   nil,   995,   nil,
   nil,   nil,   nil,  1008,   nil,    48,   894,   164,    56,    65,
    89,  6026,   398,   873,   nil,   895,  4651,   281,   nil,   nil,
  1023,  2379,  1557,   117, 21659,   nil,   nil,   nil,   nil,   nil,
   nil,  1504,   nil,   nil,   nil,   nil,   nil,   910, 13675, 18433,
 13925,   nil,   920,   nil, 10034,   nil,  8526,   nil,   nil, 17300,
   nil, 12292,   nil, 23115, 14800, 14925, 15050, 15175,   369, 15425,
   924,   945,   950,   nil,   974,   952,  1099,   952,   nil,  1083,
  1629,   992,  1096,   nil,   nil,   977,   453,   nil,   nil,   nil,
   868,   nil,   nil,   140, 16925,   nil,  1021,   nil,   nil,   nil,
   nil,   983,  2182,   nil,  2057,   nil,   nil,  1527,  5151,   nil,
   758,   nil,   986,   267,   nil,   993,   nil,   nil,  1115,   nil,
  5651,  1117,  1754,  2004,   nil,  5901,  2254,    98,   121,   nil,
  1122,   nil,  3765,   nil,  1132,  1018,   nil,   nil,  1033,  1022,
   nil, 22931,  6526,  6651, 23023,  1932,   nil,  1807,   nil,   nil,
  1430,   nil,  1047,  1030,   nil,   nil,   nil,  7276,   nil,  1054,
   nil,   nil,   nil,  1879,  1282,  1186,  1158,  1117,  1153,   nil,
   nil,  2504,  2754,  1048,  1047,  1049,   nil,   nil,  1054,  1072,
   nil,  1078,   nil,  1083,   729,  1081,   883,   nil,   nil,   152,
   nil,  1203,  1207,   nil,   355,   nil,   nil,  1209,   nil,   nil,
  5039,   nil,  1091,  1105,  1107,  1109,   nil,  1110,   nil,  1240,
   862,  1185,   nil,  1234, 10292, 22731, 22791,   675,  1131,  1235,
   nil,  1682,   nil,   nil,   765,   nil,  1401,   nil,  1277,   nil,
   nil,   nil,   494,  1299,  1116,  3265,   nil,   nil,   nil,   nil,
   nil,  3390,   nil,  3515,  1307,   nil,   nil,  1085,   nil,   919,
   nil,   nil,   nil, 22011,   nil,   nil,  1127,    34,   164,   181,
  1509,   nil,   nil,  1132,  1133,  1137,  1138,  1139,  1365,  1149,
  1269,   639,  1271,  1272,  1153,  1161,  1167,  1181,  1225,  1232,
   163,   nil,   890,   nil,   nil,   nil,  1114,  1196,   nil,   nil,
   nil,   nil,   794,   nil,   nil,   nil,  1198,  1200,    -6,   nil,
   nil ]

racc_action_default = [
    -3,  -552,    -1,  -538,    -4,  -552,    -7,  -552,  -552,  -552,
  -552,   -27,  -552,  -552,  -552,  -274,  -552,   -39,   -42,  -540,
  -552,   -47,   -49,   -50,   -51,  -255,  -255,  -255,  -285,  -321,
  -322,   -67,   -11,   -71,   -79,   -81,  -552,  -467,  -468,  -552,
  -552,  -552,  -552,  -552,  -540,  -236,  -267,  -268,  -269,  -270,
  -271,  -272,  -273,  -528,   -11,  -277,  -551,  -520,  -293,  -295,
  -552,  -552,  -299,  -302,  -538,  -552,  -552,  -552,  -552,  -323,
  -324,  -326,  -327,  -416,  -417,  -418,  -419,  -420,  -435,  -423,
  -424,  -437,  -439,  -428,  -433,  -449,  -437,  -451,  -452,  -526,
  -456,  -457,  -527,  -459,  -460,  -461,  -462,  -463,  -464,  -465,
  -466,  -471,  -472,  -552,    -2,  -539,  -547,  -548,  -549,    -6,
  -552,  -552,  -552,  -552,  -552,    -3,   -15,  -552,  -110,  -111,
  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -122,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,   -20,  -119,   -11,
  -552,  -552,  -245,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -540,  -541,   -46,  -552,  -467,  -468,  -552,  -274,  -552,  -552,
  -228,  -552,   -11,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -386,  -388,  -552,  -552,   -56,  -245,  -552,  -292,  -391,  -400,
  -402,   -62,  -397,   -63,  -540,   -64,  -237,  -250,  -259,  -259,
  -254,  -552,  -260,  -552,  -522,  -552,   -65,   -66,  -538,   -12,
  -552,   -69,   -11,  -540,  -552,   -72,   -75,   -11,   -87,   -88,
  -552,  -552,   -95,  -285,  -288,  -540,  -552,  -321,  -322,  -325,
  -398,  -552,   -77,  -552,   -83,  -282,  -453,  -454,  -552,  -213,
  -214,  -229,  -552,  -408,  -552,  -552,  -238,  -544,  -544,  -552,
  -552,  -544,  -552,  -294,  -378,   -48,  -552,  -552,  -552,  -552,
  -538,  -552,  -539,  -467,  -468,  -552,  -552,  -274,  -552,  -337,
  -338,  -105,  -106,  -552,  -108,  -552,  -274,  -552,  -552,  -467,
  -468,  -314,  -110,  -111,  -151,  -152,  -153,  -169,  -174,  -181,
  -184,  -316,  -552,  -518,  -552,  -421,  -552,  -552,  -552,  -552,
  -552,  -552,   961,    -5,  -550,   -21,   -22,   -23,   -24,   -25,
  -552,  -552,   -17,   -18,   -19,  -120,  -552,   -28,   -37,   -38,
  -552,  -552,   -29,  -194,  -540,  -246,  -259,  -259,  -529,  -530,
  -255,  -395,  -531,  -532,  -530,  -529,  -255,  -394,  -396,  -531,
  -532,   -35,  -202,   -36,  -552,   -40,   -41,  -192,  -260,   -43,
   -44,   -45,  -540,  -291,  -552,  -552,  -552,  -245,  -282,  -552,
  -552,  -552,  -203,  -204,  -205,  -206,  -207,  -208,  -209,  -210,
  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,  -223,  -224,
  -225,  -226,  -227,  -230,  -231,  -232,  -233,  -540,  -367,  -255,
  -529,  -530,  -255,   -54,   -57,  -540,  -256,  -367,  -367,  -540,
  -287,  -251,  -552,  -252,  -552,  -257,  -552,  -261,  -525,   -10,
  -539,   -14,  -540,   -68,  -280,   -84,   -73,  -552,  -540,  -245,
  -552,  -552,   -94,  -552,  -453,  -454,  -552,   -80,   -85,  -552,
  -552,  -552,  -552,  -552,  -234,  -552,  -551,  -551,  -276,  -278,
  -239,  -546,  -545,  -241,  -546,  -283,  -284,  -521,  -296,  -492,
   -11,  -328,  -329,   -11,  -552,  -552,  -552,  -552,  -552,  -245,
  -552,  -552,  -282,  -307,  -105,  -106,  -107,  -552,  -552,  -245,
  -310,  -473,  -552,  -552,  -552,   -11,  -492,  -318,  -536,  -537,
  -540,  -422,  -436,  -441,  -552,  -443,  -425,  -438,  -552,  -440,
  -427,  -552,  -430,  -432,  -552,  -450,    -8,   -16,  -552,   -26,
  -266,  -552,  -552,  -399,  -552,  -247,  -249,  -552,  -552,   -58,
  -244,  -392,  -552,  -552,   -60,  -393,  -552,  -552,  -290,  -542,
  -529,  -530,  -529,  -530,  -540,  -192,  -552,  -368,  -372,  -370,
   -11,   -52,  -389,   -53,  -390,  -367,  -242,   -11,   -11,  -286,
  -259,  -258,  -262,  -552,  -523,  -524,   -13,   -70,  -552,   -76,
   -82,  -540,  -529,  -530,  -243,   -91,   -93,  -552,   -78,  -552,
  -201,  -211,  -212,  -540,  -551,  -335,   -11,  -409,  -551,  -410,
  -411,  -540,  -544,  -552,  -492,  -381,  -517,  -517,  -517,  -491,
  -493,  -494,  -495,  -496,  -497,  -498,  -499,  -552,  -501,  -507,
  -509,  -510,  -512,  -513,  -514,  -552,  -551,  -330,  -551,  -300,
  -331,  -332,  -303,  -552,  -306,  -552,  -540,  -529,  -530,  -533,
  -281,  -552,  -105,  -106,  -109,  -540,   -11,  -552,  -475,  -312,
  -552,   -11,  -492,  -552,  -552,  -519,  -442,  -445,  -446,  -447,
  -448,   -11,  -426,  -429,  -431,  -434,  -121,  -264,  -552,  -195,
  -552,  -543,  -259,   -31,  -197,   -32,  -198,   -59,   -33,  -200,
   -34,  -199,   -61,  -193,  -552,  -552,  -552,  -552,  -399,  -552,
  -517,  -517,  -517,  -366,  -552,  -372,  -552,  -498,  -505,  -552,
   -11,  -552,  -552,  -253,  -263,   -74,   -89,   -86,  -289,    -9,
   -11,  -415,  -336,  -552,  -552,  -413,  -552,  -240,  -379,  -382,
  -384,  -372,  -552,  -484,  -552,  -487,  -489,  -552,  -552,  -339,
  -552,  -341,  -343,  -350,  -498,  -540,  -511,  -515,  -552,  -333,
  -552,  -552,   -11,   -11,  -305,  -552,   -11,  -399,  -552,  -399,
  -552,  -474,   -11,  -315,  -552,  -540,  -477,  -319,  -552,  -265,
   -30,  -196,  -248,  -552,  -235,  -357,  -359,  -552,  -362,  -364,
  -552,  -369,  -552,  -373,  -374,  -376,  -377,  -552,  -387,  -552,
  -401,  -403,  -414,   -11,   -96,   -97,  -552,  -552,  -104,  -412,
  -279,   -11,   -11,  -540,  -517,  -517,  -502,  -516,  -517,  -517,
  -508,  -517,  -503,  -540,  -552,  -348,  -552,  -500,  -297,  -552,
  -298,  -552,  -552,  -262,  -551,  -308,  -311,  -552,  -317,  -476,
  -492,  -444,  -517,  -517,  -517,  -517,  -506,  -517,  -371,  -552,
  -504,  -552,   -55,  -408,  -245,  -552,  -552,  -103,  -552,  -552,
  -380,  -552,  -480,  -482,  -552,  -485,  -552,  -488,  -552,  -490,
  -340,  -342,  -346,  -552,  -351,   -11,  -301,  -304,  -404,  -405,
  -406,   -11,  -313,   -11,  -552,  -354,  -356,  -552,  -360,  -552,
  -363,  -365,  -375,  -552,  -282,  -407,  -540,  -529,  -530,  -533,
  -102,  -383,  -385,  -517,  -517,  -517,  -517,  -344,  -552,  -349,
  -552,  -551,  -552,  -552,  -517,  -517,  -517,  -517,  -281,  -533,
  -399,  -478,  -552,  -481,  -483,  -486,  -552,  -347,  -334,  -309,
  -320,  -352,  -552,  -355,  -358,  -361,  -517,  -345,  -517,  -479,
  -353 ]

clist = [
'121,121,314,400,406,361,209,14,506,285,394,473,14,316,267,267,267,212',
'520,523,6,258,262,416,527,6,464,213,124,124,691,312,302,778,573,213',
'213,213,497,14,290,290,116,198,126,126,326,327,299,299,330,105,459,462',
'611,536,611,731,389,816,121,14,634,465,413,836,840,213,213,614,645,213',
'335,345,345,269,269,269,281,2,299,299,299,734,254,261,263,104,814,108',
'325,325,775,109,325,758,375,376,377,378,891,347,351,318,321,649,510',
'513,836,614,517,283,14,669,672,519,251,213,213,213,213,14,14,831,832',
'6,552,423,559,562,866,458,649,367,379,6,600,467,371,473,325,325,325',
'325,602,607,608,604,331,468,108,898,638,753,894,365,366,611,611,265',
'276,277,369,561,370,696,701,834,368,605,568,614,319,1,381,340,268,268',
'268,197,363,470,320,840,733,323,891,518,267,749,338,836,816,373,380',
'761,410,387,392,401,483,929,411,415,317,843,14,213,213,213,540,362,213',
'213,213,213,213,213,547,673,812,912,619,315,781,400,406,866,641,14,649',
'628,324,769,728,594,947,419,420,421,422,267,267,795,328,782,833,329',
'783,684,267,681,901,686,957,792,545,546,694,860,735,746,213,213,862',
'813,643,,,,,213,,,,15,,,649,498,15,,493,740,486,,,14,,14,624,,258,290',
'14,,262,621,948,,481,299,624,269,,,,15,292,292,290,269,,,524,525,787',
',299,,,704,213,,,789,480,,281,15,624,,,281,,213,213,676,624,588,337',
'346,346,,903,509,769,685,391,845,,717,743,745,391,213,722,,325,325,',
'482,479,,108,639,488,786,,,,213,,121,38,,,855,544,38,15,574,606,,611',
',609,466,,15,15,,,,550,469,580,614,,617,,124,585,416,268,620,38,289',
'289,,899,,268,267,526,567,108,126,410,,769,401,769,,,,,,38,,,757,,541',
'213,,,,,334,350,350,350,,596,823,649,,,,,,,,743,580,,,580,579,,,,498',
'640,584,,695,927,769,,,498,,15,267,732,,,38,,,,410,,,401,14,38,38,,',
',690,290,410,213,15,401,,616,,299,290,769,,769,,322,,,299,213,,,267',
',,601,610,,603,769,410,,267,401,14,687,410,14,,37,,401,633,213,37,,',
',895,,,,,213,900,,213,748,,14,,,15,940,15,642,,121,292,15,,37,288,288',
',915,,,,325,38,713,715,,,292,718,720,574,,415,213,213,37,,124,213,213',
'751,,213,498,755,38,333,349,349,349,,706,,126,747,,14,574,,670,670,',
',14,14,,,,,580,,712,585,,290,,,756,688,689,797,,299,790,,290,37,,794',
'835,,838,14,299,,37,37,,,,388,,,38,391,38,418,,,289,38,,574,,,,788,',
',,,574,,,624,675,289,,,,,916,863,,864,121,,213,,,,847,14,,,,,14,,,,',
',,,,800,14,,,325,859,,,,,213,,,,,475,,477,,478,,,,730,37,,,,,,,,,857',
',,,,,,14,,,880,16,,,37,15,16,14,,923,890,826,292,,,,849,,,299,,292,',
'791,,,,,,796,,,934,16,,,,213,,14,14,,,14,,15,,,15,14,,,,,,16,,,,,325',
',37,,37,,339,,288,37,15,,,,870,,,,,700,14,,299,,,288,,,14,14,,570,,',
',,,,,,284,933,,,38,,16,,,,267,289,,,,16,16,,410,,289,401,,,670,15,,',
',,,213,15,15,,,,,,,,,,292,38,,839,38,,841,,,14,574,292,410,,,14,,14',
'15,,,,,,,,38,,,,612,,322,,615,,,,,,,,,,,,865,,,867,,,,,,,,16,,,,,,,414',
'637,,,15,612,,,322,15,,,,,,,16,38,,15,,,418,,38,38,,,,,,,,,,289,,,,',
',,,,,,289,,,,,,,38,,37,924,,15,925,386,926,288,,,707,,,15,612,322,288',
'828,,16,,16,,,935,,16,936,284,937,,,,,,,,,,,37,,,37,,15,15,,38,15,,',
'744,38,,15,,,,,,,956,38,,37,,,,,,,958,,,,,,,,346,,,,,,15,,284,,,,,284',
'15,15,,,,,,,38,,,,,,,,,,38,,,,825,,,,37,,,,,,,37,37,,,,,,,,,,288,,,',
',,38,38,,799,38,288,,,,,38,,37,,15,,,,,13,15,,15,,13,,,,,,,,,,,350,',
',,,,38,,,,,,,,38,38,13,,,,,,,,,,,37,842,,,,37,,,,,,13,,16,,37,,,853',
',,,,,,,,,,,,,,,,322,,,,,,,,,,,,25,,,,38,25,16,37,,16,38,,38,,,13,,37',
',,25,824,,,13,13,,,25,25,25,16,25,,,,,,,,,,763,765,766,,,,,37,37,,,37',
'25,,,,,37,25,25,,,25,,,,,,,,414,666,,,668,,,,,,,,349,,16,,,,37,,,16',
'16,,,,37,37,,,,,,25,,,,13,25,25,25,25,25,25,,,,,,,16,,,,806,808,809',
',,,13,,,,,,,,,,,,,,,,,,,,,739,,,,,,,741,742,37,,,,,,37,,37,,16,,,,,16',
',,,,,,,,,16,,752,13,,13,,,,,13,,25,25,25,25,,,25,25,25,25,25,25,,,,',
',,,,,,,25,,,,16,,,,882,883,,,885,887,16,889,,,829,,,,,,,,,,,,,,798,25',
'25,,905,906,908,910,,911,25,,,,16,16,,,16,,,,,,16,,25,,25,,,,,25,,,',
',,819,,,,,,,,,,822,,,,,,16,,,,,,25,,16,16,941,943,944,945,,,,,,25,25',
'951,953,954,955,,851,852,,,854,,,,,,,,,25,,,,959,,960,,,,,,,,,,25,,',
',,,,,,,,,873,,,,,16,,,878,879,,16,,16,13,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,25,,,13,,,13,,,,,,,,,,,,,,,931,,,,,,932,13,,,,,,,,,,,,,,,,',
',,,,,,,,25,,,,,,,,,25,,,,,,,,,,,,,,,,25,,,,,13,,,,,,,13,13,,25,,,25',
',,,,,25,,,,,,,,,,25,,,25,,,25,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,25,25',
',,,25,25,,,25,,,,,,,,,,13,,,,25,13,,,,,,25,25,,,13,,,,,,,,,,,,,,,,,',
',,,,,220,,25,,,,,,266,266,266,,,,,,13,,,,,309,310,311,,,13,,,,,,,,,',
'266,266,,,,,,,,,,25,,,,,25,,,,,25,13,13,,,13,,,,,25,13,,,,,,,,25,,,',
',,,,,,,,,,,,,,,,,,,13,,,,,,,25,13,13,,,,,,,,25,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,25,,25,25,,,25,,,,,,25,,,,,,,,,,,,,13,,,,,,13,,13,266,393,266',
',,412,417,,,25,,,,,,,,25,25,,,220,,,432,433,434,435,436,437,438,439',
'440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456',
'457,,,,,,266,266,,,,25,,,,266,,,,,,,266,,266,,266,,,,,,25,,,,,,25,,25',
',,,,,,,,,,,,,,,,,,,,,,504,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,266,,412,595,393,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266',
',266,,266,,,,,,,,,,,,,266,,,,,,,,,,630,631,632,,,,,,266,,,,266,,,266',
',,,,,,,,,,,,,266,266,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266',
'709,,,266,266,714,716,,,,719,721,,,595,723,,,,,,,,,,,,,,,,,,,,,,,,,',
'266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,801,,,,,,,,,,,,,,714,716,721,719',
',804,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,266,',
',,,,,,,,,,,,,,,266,801,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,266' ]
        racc_goto_table = arr = ::Array.new(2754, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'54,54,8,35,35,53,30,21,10,46,22,68,21,62,32,32,32,19,82,82,7,66,66,17',
'85,7,37,21,57,57,91,30,47,83,23,21,21,21,48,21,21,21,14,14,58,58,16',
'16,60,60,16,6,35,35,69,51,69,115,26,123,54,21,11,22,26,151,152,21,21',
'156,127,21,21,21,21,65,65,65,42,2,60,60,60,120,36,36,36,4,122,89,28',
'28,111,5,28,125,16,16,16,16,109,52,52,65,65,118,64,64,151,156,64,43',
'21,84,84,126,128,21,21,21,21,21,21,129,130,7,146,44,146,146,153,131',
'118,142,7,7,38,133,142,68,28,28,28,28,67,38,38,67,4,134,89,135,136,137',
'112,140,141,69,69,41,41,41,144,145,147,148,149,150,143,39,59,156,61',
'1,29,18,63,63,63,15,77,44,78,152,118,79,109,81,32,12,86,151,123,5,2',
'127,54,19,19,66,44,112,19,19,63,111,21,21,21,21,88,92,21,21,21,21,21',
'21,93,85,120,122,48,94,11,35,35,153,95,21,118,48,96,110,23,22,112,28',
'28,28,28,32,32,127,97,98,120,99,100,51,32,101,102,103,112,104,105,106',
'107,108,113,23,21,21,115,121,124,,,,,21,,,,24,,,118,46,24,,30,38,47',
',,21,,21,35,,66,21,21,,66,22,83,,7,60,35,65,,,,24,24,24,21,65,,,16,16',
'23,,60,,,146,21,,,23,6,,42,24,35,,,42,,21,21,22,35,44,24,24,24,,91,28',
'110,22,63,110,,37,68,48,63,21,37,,28,28,,43,4,,89,26,43,82,,,,21,,54',
'50,,,84,28,50,24,30,44,,69,,44,41,,24,24,,,,28,41,66,156,,44,,57,66',
'17,63,44,50,50,50,,11,,63,32,4,14,89,58,54,,110,66,110,,,,,,50,,,64',
',89,21,,,,,50,50,50,50,,30,82,118,,,,,,,,68,66,,,66,36,,,,46,62,36,',
'44,110,110,,,46,,24,32,116,,,50,,,,54,,,66,21,50,50,,,,8,21,54,21,24',
'66,,7,,60,21,110,,110,,27,,,60,21,,,32,,,36,65,,36,110,54,,32,66,21',
'16,54,21,,49,,66,28,21,49,,,,82,,,,,21,85,,21,44,,21,,,24,23,24,65,',
'54,24,24,,49,49,49,,10,,,,28,50,19,19,,,24,19,19,30,,19,21,21,49,,57',
'21,21,62,,21,46,62,50,49,49,49,49,,14,,58,46,,21,30,,89,89,,,21,21,',
',,,66,,65,66,,21,,,30,89,89,53,,60,8,,21,49,,8,116,,116,21,60,,49,49',
',,,27,,,50,63,50,27,,,50,50,,30,,,,16,,,,,30,,,35,63,50,,,,,22,116,',
'116,54,,21,,,,44,21,,,,,21,,,,,,,,,19,21,,,28,44,,,,,21,,,,,27,,27,',
'27,,,,114,49,,,,,,,,,8,,,,,,,21,,,44,25,,,49,24,25,21,,116,44,21,24',
',,,16,,,60,,24,,89,,,,,,89,,,116,25,,,,21,,21,21,,,21,,24,,,24,21,,',
',,,25,,,,,28,,49,,49,,25,,49,49,24,,,,21,,,,,24,21,,60,,,49,,,21,21',
',27,,,,,,,,,9,8,,,50,,25,,,,32,50,,,,25,25,,54,,50,66,,,89,24,,,,,,21',
'24,24,,,,,,,,,,24,50,,114,50,,114,,,21,30,24,54,,,21,,21,24,,,,,,,,50',
',,,27,,27,,27,,,,,,,,,,,,114,,,114,,,,,,,,25,,,,,,,25,27,,,24,27,,,27',
'24,,,,,,,25,50,,24,,,27,,50,50,,,,,,,,,,50,,,,,,,,,,,50,,,,,,,50,,49',
'114,,24,114,9,114,49,,,27,,,24,27,27,49,24,,25,,25,,,114,,25,114,9,114',
',,,,,,,,,,49,,,49,,24,24,,50,24,,,27,50,,24,,,,,,,114,50,,49,,,,,,,114',
',,,,,,,24,,,,,,24,,9,,,,,9,24,24,,,,,,,50,,,,,,,,,,50,,,,50,,,,49,,',
',,,,49,49,,,,,,,,,,49,,,,,,50,50,,27,50,49,,,,,50,,49,,24,,,,,20,24',
',24,,20,,,,,,,,,,,50,,,,,,50,,,,,,,,50,50,20,,,,,,,,,,,49,27,,,,49,',
',,,,20,,25,,49,,,27,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,40,,,,50,40,25,49',
',25,50,,50,,,20,,49,,,40,49,,,20,20,,,40,40,40,25,40,,,,,,,,,,117,117',
'117,,,,,49,49,,,49,40,,,,,49,40,40,,,40,,,,,,,,25,9,,,9,,,,,,,,49,,25',
',,,49,,,25,25,,,,49,49,,,,,,40,,,,20,40,40,40,40,40,40,,,,,,,25,,,,117',
'117,117,,,,20,,,,,,,,,,,,,,,,,,,,,9,,,,,,,9,9,49,,,,,,49,,49,,25,,,',
',25,,,,,,,,,,25,,9,20,,20,,,,,20,,40,40,40,40,,,40,40,40,40,40,40,,',
',,,,,,,,,40,,,,25,,,,117,117,,,117,117,25,117,,,25,,,,,,,,,,,,,,9,40',
'40,,117,117,117,117,,117,40,,,,25,25,,,25,,,,,,25,,40,,40,,,,,40,,,',
',,9,,,,,,,,,,9,,,,,,25,,,,,,40,,25,25,117,117,117,117,,,,,,40,40,117',
'117,117,117,,9,9,,,9,,,,,,,,,40,,,,117,,117,,,,,,,,,,40,,,,,,,,,,,,9',
',,,,25,,,9,9,,25,,25,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,20',
',,20,,,,,,,,,,,,,,,9,,,,,,9,20,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,,,,,,40',
',,,,,,,,,,,,,,,40,,,,,20,,,,,,,20,20,,40,,,40,,,,,,40,,,,,,,,,,40,,',
'40,,,40,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,40,40,,,40,,,,,,,',
',,20,,,,40,20,,,,,,40,40,,,20,,,,,,,,,,,,,,,,,,,,,,,31,,40,,,,,,31,31',
'31,,,,,,20,,,,,31,31,31,,,20,,,,,,,,,,31,31,,,,,,,,,,40,,,,,40,,,,,40',
'20,20,,,20,,,,,40,20,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,20,,,,,,,40,20',
'20,,,,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,,,40,,,,,,40,,,',
',,,,,,,,,20,,,,,,20,,20,31,31,31,,,31,31,,,40,,,,,,,,40,40,,,31,,,31',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,31,,,,,,31,31,,,,40,,,,31,,,,,,,31,,31,,31,,,,,,40,,,,,,40,,40,,',
',,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,31,,31,31,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,31,,31,',
',,,,,,,,,,,31,,,,,,,,,,31,31,31,,,,,,31,,,,31,,,31,,,,,,,,,,,,,,31,31',
',,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,31,,,31,31,31,31,,,,31',
'31,,,31,31,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31',
',31,,,,,,,,,,,,,,31,31,31,31,,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,31,,,,,,,,,,,,,,,,,31,,,,,,,,,,,,,,,,,31,31,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,31' ]
        racc_goto_check = arr = ::Array.new(2754, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   173,    79,   nil,    84,    88,    48,    20,   -52,   818,
  -305,  -444,  -445,   nil,    34,   170,   -14,  -183,   110,    -3,
  1175,     7,  -192,  -360,   275,   751,  -142,   451,    30,    58,
   -13,  1879,   -14,   nil,   nil,  -200,    59,  -228,  -322,  -294,
  1265,   131,    46,    79,   -83,   nil,   -24,    -2,  -265,   532,
   374,  -288,    35,   -63,    -8,   nil,   nil,    20,    36,  -215,
    15,   116,   -43,   148,  -211,    47,    -4,  -315,  -258,  -418,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   112,   125,   127,
   nil,  -137,  -308,  -633,  -411,  -307,   125,   nil,  -137,    86,
   nil,  -516,   143,  -144,   168,  -281,   173,   182,  -424,   184,
  -424,  -282,  -603,  -287,  -434,   -95,  -104,  -289,  -538,  -744,
  -424,  -565,  -692,  -338,   132,  -541,  -122,   661,  -414,   nil,
  -515,  -471,  -648,  -677,  -253,  -548,  -209,  -449,    94,  -636,
  -636,  -119,   nil,  -122,  -111,  -703,  -355,  -485,   nil,   nil,
    79,    78,    52,    86,    79,  -206,  -240,    80,  -389,  -389,
  -595,  -697,  -698,  -677,   nil,   nil,  -405 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   332,   279,   nil,   313,
   nil,   779,   nil,   278,   nil,   nil,   nil,    11,    12,    18,
   219,   308,   nil,   nil,   217,   218,   nil,   272,    17,   nil,
   424,    21,    22,    23,    24,   627,   nil,   nil,   nil,   nil,
   296,   395,    31,   nil,   nil,    33,    36,    35,   nil,   214,
   215,   344,   nil,   123,   403,   122,   125,    74,    75,   nil,
    45,   nil,   635,   396,   nil,   397,   408,   581,   471,   270,
   256,    46,    47,    48,    49,    50,    51,    52,   nil,   257,
    58,   nil,   nil,   nil,   nil,   nil,   nil,    66,   nil,   521,
    67,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   771,
   656,   nil,   772,   nil,   646,   nil,   648,   nil,   837,   597,
   nil,   nil,   nil,   654,   nil,   nil,   nil,   693,   nil,   nil,
   nil,   nil,   407,   nil,   nil,   nil,   nil,   nil,    73,    76,
    77,   nil,   nil,   nil,   nil,   nil,   557,   nil,   nil,   nil,
   647,   658,   659,   738,   662,   665,   274 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 138, :_reduce_none,
  2, 139, :_reduce_2,
  0, 140, :_reduce_3,
  1, 140, :_reduce_4,
  3, 140, :_reduce_5,
  2, 140, :_reduce_6,
  1, 142, :_reduce_none,
  4, 142, :_reduce_8,
  4, 145, :_reduce_9,
  2, 146, :_reduce_10,
  0, 150, :_reduce_11,
  1, 150, :_reduce_12,
  3, 150, :_reduce_13,
  2, 150, :_reduce_14,
  0, 166, :_reduce_15,
  4, 144, :_reduce_16,
  3, 144, :_reduce_17,
  3, 144, :_reduce_18,
  3, 144, :_reduce_19,
  2, 144, :_reduce_20,
  3, 144, :_reduce_21,
  3, 144, :_reduce_22,
  3, 144, :_reduce_23,
  3, 144, :_reduce_24,
  3, 144, :_reduce_25,
  4, 144, :_reduce_26,
  1, 144, :_reduce_none,
  3, 144, :_reduce_28,
  3, 144, :_reduce_29,
  6, 144, :_reduce_30,
  5, 144, :_reduce_31,
  5, 144, :_reduce_32,
  5, 144, :_reduce_33,
  5, 144, :_reduce_34,
  3, 144, :_reduce_35,
  3, 144, :_reduce_36,
  3, 144, :_reduce_37,
  3, 144, :_reduce_38,
  1, 144, :_reduce_none,
  3, 154, :_reduce_40,
  3, 154, :_reduce_41,
  1, 165, :_reduce_none,
  3, 165, :_reduce_43,
  3, 165, :_reduce_44,
  3, 165, :_reduce_45,
  2, 165, :_reduce_46,
  1, 165, :_reduce_none,
  1, 153, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 170, :_reduce_none,
  4, 170, :_reduce_52,
  4, 170, :_reduce_53,
  0, 176, :_reduce_54,
  5, 174, :_reduce_55,
  2, 169, :_reduce_56,
  3, 169, :_reduce_57,
  4, 169, :_reduce_58,
  5, 169, :_reduce_59,
  4, 169, :_reduce_60,
  5, 169, :_reduce_61,
  2, 169, :_reduce_62,
  2, 169, :_reduce_63,
  2, 169, :_reduce_64,
  2, 169, :_reduce_65,
  2, 169, :_reduce_66,
  1, 155, :_reduce_67,
  3, 155, :_reduce_68,
  1, 180, :_reduce_69,
  3, 180, :_reduce_70,
  1, 179, :_reduce_none,
  2, 179, :_reduce_72,
  3, 179, :_reduce_73,
  5, 179, :_reduce_74,
  2, 179, :_reduce_75,
  4, 179, :_reduce_76,
  2, 179, :_reduce_77,
  4, 179, :_reduce_78,
  1, 179, :_reduce_79,
  3, 179, :_reduce_80,
  1, 183, :_reduce_none,
  3, 183, :_reduce_82,
  2, 182, :_reduce_83,
  3, 182, :_reduce_84,
  1, 185, :_reduce_85,
  3, 185, :_reduce_86,
  1, 184, :_reduce_87,
  1, 184, :_reduce_88,
  4, 184, :_reduce_89,
  3, 184, :_reduce_90,
  3, 184, :_reduce_91,
  3, 184, :_reduce_92,
  3, 184, :_reduce_93,
  2, 184, :_reduce_94,
  1, 184, :_reduce_95,
  1, 162, :_reduce_96,
  1, 162, :_reduce_97,
  4, 162, :_reduce_98,
  3, 162, :_reduce_99,
  3, 162, :_reduce_100,
  3, 162, :_reduce_101,
  3, 162, :_reduce_102,
  2, 162, :_reduce_103,
  1, 162, :_reduce_104,
  1, 188, :_reduce_105,
  1, 188, :_reduce_none,
  2, 189, :_reduce_107,
  1, 189, :_reduce_108,
  3, 189, :_reduce_109,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 193, :_reduce_115,
  1, 193, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_119,
  0, 196, :_reduce_120,
  4, 152, :_reduce_121,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 168, :_reduce_192,
  5, 168, :_reduce_193,
  3, 168, :_reduce_194,
  5, 168, :_reduce_195,
  6, 168, :_reduce_196,
  5, 168, :_reduce_197,
  5, 168, :_reduce_198,
  5, 168, :_reduce_199,
  5, 168, :_reduce_200,
  4, 168, :_reduce_201,
  3, 168, :_reduce_202,
  3, 168, :_reduce_203,
  3, 168, :_reduce_204,
  3, 168, :_reduce_205,
  3, 168, :_reduce_206,
  3, 168, :_reduce_207,
  3, 168, :_reduce_208,
  3, 168, :_reduce_209,
  3, 168, :_reduce_210,
  4, 168, :_reduce_211,
  4, 168, :_reduce_212,
  2, 168, :_reduce_213,
  2, 168, :_reduce_214,
  3, 168, :_reduce_215,
  3, 168, :_reduce_216,
  3, 168, :_reduce_217,
  3, 168, :_reduce_218,
  3, 168, :_reduce_219,
  3, 168, :_reduce_220,
  3, 168, :_reduce_221,
  3, 168, :_reduce_222,
  3, 168, :_reduce_223,
  3, 168, :_reduce_224,
  3, 168, :_reduce_225,
  3, 168, :_reduce_226,
  3, 168, :_reduce_227,
  2, 168, :_reduce_228,
  2, 168, :_reduce_229,
  3, 168, :_reduce_230,
  3, 168, :_reduce_231,
  3, 168, :_reduce_232,
  3, 168, :_reduce_233,
  3, 168, :_reduce_234,
  6, 168, :_reduce_235,
  1, 168, :_reduce_none,
  1, 164, :_reduce_none,
  1, 198, :_reduce_none,
  2, 198, :_reduce_none,
  4, 198, :_reduce_240,
  2, 198, :_reduce_241,
  3, 203, :_reduce_242,
  0, 204, :_reduce_243,
  1, 204, :_reduce_none,
  0, 159, :_reduce_245,
  1, 159, :_reduce_none,
  2, 159, :_reduce_none,
  4, 159, :_reduce_248,
  2, 159, :_reduce_249,
  1, 178, :_reduce_250,
  2, 178, :_reduce_251,
  2, 178, :_reduce_252,
  4, 178, :_reduce_253,
  1, 178, :_reduce_254,
  0, 207, :_reduce_255,
  2, 173, :_reduce_256,
  2, 206, :_reduce_257,
  2, 205, :_reduce_258,
  0, 205, :_reduce_259,
  1, 200, :_reduce_260,
  2, 200, :_reduce_261,
  3, 200, :_reduce_262,
  4, 200, :_reduce_263,
  3, 163, :_reduce_264,
  4, 163, :_reduce_265,
  2, 163, :_reduce_266,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_275,
  3, 197, :_reduce_276,
  0, 231, :_reduce_277,
  0, 232, :_reduce_278,
  6, 197, :_reduce_279,
  3, 197, :_reduce_280,
  3, 197, :_reduce_281,
  2, 197, :_reduce_282,
  3, 197, :_reduce_283,
  3, 197, :_reduce_284,
  1, 197, :_reduce_285,
  4, 197, :_reduce_286,
  3, 197, :_reduce_287,
  1, 197, :_reduce_288,
  5, 197, :_reduce_289,
  4, 197, :_reduce_290,
  3, 197, :_reduce_291,
  2, 197, :_reduce_292,
  1, 197, :_reduce_none,
  2, 197, :_reduce_294,
  0, 233, :_reduce_295,
  3, 197, :_reduce_296,
  6, 197, :_reduce_297,
  6, 197, :_reduce_298,
  0, 234, :_reduce_299,
  0, 235, :_reduce_300,
  7, 197, :_reduce_301,
  0, 236, :_reduce_302,
  0, 237, :_reduce_303,
  7, 197, :_reduce_304,
  5, 197, :_reduce_305,
  4, 197, :_reduce_306,
  0, 238, :_reduce_307,
  0, 239, :_reduce_308,
  9, 197, :_reduce_309,
  0, 240, :_reduce_310,
  6, 197, :_reduce_311,
  0, 241, :_reduce_312,
  7, 197, :_reduce_313,
  0, 242, :_reduce_314,
  5, 197, :_reduce_315,
  0, 243, :_reduce_316,
  6, 197, :_reduce_317,
  0, 244, :_reduce_318,
  0, 245, :_reduce_319,
  9, 197, :_reduce_320,
  1, 197, :_reduce_321,
  1, 197, :_reduce_322,
  1, 197, :_reduce_323,
  1, 197, :_reduce_324,
  1, 158, :_reduce_none,
  1, 224, :_reduce_326,
  1, 227, :_reduce_327,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  2, 219, :_reduce_330,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 220, :_reduce_none,
  5, 220, :_reduce_334,
  1, 148, :_reduce_none,
  2, 148, :_reduce_336,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 246, :_reduce_339,
  3, 246, :_reduce_340,
  1, 249, :_reduce_341,
  3, 249, :_reduce_342,
  1, 248, :_reduce_none,
  4, 248, :_reduce_344,
  6, 248, :_reduce_345,
  3, 248, :_reduce_346,
  5, 248, :_reduce_347,
  2, 248, :_reduce_348,
  4, 248, :_reduce_349,
  1, 248, :_reduce_350,
  3, 248, :_reduce_351,
  6, 250, :_reduce_352,
  8, 250, :_reduce_353,
  4, 250, :_reduce_354,
  6, 250, :_reduce_355,
  4, 250, :_reduce_356,
  2, 250, :_reduce_none,
  6, 250, :_reduce_358,
  2, 250, :_reduce_359,
  4, 250, :_reduce_360,
  6, 250, :_reduce_361,
  2, 250, :_reduce_362,
  4, 250, :_reduce_363,
  2, 250, :_reduce_364,
  4, 250, :_reduce_365,
  1, 250, :_reduce_366,
  0, 175, :_reduce_367,
  1, 175, :_reduce_368,
  3, 256, :_reduce_369,
  1, 256, :_reduce_370,
  4, 256, :_reduce_371,
  0, 257, :_reduce_372,
  2, 257, :_reduce_373,
  1, 258, :_reduce_374,
  3, 258, :_reduce_375,
  1, 259, :_reduce_376,
  1, 259, :_reduce_none,
  0, 263, :_reduce_378,
  3, 218, :_reduce_379,
  4, 261, :_reduce_380,
  1, 261, :_reduce_381,
  0, 266, :_reduce_382,
  4, 262, :_reduce_383,
  0, 267, :_reduce_384,
  4, 262, :_reduce_385,
  0, 268, :_reduce_386,
  5, 265, :_reduce_387,
  2, 171, :_reduce_388,
  4, 171, :_reduce_389,
  4, 171, :_reduce_390,
  2, 217, :_reduce_391,
  4, 217, :_reduce_392,
  4, 217, :_reduce_393,
  3, 217, :_reduce_394,
  3, 217, :_reduce_395,
  3, 217, :_reduce_396,
  2, 217, :_reduce_397,
  1, 217, :_reduce_398,
  4, 217, :_reduce_399,
  0, 270, :_reduce_400,
  5, 216, :_reduce_401,
  0, 271, :_reduce_402,
  5, 216, :_reduce_403,
  5, 222, :_reduce_404,
  1, 272, :_reduce_405,
  1, 272, :_reduce_none,
  6, 147, :_reduce_407,
  0, 147, :_reduce_408,
  1, 273, :_reduce_409,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 274, :_reduce_412,
  1, 274, :_reduce_none,
  2, 149, :_reduce_414,
  1, 149, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 209, :_reduce_419,
  1, 276, :_reduce_420,
  2, 276, :_reduce_421,
  3, 277, :_reduce_422,
  1, 277, :_reduce_423,
  1, 277, :_reduce_424,
  3, 210, :_reduce_425,
  4, 211, :_reduce_426,
  3, 212, :_reduce_427,
  0, 281, :_reduce_428,
  3, 281, :_reduce_429,
  1, 282, :_reduce_430,
  2, 282, :_reduce_431,
  3, 213, :_reduce_432,
  0, 284, :_reduce_433,
  3, 284, :_reduce_434,
  0, 278, :_reduce_435,
  2, 278, :_reduce_436,
  0, 279, :_reduce_437,
  2, 279, :_reduce_438,
  0, 280, :_reduce_439,
  2, 280, :_reduce_440,
  1, 283, :_reduce_441,
  2, 283, :_reduce_442,
  0, 286, :_reduce_443,
  4, 283, :_reduce_444,
  1, 285, :_reduce_445,
  1, 285, :_reduce_446,
  1, 285, :_reduce_447,
  1, 285, :_reduce_none,
  1, 194, :_reduce_449,
  3, 195, :_reduce_450,
  1, 275, :_reduce_451,
  1, 275, :_reduce_452,
  2, 275, :_reduce_453,
  2, 275, :_reduce_454,
  1, 186, :_reduce_455,
  1, 186, :_reduce_456,
  1, 186, :_reduce_457,
  1, 186, :_reduce_458,
  1, 186, :_reduce_459,
  1, 187, :_reduce_460,
  1, 187, :_reduce_461,
  1, 187, :_reduce_462,
  1, 187, :_reduce_463,
  1, 187, :_reduce_464,
  1, 187, :_reduce_465,
  1, 187, :_reduce_466,
  1, 214, :_reduce_467,
  1, 214, :_reduce_468,
  1, 157, :_reduce_469,
  1, 157, :_reduce_470,
  1, 161, :_reduce_471,
  1, 161, :_reduce_472,
  1, 225, :_reduce_473,
  3, 225, :_reduce_474,
  2, 225, :_reduce_475,
  3, 228, :_reduce_476,
  2, 228, :_reduce_477,
  6, 264, :_reduce_478,
  8, 264, :_reduce_479,
  4, 264, :_reduce_480,
  6, 264, :_reduce_481,
  4, 264, :_reduce_482,
  6, 264, :_reduce_483,
  2, 264, :_reduce_484,
  4, 264, :_reduce_485,
  6, 264, :_reduce_486,
  2, 264, :_reduce_487,
  4, 264, :_reduce_488,
  2, 264, :_reduce_489,
  4, 264, :_reduce_490,
  1, 264, :_reduce_491,
  0, 264, :_reduce_492,
  1, 260, :_reduce_493,
  1, 260, :_reduce_494,
  1, 260, :_reduce_495,
  1, 260, :_reduce_496,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  1, 288, :_reduce_499,
  3, 288, :_reduce_500,
  1, 251, :_reduce_501,
  3, 251, :_reduce_502,
  3, 289, :_reduce_503,
  3, 290, :_reduce_504,
  1, 252, :_reduce_505,
  3, 252, :_reduce_506,
  1, 287, :_reduce_507,
  3, 287, :_reduce_508,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  2, 253, :_reduce_511,
  1, 253, :_reduce_512,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 255, :_reduce_515,
  2, 254, :_reduce_516,
  0, 254, :_reduce_517,
  1, 229, :_reduce_none,
  3, 229, :_reduce_519,
  0, 215, :_reduce_520,
  2, 215, :_reduce_none,
  1, 202, :_reduce_522,
  3, 202, :_reduce_523,
  3, 293, :_reduce_524,
  2, 293, :_reduce_525,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 167, :_reduce_none,
  1, 167, :_reduce_none,
  2, 181, :_reduce_542,
  2, 160, :_reduce_543,
  0, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 226, :_reduce_547,
  1, 226, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_none,
  0, 199, :_reduce_551 ]

racc_reduce_n = 552

racc_shift_n = 961

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "@22",
  "@23",
  "operation3",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@26",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_19(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 27 omitted

def _reduce_28(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_33(val, _values, result)
                      diagnostic :error, :const_reassignment, nil, val[3]
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 39 omitted

def _reduce_40(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 42 omitted

def _reduce_43(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

def _reduce_52(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_57(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 106 omitted

def _reduce_107(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_120(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_121(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

def _reduce_192(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_201(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_241(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = val
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 244 omitted

def _reduce_245(val, _values, result)
                      result = []
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_249(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_254(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_256(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_258(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = []
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_276(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_278(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_279(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_296(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_297(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_298(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_300(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_302(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_303(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_305(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_306(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_310(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_311(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_312(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_313(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_314(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_315(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_316(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_318(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_319(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 325 omitted

def _reduce_326(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_327(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 328 omitted

# reduce 329 omitted

def _reduce_330(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = val
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_340(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_341(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_342(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_345(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_348(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_349(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_359(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_367(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_368(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_369(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_372(val, _values, result)
                      result = []
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_376(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_379(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_380(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_383(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_386(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_387(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_388(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_389(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_390(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_391(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_392(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_393(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_395(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_396(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_397(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_400(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_402(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_404(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 406 omitted

def _reduce_407(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = []
                    
    result
end

def _reduce_409(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 410 omitted

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 413 omitted

def _reduce_414(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_423(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_424(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_426(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = []
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_431(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_432(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_433(val, _values, result)
                      result = []
                    
    result
end

def _reduce_434(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = []
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = []
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = []
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_443(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_444(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_453(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_454(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_474(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_475(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = []
                    
    result
end

def _reduce_493(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_494(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_495(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_496(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 497 omitted

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_503(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 509 omitted

# reduce 510 omitted

def _reduce_511(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_512(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 513 omitted

# reduce 514 omitted

def _reduce_515(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = []
                    
    result
end

# reduce 518 omitted

def _reduce_519(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_520(val, _values, result)
                      result = []
                    
    result
end

# reduce 521 omitted

def _reduce_522(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_525(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

def _reduce_542(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 544 omitted

# reduce 545 omitted

# reduce 546 omitted

def _reduce_547(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 548 omitted

# reduce 549 omitted

# reduce 550 omitted

def _reduce_551(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby19
  end   # module Parser
