# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby21 < Parser::Base


  def version
    21
  end

  def default_encoding
    Encoding::UTF_8
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-579,444,536,594,270,216,217,-579,-579,-579,557,536,-105,-579,-579,-83',
'-579,-286,219,536,-99,578,536,-69,-482,-579,580,-102,216,217,-494,-482',
'526,216,217,528,-579,-579,-100,-579,-579,-579,-579,-579,536,-102,836',
'-490,-93,-91,-93,-101,963,-488,-490,691,-105,-286,-102,220,-488,-99',
'867,-100,813,781,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579',
'-579,-579,-579,111,-104,-579,-579,-579,-98,599,577,-97,-98,-579,269',
'579,-579,781,691,542,691,-579,115,-579,-99,-579,-579,114,-579,-579,-579',
'-579,-579,-289,-579,-579,-579,-93,-91,556,-289,-289,-289,115,-96,220',
'-289,-289,114,-289,-579,-575,115,-579,-579,818,-92,114,-579,-93,115',
'-99,115,115,-101,114,-99,114,114,-289,-289,270,-289,-289,-289,-289,-289',
'-93,-91,-100,-93,-91,115,-101,-100,115,-102,114,-93,-91,114,-102,-101',
'-90,866,-91,-103,-101,123,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-95,270,-289,-289,-289,208,598,-88,-89,115',
'-289,115,565,-289,114,209,114,565,-289,565,-289,526,-289,-289,525,-289',
'-289,-289,-289,-289,-289,-289,514,-289,-493,-575,210,-289,-289,-289',
'216,217,-289,-289,-289,269,-289,-289,-576,115,-289,-289,215,-94,114',
'-289,-289,-289,-289,216,217,-103,259,747,-493,265,-289,-289,-489,-289',
'-289,-289,-289,-289,548,-489,567,566,549,-92,565,567,566,567,566,563',
'723,-104,269,-97,615,725,-94,746,93,94,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,270,-88,-289,-289,-289,317,749',
'-289,-102,-97,-289,93,94,-289,-289,614,-289,318,-289,565,-289,220,-289',
'-289,220,-289,-289,-289,-289,-289,565,-289,-482,-289,567,566,568,386',
'-100,-482,-482,-482,615,220,-482,-482,-482,-289,-482,115,-289,-289,-289',
'-289,114,-289,-482,-289,-482,-482,-482,-103,95,96,265,-573,593,526,-482',
'-482,528,-482,-482,-482,-482,-482,669,614,666,665,664,552,667,567,566',
'570,-487,269,918,95,96,399,-572,-487,567,566,572,553,-482,-482,-482',
'-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,615,-91,-482',
'-482,-482,-482,-482,-482,615,-100,-482,514,-482,-482,-482,443,-482,-573',
'-482,-415,-482,-482,-482,-482,445,-482,-482,-482,-482,-482,262,-482',
'-479,-482,-479,614,446,263,565,-479,-573,-479,219,614,-572,565,885,-482',
'-479,-579,-482,-482,-482,-482,115,-482,-579,-482,-95,114,-494,-482,477',
'-579,-579,-579,-104,-572,-579,-579,-579,-415,-579,669,486,666,665,664',
'-415,667,396,-579,-579,-579,-579,398,397,-415,220,-579,214,967,-579',
'-579,488,-579,-579,-579,-579,-579,490,-579,567,566,576,-290,-415,-89',
'-579,567,566,581,-290,-575,497,-98,-68,-579,220,732,500,-290,-579,-579',
'-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-96',
'-579,-579,-579,-579,748,-579,262,-105,-579,501,-579,-579,-579,263,-579',
'-575,-579,982,-579,-579,-579,-579,81,-579,-579,-579,-579,-579,-90,-579',
'-579,-579,-486,-485,82,-484,-99,508,-579,-486,-485,115,-484,274,83,-579',
'114,115,-579,-579,-579,-579,114,-579,-479,-579,74,75,71,-101,57,-479',
'-479,-479,63,64,-479,-479,-479,67,-479,65,66,68,310,311,72,73,-479,220',
'-479,-479,-479,306,307,313,103,102,104,105,-479,-479,232,-479,-479,-479',
'-479,-479,526,45,265,528,107,106,108,97,56,99,98,100,511,101,109,110',
'515,93,94,42,43,41,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479',
'-479,-479,-479,-479,216,217,-479,-479,-479,225,-479,-479,231,240,-479',
'58,59,-479,-479,60,-479,220,-479,115,-479,44,-479,-479,114,-479,-479',
'-479,-479,-479,230,-479,529,-479,530,91,81,84,85,490,86,88,87,89,813',
'781,542,-479,82,90,-479,-479,-479,-479,388,-479,62,-479,83,95,96,-479',
'5,74,75,71,9,57,216,217,-333,63,64,684,683,546,67,-333,65,66,68,30,31',
'72,73,547,-333,582,585,-261,29,28,27,103,102,104,105,717,718,19,587',
'719,109,110,603,8,45,7,10,107,106,108,97,56,99,98,100,220,101,109,110',
'591,93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,544,233',
'234,-290,592,254,255,545,40,265,-290,33,602,605,58,59,543,240,60,-290',
'35,237,240,243,44,239,238,673,235,236,247,245,241,20,242,240,240,676',
'91,81,84,85,552,86,88,87,89,220,220,551,220,82,90,-83,258,633,-238,220',
'553,62,519,83,95,96,291,74,75,71,9,57,684,683,-279,63,64,677,644,649',
'67,-279,65,66,68,30,31,72,73,650,-279,652,687,542,29,28,27,103,102,104',
'105,694,712,19,722,726,727,-262,588,8,45,293,10,107,106,108,97,56,99',
'98,100,733,101,109,110,477,93,94,42,43,41,240,244,249,250,251,246,248',
'256,257,252,253,972,233,234,-492,477,254,255,973,40,220,-492,33,673',
'751,58,59,971,259,60,-492,35,237,676,243,44,239,238,488,235,236,247',
'245,241,20,242,490,774,644,91,81,84,85,440,86,88,87,89,220,265,441,265',
'82,90,644,258,684,683,240,442,62,677,83,95,96,291,74,75,71,9,57,781',
'220,-491,63,64,790,793,794,67,-491,65,66,68,30,31,72,73,796,-491,798',
'800,808,29,28,27,103,102,104,105,809,810,19,781,817,220,220,603,8,45',
'293,10,107,106,108,97,56,99,98,100,826,101,109,110,-263,93,94,42,43',
'41,240,244,249,250,251,246,248,256,257,252,253,-289,233,234,-290,835',
'254,255,-289,40,838,-290,33,-576,793,58,59,-289,841,60,-290,35,237,843',
'243,44,239,238,845,235,236,247,245,241,20,242,847,220,849,91,81,84,85',
'516,86,88,87,89,850,853,517,855,82,90,856,258,644,858,-261,442,62,862',
'83,95,96,291,74,75,71,9,57,864,220,-279,63,64,883,220,887,67,-279,65',
'66,68,30,31,72,73,889,-279,895,898,220,29,28,27,103,102,104,105,902',
'915,19,666,665,664,-264,667,8,45,293,10,107,106,108,97,56,99,98,100',
'912,101,109,110,919,93,94,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,-289,233,234,506,920,254,255,-289,40,931,507,33,-576,793,58',
'59,-289,933,60,505,35,237,935,243,44,239,238,937,235,236,247,245,241',
'20,242,939,939,220,91,81,84,85,-492,86,88,87,89,945,948,-492,949,82',
'90,954,258,712,793,957,-492,62,959,83,95,96,291,74,75,71,9,57,961,963',
'-491,63,64,963,974,984,67,-491,65,66,68,30,31,72,73,-576,-491,-575,649',
'999,29,28,27,103,102,104,105,1000,915,19,666,665,664,1001,667,8,45,293',
'10,107,106,108,97,56,99,98,100,939,101,109,110,939,93,94,42,43,41,240',
'244,249,250,251,246,248,256,257,252,253,552,233,234,212,939,254,255',
'918,40,1006,213,33,984,1009,58,59,553,1010,60,211,35,237,1011,243,44',
'239,238,963,235,236,247,245,241,20,242,963,963,220,91,81,84,85,984,86',
'88,87,89,939,984,,,82,90,,258,,,,,62,,83,95,96,5,74,75,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,118,119,120,121,122,29,28,27,103,102',
'104,105,,,19,118,119,120,121,122,8,45,7,10,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257,252',
'253,-289,233,234,,,254,255,-289,40,,,33,-576,,58,59,-289,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,258,,,,,62,,83,95,96,5,74,75,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,118,119,120,121,122,29,28,27,103,102,104,105,,,19',
',,,,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,291,74,75',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83',
'95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',258,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,244,249,250,251',
'246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,258,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45',
'293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240',
'244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,295',
',,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,291,74,75,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83',
'95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
'220,258,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,244,249,250',
'251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83,95,96,291,74,75',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,258,,,,,62,,83',
'95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',258,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,669,19,666,665,664,,667,8,45',
'293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,669',
',666,665,664,,667,,802,,,240,,,,,,805,,40,,,295,,,58,59,,,60,,35,,,',
'44,,802,,,,,,237,20,,944,239,238,91,81,84,85,,86,88,87,89,,,,,82,90',
',669,,666,665,664,62,667,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,',
'65,66,68,30,31,72,73,,,,,802,29,28,27,103,102,104,105,240,805,19,,,',
'240,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,240,,237,,,,239,238,237,235,236,,239,238,,,254,255,,40,,,33,,',
'58,59,,240,60,,35,237,,243,44,239,238,,235,236,,,241,20,242,,,,91,81',
'84,85,,86,88,87,89,,,237,,82,90,239,238,,235,236,,62,,83,95,96,291,74',
'75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,669,19,666,665,664,,667,8,45,293,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,240,669,,666,665,664,,667,802,669,',
'666,665,664,,667,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
'802,235,236,,,241,20,242,802,,,91,81,84,85,,86,88,87,89,,,,,82,90,,669',
',666,665,664,62,667,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,802,29,28,27,103,102,104,105,,669,19,666,665,664',
',667,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,240,244,249,250,251,246,248,,802,252,253,,,,,,254,255,,40,,,33',
',,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,291,74,75,71,9',
'57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105',
',,19,,,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,240,244,249,250,251,246,248,256,,252,253,,,,,,254,255,,40,',
',33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,291,74,75,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,240,-598,-598,-598,-598,246,248,,,-598,-598,,,,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,291',
'74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103',
'102,104,105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,-598',
'-598,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83',
'95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,-598,-598,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,-598,-598,-598,-598',
'246,248,,,-598,-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243',
'44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,-598,-598,-598',
'-598,246,248,,,-598,-598,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,293,10',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,,,,,,,',
',,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
',,241,20,242,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96',
'291,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,,,241,20,242,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,,,,62,,83,95,96,291,74,75,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45',
'293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240',
'-598,-598,-598,-598,246,248,,,-598,-598,,,,,,254,255,,40,,,295,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,291,74,75,71,9,57,,',
',63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19',
',,,,,8,45,293,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,240,-598,-598,-598,-598,246,248,,,-598,-598,,,,,,254,255,,40,',
',33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,240,-598,-598,-598,-598,246,248,,,-598,-598,,,,,,254,255,,225,,,231',
',,58,59,,,60,,,237,,243,44,239,238,,235,236,247,245,241,230,242,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,240',
',,,,,,,,,,,,,,,254,255,,225,,,231,,,58,59,,,60,,,237,,243,44,239,238',
',235,236,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103',
'102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,240,,,,,,,,,,,,,,,,254,255,,225,,,231,,,58,59,,,60,',
',237,,243,44,239,238,,235,236,,,,230,,,,,91,81,84,85,,86,88,87,89,,',
',,82,90,,,,,,,62,,83,95,96,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,,10,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,240,,,,,,,,,,,,,,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,,44,239,238,,235,236,,,,20,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,627,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,404,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,285,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,286,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,285,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,286,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,285,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,286,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,285,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,286,,,,,,230,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310',
'311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,308,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,,,314,,,,,,,,,,,,,,,,,,,,304',
',,300,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,',
',,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306',
'307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307',
'313,103,102,104,105,,,232,,,,,,,308,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,,,314,,,,,,,,,,,,,,,,,,,,304,,,231,,,58,59,,,60,,,669',
',666,665,664,673,667,,,,,,,,,676,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,503,,671,62,,83,95,96,74,75,71,,57,684,683,,63,64,677,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311',
'72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,308,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,,,314,,,,,,,,,,,,,,,,,,,,852,,,231',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306',
'307,313,103,102,104,105,,,232,,,,,,,308,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,,,314,,,,,,,,,,,,,,,,,,,,926,,,231,,,58,59,,,60',
',,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103',
'102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104',
'105,,,232,,,,,,,308,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
',,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,',
',,,,308,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,314,,,,',
',,,,,,,,,,,,,,,304,,,300,,,58,59,,,60,,299,,,,,,,,,,,,,,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,308',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,314,,,,,,,,,,,,',
',,,,,,,304,,,231,,,58,59,,,60,,,669,,666,665,664,673,667,,,,,,,,,676',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,316,,671,62,,83,95,96,74,75,71',
'9,57,684,683,,63,64,677,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103',
'102,104,105,,,19,,,,,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,286',
',,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,74,75,71,9,57,,,',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19',
',,,,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,388,62,,83,95,96,74,75,71,,57',
',,,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,',
',,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310',
'311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311',
'72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72',
'73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,',
',,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306',
'307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307',
'313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,',
',107,106,108,97,56,99,98,100,285,101,109,110,,93,94,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,286,,,,,,230,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,',
',,45,,,107,106,108,97,56,99,98,100,285,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,286,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,308,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,314',
',,,,,,,,,,,,,,,,,,,852,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,285,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,286,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,220,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310',
'311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311',
'72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72',
'73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,',
',,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306',
'307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307',
'313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,',
',,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,220,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,',
',,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44',
',,286,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103',
'102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,627,',
'281,,44,,,286,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102',
'104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,730,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,404,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310',
'311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,285,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,286,,,,,,230,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72',
'73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75',
'71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103',
'102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105',
',,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,286',
',,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105',
',,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,286',
',,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104',
'105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,,,44,,,,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,286',
',,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83',
'95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105',
',,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,286,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,627,,,,44,,,286,,,',
',,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,404,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310',
'311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311',
'72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,308,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,,,314,,,,,,,,,,,,,,,,,,,,304,,,300',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,286,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,,62,,83,95,96,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,,10,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,',
'306,307,313,103,102,104,105,,,232,,,,,,,308,,,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,58,59,',
',60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311',
'72,73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,',
',74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283',
',,,44,,,286,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75',
'71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,286,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75',
'71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,115,,,,,114,62,,83,95,96,74,75,71,,57,,,,63,64,,',
',67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,,232,',
',,,,,308,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,314,,,',
',,,,,,,,,,,,,,,,348,,,33,,,58,59,,,60,,35,669,,666,665,664,673,667,',
',,,,,,,676,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,671,62,,83,95,96',
'74,75,71,9,57,684,683,,63,64,677,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,293,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59',
',,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,',
',,388,62,,83,95,96,74,75,71,,57,,,,63,64,,,,67,,65,66,68,310,311,72',
'73,,,,,,306,307,313,103,102,104,105,,,232,,,,,,,308,,,107,106,108,353',
'56,99,98,354,,101,109,110,,93,94,,,314,,,,,,,,,,,,,,,,,360,,,355,,,231',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306',
'307,313,103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,',
'60,,,,,,44,,,,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307',
'313,103,102,104,105,,,232,,,,,,,308,,,107,106,108,353,56,99,98,354,',
'101,109,110,,93,94,,,314,,,,,,,,,,,,,,,,,,,,355,,,231,,,58,59,,,60,',
',,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103',
'102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281',
',44,,,286,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313',
'103,102,104,105,,,232,,,,,,,45,,,107,106,108,97,56,99,98,100,285,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,627',
',281,,44,,,286,,,,,,230,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102',
'104,105,,,232,,,,,,,308,,,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,58,59,,,60,,,,,,,,,,,,,,',
',,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,310,311,72,73,,,,,,306,307,313,103,102,104,105,,',
'232,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,519,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,-580,,62,,83,95,96,-580,-580',
'-580,,,-580,-580,-580,,-580,,,,,,,,,-580,-580,-580,-580,,,,,,,,-580',
'-580,,-580,-580,-580,-580,-580,,,,,,,,,,,,,,,,,,,,,,,-580,-580,-580',
'-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,,,-580,-580,-580',
',,-580,,,-580,,,-580,-580,,-580,,-580,,-580,,-580,-580,,-580,-580,-580',
'-580,-580,,-580,-580,-580,,,,,,,,,,,,,,-580,,,-580,-580,-580,-580,-581',
'-580,,-580,,,,-581,-581,-581,,,-581,-581,-581,,-581,,,,,,,,,-581,-581',
'-581,-581,,,,,,,,-581,-581,,-581,-581,-581,-581,-581,,,,,,,,,,,,,,,',
',,,,,,,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581',
'-581,,,-581,-581,-581,,,-581,,,-581,,,-581,-581,,-581,,-581,,-581,,-581',
'-581,,-581,-581,-581,-581,-581,,-581,-581,-581,,,,,,,,,,,,,,-581,,,-581',
'-581,-581,-581,-280,-581,,-581,,,,-280,-280,-280,,,-280,-280,-280,,-280',
',,,,,,,,,-280,-280,-280,,,,,,,,-280,-280,,-280,-280,-280,-280,-280,',
',,,,,,,,,,,,,,,,,,,,,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,,,-280,-280,-280,,,-280,,,-280,,,-280,-280,,-280',
',-280,,-280,,-280,-280,,-280,-280,-280,-280,-280,,-280,,-280,669,,666',
'665,664,673,667,,,,,,,-280,,676,-280,-280,-280,-280,-244,-280,,-280',
',,,-244,-244,-244,,,-244,-244,-244,,-244,671,,,,,,,,-244,-244,-244,684',
'683,,,,677,,,-244,-244,,-244,-244,-244,-244,-244,,,,,,,,,,,,,,,,,,,',
',,,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244',
'-244,,,-244,-244,-244,,,-244,,265,-244,,,-244,-244,,-244,,-244,,-244',
',-244,-244,,-244,-244,-244,-244,-244,,-244,-244,-244,,,,,,,,,,,,,,-244',
',-414,-244,-244,,-244,,-244,-414,-414,-414,,,-414,-414,-414,,-414,,',
',,,,,,-414,-414,-414,,,,,,,,,-414,-414,,-414,-414,-414,-414,-414,,,',
',,,,,,,,,,,,,,,,,,,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414',
'-414,-414,-414,-414,,,-414,-414,-414,,,-414,,265,-414,,,-414,-414,,-414',
',-414,,-414,,-414,-414,,-414,-414,-414,-414,-414,,-414,-414,-414,,,',
',,,,,,,,,,-414,,-244,-414,-414,,-414,,-414,-244,-244,-244,,,-244,-244',
'-244,669,-244,666,665,664,673,667,,,,-244,-244,,,,676,,,,,,-244,-244',
',-244,-244,-244,-244,-244,,,,,,,,,671,,,,,,,,,681,680,684,683,,,,677',
',,,,,,,,-244,,-296,,,,,-244,,-296,-296,-296,265,-244,-296,-296,-296',
'220,-296,,,,,,,,,,-296,-296,,,,,,-244,-244,,-296,-296,,-296,-296,-296',
'-296,-296,,,,,-244,,,-244,,,,,-244,,,,,,,,,,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296',
',274,-296,,,-296,-296,,-296,,-296,,-296,,-296,-296,,-296,-296,-296,-296',
'-296,,-296,,-296,,,,,,,,,,,,,,-296,,,-296,-296,,-296,,-296,175,186,176',
'199,172,192,182,181,202,203,197,180,179,174,200,204,205,184,173,187',
'191,193,185,178,,,,194,201,196,195,188,198,183,171,190,189,,,,,,170',
'177,168,169,165,166,167,126,128,,,127,,,,,,,,159,160,,156,138,139,140',
'147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158',
'155,154,163,150,151,145,143,135,157,136,,,164,91,,,,,,,,,,,,,,90,175',
'186,176,199,172,192,182,181,202,203,197,180,179,174,200,204,205,184',
'173,187,191,193,185,178,,,,194,201,196,195,188,198,183,171,190,189,',
',,,,170,177,168,169,165,166,167,126,128,,,127,,,,,,,,159,160,,156,138',
'139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152',
',137,158,155,154,163,150,151,145,143,135,157,136,,,164,91,,,,,,,,,,',
',,,90,175,186,176,199,172,192,182,181,202,203,197,180,179,174,200,204',
'205,184,173,187,191,193,185,178,,,,194,201,196,195,188,198,183,171,190',
'189,,,,,,170,177,168,169,165,166,167,126,128,,,127,,,,,,,,159,160,,156',
'138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153',
'152,,137,158,155,154,163,150,151,145,143,135,157,136,,,164,91,,,,,,',
',,,,,,,90,175,186,176,199,172,192,182,181,202,203,197,180,179,174,200',
'204,205,184,173,187,191,193,185,178,,,,194,201,196,195,188,198,183,171',
'190,189,,,,,,170,177,168,169,165,166,167,126,128,125,,127,,,,,,,,159',
'160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,',
',,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,,,164',
'91,,,,,,,,,,,,,,90,175,186,176,199,172,192,182,181,202,203,197,180,179',
'174,200,204,205,184,173,187,191,193,185,178,,,,194,201,196,371,370,372',
'369,171,190,189,,,,,,170,177,168,169,366,367,368,364,128,99,98,365,',
'101,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148',
'149,,,,,,376,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135',
'157,136,,,164,175,186,176,199,172,192,182,181,202,203,197,180,179,174',
'200,204,205,184,173,187,191,193,185,178,,,,194,201,196,195,188,198,183',
'171,190,189,,,,,,170,177,168,169,165,166,167,126,128,,,127,,,,,,,,159',
'160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,',
',,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,697',
'417,164,,698,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,',
',,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151',
'145,143,135,157,136,475,417,164,,476,,,,,,,,159,160,,156,138,139,140',
'147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158',
'155,154,163,150,151,145,143,135,157,136,608,424,164,,609,,,,,,,,159',
'160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265',
',,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,606',
'417,164,,607,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,',
',,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151',
'145,143,135,157,136,637,417,164,,638,,,,,,,,159,160,,156,138,139,140',
'147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137',
'158,155,154,163,150,151,145,143,135,157,136,640,424,164,,641,,,,,,,',
'159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,',
',,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136',
'969,424,164,,968,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142',
',,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150',
'151,145,143,135,157,136,606,417,164,,607,,,,,,,,159,160,,156,138,139',
'140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152',
',137,158,155,154,163,150,151,145,143,135,157,136,608,424,164,,609,,',
',,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149',
',,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157',
'136,995,417,164,,996,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141',
'142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163',
'150,151,145,143,135,157,136,997,424,164,,998,,,,,,,,159,160,,156,138',
'139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153',
'152,,137,158,155,154,163,150,151,145,143,135,157,136,420,424,164,,419',
',,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148',
'149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135',
'157,136,475,417,164,,476,,,,,,,,159,160,,156,138,139,140,147,144,146',
',,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154',
'163,150,151,145,143,135,157,136,702,424,164,,703,,,,,,,,159,160,,156',
'138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,',
',153,152,,137,158,155,154,163,150,151,145,143,135,157,136,699,424,164',
',700,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162',
'148,149,,,,,,265,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143',
'135,157,136,413,417,164,,414,,,,,,,,159,160,,156,138,139,140,147,144',
'146,,,141,142,,,,161,162,148,149,,,,,,265,,,,,,,,153,152,,137,158,155',
'154,163,150,151,145,143,135,157,136,,669,164,666,665,664,673,667,,669',
',666,665,664,673,667,676,,,,,,,,676,,669,,666,665,664,673,667,,,,,,671',
',,676,,,,,671,681,680,684,683,,,,677,681,680,684,683,,,,677,671,,669',
',666,665,664,673,667,681,680,684,683,,,,677,676,,669,,666,665,664,673',
'667,,669,,666,665,664,673,667,676,,,,,671,,,676,,,,,,681,680,684,683',
',,,677,671,,,,,,,,671,,,684,683,,,,677,681,680,684,683,,,669,677,666',
'665,664,673,667,669,,666,665,664,673,667,669,676,666,665,664,673,667',
'669,676,666,665,664,673,667,,676,,,,,,,676,671,,,,,,,671,,,,684,683',
',671,,677,,684,683,,671,,677,,684,683,,,,677,,684,683,,,669,677,666',
'665,664,673,667,,669,,666,665,664,673,667,676,,,,,,,,676,,669,,666,665',
'664,673,667,,,,,,671,655,,676,,,,,671,681,680,684,683,,,,677,681,680',
'684,683,,,,677,671,,669,,666,665,664,673,667,681,680,684,683,,,,677',
'676,,669,,666,665,664,673,667,,669,,666,665,664,673,667,676,,,,,671',
',,676,,,,,,,,684,683,,,,677,671,,,,,,,,671,681,680,684,683,,,,677,681',
'680,684,683,,,,677' ]
        racc_action_table = arr = ::Array.new(24863, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'420,226,338,414,618,558,558,420,420,420,359,695,349,420,420,632,420',
'58,19,861,1016,383,888,632,365,420,384,698,647,647,224,365,330,337,337',
'330,420,420,995,420,420,420,420,420,339,996,750,368,638,637,414,997',
'1019,367,368,538,226,58,414,19,367,820,788,697,686,686,420,420,420,420',
'420,420,420,420,420,420,420,420,420,420,1,546,420,420,420,224,420,383',
'345,346,420,618,384,420,893,821,893,539,420,558,420,750,420,420,558',
'420,420,420,420,420,419,420,420,420,638,637,359,419,419,419,338,349',
'647,419,419,338,419,420,997,695,420,420,695,420,695,420,698,861,1016',
'359,888,420,861,1016,359,888,419,419,61,419,419,419,419,419,638,637',
'995,638,637,538,699,995,339,996,538,638,637,339,996,997,820,788,697',
'700,997,7,419,419,419,419,419,419,419,419,419,419,419,419,419,419,546',
'309,419,419,419,10,419,345,346,821,419,539,573,419,821,12,539,575,419',
'378,419,329,419,419,329,419,419,419,419,419,609,419,443,419,223,699',
'13,609,609,609,562,562,609,609,609,61,609,419,700,557,419,419,16,419',
'557,419,609,609,609,437,437,419,22,607,38,309,609,609,366,609,609,609',
'609,609,355,366,573,573,355,699,379,575,575,378,378,378,573,443,309',
'223,619,575,700,606,314,314,609,609,609,609,609,609,609,609,609,609',
'609,609,609,609,26,38,609,609,609,37,609,609,607,38,609,41,41,609,609',
'619,609,40,609,380,609,45,609,609,562,609,609,609,609,609,381,609,100',
'609,379,379,379,111,606,100,100,100,481,437,100,100,100,609,100,342',
'609,609,609,609,342,609,100,609,100,100,100,609,314,314,26,354,413,653',
'100,100,653,100,100,100,100,100,805,481,805,805,805,917,805,380,380',
'380,369,26,917,41,41,206,353,369,381,381,381,917,100,100,100,100,100',
'100,100,100,100,100,100,100,100,100,473,413,100,100,100,354,100,100',
'482,413,100,318,354,100,100,225,100,354,100,776,100,354,100,100,227',
'100,100,100,100,100,374,100,353,100,364,473,228,374,382,353,354,364',
'232,482,353,385,805,100,353,640,100,100,100,100,3,100,608,100,318,3',
'39,100,264,608,608,608,318,353,608,608,608,776,608,944,278,944,944,944',
'776,944,125,608,608,608,608,125,125,776,913,702,15,913,608,608,279,608',
'608,608,608,608,282,640,382,382,382,549,776,39,640,385,385,385,549,640',
'293,39,294,640,296,589,297,549,608,608,608,608,608,608,608,608,608,608',
'608,608,608,608,640,15,608,608,608,702,608,608,24,15,608,298,702,608',
'608,24,608,702,608,944,608,702,608,608,79,608,608,608,608,608,589,608',
'608,608,372,371,79,370,589,304,702,372,371,829,370,307,79,608,829,824',
'608,608,608,608,824,608,97,608,240,240,240,608,240,97,97,97,240,240',
'97,97,97,240,97,240,240,240,240,240,240,240,97,308,97,97,97,240,240',
'240,240,240,240,240,97,97,240,97,97,97,97,97,333,240,313,333,240,240',
'240,240,240,240,240,240,315,240,240,240,319,240,240,240,240,240,97,97',
'97,97,97,97,97,97,97,97,97,97,97,97,522,522,97,97,97,240,97,97,240,322',
'97,240,240,97,97,240,97,327,97,289,97,240,97,97,289,97,97,97,97,97,240',
'97,331,97,332,240,240,240,240,334,240,240,240,240,985,985,343,97,240',
'240,97,97,97,97,344,97,240,97,240,240,240,97,497,497,497,497,497,497',
'17,17,46,497,497,793,793,348,497,46,497,497,497,497,497,497,497,350',
'46,394,400,403,497,497,497,497,497,497,497,566,566,497,405,566,566,566',
'432,497,497,497,497,497,497,497,497,497,497,497,497,409,497,497,497',
'411,497,497,497,497,497,432,432,432,432,432,432,432,432,432,432,432',
'347,432,432,974,412,432,432,347,497,421,974,497,429,439,497,497,347',
'451,497,974,497,432,452,432,497,432,432,790,432,432,432,432,432,497',
'432,453,454,790,497,497,497,497,357,497,497,497,497,479,483,357,498',
'497,497,499,432,502,432,504,357,497,509,497,497,497,922,922,922,922',
'922,922,790,790,927,922,922,790,512,520,922,927,922,922,922,922,922',
'922,922,521,927,523,535,540,922,922,922,922,922,922,922,541,560,922',
'570,578,580,586,408,922,922,922,922,922,922,922,922,922,922,922,922',
'590,922,922,922,595,922,922,922,922,922,408,408,408,408,408,408,408',
'408,408,408,408,925,408,408,924,600,408,408,925,922,610,924,922,838',
'612,922,922,925,617,922,924,922,408,838,408,922,408,408,624,408,408',
'408,408,408,922,408,626,631,634,922,922,922,922,222,922,922,922,922',
'636,639,222,642,922,922,643,408,838,838,646,222,922,838,922,922,922',
'711,711,711,711,711,711,648,651,923,711,711,657,658,660,711,923,711',
'711,711,711,711,711,711,661,923,662,670,678,711,711,711,711,711,711',
'711,682,685,711,688,693,696,705,611,711,711,711,711,711,711,711,711',
'711,711,711,711,710,711,711,711,729,711,711,711,711,711,611,611,611',
'611,611,611,611,611,611,611,611,998,611,611,508,734,611,611,998,711',
'752,508,711,998,753,711,711,998,755,711,508,711,611,756,611,711,611',
'611,757,611,611,611,611,611,711,611,759,760,761,711,711,711,711,320',
'711,711,711,711,762,766,320,770,711,711,771,611,775,779,782,320,711',
'783,711,711,711,706,706,706,706,706,706,786,789,305,706,706,804,806',
'811,706,305,706,706,706,706,706,706,706,814,305,823,827,828,706,706',
'706,706,706,706,706,831,849,706,849,849,849,832,849,706,706,706,706',
'706,706,706,706,706,706,706,706,848,706,706,706,852,706,706,706,706',
'706,645,645,645,645,645,645,645,645,645,645,645,703,645,645,303,854',
'645,645,703,706,868,303,706,703,869,706,706,703,873,706,303,706,645',
'874,645,706,645,645,876,645,645,645,645,645,706,645,877,879,882,706',
'706,706,706,302,706,706,706,706,884,890,302,891,706,706,897,645,901',
'903,906,302,706,907,706,706,706,769,769,769,769,769,769,908,909,301',
'769,769,911,926,946,769,301,769,769,769,769,769,769,769,968,301,969',
'970,975,769,769,769,769,769,769,769,976,967,769,967,967,967,977,967',
'769,769,769,769,769,769,769,769,769,769,769,769,978,769,769,769,979',
'769,769,769,769,769,834,834,834,834,834,834,834,834,834,834,834,851',
'834,834,14,980,834,834,851,769,981,14,769,983,986,769,769,851,987,769',
'14,769,834,988,834,769,834,834,989,834,834,834,834,834,769,834,990,991',
'994,769,769,769,769,1007,769,769,769,769,1017,1018,,,769,769,,834,,',
',,769,,769,769,769,123,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,496,496,496,496,496,123,123,123,123,123,123,123',
',,123,6,6,6,6,6,123,123,123,123,123,123,123,123,123,123,123,123,,123',
'123,123,,123,123,123,123,123,427,427,427,427,427,427,427,427,427,427',
'427,641,427,427,,,427,427,641,123,,,123,641,,123,123,641,,123,,123,427',
',427,123,427,427,,427,427,427,427,427,123,427,,,,123,123,123,123,,123',
'123,123,123,,,,,123,123,,427,,,,,123,,123,123,123,0,0,0,0,0,0,,,,0,0',
',,,0,,0,0,0,0,0,0,0,292,292,292,292,292,0,0,0,0,0,0,0,,,0,,,,,,0,0,0',
'0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,731,731,731,731,731,731,731,731',
'731,731,731,,731,731,,,731,731,,0,,,0,,,0,0,,,0,,0,731,,731,0,731,731',
',731,731,731,731,731,0,731,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,731,,,,,0,,0',
'0,0,721,721,721,721,721,721,,,,721,721,,,,721,,721,721,721,721,721,721',
'721,,,,,,721,721,721,721,721,721,721,,,721,,,,,,721,721,721,721,721',
'721,721,721,721,721,721,721,,721,721,721,,721,721,721,721,721,736,736',
'736,736,736,736,736,736,736,736,736,,736,736,,,736,736,,721,,,721,,',
'721,721,,,721,,721,736,,736,721,736,736,,736,736,736,736,736,721,736',
',,,721,721,721,721,,721,721,721,721,,,,,721,721,,736,,,,,721,,721,721',
'721,955,955,955,955,955,955,,,,955,955,,,,955,,955,955,955,955,955,955',
'955,,,,,,955,955,955,955,955,955,955,,,955,,,,,,955,955,955,955,955',
'955,955,955,955,955,955,955,,955,955,955,,955,955,955,955,955,738,738',
'738,738,738,738,738,738,738,738,738,,738,738,,,738,738,,955,,,955,,',
'955,955,,,955,,955,738,,738,955,738,738,,738,738,738,738,738,955,738',
',,,955,955,955,955,,955,955,955,955,,,,,955,955,,738,,,,,955,,955,955',
'955,534,534,534,534,534,534,,,,534,534,,,,534,,534,534,534,534,534,534',
'534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,534,534,534,534,534',
'534,534,534,534,534,534,534,,534,534,534,,534,534,534,534,534,741,741',
'741,741,741,741,741,741,741,741,741,,741,741,,,741,741,,534,,,534,,',
'534,534,,,534,,534,741,,741,534,741,741,,741,741,741,741,741,534,741',
',,,534,534,534,534,,534,534,534,534,,,,,534,534,,741,,,,,534,,534,534',
'534,300,300,300,300,300,300,,,,300,300,,,,300,,300,300,300,300,300,300',
'300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,300,300,300,300,300',
'300,300,300,300,300,300,300,,300,300,300,,300,300,300,300,300,743,743',
'743,743,743,743,743,743,743,743,743,,743,743,,,743,743,,300,,,300,,',
'300,300,,,300,,300,743,,743,300,743,743,,743,743,743,743,743,300,743',
',,,300,300,300,300,,300,300,300,300,,,,,300,300,,743,,,,,300,,300,300',
'300,325,325,325,325,325,325,,,,325,325,,,,325,,325,325,325,325,325,325',
'325,,,,,,325,325,325,325,325,325,325,,,325,,,,,,325,325,325,325,325',
'325,325,325,325,325,325,325,,325,325,325,,325,325,325,325,325,745,745',
'745,745,745,745,745,745,745,745,745,,745,745,,,745,745,,325,,,325,,',
'325,325,,,325,,325,745,,745,325,745,745,,745,745,745,745,745,325,745',
',,,325,325,325,325,,325,325,325,325,,,,,325,325,,745,,,,,325,,325,325',
'325,858,858,858,858,858,858,,,,858,858,,,,858,,858,858,858,858,858,858',
'858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,858,858,858,858,858',
'858,858,858,858,858,858,858,,858,858,858,,858,858,858,858,858,472,472',
'472,472,472,472,472,472,472,472,472,,472,472,,,472,472,,858,,,858,,',
'858,858,,,858,,858,472,,472,858,472,472,,472,472,472,472,472,858,472',
',,,858,858,858,858,,858,858,858,858,,,,,858,858,472,472,,,,,858,,858',
'858,858,616,616,616,616,616,616,,,,616,616,,,,616,,616,616,616,616,616',
'616,616,,,,,,616,616,616,616,616,616,616,,,616,,,,,,616,616,616,616',
'616,616,616,616,616,616,616,616,,616,616,616,,616,616,616,616,616,518',
'518,518,518,518,518,518,518,518,518,518,,518,518,,,518,518,,616,,,616',
',,616,616,,,616,,616,518,,518,616,518,518,,518,518,518,518,518,616,518',
',,,616,616,616,616,,616,616,616,616,,,,,616,616,,518,,,,,616,,616,616',
'616,208,208,208,208,208,208,,,,208,208,,,,208,,208,208,208,208,208,208',
'208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,208,208,208,208,208',
'208,208,208,208,208,208,208,,208,208,208,,208,208,208,208,208,21,21',
'21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,208,,,208,,,208,208,,,208',
',208,21,,21,208,21,21,,21,21,21,21,21,208,21,,,,208,208,208,208,,208',
'208,208,208,,,,,208,208,,21,,,,,208,,208,208,208,231,231,231,231,231',
'231,,,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231',
'231,231,231,231,,,231,,,,,,231,231,231,231,231,231,231,231,231,231,231',
'231,,231,231,231,,231,231,231,231,231,276,276,276,276,276,276,276,276',
'276,276,276,,276,276,,,276,276,,231,,,231,,,231,231,,,231,,231,276,',
'276,231,276,276,,276,276,276,276,276,231,276,,,,231,231,231,231,,231',
'231,231,231,,,,,231,231,,276,,,,,231,,231,231,231,781,781,781,781,781',
'781,,,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781,781',
'781,781,781,781,,,781,,,,,,781,781,781,781,781,781,781,781,781,781,781',
'781,,781,781,781,,781,781,781,781,781,837,837,837,837,837,837,837,837',
'837,837,837,,837,837,,,837,837,,781,,,781,,,781,781,,,781,,781,837,',
'837,781,837,837,,837,837,837,837,837,781,837,,,,781,781,781,781,,781',
'781,781,781,,,,,781,781,,837,,,,,781,,781,781,781,33,33,33,33,33,33',
',,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,802',
'33,802,802,802,,802,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,,33',
'33,33,33,33,883,,883,883,883,,883,,802,,,449,,,,,,802,,33,,,33,,,33',
'33,,,33,,33,,,,33,,883,,,,,,449,33,,883,449,449,33,33,33,33,,33,33,33',
'33,,,,,33,33,,671,,671,671,671,33,671,33,33,33,953,953,953,953,953,953',
',,,953,953,,,,953,,953,953,953,953,953,953,953,,,,,671,953,953,953,953',
'953,953,953,468,671,953,,,,450,,953,953,953,953,953,953,953,953,953',
'953,953,953,,953,953,953,,953,953,953,953,953,462,,468,,,,468,468,450',
'468,468,,450,450,,,462,462,,953,,,953,,,953,953,,469,953,,953,462,,462',
'953,462,462,,462,462,,,462,953,462,,,,953,953,953,953,,953,953,953,953',
',,469,,953,953,469,469,,469,469,,953,,953,953,953,815,815,815,815,815',
'815,,,,815,815,,,,815,,815,815,815,815,815,815,815,,,,,,815,815,815',
'815,815,815,815,,984,815,984,984,984,,984,815,815,815,815,815,815,815',
'815,815,815,815,815,,815,815,815,,815,815,815,815,815,461,982,,982,982',
'982,,982,984,1006,,1006,1006,1006,,1006,461,461,,815,,,815,,,815,815',
',,815,,815,461,,461,815,461,461,982,461,461,,,461,815,461,1006,,,815',
'815,815,815,,815,815,815,815,,,,,815,815,,885,,885,885,885,815,885,815',
'815,815,816,816,816,816,816,816,,,,816,816,,,,816,,816,816,816,816,816',
'816,816,,,,,885,816,816,816,816,816,816,816,,945,816,945,945,945,,945',
'816,816,816,816,816,816,816,816,816,816,816,816,,816,816,816,,816,816',
'816,816,816,470,470,470,470,470,470,470,,945,470,470,,,,,,470,470,,816',
',,816,,,816,816,,,816,,816,470,,470,816,470,470,,470,470,470,470,470',
'816,470,,,,816,816,816,816,,816,816,816,816,,,,,816,816,,,,,,,816,,816',
'816,816,621,621,621,621,621,621,,,,621,621,,,,621,,621,621,621,621,621',
'621,621,,,,,,621,621,621,621,621,621,621,,,621,,,,,,621,621,621,621',
'621,621,621,621,621,621,621,621,,621,621,621,,621,621,621,621,621,471',
'471,471,471,471,471,471,471,,471,471,,,,,,471,471,,621,,,621,,,621,621',
',,621,,621,471,,471,621,471,471,,471,471,471,471,471,621,471,,,,621',
'621,621,621,,621,621,621,621,,,,,621,621,,,,,,,621,,621,621,621,537',
'537,537,537,537,537,,,,537,537,,,,537,,537,537,537,537,537,537,537,',
',,,,537,537,537,537,537,537,537,,,537,,,,,,537,537,537,537,537,537,537',
'537,537,537,537,537,,537,537,537,,537,537,537,537,537,467,467,467,467',
'467,467,467,,,467,467,,,,,,467,467,,537,,,537,,,537,537,,,537,,537,467',
',467,537,467,467,,467,467,467,467,467,537,467,,,,537,537,537,537,,537',
'537,537,537,,,,,537,537,,,,,,,537,,537,537,537,819,819,819,819,819,819',
',,,819,819,,,,819,,819,819,819,819,819,819,819,,,,,,819,819,819,819',
'819,819,819,,,819,,,,,,819,819,819,819,819,819,819,819,819,819,819,819',
',819,819,819,,819,819,819,819,819,448,448,448,448,448,448,448,448,448',
'448,448,,448,448,,,448,448,,819,,,819,,,819,819,,,819,,819,448,,448',
'819,448,448,,448,448,448,448,448,819,448,,,,819,819,819,819,,819,819',
'819,819,,,,,819,819,,,,,,,819,,819,819,819,947,947,947,947,947,947,',
',,947,947,,,,947,,947,947,947,947,947,947,947,,,,,,947,947,947,947,947',
'947,947,,,947,,,,,,947,947,947,947,947,947,947,947,947,947,947,947,',
'947,947,947,,947,947,947,947,947,447,447,447,447,447,447,447,447,447',
'447,447,,447,447,,,447,447,,947,,,947,,,947,947,,,947,,947,447,,447',
'947,447,447,,447,447,447,447,447,947,447,,,,947,947,947,947,,947,947',
'947,947,,,,,947,947,,,,,,,947,,947,947,947,622,622,622,622,622,622,',
',,622,622,,,,622,,622,622,622,622,622,622,622,,,,,,622,622,622,622,622',
'622,622,,,622,,,,,,622,622,622,622,622,622,622,622,622,622,622,622,',
'622,622,622,,622,622,622,622,622,458,458,458,458,458,458,458,,,458,458',
',,,,,458,458,,622,,,622,,,622,622,,,622,,622,458,,458,622,458,458,,458',
'458,458,458,458,622,458,,,,622,622,622,622,,622,622,622,622,,,,,622',
'622,,,,,,,622,,622,622,622,930,930,930,930,930,930,,,,930,930,,,,930',
',930,930,930,930,930,930,930,,,,,,930,930,930,930,930,930,930,,,930',
',,,,,930,930,930,930,930,930,930,930,930,930,930,930,,930,930,930,,930',
'930,930,930,930,466,466,466,466,466,466,466,,,466,466,,,,,,466,466,',
'930,,,930,,,930,930,,,930,,930,466,,466,930,466,466,,466,466,466,466',
'466,930,466,,,,930,930,930,930,,930,930,930,930,,,,,930,930,,,,,,,930',
',930,930,930,929,929,929,929,929,929,,,,929,929,,,,929,,929,929,929',
'929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,929,929',
'929,929,929,929,929,929,929,929,929,929,,929,929,929,,929,929,929,929',
'929,459,,,,,,,,,,,,,,,,459,459,,929,,,929,,,929,929,,,929,,929,459,',
'459,929,459,459,,459,459,,,459,929,459,,,,929,929,929,929,,929,929,929',
'929,,,,,929,929,,,,,,,929,,929,929,929,825,825,825,825,825,825,,,,825',
'825,,,,825,,825,825,825,825,825,825,825,,,,,,825,825,825,825,825,825',
'825,,,825,,,,,,825,825,825,825,825,825,825,825,825,825,825,825,,825',
'825,825,,825,825,825,825,825,460,,,,,,,,,,,,,,,,460,460,,825,,,825,',
',825,825,,,825,,825,460,,460,825,460,460,,460,460,,,460,825,460,,,,825',
'825,825,825,,825,825,825,825,,,,,825,825,,,,,,,825,,825,825,825,295',
'295,295,295,295,295,,,,295,295,,,,295,,295,295,295,295,295,295,295,',
',,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,295,295,295,295,295',
'295,295,295,295,295,,295,295,295,,295,295,295,295,295,465,465,465,465',
'465,465,465,,,465,465,,,,,,465,465,,295,,,295,,,295,295,,,295,,295,465',
',465,295,465,465,,465,465,465,465,465,295,465,,,,295,295,295,295,,295',
'295,295,295,,,,,295,295,,,,,,,295,,295,295,295,559,559,559,559,559,559',
',,,559,559,,,,559,,559,559,559,559,559,559,559,,,,,,559,559,559,559',
'559,559,559,,,559,,,,,,559,559,559,559,559,559,559,559,559,559,559,559',
',559,559,559,,559,559,559,559,559,464,464,464,464,464,464,464,,,464',
'464,,,,,,464,464,,559,,,559,,,559,559,,,559,,559,464,,464,559,464,464',
',464,464,464,464,464,559,464,,,,559,559,559,559,,559,559,559,559,,,',
',559,559,,,,800,800,800,559,800,559,559,559,800,800,,,,800,,800,800',
'800,800,800,800,800,,,,,,800,800,800,800,800,800,800,,,800,,,,,,,800',
',,800,800,800,800,800,800,800,800,,800,800,800,,800,800,800,800,800',
'463,463,463,463,463,463,463,,,463,463,,,,,,463,463,,800,,,800,,,800',
'800,,,800,,,463,,463,800,463,463,,463,463,463,463,463,800,463,,,,800',
'800,800,800,,800,800,800,800,,,,,800,800,,,,239,239,239,800,239,800',
'800,800,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239',
'239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239',
'239,239,,239,239,239,239,239,455,,,,,,,,,,,,,,,,455,455,,239,,,239,',
',239,239,,,239,,,455,,455,239,455,455,,455,455,,,,239,,,,,239,239,239',
'239,,239,239,239,239,,,,,239,239,,,,238,238,238,239,238,239,239,239',
'238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238',
'238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238',
',238,238,238,238,238,456,,,,,,,,,,,,,,,,456,456,,238,,,238,,,238,238',
',,238,,,456,,456,238,456,456,,456,456,,,,238,,,,,238,238,238,238,,238',
'238,238,238,,,,,238,238,,,,,,,238,,238,238,238,291,291,291,291,291,',
',,291,291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291,291,291,291',
'291,291,,,291,,,,,,291,291,,291,291,291,291,291,291,291,291,291,,291',
'291,291,,291,291,291,291,291,457,,,,,,,,,,,,,,,,457,457,,291,,,291,',
',291,291,,,291,,291,457,,,291,457,457,,457,457,,,,291,,,,,291,291,291',
'291,,291,291,291,291,,,,,291,291,,,,237,237,237,291,237,291,291,291',
'237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237',
'237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237',
',237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',,,813,813,813,237,813,237,237,237,813,813,,,,813,,813,813,813,813,813',
'813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,,813,,,813,813,813',
'813,813,813,813,813,,813,813,813,,813,813,813,813,813,,,,,,,,,,,,,,',
',,,,,813,,,813,,,813,813,,,813,,,,,,813,,,,,,,,,813,,,,,813,813,813',
'813,,813,813,813,813,,,,,813,813,,,,818,818,818,813,818,813,813,813',
'818,818,,,,818,,818,818,818,818,818,818,818,,,,,,818,818,818,818,818',
'818,818,,,818,,,,,,,818,,,818,818,818,818,818,818,818,818,,818,818,818',
',818,818,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,818,,,818,,818',
',,,818,,,,,,,,,818,,,,,818,818,818,818,,818,818,818,818,,,,,818,818',
',,,649,649,649,818,649,818,818,818,649,649,,,,649,,649,649,649,649,649',
'649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649',
'649,649,649,649,649,,649,649,649,,649,649,649,649,649,,,,,,,,,,,,,,',
',,,,,649,,,649,,,649,649,,,649,,649,,,,649,,,,,,,,,649,,,,,649,649,649',
'649,,649,649,649,649,,,,,649,649,,,,29,29,29,649,29,649,649,649,29,29',
',,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29',
',,29,29,29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,',
',,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,',
'29,29,29,29,,,,,29,29,,,,236,236,236,29,236,29,29,29,236,236,,,,236',
',236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236',
',,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236',
'236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,',
',,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236,,,,30,30,30,236',
'30,236,236,236,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30',
'30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30',
'30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,',
'30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30,30',
'31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,',
',,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,',
',,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31',
'31,,31,31,31,31,,,,,31,31,,,,835,835,835,31,835,31,31,31,835,835,,,',
'835,,835,835,835,835,835,835,835,,,,,,835,835,835,835,835,835,835,,',
'835,,,,,,,835,,,835,835,835,835,835,835,835,835,835,835,835,835,,835',
'835,835,835,835,,,,,,,,,,,,,,,,,,,,835,,,835,,,835,835,,,835,,,,835',
',835,,,835,,,,,,835,,,,,835,835,835,835,,835,835,835,835,,,,,835,835',
',,,836,836,836,835,836,835,835,835,836,836,,,,836,,836,836,836,836,836',
'836,836,,,,,,836,836,836,836,836,836,836,,,836,,,,,,,836,,,836,836,836',
'836,836,836,836,836,,836,836,836,,836,836,836,836,836,,,,,,,,,,,,,,',
',,,,,836,,,836,,,836,836,,,836,,,,,,836,,,,,,,,,836,,,,,836,836,836',
'836,,836,836,836,836,,,,,836,836,,,,235,235,235,836,235,836,836,836',
'235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235',
',235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235',
',,,644,644,644,235,644,235,235,235,644,644,,,,644,,644,644,644,644,644',
'644,644,,,,,,644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644',
'644,644,644,644,644,,644,644,644,,644,644,,,644,,,,,,,,,,,,,,,,,,,,644',
',,644,,,644,644,,,644,,,,,,,,,,,,,,,,,,,,644,644,644,644,,644,644,644',
'644,,,,,644,644,,,,234,234,234,644,234,644,644,644,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,',
',234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,234,234',
'234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234',
',,,,234,234,234,234,,234,234,234,234,,,,,234,234,,,,233,233,233,234',
'233,234,234,234,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233',
'233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233',
'233,,233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,',
',233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233',
'233,,,,,233,233,,,,299,299,299,233,299,233,233,233,299,299,,,,299,,299',
'299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,',
',299,,,299,299,299,299,299,299,299,299,,299,299,299,,299,299,,,299,',
',,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,845,,845,845,845,845,845',
',,,,,,,,845,,299,299,299,299,,299,299,299,299,,,,,299,299,,,,299,,845',
'299,,299,299,299,20,20,20,,20,845,845,,20,20,845,,,20,,20,20,20,20,20',
'20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20',
'20,,20,20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20',
',,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,850,850',
'850,20,850,20,20,20,850,850,,,,850,,850,850,850,850,850,850,850,,,,',
',850,850,850,850,850,850,850,,,850,,,,,,,850,,,850,850,850,850,850,850',
'850,850,,850,850,850,,850,850,,,850,,,,,,,,,,,,,,,,,,,,850,,,850,,,850',
'850,,,850,,,,,,,,,,,,,,,,,,,,850,850,850,850,,850,850,850,850,,,,,850',
'850,,,,862,862,862,850,862,850,850,850,862,862,,,,862,,862,862,862,862',
'862,862,862,,,,,,862,862,862,862,862,862,862,,,862,,,,,,,862,,,862,862',
'862,862,862,862,862,862,,862,862,862,,862,862,,,862,,,,,,,,,,,,,,,,',
',,,862,,,862,,,862,862,,,862,,,,,,,,,,,,,,,,,,,,862,862,862,862,,862',
'862,862,862,,,,,862,862,,,,230,230,230,862,230,862,862,862,230,230,',
',,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230',
',,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230,230,230,,230',
'230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230',
',,,,,,,,230,,,,,230,230,230,230,,230,230,230,230,,,,,230,230,,,,633',
'633,633,230,633,230,230,230,633,633,,,,633,,633,633,633,633,633,633',
'633,,,,,,633,633,633,633,633,633,633,,,633,,,,,,,633,,,633,633,633,633',
'633,633,633,633,,633,633,633,,633,633,,,633,,,,,,,,,,,,,,,,,,,,633,',
',633,,,633,633,,,633,,,,,,,,,,,,,,,,,,,,633,633,633,633,,633,633,633',
'633,,,,,633,633,,,,34,34,34,633,34,633,633,633,34,34,,,,34,,34,34,34',
'34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34',
'34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,',
'34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,35,35',
'35,34,35,34,34,34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35',
'35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,',
'35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,959,,959,959,959,959,959',
',,,,,,,,959,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,959,35,,35,35',
'35,5,5,5,5,5,959,959,,5,5,959,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5',
',,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,',
',,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,',
'627,627,627,5,627,5,5,5,627,627,,,,627,,627,627,627,627,627,627,627',
',,,,,627,627,627,627,627,627,627,,,627,,,,,,,627,,,627,627,627,627,627',
'627,627,627,,627,627,627,,627,627,627,627,627,,,,,,,,,,,,,,,,,,,,627',
',,627,,,627,627,,,627,,,,,,627,,,,,,,,,627,,,,,627,627,627,627,,627',
'627,627,627,,,,,627,627,,,,442,442,442,627,442,627,627,627,442,442,',
',,442,,442,442,442,442,442,442,442,,,,,,442,442,442,442,442,442,442',
',,442,,,,,,,442,,,442,442,442,442,442,442,442,442,442,442,442,442,,442',
'442,442,442,442,,,,,,,,,,,,,,,,,,,,442,,,442,,,442,442,,,442,,442,,442',
',442,,,442,,,,,,442,,,,,442,442,442,442,,442,442,442,442,,,,,442,442',
',,,444,444,444,442,444,442,442,442,444,444,,,,444,,444,444,444,444,444',
'444,444,,,,,,444,444,444,444,444,444,444,,,444,,,,,,,444,,,444,444,444',
'444,444,444,444,444,,444,444,444,,444,444,444,444,444,,,,,,,,,,,,,,',
',,,,,444,,,444,,,444,444,,,444,,,,,,444,,,,,,,,,444,,,,,444,444,444',
'444,,444,444,444,444,,,,,444,444,,,,445,445,445,444,445,444,444,444',
'445,445,,,,445,,445,445,445,445,445,445,445,,,,,,445,445,445,445,445',
'445,445,,,445,,,,,,,445,,,445,445,445,445,445,445,445,445,,445,445,445',
',445,445,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445,,',
',,,445,,,,,,,,,445,,,,,445,445,445,445,,445,445,445,445,,,,,445,445',
',,,446,446,446,445,446,445,445,445,446,446,,,,446,,446,446,446,446,446',
'446,446,,,,,,446,446,446,446,446,446,446,,,446,,,,,,,446,,,446,446,446',
'446,446,446,446,446,,446,446,446,,446,446,446,446,446,,,,,,,,,,,,,,',
',,,,,446,,,446,,,446,446,,,446,,,,,,446,,,,,,,,,446,,,,,446,446,446',
'446,,446,446,446,446,,,,,446,446,,,,,,,446,,446,446,446,113,113,113',
'113,113,,,,113,113,,,,113,,113,113,113,113,113,113,113,,,,,,113,113',
'113,113,113,113,113,,,113,,,,,,113,113,113,113,113,113,113,113,113,113',
'113,113,,113,113,113,,113,113,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113',
',,113,113,,,113,,113,,,,113,,,,,,,,,113,,,,,113,113,113,113,,113,113',
'113,113,,,,,113,113,,,,,,113,113,,113,113,113,252,252,252,,252,,,,252',
'252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252',
'252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,',
'252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,',
',,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252,',
',,730,730,730,252,730,252,252,252,730,730,,,,730,,730,730,730,730,730',
'730,730,,,,,,730,730,730,730,730,730,730,,,730,,,,,,,730,,,730,730,730',
'730,730,730,730,730,,730,730,730,,730,730,730,730,730,,,,,,,,,,,,,,',
',,,,,730,,,730,,,730,730,,,730,,,,,,730,,,,,,,,,730,,,,,730,730,730',
'730,,730,730,730,730,,,,,730,730,,,,732,732,732,730,732,730,730,730',
'732,732,,,,732,,732,732,732,732,732,732,732,,,,,,732,732,732,732,732',
'732,732,,,732,,,,,,,732,,,732,732,732,732,732,732,732,732,,732,732,732',
',732,732,732,732,732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732,732,,,732,,',
',,,732,,,,,,,,,732,,,,,732,732,732,732,,732,732,732,732,,,,,732,732',
',,,253,253,253,732,253,732,732,732,253,253,,,,253,,253,253,253,253,253',
'253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253',
'253,253,253,253,253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,',
',,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253',
'253,,253,253,253,253,,,,,253,253,,,,249,249,249,253,249,253,253,253',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,746,746,746,249,746,249,249,249,746,746,,,,746,,746,746,746,746,746',
'746,746,,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746,746',
'746,746,746,746,746,,746,746,746,,746,746,746,746,746,,,,,,,,,,,,,,',
',,,,,746,,,746,,,746,746,,,746,,,,,,746,,,,,,,,,746,,,,,746,746,746',
'746,,746,746,746,746,,,,,746,746,,,,747,747,747,746,747,746,746,746',
'747,747,,,,747,,747,747,747,747,747,747,747,,,,,,747,747,747,747,747',
'747,747,,,747,,,,,,,747,,,747,747,747,747,747,747,747,747,,747,747,747',
',747,747,747,747,747,,,,,,,,,,,,,,,,,,,,747,,,747,,,747,747,,,747,,',
',,,747,,,,,,,,,747,,,,,747,747,747,747,,747,747,747,747,,,,,747,747',
',,,748,748,748,747,748,747,747,747,748,748,,,,748,,748,748,748,748,748',
'748,748,,,,,,748,748,748,748,748,748,748,,,748,,,,,,,748,,,748,748,748',
'748,748,748,748,748,,748,748,748,,748,748,748,748,748,,,,,,,,,,,,,,',
',,,,,748,,,748,,,748,748,,,748,,,,,,748,,,,,,,,,748,,,,,748,748,748',
'748,,748,748,748,748,,,,,748,748,,,,749,749,749,748,749,748,748,748',
'749,749,,,,749,,749,749,749,749,749,749,749,,,,,,749,749,749,749,749',
'749,749,,,749,,,,,,,749,,,749,749,749,749,749,749,749,749,,749,749,749',
',749,749,749,749,749,,,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,,749,,',
',,,749,,,,,,,,,749,,,,,749,749,749,749,,749,749,749,749,,,,,749,749',
',,,248,248,248,749,248,749,749,749,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,',
',,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,751,751,751,248,751,248,248,248',
'751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751',
'751,751,,,751,,,,,,,751,,,751,751,751,751,751,751,751,751,,751,751,751',
',751,751,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,,,751,751,,,751,,',
',,,751,,,,,,,,,751,,,,,751,751,751,751,,751,751,751,751,,,,,751,751',
',,,254,254,254,751,254,751,751,751,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,257,257,257,256,257,256,256,256',
'257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,258,258,258,257,258,257,257,257,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,',
',,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258',
'258,,258,258,258,258,,,,,258,258,,,,247,247,247,258,247,258,258,258',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,246,246,246,247,246,247,247,247,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,265,265,265,246,265,246,246,246',
'265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265',
'265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,265,265,265',
'265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265',
',265,,265,,265,,,265,,,,,,265,,,,,265,265,265,265,,265,265,265,265,',
',,,265,265,,,,266,266,266,265,266,265,265,265,266,266,,,,266,,266,266',
'266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266',
',,266,266,266,266,266,266,266,266,266,266,266,266,,266,266,266,266,266',
',,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266,,266,,,266,,',
',,,266,,,,,266,266,266,266,,266,266,266,266,,,,,266,266,,,,763,763,763',
'266,763,266,266,266,763,763,,,,763,,763,763,763,763,763,763,763,,,,',
',763,763,763,763,763,763,763,,,763,,,,,,,763,,,763,763,763,763,763,763',
'763,763,,763,763,763,,763,763,,,763,,,,,,,,,,,,,,,,,,,,763,,,763,,,763',
'763,,,763,,,,,,,,,,,,,,,,,,,,763,763,763,763,,763,763,763,763,,,,,763',
'763,,,,274,274,274,763,274,763,763,763,274,274,,,,274,,274,274,274,274',
'274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274',
'274,274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,,,,,',
',,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,,274',
',,,,274,274,274,274,,274,274,274,274,,,,,274,274,274,,,245,245,245,274',
'245,274,274,274,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245',
'245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245',
'245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,',
',245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245',
'245,,,,,245,245,,,,244,244,244,245,244,245,245,245,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244',
',,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,281,281,281,244',
'281,244,244,244,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281',
'281,281,281,281,281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281',
'281,,281,281,281,,281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,',
',281,281,,,281,,,,,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281',
'281,,,,,281,281,,,,283,283,283,281,283,281,281,281,283,283,,,,283,,283',
'283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,',
',283,,,283,283,283,283,283,283,283,283,,283,283,283,,283,283,283,283',
'283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283',
',,,,283,283,283,283,,283,283,283,283,,,,,283,283,,,,285,285,285,283',
'285,283,283,283,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285',
'285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285',
'285,,285,285,285,,285,285,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,',
',285,285,,,285,,,,,,285,,,,,,,,,285,,,,,285,285,285,285,,285,285,285',
'285,,,,,285,285,,,,286,286,286,285,286,285,285,285,286,286,,,,286,,286',
'286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,',
',286,,,286,286,286,286,286,286,286,286,,286,286,286,,286,286,286,286',
'286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,,,,286',
',,,,286,286,286,286,,286,286,286,286,,,,,286,286,,,,674,674,674,286',
'674,286,286,286,674,674,,,,674,,674,674,674,674,674,674,674,,,,,,674',
'674,674,674,674,674,674,,,674,,,,,,,674,,,674,674,674,674,674,674,674',
'674,,674,674,674,,674,674,674,674,674,,,,,,,,,,,,,,,,,,,,674,,,674,',
',674,674,,,674,,,,,,674,,,,,,,,,674,,,,,674,674,674,674,,674,674,674',
'674,,,,,674,674,,,,243,243,243,674,243,674,674,674,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243',
',,,,243,243,243,243,,243,243,243,243,,,,,243,243,,,,242,242,242,243',
'242,243,243,243,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242',
'242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242',
'242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,',
',242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242,242,,242,242,242',
'242,,,,,242,242,,,,241,241,241,242,241,242,242,242,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241',
',,,,241,241,241,241,,241,241,241,241,,,,,241,241,,,,326,326,326,241',
'326,241,241,241,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326',
'326,326,326,326,326,326,,,326,,,,,,,326,,,326,326,326,326,326,326,326',
'326,,326,326,326,,326,326,326,326,326,,,,,,,,,,,,,,,,,,,,326,,,326,',
',326,326,,,326,,,,,,326,,,,,,,,,326,,,,,326,326,326,326,,326,326,326',
'326,,,,,326,326,,,,603,603,603,326,603,326,326,326,603,603,,,,603,,603',
'603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603,,,603,,,,,',
',603,,,603,603,603,603,603,603,603,603,,603,603,603,,603,603,603,603',
'603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603,,,,,,603,,,,,,,,,603',
',,,,603,603,603,603,,603,603,603,603,,,,,603,603,,,,602,602,602,603',
'602,603,603,603,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602',
'602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602,602,602,602,602',
'602,,602,602,602,,602,602,602,602,602,,,,,,,,,,,,,,,,,,,,602,,,602,',
',602,602,,,602,,,,,,602,,,,,,,,,602,,,,,602,602,602,602,,602,602,602',
'602,,,,,602,602,,,,599,599,599,602,599,602,602,602,599,599,,,,599,,599',
'599,599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599,,,,,',
',599,,,599,599,599,599,599,599,599,599,,599,599,599,,599,599,599,599',
'599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599,,,599,,,,,,599,,,,,,,,,599',
',,,,599,599,599,599,,599,599,599,599,,,,,599,599,,,,598,598,598,599',
'598,599,599,599,598,598,,,,598,,598,598,598,598,598,598,598,,,,,,598',
'598,598,598,598,598,598,,,598,,,,,,,598,,,598,598,598,598,598,598,598',
'598,,598,598,598,,598,598,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,',
',598,598,,,598,,,,,,598,,,,,,,,,598,,,,,598,598,598,598,,598,598,598',
'598,,,,,598,598,,,,219,219,219,598,219,598,598,598,219,219,,,,219,,219',
'219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,',
',219,,,219,219,219,219,219,219,219,219,,219,219,219,,219,219,219,219',
'219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,,219',
',,,,219,219,219,219,,219,219,219,219,,,,,219,219,219,,,594,594,594,219',
'594,219,219,219,594,594,,,,594,,594,594,594,594,594,594,594,,,,,,594',
'594,594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594,594',
'594,,594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594,',
',594,594,,,594,,,,,,594,,,,,,,,,594,,,,,594,594,594,594,,594,594,594',
'594,,,,,594,594,,,,593,593,593,594,593,594,594,594,593,593,,,,593,,593',
'593,593,593,593,593,593,,,,,,593,593,593,593,593,593,593,,,593,,,,,',
',593,,,593,593,593,593,593,593,593,593,,593,593,593,,593,593,593,593',
'593,,,,,,,,,,,,,,,,,,,,593,,,593,,,593,593,,,593,,,,,,593,,,,,,,,,593',
',,,,593,593,593,593,,593,593,593,593,,,,,593,593,,,,592,592,592,593',
'592,593,593,593,592,592,,,,592,,592,592,592,592,592,592,592,,,,,,592',
'592,592,592,592,592,592,,,592,,,,,,,592,,,592,592,592,592,592,592,592',
'592,592,592,592,592,,592,592,592,592,592,,,,,,,,,,,,,,,,,,,,592,,,592',
',,592,592,,,592,,,,592,,592,,,592,,,,,,592,,,,,592,592,592,592,,592',
'592,592,592,,,,,592,592,,,,591,591,591,592,591,592,592,592,591,591,',
',,591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591',
',,591,,,,,,,591,,,591,591,591,591,591,591,591,591,591,591,591,591,,591',
'591,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,,591,,591,,591',
',591,,,591,,,,,,591,,,,,591,591,591,591,,591,591,591,591,,,,,591,591',
',,,218,218,218,591,218,591,591,591,218,218,,,,218,,218,218,218,218,218',
'218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218',
'218,218,218,218,218,,218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,',
',,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,,,,218,218,218',
'218,,218,218,218,218,,,,,218,218,,,,588,588,588,218,588,218,218,218',
'588,588,,,,588,,588,588,588,588,588,588,588,,,,,,588,588,588,588,588',
'588,588,,,588,,,,,,,588,,,588,588,588,588,588,588,588,588,,588,588,588',
',588,588,588,588,588,,,,,,,,,,,,,,,,,,,,588,,,588,,,588,588,,,588,,',
',,,588,,,,,,,,,588,,,,,588,588,588,588,,588,588,588,588,,,,,588,588',
',,,587,587,587,588,587,588,588,588,587,587,,,,587,,587,587,587,587,587',
'587,587,,,,,,587,587,587,587,587,587,587,,,587,,,,,,,587,,,587,587,587',
'587,587,587,587,587,,587,587,587,,587,587,587,587,587,,,,,,,,,,,,,,',
',,,,,587,,,587,,,587,587,,,587,,587,,,,587,,,,,,,,,587,,,,,587,587,587',
'587,,587,587,587,587,,,,,587,587,,,,217,217,217,587,217,587,587,587',
'217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217',
'217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217',
',217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,',
',,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217,,,,,217,217',
',,,216,216,216,217,216,217,217,217,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,',
',,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216,,,,,216,216,216',
'216,,216,216,216,216,,,,,216,216,,,,215,215,215,216,215,216,216,216',
'215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215,215,215,215',
'215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215',
',215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,215',
',,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215,215,,,,,215,215',
',,,42,42,42,215,42,215,215,215,42,42,,,,42,,42,42,42,42,42,42,42,,,',
',,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42',
'42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,',
',,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,43,43,43,42,43,42',
'42,42,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,',
'43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43,,,,',
',,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43',
'43,,43,43,43,43,,,,,43,43,,,,971,971,971,43,971,43,43,43,971,971,,,',
'971,,971,971,971,971,971,971,971,,,,,,971,971,971,971,971,971,971,,',
'971,,,,,,,971,,,971,971,971,971,971,971,971,971,971,971,971,971,,971',
'971,971,971,971,,,,,,,,,,,,,,,,,,,,971,,,971,,,971,971,,,971,,971,,971',
',971,,,971,,,,,,971,,,,,971,971,971,971,,971,971,971,971,,,,,971,971',
',,,214,214,214,971,214,971,971,971,214,214,,,,214,,214,214,214,214,214',
'214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214',
'214,214,214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,',
',,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214',
'214,,214,214,214,214,,,,,214,214,,,,44,44,44,214,44,214,214,214,44,44',
',,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44',
',,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,',
',,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44',
'44,,,,,44,44,,,,340,340,340,44,340,44,44,44,340,340,,,,340,,340,340',
'340,340,340,340,340,,,,,,340,340,340,340,340,340,340,,,340,,,,,,,340',
',,340,340,340,340,340,340,340,340,,340,340,340,,340,340,340,340,340',
',,,,,,,,,,,,,,,,,,,340,,,340,,,340,340,,,340,,,,,,340,,,,,,,,,340,,',
',,340,340,340,340,,340,340,340,340,,,,,340,340,,,,341,341,341,340,341',
'340,340,340,341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341,341',
'341,341,341,341,341,,,341,,,,,,,341,,,341,341,341,341,341,341,341,341',
',341,341,341,,341,341,341,341,341,,,,,,,,,,,,,,,,,,,,341,,,341,,,341',
'341,,,341,,,,,,341,,,,,,,,,341,,,,,341,341,341,341,,341,341,341,341',
',,,,341,341,,,,553,553,553,341,553,341,341,341,553,553,,,,553,,553,553',
'553,553,553,553,553,,,,,,553,553,553,553,553,553,553,,,553,,,,,,,553',
',,553,553,553,553,553,553,553,553,553,553,553,553,,553,553,553,553,553',
',,,,,,,,,,,,,,,,,,,553,,,553,,,553,553,,,553,,553,,553,,553,,,553,,',
',,,553,,,,,553,553,553,553,,553,553,553,553,,,,,553,553,,,,543,543,543',
'553,543,553,553,553,543,543,,,,543,,543,543,543,543,543,543,543,,,,',
',543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543,543,543',
'543,543,543,543,543,543,,543,543,543,543,543,,,,,,,,,,,,,,,,,,,,543',
',,543,,,543,543,,,543,,543,,543,,543,,,543,,,,,,543,,,,,543,543,543',
'543,,543,543,543,543,,,,,543,543,,,,542,542,542,543,542,543,543,543',
'542,542,,,,542,,542,542,542,542,542,542,542,,,,,,542,542,542,542,542',
'542,542,,,542,,,,,,,542,,,542,542,542,542,542,542,542,542,,542,542,542',
',542,542,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,,542',
',,,542,,,,,,,,,542,,,,,542,542,542,542,,542,542,542,542,,,,,542,542',
',,,211,211,211,542,211,542,542,542,211,211,,,,211,,211,211,211,211,211',
'211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211',
'211,211,211,211,211,211,211,211,211,,211,211,211,211,211,,,,,,,,,,,',
',,,,,,,,211,,,211,,,211,211,,,211,,211,,211,,211,,,211,,,,,,211,,,,',
'211,211,211,211,,211,211,211,211,,,,,211,211,,,,210,210,210,211,210',
'211,211,211,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210',
'210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210',
',210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210',
'210,,,210,,,,,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210,210,210',
',,,,210,210,,,,528,528,528,210,528,210,210,210,528,528,,,,528,,528,528',
'528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528',
',,528,528,528,528,528,528,528,528,528,528,528,528,,528,528,528,528,528',
',,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,528,,,528,,,,,,528',
',,,,528,528,528,528,,528,528,528,528,,,,,528,528,,,,525,525,525,528',
'525,528,528,528,525,525,,,,525,,525,525,525,525,525,525,525,,,,,,525',
'525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525,525,525,525,525',
'525,525,525,525,525,,525,525,525,525,525,,,,,,,,,,,,,,,,,,,,525,,,525',
',,525,525,,,525,,525,,,,525,,,525,,,,,,525,,,,,525,525,525,525,,525',
'525,525,525,,,,,525,525,,,,209,209,209,525,209,525,525,525,209,209,',
',,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209',
',,209,,,,,,,209,,,209,209,209,209,209,209,209,209,,209,209,209,,209',
'209,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,209,,',
',209,,,,,,,,,209,,,,,209,209,209,209,,209,209,209,209,,,,,209,209,,',
',360,360,360,209,360,209,209,209,360,360,,,,360,,360,360,360,360,360',
'360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,,,360,,,360,360,360',
'360,360,360,360,360,,360,360,360,,360,360,360,360,360,,,,,,,,,,,,,,',
',,,,,360,,,360,,,360,360,,,360,,,,,,360,,,,,,,,,360,,,,,360,360,360',
'360,,360,360,360,360,,,,,360,360,,,,519,519,519,360,519,360,360,360',
'519,519,,,,519,,519,519,519,519,519,519,519,,,,,,519,519,519,519,519',
'519,519,,,519,,,,,,,519,,,519,519,519,519,519,519,519,519,,519,519,519',
',519,519,519,519,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,',
',,,519,,,,,,,,,519,,,,,519,519,519,519,,519,519,519,519,,,,,519,519',
',,,515,515,515,519,515,519,519,519,515,515,,,,515,,515,515,515,515,515',
'515,515,,,,,,515,515,515,515,515,515,515,,,515,,,,,,,515,,,515,515,515',
'515,515,515,515,515,,515,515,515,,515,515,515,515,515,,,,,,,,,,,,,,',
',,,,,515,,,515,,,515,515,,,515,,,,,,515,,,,,,,,,515,,,,,515,515,515',
'515,,515,515,515,515,,,,,515,515,,,,514,514,514,515,514,515,515,515',
'514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514',
'514,514,,,514,,,,,,,514,,,514,514,514,514,514,514,514,514,,514,514,514',
',514,514,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,',
',,,514,,,,,,,,,514,,,,,514,514,514,514,,514,514,514,514,,,,,514,514',
',,,511,511,511,514,511,514,514,514,511,511,,,,511,,511,511,511,511,511',
'511,511,,,,,,511,511,511,511,511,511,511,,,511,,,,,,,511,,,511,511,511',
'511,511,511,511,511,,511,511,511,,511,511,,,511,,,,,,,,,,,,,,,,,,,,511',
',,511,,,511,511,,,511,,,,,,,,,,,,,,,,,,,,511,511,511,511,,511,511,511',
'511,,,,,511,511,,,,505,505,505,511,505,511,511,511,505,505,,,,505,,505',
'505,505,505,505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,',
',505,,,505,505,505,505,505,505,505,505,505,505,505,505,,505,505,505',
'505,505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,505,,505,,505',
',,505,,,,,,505,,,,,505,505,505,505,,505,505,505,505,,,,,505,505,,,,',
',,505,,505,505,505,122,122,122,122,122,,,,122,122,,,,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,122,122',
',122,122,122,122,122,122,122,122,122,,122,122,122,,122,122,122,122,122',
',,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,122,,,,122,,,,,,,,,122',
',,,,122,122,122,122,,122,122,122,122,,,,,122,122,,,,503,503,503,122',
'503,122,122,122,503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503',
'503,503,503,503,503,503,,,503,,,,,,,503,,,503,503,503,503,503,503,503',
'503,,503,503,503,,503,503,,,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503',
',,503,,,,,,,,,,,,,,,,,,,,503,503,503,503,,503,503,503,503,,,,,503,503',
',,,121,121,121,503,121,503,503,503,121,121,,,,121,,121,121,121,121,121',
'121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121',
'121,121,121,121,121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,',
',,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,,121,,,,,121,121,121',
'121,,121,121,121,121,,,,,121,121,,,,120,120,120,121,120,121,121,121',
'120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120',
'120,120,,,120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120',
',120,120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,',
',,,120,,,,,,,,,120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120',
',,,376,376,376,120,376,120,120,120,376,376,,,,376,,376,376,376,376,376',
'376,376,,,,,,376,376,376,376,376,376,376,,,376,,,,,,,376,,,376,376,376',
'376,376,376,376,376,,376,376,376,,376,376,376,376,376,,,,,,,,,,,,,,',
',,,,,376,,,376,,,376,376,,,376,,,,,,376,,,,,,,,,376,,,,,376,376,376',
'376,,376,376,376,376,,,,,376,376,,,,250,250,250,376,250,376,376,376',
'250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250',
'250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250',
',250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250,,,,,250,250',
',,,707,707,707,250,707,250,250,250,707,707,,,,707,,707,707,707,707,707',
'707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,,,707,,,707,707,707',
'707,707,707,707,707,,707,707,707,,707,707,707,707,707,,,,,,,,,,,,,,',
',,,,,707,,,707,,,707,707,,,707,,,,,,707,,,,,,,,,707,,,,,707,707,707',
'707,,707,707,707,707,,,,,707,707,,,,251,251,251,707,251,707,707,707',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,119,119,119,251,119,251,251,251,119,119,,,,119,,119,119,119,119,119',
'119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119',
'119,119,119,119,119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,',
',,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119',
'119,,119,119,119,119,,,,,119,119,,,,701,701,701,119,701,119,119,119',
'701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701,701,701,701',
'701,701,,,701,,,,,,,701,,,701,701,701,701,701,701,701,701,,701,701,701',
',701,701,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701,701,,,701,,',
',,,701,,,,,,,,,701,,,,,701,701,701,701,,701,701,701,701,,,,,701,701',
',,,59,59,59,701,59,701,701,701,59,59,,,,59,,59,59,59,59,59,59,59,,,',
',,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59',
'59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,',
',59,,,59,,,,,,59,,,,,59,59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60',
'59,60,59,59,59,60,60,,,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60',
'60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60',
'60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,',
',,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,404,404,404,60,404,60,60,60',
'404,404,,,,404,,404,404,404,404,404,404,404,,,,,,404,404,404,404,404',
'404,404,,,404,,,,,,,404,,,404,404,404,404,404,404,404,404,,404,404,404',
',404,404,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,,,404,404,,,404,,',
',,,404,,,,,,,,,404,,,,,404,404,404,404,,404,404,404,404,,,,,404,404',
',,,63,63,63,404,63,404,404,404,63,63,,,,63,,63,63,63,63,63,63,63,,,',
',,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63',
'63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,',
',,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64,63,64,63',
'63,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,',
'64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,',
',,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64',
'64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64,64,64,67,67,,,,67,,67',
'67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67',
'67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67',
',,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,,,,67',
'67,67,,,,,67,67,,67,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68,68,68',
'68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68',
'68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,68',
'961,,961,961,961,961,961,,,,,,,,,961,,68,68,68,68,,68,68,68,68,,,,,68',
'68,,,,,,961,68,,68,68,68,495,495,495,495,495,961,961,,495,495,961,,',
'495,,495,495,495,495,495,495,495,,,,,,495,495,495,495,495,495,495,,',
'495,,,,,,495,495,495,495,495,495,495,495,495,495,495,495,,495,495,495',
',495,495,495,495,495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495,495,,,495,,495',
',,,495,,,,,,,,,495,,,,,495,495,495,495,,495,495,495,495,,,,,495,495',
',,,,,495,495,,495,495,495,69,69,69,,69,,,,69,69,,,,69,,69,69,69,69,69',
'69,69,,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69',
'69,,69,69,69,,69,69,,,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69,,,69,',
',,,,,,,,,,,,,,,,,,69,69,69,69,,69,69,69,69,,,,,69,69,,,,490,490,490',
'69,490,69,69,69,490,490,,,,490,,490,490,490,490,490,490,490,,,,,,490',
'490,490,490,490,490,490,,,490,,,,,,,490,,,490,490,490,490,490,490,490',
'490,,490,490,490,,490,490,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,',
',490,490,,,490,,,,,,490,,,,,,,,,490,,,,,490,490,490,490,,490,490,490',
'490,,,,,490,490,,,,70,70,70,490,70,490,490,490,70,70,,,,70,,70,70,70',
'70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70',
'70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,',
'70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,,,,488,488',
'488,70,488,70,70,70,488,488,,,,488,,488,488,488,488,488,488,488,,,,',
',488,488,488,488,488,488,488,,,488,,,,,,,488,,,488,488,488,488,488,488',
'488,488,488,488,488,488,,488,488,488,488,488,,,,,,,,,,,,,,,,,,,,488',
',,488,,,488,488,,,488,,,,488,,488,,,488,,,,,,488,,,,,488,488,488,488',
',488,488,488,488,,,,,488,488,,,,486,486,486,488,486,488,488,488,486',
'486,,,,486,,486,486,486,486,486,486,486,,,,,,486,486,486,486,486,486',
'486,,,486,,,,,,,486,,,486,486,486,486,486,486,486,486,486,486,486,486',
',486,486,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,486',
',486,,486,,,486,,,,,,486,,,,,486,486,486,486,,486,486,486,486,,,,,486',
'486,,,,118,118,118,486,118,486,486,486,118,118,,,,118,,118,118,118,118',
'118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118',
'118,118,118,118,118,118,,118,118,118,,118,118,118,118,118,,,,,,,,,,',
',,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,,,,118,118',
'118,118,,118,118,118,118,,,,,118,118,,,,316,316,316,118,316,118,118',
'118,316,316,,,,316,,316,316,316,316,316,316,316,,,,,,316,316,316,316',
'316,316,316,,,316,,,,,,,316,,,316,316,316,316,316,316,316,316,,316,316',
'316,,316,316,,,316,,,,,,,,,,,,,,,,,,,,316,,,316,,,316,316,,,316,,,,',
',,,,,,,,,,,,,,,316,316,316,316,,316,316,316,316,,,,,316,316,,,,324,324',
'324,316,324,316,316,316,324,324,,,,324,,324,324,324,324,324,324,324',
',,,,,324,324,324,324,324,324,324,,,324,,,,,,,324,,,324,324,324,324,324',
'324,324,324,,324,324,324,,324,324,324,324,324,,,,,,,,,,,,,,,,,,,,324',
',,324,324,,324,324,,,324,,,,,,324,,,,,,,,,324,,,,,324,324,324,324,,324',
'324,324,324,,,,,324,324,,,,,424,,324,,324,324,324,424,424,424,,,424',
'424,424,,424,,,,,,,,,424,424,424,424,,,,,,,,424,424,,424,424,424,424',
'424,,,,,,,,,,,,,,,,,,,,,,,424,424,424,424,424,424,424,424,424,424,424',
'424,424,424,,,424,424,424,,,424,,,424,,,424,424,,424,,424,,424,,424',
'424,,424,424,424,424,424,,424,424,424,,,,,,,,,,,,,,424,,,424,424,424',
'424,425,424,,424,,,,425,425,425,,,425,425,425,,425,,,,,,,,,425,425,425',
'425,,,,,,,,425,425,,425,425,425,425,425,,,,,,,,,,,,,,,,,,,,,,,425,425',
'425,425,425,425,425,425,425,425,425,425,425,425,,,425,425,425,,,425',
',,425,,,425,425,,425,,425,,425,,425,425,,425,425,425,425,425,,425,425',
'425,,,,,,,,,,,,,,425,,,425,425,425,425,56,425,,425,,,,56,56,56,,,56',
'56,56,,56,,,,,,,,,,56,56,56,,,,,,,,56,56,,56,56,56,56,56,,,,,,,,,,,',
',,,,,,,,,,,56,56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56,56,,,56',
',,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,963,,963,963',
'963,963,963,,,,,,,56,,963,56,56,56,56,415,56,,56,,,,415,415,415,,,415',
'415,415,,415,963,,,,,,,,415,415,415,963,963,,,,963,,,415,415,,415,415',
'415,415,415,,,,,,,,,,,,,,,,,,,,,,,415,415,415,415,415,415,415,415,415',
'415,415,415,415,415,,,415,415,415,,,415,,415,415,,,415,415,,415,,415',
',415,,415,415,,415,415,415,415,415,,415,415,415,,,,,,,,,,,,,,415,,27',
'415,415,,415,,415,27,27,27,,,27,27,27,,27,,,,,,,,,27,27,27,,,,,,,,,27',
'27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27,27',
'27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27',
'27,27,27,27,,27,27,27,,,,,,,,,,,,,,27,,474,27,27,,27,,27,474,474,474',
',,474,474,474,614,474,614,614,614,614,614,,,,474,474,,,,614,,,,,,474',
'474,,474,474,474,474,474,,,,,,,,,614,,,,,,,,,614,614,614,614,,,,614',
',,,,,,,,474,,28,,,,,474,,28,28,28,474,474,28,28,28,614,28,,,,,,,,,,28',
'28,,,,,,474,474,,28,28,,28,28,28,28,28,,,,,474,,,474,,,,,474,,,,,,,',
',,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,28,28,28,,,28,,28,28,',
',28,28,,28,,28,,28,,28,28,,28,28,28,28,28,,28,,28,,,,,,,,,,,,,,28,,',
'28,28,,28,,28,395,395,395,395,395,395,395,395,395,395,395,395,395,395',
'395,395,395,395,395,395,395,395,395,395,,,,395,395,395,395,395,395,395',
'395,395,395,,,,,,395,395,395,395,395,395,395,395,395,,,395,,,,,,,,395',
'395,,395,395,395,395,395,395,395,,,395,395,,,,395,395,395,395,,,,,,',
',,,,,,,395,395,,395,395,395,395,395,395,395,395,395,395,395,395,,,395',
'395,,,,,,,,,,,,,,395,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
',,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9',
'9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,',
',9,9,,,,,,,,,,,,,,9,584,584,584,584,584,584,584,584,584,584,584,584',
'584,584,584,584,584,584,584,584,584,584,584,584,,,,584,584,584,584,584',
'584,584,584,584,584,,,,,,584,584,584,584,584,584,584,584,584,,,584,',
',,,,,,584,584,,584,584,584,584,584,584,584,,,584,584,,,,584,584,584',
'584,,,,,,,,,,,,,,584,584,,584,584,584,584,584,584,584,584,584,584,584',
'584,,,584,584,,,,,,,,,,,,,,584,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,',
'8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8',
'8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,',
',,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71',
'71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71',
'71,71,71,71,71,71,,,71,714,714,714,714,714,714,714,714,714,714,714,714',
'714,714,714,714,714,714,714,714,714,714,714,714,,,,714,714,714,714,714',
'714,714,714,714,714,,,,,,714,714,714,714,714,714,714,714,714,,,714,',
',,,,,,714,714,,714,714,714,714,714,714,714,,,714,714,,,,714,714,714',
'714,,,,,,,,,,,,,,714,714,,714,714,714,714,714,714,714,714,714,714,714',
'714,544,544,714,,544,,,,,,,,544,544,,544,544,544,544,544,544,544,,,544',
'544,,,,544,544,544,544,,,,,,544,,,,,,,,544,544,,544,544,544,544,544',
'544,544,544,544,544,544,544,261,261,544,,261,,,,,,,,261,261,,261,261',
'261,261,261,261,261,,,261,261,,,,261,261,261,261,,,,,,,,,,,,,,261,261',
',261,261,261,261,261,261,261,261,261,261,261,261,441,441,261,,441,,',
',,,,,441,441,,441,441,441,441,441,441,441,,,441,441,,,,441,441,441,441',
',,,,,441,,,,,,,,441,441,,441,441,441,441,441,441,441,441,441,441,441',
'441,440,440,441,,440,,,,,,,,440,440,,440,440,440,440,440,440,440,,,440',
'440,,,,440,440,440,440,,,,,,440,,,,,,,,440,440,,440,440,440,440,440',
'440,440,440,440,440,440,440,506,506,440,,506,,,,,,,,506,506,,506,506',
'506,506,506,506,506,,,506,506,,,,506,506,506,506,,,,,,506,,,,,,,,506',
'506,,506,506,506,506,506,506,506,506,506,506,506,506,507,507,506,,507',
',,,,,,,507,507,,507,507,507,507,507,507,507,,,507,507,,,,507,507,507',
'507,,,,,,507,,,,,,,,507,507,,507,507,507,507,507,507,507,507,507,507',
'507,507,918,918,507,,918,,,,,,,,918,918,,918,918,918,918,918,918,918',
',,918,918,,,,918,918,918,918,,,,,,918,,,,,,,,918,918,,918,918,918,918',
'918,918,918,918,918,918,918,918,516,516,918,,516,,,,,,,,516,516,,516',
'516,516,516,516,516,516,,,516,516,,,,516,516,516,516,,,,,,516,,,,,,',
',516,516,,516,516,516,516,516,516,516,516,516,516,516,516,517,517,516',
',517,,,,,,,,517,517,,517,517,517,517,517,517,517,,,517,517,,,,517,517',
'517,517,,,,,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,517,517',
'517,517,517,972,972,517,,972,,,,,,,,972,972,,972,972,972,972,972,972',
'972,,,972,972,,,,972,972,972,972,,,,,,972,,,,,,,,972,972,,972,972,972',
'972,972,972,972,972,972,972,972,972,973,973,972,,973,,,,,,,,973,973',
',973,973,973,973,973,973,973,,,973,973,,,,973,973,973,973,,,,,,973,',
',,,,,,973,973,,973,973,973,973,973,973,973,973,973,973,973,973,213,213',
'973,,213,,,,,,,,213,213,,213,213,213,213,213,213,213,,,213,213,,,,213',
'213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213,213,213,213,213,213',
'213,213,213,213,552,552,213,,552,,,,,,,,552,552,,552,552,552,552,552',
'552,552,,,552,552,,,,552,552,552,552,,,,,,552,,,,,,,,552,552,,552,552',
'552,552,552,552,552,552,552,552,552,552,551,551,552,,551,,,,,,,,551',
'551,,551,551,551,551,551,551,551,,,551,551,,,,551,551,551,551,,,,,,551',
',,,,,,,551,551,,551,551,551,551,551,551,551,551,551,551,551,551,545',
'545,551,,545,,,,,,,,545,545,,545,545,545,545,545,545,545,,,545,545,',
',,545,545,545,545,,,,,,545,,,,,,,,545,545,,545,545,545,545,545,545,545',
'545,545,545,545,545,212,212,545,,212,,,,,,,,212,212,,212,212,212,212',
'212,212,212,,,212,212,,,,212,212,212,212,,,,,,212,,,,,,,,212,212,,212',
'212,212,212,212,212,212,212,212,212,212,212,,796,212,796,796,796,796',
'796,,794,,794,794,794,794,794,796,,,,,,,,794,,841,,841,841,841,841,841',
',,,,,796,,,841,,,,,794,796,796,796,796,,,,796,794,794,794,794,,,,794',
'841,,843,,843,843,843,843,843,841,841,841,841,,,,841,843,,1011,,1011',
'1011,1011,1011,1011,,933,,933,933,933,933,933,1011,,,,,843,,,933,,,',
',,843,843,843,843,,,,843,1011,,,,,,,,933,,,1011,1011,,,,1011,933,933',
'933,933,,,935,933,935,935,935,935,935,937,,937,937,937,937,937,939,935',
'939,939,939,939,939,1001,937,1001,1001,1001,1001,1001,,939,,,,,,,1001',
'935,,,,,,,937,,,,935,935,,939,,935,,937,937,,1001,,937,,939,939,,,,939',
',1001,1001,,,533,1001,533,533,533,533,533,,712,,712,712,712,712,712',
'533,,,,,,,,712,,957,,957,957,957,957,957,,,,,,533,533,,957,,,,,712,533',
'533,533,533,,,,533,712,712,712,712,,,,712,957,,798,,798,798,798,798',
'798,957,957,957,957,,,,957,798,,655,,655,655,655,655,655,,713,,713,713',
'713,713,713,655,,,,,798,,,713,,,,,,,,798,798,,,,798,655,,,,,,,,713,655',
'655,655,655,,,,655,713,713,713,713,,,,713' ]
        racc_action_check = arr = ::Array.new(24863, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1585,    80,   nil,   336,   nil,  8506,  1445,    63, 23176, 22920,
    83,   nil,    64,   140,  1308,   416,   101,   716,   nil,   -71,
  7581,  2705,   225,   nil,   479,   nil,   275, 22450, 22658,  6132,
  6394,  6525,   nil,  3125,  8236,  8367,   nil,   172,   168,   386,
   262,   250, 15727, 15858, 16251,   191,   677,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 22187,   nil,   -73, 19796,
 19927,   123,   nil, 20189, 20320,   nil,   nil, 20451, 20590, 20868,
 21130, 23304,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   456,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   604,   nil,   nil,
   332,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   337,   nil,  9300,   nil,   nil,   nil,   nil, 21523, 19534,
 18879, 18748, 18486,  1445,   nil,   439,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   258,   nil,  2705, 17561,
 17168, 17037, 24393, 24149, 16120, 15596, 15465, 15334, 14941, 14286,
   nil,   nil,   927,   138,   -56,   372,   -85,   295,   362,   nil,
  7974,  2845,   365,  7311,  7180,  6918,  6263,  5608,  5338,  5207,
   604, 13500, 13369, 13238, 12452, 12321, 11666, 11535, 10618,  9963,
 19141, 19403,  9439,  9832, 10880, 11011, 11142, 11273, 11404,   nil,
   nil, 23539,   nil,   nil,   378, 11797, 11928,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 12190,   nil,  2845,   nil,   353,   373,
   nil, 12583,   425, 12714,   nil, 12845, 12976,   nil,   nil,   573,
   nil,  5477,  1570,   414,   387,  4805,   400,   442,   426,  7442,
  2145,  1237,  1207,  1168,   532,  1097,   nil,   504,   499,   166,
   nil,   nil,   nil,   561,   223,   527, 21654,   nil,   337,   598,
  1067,   nil,   627,   nil, 21785,  2285, 13631,   571,   nil,    81,
   -98,   622,   605,   518,   636,   nil,   nil,    -3,   -10,    32,
 16382, 16513,   219,   714,   603,    64,    65,   745,   704,   -12,
   745,   nil,   nil,   367,   340,   213,   nil,   787,   nil,     9,
 17692,   nil,   nil,   nil,   369,   -53,   181,   -24,   -30,   309,
   508,   506,   505,   nil,   365,   nil, 19010,   nil,   149,   210,
   259,   270,   390,   -39,   -34,   397,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   658, 22792,   nil,   nil,   nil,   nil,
   659,   nil,   nil,   640, 20058,   651,   nil,   nil,   885,   671,
   nil,   672,   693,   280,   -83, 22321,   nil,   nil,   nil,   110,
     0,   742,   nil,   nil, 21919, 22053,   nil,  1445,   nil,   693,
   nil,   nil,   745,   nil,   nil,   nil,   nil,   213,   nil,   745,
 23661, 23600,  8768,   136,  8899,  9030,  9161,  4105,  3965,  3136,
  3241,   773,   778,   791,   792,  5207,  5338,  5477,  4245,  4525,
  4665,  3405,  3265,  5076,  4945,  4805,  4385,  3825,  3235,  3293,
  3545,  3685,  2425,   338, 22579,   nil,   nil,   nil,   nil,   739,
   nil,   268,   346,   740,   nil,   nil, 21392,   nil, 21261,   nil,
 20999,   nil,   nil,   nil,   nil, 20729,  1430,   745,   742,   742,
   nil,   nil,   744, 18617,   749, 18347, 23722, 23783,  1028,   793,
   nil, 18216,   765,   nil, 18085, 17954, 23905, 23966,  2565, 17823,
   892,   900,   648,   821,   nil, 17430,   nil,   nil, 17299,   nil,
   nil,   nil,   nil, 24669,  2005,   900,   nil,  3825,    29,    71,
   897,   912, 16906, 16775, 23478, 24332,    57,   nil,   nil,   440,
   nil, 24271, 24210, 16644,   nil,   nil,   nil,   109,   -31,  4945,
   833,   nil,   194,   nil,   nil,   nil,   728,   nil,   nil,   nil,
   805,   nil,   nil,   142,   nil,   147,   nil,   nil,   791,   nil,
   792,   nil,   nil,   nil, 23048,   nil,   794, 15203, 15072,   445,
   847, 14810, 14679, 14548, 14417,   849,   nil,   nil, 14155, 14024,
   870,   nil, 13893, 13762,   nil,   nil,   197,   167,   468,   220,
   841,  1025,   843,   nil, 22543,   nil,  2565,   952,   -21,   206,
   nil,  3685,  4245,   nil,   856,   nil,   910,  8637,   nil,   nil,
   nil,   885,  -118,  8105,   866,   nil,   879,    25,    24,   921,
   436,  1445,   923,   882,  7049,  1165,   953,    -8,  1018,  6001,
   nil,   903,   nil,   237,   nil, 24750,   nil,   904,   905,   nil,
   906,   916,   918,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   911,  3205,   nil,   nil, 13107,   nil,   nil,   nil,  1002,   nil,
   nil,   nil,  1010,   nil,   nil,  1011,    51,   nil,  1050,   nil,
   nil,   nil,   nil,  1056,   nil,    -1,   936,    39,     3,   136,
   149, 19665,   476,  1165,   nil,   937,  1165, 19272,   nil,   nil,
  1072,  1025, 24677, 24758, 23417,   nil,   nil,   nil,   nil,   nil,
   nil,  1725,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   952,
  9570,  1585,  9701,   nil,   973,   nil,  1725,   nil,  1865,   nil,
   nil,  2005,   nil,  2145,   nil,  2285, 10094, 10225, 10356, 10487,
   -40, 10749,   978,   982,   nil,   986,   991,   996,   nil,  1028,
  1008,  1004,  1008, 12059,   nil,   nil,  1141,   nil,   nil,  1305,
  1039,  1146,   nil,   nil,   nil,  1024,   406,   nil,   nil,  1150,
   nil,  2985,  1026,  1075,   nil,   nil,  1082,   nil,    34,  1043,
   793,   nil,   nil,   658, 24463,   nil, 24455,   nil, 24733,   nil,
  5076,   nil,  3111,   nil,  1044,   325,  1048,   nil,   nil,   nil,
   nil,  1170,   nil,  5739,  1180,  3405,  3545,   nil,  5870,  3965,
    37,    69,   nil,  1182,   467,  4665,   nil,  1183,  1063,   461,
   nil,  1074,  1074,   nil,  1305,  6656,  6787,  2985,   918,   nil,
   nil, 24480,   nil, 24519,   nil,  7489,   nil,   nil,  1112,  1151,
  7712,  1305,  1170,   nil,  1133,   nil,   nil,   nil,  2425,   nil,
   nil,     7,  7843,   nil,   nil,   nil,   nil,   nil,  1161,  1122,
   nil,   nil,   nil,  1126,  1131,   nil,  1136,  1144,   nil,  1145,
   nil,   nil,  1149,  3140,  1156,  3485,   nil,   nil,    10,   nil,
  1281,  1283,   nil,    80,   nil,   nil,   nil,  1286,   nil,   nil,
   nil,  1208,   nil,  1165,   nil,   nil,  1166,  1169,  1179,  1180,
   nil,  1184,   nil,   370,   nil,   nil,   nil,   304, 23844,   nil,
   nil,   nil,   885,   957,   888,   885,  1263,   817,   nil,  4525,
  4385,   nil,   nil, 24544,   nil, 24596,   nil, 24603,   nil, 24610,
   nil,   nil,   nil,   nil,   434,  3531,  1186,  4105,   nil,   nil,
   nil,   nil,   nil,  3265,   nil,  1865,   nil, 24694,   nil,  8414,
   nil, 20637,   nil, 22250,   nil,   nil,   nil,  1291,  1240,  1242,
  1325, 15989, 24027, 24088,   748,  1220,  1332,  1214,  1228,  1232,
  1253,  1258,  3421,  1261,  3391,   715,  1386,  1390,  1271,  1276,
  1284,  1285,   nil,   nil,  1289,    26,    33,    39,  1025,   nil,
   nil, 24617,   nil,   nil,   nil,   nil,  3429,  1291,   nil,   nil,
   nil, 24536,   nil,   nil,   nil,   nil,     8,  1296,  1297,   -81,
   nil,   nil ]

racc_action_default = [
    -3,  -598,    -1,  -584,    -4,  -598,    -7,  -598,  -598,  -598,
  -598,   -29,  -598,  -598,  -598,  -279,  -598,   -40,   -43,  -586,
  -598,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -329,  -330,   -68,   -11,   -72,   -80,   -82,  -598,  -491,  -492,
  -598,  -598,  -598,  -598,  -598,  -586,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -574,  -281,  -283,  -597,
  -565,  -301,  -303,  -598,  -598,  -307,  -310,  -584,  -598,  -598,
  -598,  -598,  -331,  -332,  -334,  -335,  -432,  -433,  -434,  -435,
  -436,  -457,  -439,  -440,  -459,  -461,  -444,  -449,  -453,  -455,
  -471,  -459,  -473,  -475,  -476,  -477,  -478,  -572,  -480,  -481,
  -573,  -483,  -484,  -485,  -486,  -487,  -488,  -489,  -490,  -495,
  -496,  -598,    -2,  -585,  -593,  -594,  -595,    -6,  -598,  -598,
  -598,  -598,  -598,    -3,   -17,  -598,  -111,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -598,
  -598,  -246,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -586,
  -587,   -47,  -598,  -491,  -492,  -598,  -279,  -598,  -598,  -229,
  -598,   -11,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -401,
  -403,  -598,  -582,  -583,   -57,  -246,  -598,  -300,  -407,  -416,
  -418,   -63,  -413,   -64,  -586,   -65,  -238,  -251,  -260,  -260,
  -255,  -598,  -261,  -598,  -567,  -598,  -598,   -66,   -67,  -584,
   -12,  -598,   -15,  -598,   -70,   -11,  -586,  -598,   -73,   -76,
   -11,   -88,   -89,  -598,  -598,   -96,  -293,  -296,  -586,  -598,
  -329,  -330,  -333,  -414,  -598,   -78,  -598,   -84,  -290,  -474,
  -598,  -214,  -215,  -230,  -598,   -11,  -598,  -586,  -239,  -590,
  -590,  -598,  -598,  -590,  -598,  -302,  -392,   -49,  -598,  -598,
  -598,  -598,  -584,  -598,  -585,  -491,  -492,  -598,  -598,  -279,
  -598,  -345,  -346,  -106,  -107,  -598,  -109,  -598,  -279,  -598,
  -598,  -491,  -492,  -322,  -111,  -112,  -153,  -154,  -155,  -171,
  -176,  -183,  -186,  -324,  -598,  -563,  -598,  -437,  -598,  -598,
  -598,  -598,  -598,  -598,  -598,  -598,  1022,    -5,  -596,   -23,
   -24,   -25,   -26,   -27,  -598,  -598,   -19,   -20,   -21,  -121,
  -598,   -30,   -39,  -266,  -598,  -598,  -265,   -31,  -196,  -586,
  -247,  -260,  -260,  -575,  -576,  -256,  -411,  -577,  -578,  -576,
  -575,  -256,  -410,  -412,  -577,  -578,   -37,  -204,   -38,  -598,
   -41,   -42,  -194,  -261,   -44,   -45,   -46,  -586,  -299,  -598,
  -598,  -598,  -246,  -290,  -598,  -598,  -598,  -205,  -206,  -207,
  -208,  -209,  -210,  -211,  -212,  -216,  -217,  -218,  -219,  -220,
  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -231,  -232,
  -233,  -234,  -586,  -381,  -256,  -575,  -576,   -54,   -58,  -586,
  -257,  -381,  -381,  -586,  -295,  -252,  -598,  -253,  -598,  -258,
  -598,  -262,  -570,  -571,   -10,  -585,   -14,    -3,  -586,   -69,
  -288,   -85,   -74,  -598,  -586,  -246,  -598,  -598,   -95,  -598,
  -474,  -598,   -81,   -86,  -598,  -598,  -598,  -598,  -235,  -598,
  -424,  -598,  -284,  -598,  -240,  -592,  -591,  -242,  -592,  -291,
  -292,  -566,  -304,  -524,   -11,  -336,  -337,   -11,  -598,  -598,
  -598,  -598,  -598,  -246,  -598,  -598,  -290,  -315,  -106,  -107,
  -108,  -598,  -598,  -246,  -318,  -497,  -498,  -598,  -598,   -11,
  -502,  -326,  -586,  -438,  -458,  -463,  -598,  -465,  -441,  -460,
  -598,  -462,  -443,  -598,  -446,  -598,  -448,  -451,  -598,  -452,
  -598,  -472,    -8,   -18,  -598,   -28,  -269,  -598,  -598,  -415,
  -598,  -248,  -250,  -598,  -598,   -59,  -245,  -408,  -598,  -598,
   -61,  -409,  -598,  -598,  -298,  -588,  -575,  -576,  -575,  -576,
  -586,  -194,  -598,  -382,  -586,  -384,   -11,   -53,  -404,  -381,
  -243,   -11,   -11,  -294,  -260,  -259,  -263,  -598,  -568,  -569,
   -13,  -598,   -71,  -598,   -77,   -83,  -586,  -575,  -576,  -244,
   -92,   -94,  -598,   -79,  -598,  -203,  -213,  -586,  -597,  -597,
  -282,  -586,  -287,  -590,  -393,  -524,  -396,  -562,  -562,  -507,
  -509,  -509,  -509,  -523,  -525,  -526,  -527,  -528,  -529,  -530,
  -531,  -598,  -533,  -535,  -537,  -542,  -544,  -545,  -547,  -552,
  -554,  -555,  -557,  -558,  -559,  -598,  -597,  -338,  -597,  -308,
  -339,  -340,  -311,  -598,  -314,  -598,  -586,  -575,  -576,  -579,
  -289,  -598,  -106,  -107,  -110,  -586,   -11,  -598,  -500,  -320,
  -598,   -11,  -524,  -524,  -598,  -564,  -464,  -467,  -468,  -469,
  -470,   -11,  -442,  -445,  -447,  -450,  -454,  -456,  -122,  -267,
  -598,  -197,  -598,  -589,  -260,   -33,  -199,   -34,  -200,   -60,
   -35,  -202,   -36,  -201,   -62,  -195,  -598,  -598,  -598,  -598,
  -415,  -598,  -562,  -562,  -363,  -365,  -365,  -365,  -380,  -598,
  -586,  -386,  -531,  -539,  -540,  -550,  -598,  -406,  -405,   -11,
  -598,  -598,  -254,  -264,   -16,   -75,   -90,   -87,  -297,  -597,
  -343,   -11,  -425,  -597,  -426,  -427,  -598,  -241,  -598,  -586,
  -598,  -505,  -506,  -598,  -598,  -516,  -598,  -519,  -598,  -521,
  -598,  -347,  -598,  -349,  -351,  -358,  -586,  -536,  -546,  -556,
  -560,  -598,  -341,  -598,  -598,   -11,   -11,  -313,  -598,   -11,
  -415,  -598,  -415,  -598,  -598,   -11,  -323,  -598,  -586,  -598,
  -327,  -598,  -268,   -32,  -198,  -249,  -598,  -236,  -598,  -361,
  -362,  -371,  -373,  -598,  -376,  -598,  -378,  -383,  -598,  -598,
  -598,  -538,  -598,  -402,  -598,  -417,  -419,    -9,   -11,  -431,
  -344,  -598,  -598,  -429,  -285,  -394,  -397,  -399,  -598,  -562,
  -543,  -561,  -508,  -509,  -509,  -534,  -509,  -509,  -553,  -509,
  -531,  -548,  -586,  -598,  -356,  -598,  -532,  -305,  -598,  -306,
  -598,  -598,  -263,  -597,  -316,  -319,  -499,  -598,  -325,  -501,
  -503,  -502,  -466,  -562,  -541,  -364,  -365,  -365,  -365,  -365,
  -551,  -365,  -385,  -586,  -388,  -390,  -391,  -549,  -598,  -290,
   -55,  -430,   -11,   -97,   -98,  -598,  -598,  -105,  -428,   -11,
   -11,  -395,  -504,  -598,  -512,  -598,  -514,  -598,  -517,  -598,
  -520,  -522,  -348,  -350,  -354,  -598,  -359,   -11,  -309,  -312,
  -420,  -421,  -422,   -11,  -321,   -11,  -360,  -598,  -368,  -598,
  -370,  -598,  -374,  -598,  -377,  -379,  -387,  -598,  -289,  -579,
  -424,  -246,  -598,  -598,  -104,  -598,  -598,  -509,  -509,  -509,
  -509,  -352,  -598,  -357,  -598,  -597,  -598,  -598,  -365,  -365,
  -365,  -365,  -389,  -423,  -586,  -575,  -576,  -579,  -103,  -398,
  -400,  -598,  -510,  -513,  -515,  -518,  -598,  -355,  -342,  -317,
  -328,  -598,  -366,  -369,  -372,  -375,  -415,  -509,  -353,  -365,
  -511,  -367 ]

clist = [
'218,335,328,14,260,373,2,409,14,541,277,277,277,132,132,6,487,278,278',
'278,6,261,648,222,129,129,324,431,312,312,756,521,222,222,222,711,14',
'303,303,124,207,811,415,421,113,338,339,329,406,342,134,134,298,319',
'428,589,534,537,625,878,625,479,312,312,312,296,222,222,806,315,222',
'347,357,357,628,779,112,550,943,656,524,527,755,875,531,763,759,129',
'910,512,916,474,294,381,946,337,337,221,914,337,389,390,391,392,268',
'272,264,271,273,116,478,279,279,279,628,814,14,663,117,689,692,222,222',
'222,222,14,14,857,6,394,875,630,275,287,288,616,206,393,6,379,343,330',
'333,621,622,352,385,573,575,487,337,337,337,337,983,359,363,402,395',
'619,584,331,618,625,625,375,332,532,350,554,757,374,325,116,326,651',
'438,327,628,943,336,340,815,564,341,571,574,574,816,701,953,1007,277',
'706,825,559,878,405,560,882,714,789,910,405,791,792,693,901,916,758',
'760,14,222,222,222,1018,992,222,222,222,222,222,222,913,654,865,387',
'533,875,425,788,484,848,929,14,930,473,481,610,663,482,950,783,861,377',
'378,277,277,434,435,436,437,875,499,278,277,750,906,828,829,380,868',
'278,1,877,710,879,382,222,222,415,421,383,704,384,716,634,222,721,707',
'873,769,776,870,643,904,401,407,,509,416,426,430,312,14,,663,663,14',
'839,840,636,303,14,,,496,,523,763,312,909,763,911,763,,763,,,303,951',
',538,539,,,510,498,14,222,495,,504,502,513,,639,,,696,1008,,820,222',
'222,,639,,279,705,874,822,876,,294,26,279,,522,294,26,772,494,222,,',
',,,480,,561,337,337,639,26,955,483,724,222,724,,639,,26,26,26,268,26',
',590,272,558,,604,116,,907,,908,132,978,894,979,787,980,775,625,562',
',,129,823,819,431,540,932,827,26,26,,628,26,277,,989,583,990,763,991',
'763,,763,,763,,620,134,,,623,739,,,,222,744,,116,,956,,,612,,632,,425',
',,,635,,,,555,,,26,1017,,772,993,26,26,26,26,26,26,1019,,,763,,,,277',
',784,977,,,,596,,595,,312,14,601,14,600,,631,,312,303,,222,,,,6,988',
'303,,,,416,715,,513,222,425,277,,,,,513,695,897,,425,277,,,14,,,14,',
',39,,,222,,39,,,647,596,,617,,222,,768,952,,425,14,26,26,26,26,425,624',
'26,26,26,26,26,26,16,39,302,302,922,16,,,,416,,26,,,132,,590,785,,416',
'761,222,222,,767,129,222,222,,778,222,947,653,16,,,346,362,362,362,728',
',590,,14,26,26,416,,14,14,134,312,,26,416,,786,,,,303,405,312,,1016',
',,351,690,690,26,303,830,,26,513,,,,26,39,,,,,987,777,708,709,39,39',
',,,735,737,,734,,740,742,590,,430,26,26,,821,,,590,,16,824,,,,,,26,26',
'16,16,,,,,,222,,,,,14,222,,,,14,26,,596,,,601,,859,,14,,863,,,,129,26',
',337,,222,,,,337,,761,,,,,,,,670,,39,,,,,,312,,,13,753,,886,,13,851',
'994,,,761,,14,,39,,,,,,,,,16,14,899,,,,,429,,,13,,888,,26,,,,,639,,',
',16,,754,833,,,795,797,799,,222,,14,14,,,14,,,,,,14,,762,,,,39,,,,39',
'942,,,302,39,312,337,,,,,26,,26,917,,,312,,,302,26,14,,,,925,16,,39',
',16,670,,13,26,16,,,,,,,13,13,,,,801,,26,,,26,,966,,,,26,,16,,,,,,,',
'26,,,15,,,26,,15,,,,,,,,,14,,690,670,670,896,,14,14,425,900,,869,,,',
',,,15,305,305,,26,26,14,,277,26,26,,14,26,14,,,,,,,,,,13,,,26,,,222',
'590,26,26,,349,358,358,,,871,903,,871,753,425,753,13,753,,,,,,,,,,,',
',,,,,,670,,670,,,,,,801,,,884,,,15,934,936,,938,940,,941,871,15,15,754',
',754,39,754,39,,,,,,302,,,,416,13,,,302,13,26,762,,762,13,26,26,,,,26',
',,,16,,16,,,,26,39,,,39,842,844,846,,13,,26,,,,,,,,,,,,801,,801,39,',
'753,,753,,753,16,753,,16,,,,,,,15,,,,,26,,,,,1002,1003,1004,1005,,16',
',26,,,,,,15,,,,,,,670,,754,,754,,754,,754,753,39,981,801,,297,39,39',
',,26,1020,26,26,,762,26,,302,429,,,26,,,,,,,302,,,,16,,,,,16,16,801',
',801,,15,,,754,15,,,,305,15,,26,,,,,,,,,801,,,,,305,,,,,958,960,962',
'964,15,965,,,,,,,,,,,,39,,,,,39,13,,13,,,,,,,39,,,,,,,,,,,,,26,,,,16',
',,26,26,16,,,,,,,,13,,16,13,,,,,26,,,,362,,26,,26,,39,,1012,1013,1014',
'1015,,13,,,,,39,,26,,,,,,,,,,,,400,,,,,,16,1021,,,,,,,,,,,16,,39,39',
',297,39,,,,,,39,,,,,,,,13,,,,,13,13,,,,,,,,16,16,,362,16,,,,,,16,39',
',,,924,15,,15,,,,,,305,,,,,,,,305,38,,297,,,38,,297,,,16,,,,928,,,,',
',,,15,,,15,,,,,,,,38,301,301,,,,,,,39,13,,,,15,13,39,39,,,,720,,,,13',
',,,,,,,,39,345,361,361,361,,39,16,39,,,,,,16,16,,,,,,,,,,,,,,,,,16,',
',,,15,16,13,16,,15,15,,,38,,,,,13,,,305,38,38,,,,,,,,,305,,,,,,334,',
',,,,,,,,,,,,13,13,,,13,,229,,,,13,,,,,276,276,276,,,,,,,,,,,321,322',
'323,,,,,,,,,,,,15,13,,276,276,15,,,,,,,,,38,15,,,,,,,,,,,,,,,,,,,,,',
'38,,,,,,,,,,686,,,688,,,,,,,358,,,,,,15,,13,,,,,,,13,13,,15,,,,,,,,',
',,,,,,13,,,403,,,13,38,13,433,,38,,,,301,38,,,15,15,,,15,,,,,,15,,,301',
',,,,,,766,,38,,,770,771,,,,,,,,,358,,,,,,,,15,276,408,276,927,,427,432',
',,,,,489,,491,,492,493,,,,229,,,447,448,449,450,451,452,453,454,455',
'456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472',
',,,,,,276,276,,,,,,15,,276,,,,,15,15,276,,276,,276,276,,,,831,,,,,,',
'15,,,,,,15,,15,,,,,,,,,,,,,,,,,,,518,,,,,,,,,,,,,,854,,,,,,586,,,,,',
'860,,,,,,,38,,38,,,,,,301,,,,,,,,301,,,,,,,,,,,890,891,,,893,,,,,,,',
'38,,,38,,,,,276,,,,,,,,,,,,,,,,,38,,,,,626,921,334,,629,,,,,,,,,,,,276',
',427,611,408,,,,,,,,,,,,,,,,,,,626,,,334,,,,,,,,,,38,,,,433,38,38,,276',
',276,,276,970,,,,301,,,975,976,,,,,,276,301,,,,,,,,645,646,985,,,,,',
'986,,,276,,729,276,,,626,334,,,,,,,,,,276,276,,,,,,,,,,276,,,,,,,,,',
',,,,773,38,,,,,38,,,,,,,,,,38,,,,276,731,782,,276,276,736,738,,,,741',
'743,,,611,745,,,,,,,,,,,807,,,,,,,,,,,361,,276,,,,38,,,,,,,,,,,,38,',
',,,,276,,,,,,,,,,,,,,,,,,,,,832,,,,276,,,38,38,,,38,,,,,,38,,,,,,,,',
',,,,,,,,,,,,,,,,361,,,,,,,,38,,,,923,,,,,,276,,834,,,,,,,,881,,,,,,736',
'738,743,741,,837,,,,,,,892,,,,,,,,,,,,,,,,,334,,,,,,,,,38,,,,,,,38,38',
',,,,,,,276,,,,,,,,,38,,,,,,38,,38,276,,,,,,,,,,,,,,,,,276,834,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(2533, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,86,67,22,141,56,2,23,22,92,33,33,33,60,60,7,73,68,68,68,7,36,10,22',
'57,57,31,18,64,64,129,8,22,22,22,98,22,22,22,15,15,90,37,37,6,17,17',
'68,27,17,61,61,49,63,27,24,89,89,74,176,74,23,64,64,64,46,22,22,119',
'50,22,22,22,22,180,11,4,54,117,140,69,69,128,171,69,172,132,57,177,51',
'135,37,45,157,120,29,29,20,134,29,17,17,17,17,71,71,38,38,38,96,39,70',
'70,70,180,11,22,166,5,91,91,22,22,22,22,22,22,12,7,2,171,14,44,44,44',
'40,16,7,7,155,4,70,70,40,40,19,155,158,158,73,29,29,29,29,120,55,55',
'28,30,42,62,66,72,74,74,84,85,88,93,95,130,99,100,96,101,102,47,103',
'180,117,104,105,106,159,107,159,159,159,108,109,110,120,33,111,112,113',
'176,68,114,119,115,140,177,68,124,124,92,116,135,121,127,22,22,22,22',
'120,134,22,22,22,22,22,22,133,136,137,5,138,171,57,139,47,132,142,22',
'143,144,146,23,166,147,148,149,150,153,154,33,33,29,29,29,29,171,47',
'68,33,24,129,140,140,156,132,68,1,128,8,128,160,22,22,37,37,161,54,162',
'163,51,22,164,165,170,40,24,173,51,174,20,20,,31,71,20,20,64,22,,166',
'166,22,124,124,23,22,22,,,7,,31,172,64,128,172,128,172,,172,,,22,11',
',17,17,,,63,46,22,22,6,,46,50,49,,37,,,23,90,,24,22,22,,37,,70,23,130',
'24,130,,45,41,70,,29,45,41,73,4,22,,,,,,44,,36,29,29,37,41,98,44,159',
'22,159,,37,,41,41,41,71,41,,31,71,29,,47,96,,130,,130,60,128,91,128',
'69,128,51,74,29,,,57,8,89,18,4,124,8,41,41,,180,41,33,,128,15,128,172',
'128,172,,172,,172,,47,61,,,47,39,,,,22,39,,96,,124,,,31,,47,,57,,,,47',
',,,96,,,41,128,,73,10,41,41,41,41,41,41,128,,,172,,,,33,,27,130,,,,71',
',38,,64,22,71,22,38,,2,,64,22,,22,,,,7,130,22,,,,71,47,,49,22,57,33',
',,,,49,68,8,,57,33,,,22,,,22,,,53,,,22,,53,,,29,71,,38,,22,,86,92,,57',
'22,41,41,41,41,57,70,41,41,41,41,41,41,26,53,53,53,89,26,,,,71,,41,',
',60,,31,67,,71,31,22,22,,141,57,22,22,,47,22,89,70,26,,,53,53,53,53',
'15,,31,,22,41,41,71,,22,22,61,64,,41,71,,31,,,,22,68,64,,24,,,26,96',
'96,41,22,56,,41,49,,,,41,53,,,,,8,49,96,96,53,53,,,,20,20,,70,,20,20',
'31,,20,41,41,,17,,,31,,26,17,,,,,,41,41,26,26,,,,,,22,,,,,22,22,,,,22',
'41,,71,,,71,,67,,22,,67,,,,57,41,,29,,22,,,,29,,31,,,,,,,,118,,53,,',
',,,64,,,21,123,,47,,21,22,23,,,31,,22,,53,,,,,,,,,26,22,47,,,,,26,,',
'21,,17,,41,,,,,37,,,,26,,125,20,,,169,169,169,,22,,22,22,,,22,,,,,,22',
',118,,,,53,,,,53,47,,,53,53,64,29,,,,,41,,41,22,,,64,,,53,41,22,,,,22',
'26,,53,,26,118,,21,41,26,,,,,,,21,21,,,,118,,41,,,41,,31,,,,41,,26,',
',,,,,,41,,,25,,,41,,25,,,,,,,,,22,,96,118,118,96,,22,22,57,96,,123,',
',,,,,25,25,25,,41,41,22,,33,41,41,,22,41,22,,,,,,,,,,21,,,41,,,22,31',
'41,41,,25,25,25,,,125,123,,125,123,57,123,21,123,,,,,,,,,,,,,,,,,,118',
',118,,,,,,118,,,118,,,25,169,169,,169,169,,169,125,25,25,125,,125,53',
'125,53,,,,,,53,,,,71,21,,,53,21,41,118,,118,21,41,41,,,,41,,,,26,,26',
',,,41,53,,,53,126,126,126,,21,,41,,,,,,,,,,,,118,,118,53,,123,,123,',
'123,26,123,,26,,,,,,,25,,,,,41,,,,,169,169,169,169,,26,,41,,,,,,25,',
',,,,,118,,125,,125,,125,,125,123,53,118,118,,9,53,53,,,41,169,41,41',
',118,41,,53,26,,,41,,,,,,,53,,,,26,,,,,26,26,118,,118,,25,,,125,25,',
',,25,25,,41,,,,,,,,,118,,,,,25,,,,,126,126,126,126,25,126,,,,,,,,,,',
',53,,,,,53,21,,21,,,,,,,53,,,,,,,,,,,,,41,,,,26,,,41,41,26,,,,,,,,21',
',26,21,,,,,41,,,,53,,41,,41,,53,,126,126,126,126,,21,,,,,53,,41,,,,',
',,,,,,,9,,,,,,26,126,,,,,,,,,,,26,,53,53,,9,53,,,,,,53,,,,,,,,21,,,',
',21,21,,,,,,,,26,26,,53,26,,,,,,26,53,,,,53,25,,25,,,,,,25,,,,,,,,25',
'52,,9,,,52,,9,,,26,,,,26,,,,,,,,25,,,25,,,,,,,,52,52,52,,,,,,,53,21',
',,,25,21,53,53,,,,25,,,,21,,,,,,,,,53,52,52,52,52,,53,26,53,,,,,,26',
'26,,,,,,,,,,,,,,,,,26,,,,,25,26,21,26,,25,25,,,52,,,,,21,,,25,52,52',
',,,,,,,,25,,,,,,65,,,,,,,,,,,,,,21,21,,,21,,32,,,,21,,,,,32,32,32,,',
',,,,,,,,32,32,32,,,,,,,,,,,,25,21,,32,32,25,,,,,,,,,52,25,,,,,,,,,,',
',,,,,,,,,,,52,,,,,,,,,,9,,,9,,,,,,,25,,,,,,25,,21,,,,,,,21,21,,25,,',
',,,,,,,,,,,,21,,,65,,,21,52,21,65,,52,,,,52,52,,,25,25,,,25,,,,,,25',
',,52,,,,,,,9,,52,,,9,9,,,,,,,,,25,,,,,,,,25,32,32,32,25,,32,32,,,,,',
'65,,65,,65,65,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,,,,,,,32,32,,,,,,25,,32,,,,,25,25,32,',
'32,,32,32,,,,9,,,,,,,25,,,,,,25,,25,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,',
',,9,,,,,,65,,,,,,9,,,,,,,52,,52,,,,,,52,,,,,,,,52,,,,,,,,,,,9,9,,,9',
',,,,,,,52,,,52,,,,,32,,,,,,,,,,,,,,,,,52,,,,,65,9,65,,65,,,,,,,,,,,',
'32,,32,32,32,,,,,,,,,,,,,,,,,,,65,,,65,,,,,,,,,,52,,,,65,52,52,,32,',
'32,,32,9,,,,52,,,9,9,,,,,,32,52,,,,,,,,32,32,9,,,,,,9,,,32,,65,32,,',
'65,65,,,,,,,,,,32,32,,,,,,,,,,32,,,,,,,,,,,,,,65,52,,,,,52,,,,,,,,,',
'52,,,,32,32,65,,32,32,32,32,,,,32,32,,,32,32,,,,,,,,,,,65,,,,,,,,,,',
'52,,32,,,,52,,,,,,,,,,,,52,,,,,,32,,,,,,,,,,,,,,,,,,,,,65,,,,32,,,52',
'52,,,52,,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,,,,,52,,,,52,,,,,,32,',
'32,,,,,,,,65,,,,,,32,32,32,32,,32,,,,,,,65,,,,,,,,,,,,,,,,,65,,,,,,',
',,52,,,,,,,52,52,,,,,,,,32,,,,,,,,,52,,,,,,52,,52,32,,,,,,,,,,,,,,,',
',32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,32' ]
        racc_goto_check = arr = ::Array.new(2533, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   263,     6,   nil,    73,   113,    41,    15,  -294,  1130,
  -498,  -573,  -652,   nil,  -364,    31,   127,   -18,  -188,    77,
    77,   760,     3,  -204,  -354,   911,   575,  -161,   -52,    32,
    34,   -19,  1561,   -19,   nil,   nil,    -3,  -170,    80,  -154,
  -338,   355,  -318,   nil,   103,    59,    32,   -43,   nil,    18,
    34,  -227,  1423,   543,  -278,    86,   -66,    16,   nil,   nil,
     5,    42,  -239,    12,    -6,  1501,   102,   -57,   -12,  -249,
    82,    78,  -312,  -263,  -428,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    94,   106,   -60,   nil,  -169,  -282,
  -645,  -419,  -334,   100,   nil,  -190,   106,   nil,  -525,   100,
   115,   116,  -347,   119,   118,   116,  -507,   118,  -504,  -358,
  -704,  -361,  -515,  -168,  -175,  -361,  -623,  -805,   216,  -603,
  -791,  -405,   nil,   147,  -453,   194,   326,  -404,  -532,  -584,
  -444,   nil,  -528,  -626,  -751,  -759,  -309,  -563,  -109,  -424,
  -454,   -18,  -633,  -632,   -23,   nil,   -32,   -30,  -652,  -407,
  -540,   nil,   nil,   165,   164,    55,   175,     7,  -234,  -195,
   180,   184,   185,  -291,  -289,  -277,  -416,   nil,   nil,   152,
  -514,  -711,  -529,  -507,  -553,   nil,  -737,  -755,   nil,   nil,
  -414 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   344,   292,   nil,   520,
   nil,   812,   nil,   289,   290,   nil,   nil,   nil,    11,    12,
    18,   228,   320,   nil,   nil,   226,   227,   nil,   nil,    17,
   nil,   439,    21,    22,    23,    24,   nil,   642,   nil,   nil,
   nil,   309,   nil,    25,   410,    32,   nil,   nil,    34,    37,
    36,   nil,   223,   224,   356,   nil,   131,   418,   130,   133,
    77,    78,   nil,    92,    46,   282,   nil,   780,   411,   nil,
   412,   423,   597,   485,   280,   266,    47,    48,    49,    50,
    51,    52,    53,    54,    55,   nil,   267,    61,   nil,   nil,
   nil,   nil,   nil,   nil,    69,   nil,   535,    70,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   803,   880,   nil,
   804,   905,   752,   658,   nil,   659,   nil,   nil,   660,   nil,
   662,   613,   nil,   nil,   nil,   668,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   422,   nil,   nil,   nil,   nil,
   nil,    76,    79,    80,   nil,   nil,   nil,   nil,   nil,   569,
   nil,   nil,   nil,   nil,   nil,   nil,   872,   713,   657,   nil,
   661,   672,   674,   675,   764,   678,   679,   765,   682,   685,
   284 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 144, :_reduce_none,
  2, 145, :_reduce_2,
  0, 146, :_reduce_3,
  1, 146, :_reduce_4,
  3, 146, :_reduce_5,
  2, 146, :_reduce_6,
  1, 148, :_reduce_none,
  4, 148, :_reduce_8,
  4, 151, :_reduce_9,
  2, 152, :_reduce_10,
  0, 156, :_reduce_11,
  1, 156, :_reduce_12,
  3, 156, :_reduce_13,
  2, 156, :_reduce_14,
  1, 157, :_reduce_none,
  4, 157, :_reduce_16,
  0, 173, :_reduce_17,
  4, 150, :_reduce_18,
  3, 150, :_reduce_19,
  3, 150, :_reduce_20,
  3, 150, :_reduce_21,
  2, 150, :_reduce_22,
  3, 150, :_reduce_23,
  3, 150, :_reduce_24,
  3, 150, :_reduce_25,
  3, 150, :_reduce_26,
  3, 150, :_reduce_27,
  4, 150, :_reduce_28,
  1, 150, :_reduce_none,
  3, 150, :_reduce_30,
  3, 150, :_reduce_31,
  6, 150, :_reduce_32,
  5, 150, :_reduce_33,
  5, 150, :_reduce_34,
  5, 150, :_reduce_35,
  5, 150, :_reduce_36,
  3, 150, :_reduce_37,
  3, 150, :_reduce_38,
  3, 150, :_reduce_39,
  1, 150, :_reduce_none,
  3, 161, :_reduce_41,
  3, 161, :_reduce_42,
  1, 172, :_reduce_none,
  3, 172, :_reduce_44,
  3, 172, :_reduce_45,
  3, 172, :_reduce_46,
  2, 172, :_reduce_47,
  1, 172, :_reduce_none,
  1, 160, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 177, :_reduce_none,
  4, 177, :_reduce_53,
  0, 185, :_reduce_54,
  5, 182, :_reduce_55,
  1, 184, :_reduce_none,
  2, 176, :_reduce_57,
  3, 176, :_reduce_58,
  4, 176, :_reduce_59,
  5, 176, :_reduce_60,
  4, 176, :_reduce_61,
  5, 176, :_reduce_62,
  2, 176, :_reduce_63,
  2, 176, :_reduce_64,
  2, 176, :_reduce_65,
  2, 176, :_reduce_66,
  2, 176, :_reduce_67,
  1, 162, :_reduce_68,
  3, 162, :_reduce_69,
  1, 189, :_reduce_70,
  3, 189, :_reduce_71,
  1, 188, :_reduce_none,
  2, 188, :_reduce_73,
  3, 188, :_reduce_74,
  5, 188, :_reduce_75,
  2, 188, :_reduce_76,
  4, 188, :_reduce_77,
  2, 188, :_reduce_78,
  4, 188, :_reduce_79,
  1, 188, :_reduce_80,
  3, 188, :_reduce_81,
  1, 192, :_reduce_none,
  3, 192, :_reduce_83,
  2, 191, :_reduce_84,
  3, 191, :_reduce_85,
  1, 194, :_reduce_86,
  3, 194, :_reduce_87,
  1, 193, :_reduce_88,
  1, 193, :_reduce_89,
  4, 193, :_reduce_90,
  3, 193, :_reduce_91,
  3, 193, :_reduce_92,
  3, 193, :_reduce_93,
  3, 193, :_reduce_94,
  2, 193, :_reduce_95,
  1, 193, :_reduce_96,
  1, 169, :_reduce_97,
  1, 169, :_reduce_98,
  4, 169, :_reduce_99,
  3, 169, :_reduce_100,
  3, 169, :_reduce_101,
  3, 169, :_reduce_102,
  3, 169, :_reduce_103,
  2, 169, :_reduce_104,
  1, 169, :_reduce_105,
  1, 197, :_reduce_106,
  1, 197, :_reduce_none,
  2, 198, :_reduce_108,
  1, 198, :_reduce_109,
  3, 198, :_reduce_110,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 202, :_reduce_116,
  1, 202, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 159, :_reduce_120,
  0, 205, :_reduce_121,
  4, 159, :_reduce_122,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  3, 175, :_reduce_194,
  5, 175, :_reduce_195,
  3, 175, :_reduce_196,
  5, 175, :_reduce_197,
  6, 175, :_reduce_198,
  5, 175, :_reduce_199,
  5, 175, :_reduce_200,
  5, 175, :_reduce_201,
  5, 175, :_reduce_202,
  4, 175, :_reduce_203,
  3, 175, :_reduce_204,
  3, 175, :_reduce_205,
  3, 175, :_reduce_206,
  3, 175, :_reduce_207,
  3, 175, :_reduce_208,
  3, 175, :_reduce_209,
  3, 175, :_reduce_210,
  3, 175, :_reduce_211,
  3, 175, :_reduce_212,
  4, 175, :_reduce_213,
  2, 175, :_reduce_214,
  2, 175, :_reduce_215,
  3, 175, :_reduce_216,
  3, 175, :_reduce_217,
  3, 175, :_reduce_218,
  3, 175, :_reduce_219,
  3, 175, :_reduce_220,
  3, 175, :_reduce_221,
  3, 175, :_reduce_222,
  3, 175, :_reduce_223,
  3, 175, :_reduce_224,
  3, 175, :_reduce_225,
  3, 175, :_reduce_226,
  3, 175, :_reduce_227,
  3, 175, :_reduce_228,
  2, 175, :_reduce_229,
  2, 175, :_reduce_230,
  3, 175, :_reduce_231,
  3, 175, :_reduce_232,
  3, 175, :_reduce_233,
  3, 175, :_reduce_234,
  3, 175, :_reduce_235,
  6, 175, :_reduce_236,
  1, 175, :_reduce_none,
  1, 208, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_241,
  2, 209, :_reduce_242,
  3, 214, :_reduce_243,
  0, 215, :_reduce_244,
  1, 215, :_reduce_none,
  0, 166, :_reduce_246,
  1, 166, :_reduce_none,
  2, 166, :_reduce_none,
  4, 166, :_reduce_249,
  2, 166, :_reduce_250,
  1, 187, :_reduce_251,
  2, 187, :_reduce_252,
  2, 187, :_reduce_253,
  4, 187, :_reduce_254,
  1, 187, :_reduce_255,
  0, 218, :_reduce_256,
  2, 181, :_reduce_257,
  2, 217, :_reduce_258,
  2, 216, :_reduce_259,
  0, 216, :_reduce_260,
  1, 211, :_reduce_261,
  2, 211, :_reduce_262,
  3, 211, :_reduce_263,
  4, 211, :_reduce_264,
  1, 171, :_reduce_265,
  1, 171, :_reduce_none,
  3, 170, :_reduce_267,
  4, 170, :_reduce_268,
  2, 170, :_reduce_269,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_280,
  0, 243, :_reduce_281,
  4, 207, :_reduce_282,
  0, 244, :_reduce_283,
  0, 245, :_reduce_284,
  6, 207, :_reduce_285,
  0, 246, :_reduce_286,
  4, 207, :_reduce_287,
  3, 207, :_reduce_288,
  3, 207, :_reduce_289,
  2, 207, :_reduce_290,
  3, 207, :_reduce_291,
  3, 207, :_reduce_292,
  1, 207, :_reduce_293,
  4, 207, :_reduce_294,
  3, 207, :_reduce_295,
  1, 207, :_reduce_296,
  5, 207, :_reduce_297,
  4, 207, :_reduce_298,
  3, 207, :_reduce_299,
  2, 207, :_reduce_300,
  1, 207, :_reduce_none,
  2, 207, :_reduce_302,
  0, 247, :_reduce_303,
  3, 207, :_reduce_304,
  6, 207, :_reduce_305,
  6, 207, :_reduce_306,
  0, 248, :_reduce_307,
  0, 249, :_reduce_308,
  7, 207, :_reduce_309,
  0, 250, :_reduce_310,
  0, 251, :_reduce_311,
  7, 207, :_reduce_312,
  5, 207, :_reduce_313,
  4, 207, :_reduce_314,
  0, 252, :_reduce_315,
  0, 253, :_reduce_316,
  9, 207, :_reduce_317,
  0, 254, :_reduce_318,
  6, 207, :_reduce_319,
  0, 255, :_reduce_320,
  7, 207, :_reduce_321,
  0, 256, :_reduce_322,
  5, 207, :_reduce_323,
  0, 257, :_reduce_324,
  6, 207, :_reduce_325,
  0, 258, :_reduce_326,
  0, 259, :_reduce_327,
  9, 207, :_reduce_328,
  1, 207, :_reduce_329,
  1, 207, :_reduce_330,
  1, 207, :_reduce_331,
  1, 207, :_reduce_332,
  1, 165, :_reduce_none,
  1, 237, :_reduce_334,
  1, 240, :_reduce_335,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_338,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 233, :_reduce_none,
  5, 233, :_reduce_342,
  1, 154, :_reduce_none,
  2, 154, :_reduce_344,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 260, :_reduce_347,
  3, 260, :_reduce_348,
  1, 263, :_reduce_349,
  3, 263, :_reduce_350,
  1, 262, :_reduce_none,
  4, 262, :_reduce_352,
  6, 262, :_reduce_353,
  3, 262, :_reduce_354,
  5, 262, :_reduce_355,
  2, 262, :_reduce_356,
  4, 262, :_reduce_357,
  1, 262, :_reduce_358,
  3, 262, :_reduce_359,
  4, 264, :_reduce_360,
  2, 264, :_reduce_361,
  2, 264, :_reduce_362,
  1, 264, :_reduce_363,
  2, 269, :_reduce_364,
  0, 269, :_reduce_365,
  6, 270, :_reduce_366,
  8, 270, :_reduce_367,
  4, 270, :_reduce_368,
  6, 270, :_reduce_369,
  4, 270, :_reduce_370,
  2, 270, :_reduce_none,
  6, 270, :_reduce_372,
  2, 270, :_reduce_373,
  4, 270, :_reduce_374,
  6, 270, :_reduce_375,
  2, 270, :_reduce_376,
  4, 270, :_reduce_377,
  2, 270, :_reduce_378,
  4, 270, :_reduce_379,
  1, 270, :_reduce_none,
  0, 183, :_reduce_381,
  1, 183, :_reduce_382,
  3, 274, :_reduce_383,
  1, 274, :_reduce_384,
  4, 274, :_reduce_385,
  1, 275, :_reduce_386,
  4, 275, :_reduce_387,
  1, 276, :_reduce_388,
  3, 276, :_reduce_389,
  1, 277, :_reduce_390,
  1, 277, :_reduce_none,
  0, 281, :_reduce_392,
  0, 282, :_reduce_393,
  4, 231, :_reduce_394,
  4, 279, :_reduce_395,
  1, 279, :_reduce_396,
  0, 285, :_reduce_397,
  4, 280, :_reduce_398,
  0, 286, :_reduce_399,
  4, 280, :_reduce_400,
  0, 287, :_reduce_401,
  5, 284, :_reduce_402,
  2, 178, :_reduce_403,
  4, 178, :_reduce_404,
  5, 178, :_reduce_405,
  5, 178, :_reduce_406,
  2, 230, :_reduce_407,
  4, 230, :_reduce_408,
  4, 230, :_reduce_409,
  3, 230, :_reduce_410,
  3, 230, :_reduce_411,
  3, 230, :_reduce_412,
  2, 230, :_reduce_413,
  1, 230, :_reduce_414,
  4, 230, :_reduce_415,
  0, 289, :_reduce_416,
  5, 229, :_reduce_417,
  0, 290, :_reduce_418,
  5, 229, :_reduce_419,
  5, 235, :_reduce_420,
  1, 291, :_reduce_421,
  1, 291, :_reduce_none,
  6, 153, :_reduce_423,
  0, 153, :_reduce_424,
  1, 292, :_reduce_425,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 293, :_reduce_428,
  1, 293, :_reduce_none,
  2, 155, :_reduce_430,
  1, 155, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 220, :_reduce_435,
  1, 295, :_reduce_436,
  2, 295, :_reduce_437,
  3, 296, :_reduce_438,
  1, 296, :_reduce_439,
  1, 296, :_reduce_440,
  3, 221, :_reduce_441,
  4, 222, :_reduce_442,
  3, 223, :_reduce_443,
  0, 300, :_reduce_444,
  3, 300, :_reduce_445,
  1, 301, :_reduce_446,
  2, 301, :_reduce_447,
  3, 225, :_reduce_448,
  0, 303, :_reduce_449,
  3, 303, :_reduce_450,
  3, 224, :_reduce_451,
  3, 226, :_reduce_452,
  0, 304, :_reduce_453,
  3, 304, :_reduce_454,
  0, 305, :_reduce_455,
  3, 305, :_reduce_456,
  0, 297, :_reduce_457,
  2, 297, :_reduce_458,
  0, 298, :_reduce_459,
  2, 298, :_reduce_460,
  0, 299, :_reduce_461,
  2, 299, :_reduce_462,
  1, 302, :_reduce_463,
  2, 302, :_reduce_464,
  0, 307, :_reduce_465,
  4, 302, :_reduce_466,
  1, 306, :_reduce_467,
  1, 306, :_reduce_468,
  1, 306, :_reduce_469,
  1, 306, :_reduce_none,
  1, 203, :_reduce_471,
  3, 204, :_reduce_472,
  1, 294, :_reduce_473,
  2, 294, :_reduce_474,
  1, 206, :_reduce_475,
  1, 206, :_reduce_476,
  1, 206, :_reduce_477,
  1, 206, :_reduce_478,
  1, 195, :_reduce_479,
  1, 195, :_reduce_480,
  1, 195, :_reduce_481,
  1, 195, :_reduce_482,
  1, 195, :_reduce_483,
  1, 196, :_reduce_484,
  1, 196, :_reduce_485,
  1, 196, :_reduce_486,
  1, 196, :_reduce_487,
  1, 196, :_reduce_488,
  1, 196, :_reduce_489,
  1, 196, :_reduce_490,
  1, 227, :_reduce_491,
  1, 227, :_reduce_492,
  1, 164, :_reduce_493,
  1, 164, :_reduce_494,
  1, 168, :_reduce_495,
  1, 168, :_reduce_496,
  1, 238, :_reduce_497,
  0, 308, :_reduce_498,
  4, 238, :_reduce_499,
  2, 238, :_reduce_500,
  3, 241, :_reduce_501,
  0, 310, :_reduce_502,
  3, 241, :_reduce_503,
  4, 309, :_reduce_504,
  2, 309, :_reduce_505,
  2, 309, :_reduce_506,
  1, 309, :_reduce_507,
  2, 312, :_reduce_508,
  0, 312, :_reduce_509,
  6, 283, :_reduce_510,
  8, 283, :_reduce_511,
  4, 283, :_reduce_512,
  6, 283, :_reduce_513,
  4, 283, :_reduce_514,
  6, 283, :_reduce_515,
  2, 283, :_reduce_516,
  4, 283, :_reduce_517,
  6, 283, :_reduce_518,
  2, 283, :_reduce_519,
  4, 283, :_reduce_520,
  2, 283, :_reduce_521,
  4, 283, :_reduce_522,
  1, 283, :_reduce_523,
  0, 283, :_reduce_524,
  1, 278, :_reduce_525,
  1, 278, :_reduce_526,
  1, 278, :_reduce_527,
  1, 278, :_reduce_528,
  1, 261, :_reduce_none,
  1, 261, :_reduce_530,
  1, 314, :_reduce_531,
  3, 314, :_reduce_532,
  1, 271, :_reduce_533,
  3, 271, :_reduce_534,
  1, 315, :_reduce_535,
  2, 316, :_reduce_536,
  1, 316, :_reduce_537,
  2, 317, :_reduce_538,
  1, 317, :_reduce_539,
  1, 265, :_reduce_540,
  3, 265, :_reduce_541,
  1, 311, :_reduce_542,
  3, 311, :_reduce_543,
  1, 318, :_reduce_none,
  1, 318, :_reduce_none,
  2, 266, :_reduce_546,
  1, 266, :_reduce_547,
  3, 319, :_reduce_548,
  3, 320, :_reduce_549,
  1, 272, :_reduce_550,
  3, 272, :_reduce_551,
  1, 313, :_reduce_552,
  3, 313, :_reduce_553,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  2, 273, :_reduce_556,
  1, 273, :_reduce_557,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  2, 268, :_reduce_560,
  2, 267, :_reduce_561,
  0, 267, :_reduce_562,
  1, 242, :_reduce_none,
  3, 242, :_reduce_564,
  0, 228, :_reduce_565,
  2, 228, :_reduce_none,
  1, 213, :_reduce_567,
  3, 213, :_reduce_568,
  3, 323, :_reduce_569,
  2, 323, :_reduce_570,
  2, 323, :_reduce_571,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 174, :_reduce_none,
  1, 174, :_reduce_none,
  2, 190, :_reduce_588,
  2, 167, :_reduce_589,
  0, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 239, :_reduce_593,
  1, 239, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_none,
  0, 210, :_reduce_597 ]

racc_reduce_n = 598

racc_shift_n = 1022

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tEQL => 141,
  :tLOWEST => 142 }

racc_nt_base = 143

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@22",
  "@23",
  "f_args",
  "do_block",
  "@24",
  "@25",
  "@26",
  "operation3",
  "@27",
  "@28",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@29",
  "@30",
  "args_tail",
  "@31",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_58(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_121(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_122(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

def _reduce_194(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      result = []
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_254(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_255(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_257(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_304(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_314(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_318(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_319(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_320(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_321(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_322(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_323(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_324(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_335(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = val
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = []
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_382(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = []
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_390(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_394(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_395(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_399(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_401(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_403(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_416(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_418(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = []
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 426 omitted

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_436(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_441(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_442(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = []
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = []
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = []
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = []
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_466(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_474(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_499(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_500(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_503(val, _values, result)
                      @context.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = []
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      result = []
                    
    result
end

def _reduce_525(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_526(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_535(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 544 omitted

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 558 omitted

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_561(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = []
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = []
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

def _reduce_597(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby21
  end   # module Parser
