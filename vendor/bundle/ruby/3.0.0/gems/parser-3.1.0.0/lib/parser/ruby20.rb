# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby20 < Parser::Base


  def version
    20
  end

  def default_encoding
    Encoding::UTF_8
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-476,5,74,75,71,9,57,-476,-476,-476,63,64,-476,-476,-476,67,-476,65',
'66,68,30,31,72,73,-476,267,-476,-476,-476,29,28,27,100,99,101,102,-476',
'-476,19,-476,-476,-476,-476,-476,8,45,7,10,104,103,105,94,56,96,95,97',
'962,98,106,107,556,92,93,42,43,41,-476,-476,-476,-476,-476,-476,-476',
'-476,-476,-476,-476,-476,-476,-476,108,690,-476,-476,-476,40,-476,-476',
'33,-100,-476,58,59,-476,-476,60,-476,35,-476,267,-476,44,-476,-476,216',
'-476,-476,-476,-476,-476,20,-476,266,-476,-98,91,81,84,85,614,86,88',
'87,89,-286,745,-101,-476,82,90,-476,-476,-476,-476,-572,-476,62,-476',
'83,-476,-103,-572,-572,-572,690,217,-572,-572,-572,577,-572,-99,614',
'-106,613,120,-102,213,214,-572,-572,-572,-572,-105,-286,535,555,-100',
'535,535,-572,-572,579,-572,-572,-572,-572,-572,-101,535,535,259,213',
'214,789,112,266,613,260,112,111,-101,525,205,111,527,614,690,-91,512',
'-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572,-572',
'-103,576,-572,-572,-572,206,747,-572,614,-89,-572,213,214,-572,-572',
'207,-572,613,-572,-568,-572,267,-572,-572,578,-572,-572,-572,-572,-572',
'-101,-572,-572,-572,112,-101,-94,112,-105,111,-92,212,111,613,-103,441',
'-90,-572,-97,-103,-572,-572,-572,-572,-289,-572,256,-572,-96,-102,-102',
'-289,-289,-289,-491,-102,-289,-289,-289,112,-289,-100,112,112,111,820',
'-100,111,111,788,-289,-289,-289,112,112,262,-92,112,111,111,-289,-289',
'111,-289,-289,-289,-289,-289,-106,-102,314,-104,-94,209,564,217,-92',
'267,266,-94,210,213,214,213,214,525,315,-99,524,208,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,217,564,-289,-289',
'-289,-490,748,-289,-94,384,-289,-94,-92,-289,-289,-92,-289,-94,-289',
'564,-289,-92,-289,-289,746,-289,-289,-289,-289,-289,-568,-289,-569,-289',
'566,565,807,262,666,665,664,780,667,541,722,564,838,-289,-565,564,-289',
'-289,-289,-289,-572,-289,397,-289,-98,-104,266,-572,-572,-572,440,566',
'565,-572,-572,237,-572,217,-84,217,-93,724,-95,-103,-70,-572,-485,-479',
'-566,566,565,567,81,-485,-479,442,-572,-572,731,-572,-572,-572,-572',
'-572,82,-100,-476,234,507,508,443,236,235,-476,83,566,565,562,-565,566',
'565,575,-476,216,885,474,-572,-572,-572,-572,-572,-572,-572,-572,-572',
'-572,-572,-572,-572,-572,-479,-565,-572,-572,-572,-91,598,-479,-476',
'512,-572,-100,-566,-572,564,-476,-479,483,-572,485,-572,564,-572,-572',
'-572,-572,-572,-572,-572,-572,-289,-572,-572,-572,487,-566,547,-289',
'-289,-289,548,551,-490,-289,-289,237,-289,-572,917,525,-572,-572,527',
'-93,-481,-572,-96,552,-414,-102,112,-481,-105,-572,494,111,-289,-289',
'515,-289,-289,-289,-289,-289,-69,516,-572,234,566,565,580,236,235,-572',
'439,566,565,571,-568,-89,217,525,-572,966,527,-98,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-414,-572,-289,-289',
'-289,-572,597,-414,217,112,-289,497,-572,-289,111,211,-414,-568,-289',
'564,-289,-572,-289,-289,498,-289,-289,-289,-289,-289,-479,-289,505,-289',
'-491,-414,271,-479,-479,-479,-572,592,-479,-479,-479,-489,-479,-289',
'213,214,-289,-289,-489,-95,-479,-289,-479,-479,-479,-104,112,-489,-97',
'815,780,111,-479,-479,-106,-479,-479,-479,-479,-479,807,-482,666,665',
'664,-289,667,-90,-482,566,565,569,-289,-99,-92,683,682,-569,217,593',
'-101,-289,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479',
'-479,-479,262,762,-479,-479,-479,-290,-479,-479,437,509,-479,675,-290',
'-479,-479,438,-479,513,-479,514,-479,-290,-479,-479,439,-479,-479,-479',
'-479,-479,-94,-479,-489,-479,-487,-486,-103,237,112,-489,217,-487,-486',
'111,683,682,981,-479,-489,676,-479,-479,-479,-479,-574,-479,528,-479',
'259,-479,529,-574,-574,-574,673,260,-574,-574,-574,807,-574,666,665',
'664,675,667,-488,237,-483,-574,-574,-574,-574,-488,112,-483,815,780',
'487,111,-574,-574,-488,-574,-574,-574,-574,-574,-484,112,213,214,541',
'237,111,-484,803,683,682,234,316,317,676,236,235,806,232,233,386,545',
'-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574,-574',
'546,234,-574,-574,-574,236,235,-574,232,233,-574,581,584,-574,-574,-263',
'-574,586,-574,217,-574,590,-574,-574,591,-574,-574,-574,-574,-574,543',
'-574,-574,-574,262,601,807,544,666,665,664,604,667,237,237,237,542,-574',
'237,551,-574,-574,-574,-574,217,-574,550,-574,5,74,75,71,9,57,394,552',
'217,63,64,396,395,217,67,803,65,66,68,30,31,72,73,-84,943,632,217,518',
'29,28,27,100,99,101,102,643,807,19,666,665,664,649,667,8,45,7,10,104',
'103,105,94,56,96,95,97,650,98,106,107,551,92,93,42,43,41,807,917,666',
'665,664,652,667,-290,803,807,552,666,665,664,-290,667,686,806,541,40',
'-279,693,33,-290,721,58,59,-279,725,60,726,35,-264,732,474,44,-279,803',
'474,807,217,666,665,664,20,667,803,750,256,91,81,84,85,485,86,88,87',
'89,487,773,643,217,82,90,288,74,75,71,9,57,62,262,83,63,64,262,803,643',
'67,237,65,66,68,30,31,72,73,115,116,117,118,119,29,28,27,100,99,101',
'102,237,807,19,666,665,664,780,667,8,45,290,10,104,103,105,94,56,96',
'95,97,217,98,106,107,791,92,93,42,43,41,237,807,-289,666,665,664,794',
'667,803,-289,795,797,799,801,-569,810,251,252,-289,40,811,812,33,780',
'819,58,59,217,217,60,828,35,234,-265,240,44,236,235,803,232,233,837',
'840,238,20,239,794,843,845,91,81,84,85,847,86,88,87,89,849,217,851,852',
'82,90,288,74,75,71,9,57,62,855,83,63,64,857,858,643,67,860,65,66,68',
'30,31,72,73,115,116,117,118,119,29,28,27,100,99,101,102,-263,914,19',
'666,665,664,864,667,8,45,290,10,104,103,105,94,56,96,95,97,866,98,106',
'107,217,92,93,42,43,41,237,-591,-591,-591,-591,243,245,-488,-289,-591',
'-591,971,883,217,-488,-289,251,252,972,40,-569,887,33,-488,-289,58,59',
'970,889,60,895,35,234,898,240,44,236,235,217,232,233,244,242,238,20',
'239,901,-266,911,91,81,84,85,918,86,88,87,89,919,930,794,932,82,90,288',
'74,75,71,9,57,62,934,83,63,64,936,938,938,67,217,65,66,68,30,31,72,73',
'115,116,117,118,119,29,28,27,100,99,101,102,716,717,19,944,718,106,107',
'947,8,45,290,10,104,103,105,94,56,96,95,97,948,98,106,107,953,92,93',
'42,43,41,237,241,246,247,248,243,245,253,254,249,250,-279,-591,-591',
'-333,794,251,252,-279,40,956,-333,33,958,960,58,59,-279,962,60,-333',
'35,234,962,240,44,236,235,973,232,233,244,242,238,20,239,974,975,983',
'91,81,84,85,-569,86,88,87,89,-568,649,998,938,82,90,288,74,75,71,9,57',
'62,938,83,63,64,938,1003,983,67,1006,65,66,68,30,31,72,73,1007,1008',
'962,962,962,29,28,27,100,99,101,102,217,914,19,666,665,664,983,667,8',
'45,290,10,104,103,105,94,56,96,95,97,938,98,106,107,983,92,93,42,43',
'41,237,241,246,247,248,243,245,253,-290,249,250,503,,,,-290,251,252',
'504,40,,,33,,-290,58,59,502,,60,,35,234,,240,44,236,235,,232,233,244',
'242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9',
'57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101',
'102,,,19,,,,,602,8,45,290,10,104,103,105,94,56,96,95,97,,98,106,107',
',92,93,42,43,41,237,241,246,247,248,243,245,253,254,249,250,,230,231',
',,251,252,,40,,,33,,,58,59,,,60,,35,234,,240,44,236,235,,232,233,244',
'242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,255,-280,-240',
',,62,,83,-280,-280,-280,,,-280,-280,-280,237,-280,,,,,,,,,,-280,-280',
'-280,,,251,252,,,,-280,-280,,-280,-280,-280,-280,-280,,,,234,,240,,236',
'235,,232,233,,,238,,239,,,,,,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,,,-280,-280,-280,,,-280,,,-280,,,-280',
'-280,,-280,,-280,,-280,,-280,-280,,-280,-280,-280,-280,-280,,-280,,-280',
',,,,,,,,,,,,,-280,,,-280,-280,-280,-280,,-280,,-280,288,74,75,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,',
'19,,,,,,8,45,290,10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,237,241,246,247,248,243,245,,,249,250,,,,,,251,252,,40,,,33,,',
'58,59,,,60,,35,234,,240,44,236,235,,232,233,244,242,238,20,239,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290',
'10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,237,-591,-591',
'-591,-591,243,245,,,-591,-591,,,,,,251,252,,40,,,33,,,58,59,,,60,,35',
'234,,240,44,236,235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105',
'94,56,96,95,97,,98,106,107,,92,93,42,43,41,237,-591,-591,-591,-591,243',
'245,,,-591,-591,,,,,,251,252,,40,,,292,,,58,59,,,60,,35,234,,240,44',
'236,235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,',
'82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,237,241,246,247,248,243,245,253,254',
'249,250,,-591,-591,,,251,252,,40,,,33,,,58,59,,,60,,35,234,,240,44,236',
'235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
'288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105,94,56,96,95,97,',
'98,106,107,,92,93,42,43,41,237,-591,-591,-591,-591,243,245,,,-591,-591',
',,,,,251,252,,40,,,33,,,58,59,,,60,,35,234,,240,44,236,235,,232,233',
'244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71',
'9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101',
'102,,,19,,,,,,8,45,290,10,104,103,105,94,56,96,95,97,,98,106,107,,92',
'93,42,43,41,237,,,,,,,,,,,,,,,,251,252,,40,,,33,,,58,59,,,60,,35,234',
',240,44,236,235,,232,233,,,238,20,239,,,,91,81,84,85,,86,88,87,89,,',
',,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,',
',,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,42,43,41,237,,,,,,,,,,,,,,,,251,252,,40',
',,33,,,58,59,,,60,,35,234,,240,44,236,235,,232,233,,,238,20,239,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290',
'10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,237,-591,-591',
'-591,-591,243,245,,,-591,-591,,,,,,251,252,,40,,,33,,,58,59,,,60,,35',
'234,,240,44,236,235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105',
'94,56,96,95,97,,98,106,107,,92,93,42,43,41,237,-591,-591,-591,-591,243',
'245,,,-591,-591,,,,,,251,252,,40,,,33,,,58,59,,,60,,35,234,,240,44,236',
'235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
'5,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,100,99,101,102,,,19,,,,,,8,45,7,10,104,103,105,94,56,96,95,97,,98',
'106,107,,92,93,42,43,41,237,,,,,,,,,,,,,,,,251,252,,40,,,33,,,58,59',
',,60,,35,234,,240,44,236,235,,232,233,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105,94',
'56,96,95,97,,98,106,107,,92,93,42,43,41,237,,,,,,,,,,,,,,,,251,252,',
'40,,,33,,,58,59,,,60,,35,234,,240,44,236,235,,232,233,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10',
'104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,237,,,,,,,,,',
',,,,,,251,252,,40,,,33,,,58,59,,,60,,35,234,,,44,236,235,,232,233,,',
',20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19',
',,,,,8,45,290,10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45',
'290,10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,',
',,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105,94',
'56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,292',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105,94,56,96,95,97',
',98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,288,74,75',
'71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99',
'101,102,,,19,,,,,,8,45,290,10,104,103,105,94,56,96,95,97,,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62',
',83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,',
',19,,,,,,8,45,290,10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8',
'45,290,10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,',
',,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10',
'104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,',
',,,,,,40,,,292,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,288,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,100,99,101,102,,,19,,,,,602,8,45,290,10,104,103,105,94',
'56,96,95,97,,98,106,107,,92,93,42,43,41,237,241,246,247,248,243,245',
'253,254,249,250,,230,231,,,251,252,,40,,,33,,,58,59,,,60,,35,234,,240',
'44,236,235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,255,-573,,,,62,,83,-573,-573,-573,,,-573,-573,-573,,-573,',
',,,,,,,-573,-573,-573,-573,,,,,,,,-573,-573,,-573,-573,-573,-573,-573',
',,,,,,,,,,,,,,,,,,,,,,-573,-573,-573,-573,-573,-573,-573,-573,-573,-573',
'-573,-573,-573,-573,,,-573,-573,-573,,,-573,,,-573,,,-573,-573,,-573',
',-573,,-573,,-573,-573,,-573,-573,-573,-573,-573,,-573,-573,-573,,,',
',,,,,,,,,,-573,,,-573,-573,-573,-573,,-573,,-573,288,74,75,71,9,57,',
',,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19',
',,,,,8,45,290,10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67',
',65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,',
'45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,',
',,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307',
'308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105',
'94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,',
'228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,',
',,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,',
',,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95',
'97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59',
',,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74',
'75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310',
'100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,',
',,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102',
',,229,,,,,,,305,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,,,311',
',,,,,,,,,,,,,,,,,,,301,,,297,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68',
'307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,',
',,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58',
'59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
'74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,',
',,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102',
',,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,9,57,62,,83,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,,10',
'104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,',
',,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,626,',
',,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57',
'62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103',
'105,94,56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,',
',222,,,228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94',
'56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,',
'228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96',
'95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,280,,278,,44,,,283,,,,,,227,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,',
',,,,303,304,310,100,99,101,102,,,229,,,,,587,,305,,,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,,,311,237,241,246,247,248,243,245,253,254',
'249,250,,230,231,,,251,252,,301,,,228,,,58,59,,,60,,,234,,240,,236,235',
',232,233,244,242,238,,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,255',
',500,,,62,,83,74,75,71,,57,,,,63,64,,,,67,,65,66,68,307,308,72,73,,',
',,,303,304,310,100,99,101,102,,,229,,,,,,,305,,,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,,,311,,,,,,,,,,,,,,,,,,,,301,,,297,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71',
',57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100',
'99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,278,,44',
',,283,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57',
'62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,305,,,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,,,311,,,,,,,,,,,,,,,,,,,,854',
',,228,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303',
'304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,',
'98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60',
',,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71',
',57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,305,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,,,311,,,,,,',
',,,,,,,,,,,,,925,,,228,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94',
'56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228',
',,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,305,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93',
',,311,,,,,,,,,,,,,,,,,,,,301,,,297,,,58,59,,,60,,296,,,,,,,,,,,,,,,',
',,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67',
',65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,',
'305,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,,,311,237,241,246',
'247,248,243,245,253,254,249,250,,230,231,,,251,252,,301,,,228,,,58,59',
',,60,,,234,,240,,236,235,,232,233,244,242,238,,239,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,255,,313,,,62,,83,74,75,71,,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,217,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45,7,10,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59',
',,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74',
'75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100',
'99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,',
'92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,',
',,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229',
',,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,',
',,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104',
'103,105,94,56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,',
',,,,,222,,,228,,,58,59,,,60,,,,278,,44,,,283,,,,,,227,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307',
'308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105',
'94,56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,626,,278,,44,,,283,,,,,,227,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308',
'72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,305,,,104,103,105',
'94,56,96,95,97,,98,106,107,,92,93,,,311,,,,,,,,,,,,,,,,,,,,301,,,297',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
'74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102',
',,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67',
',65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,',
'45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,',
',,,,,,,,,,,222,,,228,,,58,59,,,60,,729,,,,44,,,,,,,,,227,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105',
'94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,',
'228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,',
',82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97,,98',
'106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57',
'62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102',
',,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,402,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,518,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97',
',98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60',
',,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71',
',57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,280,,278,,44,,,283',
',,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229',
',,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107,,92,93,42,43,41',
',,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,280,,,,44,,,,,,,,,227,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,',
',,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58',
'59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
'74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,280,',
'278,,44,,,283,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75',
'71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100',
'99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,',
'283,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,626,,,,44,,,283',
',,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229',
',,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,',
',,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,402,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95',
'97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75',
'71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100',
'99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,',
'92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,',
',,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229',
',,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107,,92,93,42,43,41',
',,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45',
',,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,',
',,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308',
'72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94',
'56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228',
',,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,',
'83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102',
',,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,283,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72',
'73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,',
',,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58',
'59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
'74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72',
'73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72',
'73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72',
'73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45',
',,104,103,105,94,56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,',
',,,,,,,,,,,222,,,228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104',
'103,105,94,56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,',
',,,,,222,,,228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103,105',
'94,56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,217,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307',
'308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,305,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,,,311,,,,,,,,,,,,,,,,,,,,854,',
',228,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303',
'304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,',
'98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60',
',,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71',
',57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100',
'99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,',
'92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,',
',,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102',
',,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67',
',65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,',
'45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,',
',,,,,,,,,,,222,,,228,,,58,59,,,60,,402,,,,44,,,,,,,,,227,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68',
'307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,',
',,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58',
'59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
'74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19',
',,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,',
',,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103',
'105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222',
',,228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,74,75,71,9,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,100,99,101,102,,,19,,,,,,8,45,290,10,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,237,241,246,247,248,243,245,253,254',
'249,250,,230,231,,,251,252,,40,,,33,,,58,59,,,60,,35,234,,240,44,236',
'235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',255,,,,386,62,,83,74,75,71,,57,,,,63,64,,,,67,,65,66,68,307,308,72',
'73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56',
'96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98',
'106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,',
',278,,44,,,283,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75',
'71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100',
'99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,626,,278',
',44,,,283,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71',
',57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101',
'102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,20,',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,',
'67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,',
',,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,',
',,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105',
'94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,',
'228,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,',
',82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97,,98',
'106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,9',
'57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101',
'102,,,19,,,,,,8,45,7,10,104,103,105,94,56,96,95,97,,98,106,107,,92,93',
'42,43,41,237,241,246,247,248,243,245,253,254,249,250,,230,231,,,251',
'252,,40,,,33,,,58,59,,,60,,35,234,,240,44,236,235,,232,233,244,242,238',
'20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,255,,,,386,62,,83,74,75',
'71,,57,,,,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99',
'101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,282,98,106,107,',
'92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,280,,,,44',
',,283,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57',
'62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96',
'95,97,282,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,',
'58,59,,,60,,280,,278,,44,,,283,,,,,,227,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97',
',98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60',
',,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71',
',57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100',
'99,101,102,,,229,,,,,,,305,,,104,103,105,351,56,96,95,352,,98,106,107',
',92,93,,,311,,,,,,,,,,,,,,,,,,,,353,,,228,,,58,59,,,60,,,,,,,,,,,,,',
',,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64',
',,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229',
',,,,,,305,,,104,103,105,351,56,96,95,352,,98,106,107,,92,93,,,311,,',
',,,,,,,,,,,,,,358,,,353,,,228,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66',
'68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,,,,,,305,,,104',
'103,105,94,56,96,95,97,,98,106,107,,92,93,,,311,,,,,,,,,,,,,,,,,,,,346',
',,33,,,58,59,,,60,,35,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,',
'82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94,56,96,95,97,,98',
'106,107,,92,93,42,43,41,237,241,246,247,248,243,245,253,254,249,250',
',230,231,,,251,252,,222,,,228,,,58,59,,,60,,,234,,240,44,236,235,,232',
'233,244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,,,,,82,90,112,255',
',,,111,62,,83,74,75,71,,57,,,,63,64,,,,67,,65,66,68,307,308,72,73,,',
',,,303,304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96',
'95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58',
'59,,,60,,,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
'74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304',
'310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106',
'107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44',
',,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62',
',83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101',
'102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,,,,,44,,,,,,,,,227',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,',
',67,,65,66,68,307,308,72,73,,,,,,303,304,310,100,99,101,102,,,229,,',
',,,,305,,,104,103,105,94,56,96,95,97,,98,106,107,,92,93,,,311,,,,,,',
',,,,,,,,,,,,,301,,,297,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94',
'56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303',
'304,310,100,99,101,102,,,229,,,,,,,45,,,104,103,105,94,56,96,95,97,',
'98,106,107,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,222,,,228,,,58,59,,,60',
',,,,,44,,,,,,,,,227,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71',
',57,62,,83,63,64,,,,67,,65,66,68,307,308,72,73,,,,,,303,304,310,100',
'99,101,102,,,229,,,,,,,305,,,104,103,105,94,56,96,95,97,,98,106,107',
',92,93,,,311,,,,,,,,,,,,,,,,,,,,301,,,297,,,58,59,,,60,,,,,,,,,,,,,',
',,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,229,,,,,',
',45,,,104,103,105,94,56,96,95,97,282,98,106,107,,92,93,42,43,41,,,,',
',,,,,,,,,,,,,,,222,,,228,,,58,59,,,60,,280,,278,,44,,,283,,,,,,227,',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,74,75,71,9,57,62,,83,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,8,45',
',10,104,103,105,94,56,96,95,97,,98,106,107,,92,93,42,43,41,,,,,,,,,',
',,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,74,75,71,,57,62,,83,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,100,99,101,102,,,19,,,,,,,45,,,104,103,105,94',
'56,96,95,97,,98,106,107,,92,93,42,43,41,237,241,246,247,248,243,245',
'253,254,249,250,,230,231,,,251,252,,222,,,228,,,58,59,,,60,,,234,,240',
'44,236,235,,232,233,244,242,238,20,239,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,255,-246,,,,62,,83,-246,-246,-246,,,-246,-246,-246,761,-246',
'666,665,664,762,667,,,,-246,-246,,,,675,,,,,,-246,-246,,-246,-246,-246',
'-246,-246,,,,,,,,,671,,,,,,,,,680,679,683,682,,,,676,,,,,,,,,-246,,-246',
',,,,-246,,-246,-246,-246,262,-246,-246,-246,-246,217,-246,,,,,,,,,-246',
'-246,-246,,,,,,-246,-246,,-246,-246,,-246,-246,-246,-246,-246,,,,,-246',
',,-246,,,,,-246,,,,,,,,,,-246,-246,-246,-246,-246,-246,-246,-246,-246',
'-246,-246,-246,-246,-246,,,-246,-246,-246,,,-246,,262,-246,,,-246,-246',
',-246,,-246,,-246,,-246,-246,,-246,-246,-246,-246,-246,,-246,-246,-246',
',,,,,,,,,,,,,-246,,-413,-246,-246,,-246,,-246,-413,-413,-413,,,-413',
'-413,-413,,-413,,,,,,,,,-413,-413,-413,,,,,,,,,-413,-413,,-413,-413',
'-413,-413,-413,,,,,,,,,,,,,,,,,,,,,,,-413,-413,-413,-413,-413,-413,-413',
'-413,-413,-413,-413,-413,-413,-413,,,-413,-413,-413,,,-413,,262,-413',
',,-413,-413,,-413,,-413,,-413,,-413,-413,,-413,-413,-413,-413,-413,-296',
'-413,-413,-413,,,,-296,-296,-296,,,-296,-296,-296,,-296,-413,,,-413',
'-413,,-413,,-413,-296,-296,,,,,,,,,-296,-296,,-296,-296,-296,-296,-296',
',,,,,,,,,,,,,,,,,,,,,,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,,,-296,-296,-296,,,-296,,271,-296,,,-296,-296,,-296',
',-296,,-296,,-296,-296,,-296,-296,-296,-296,-296,,-296,,-296,,,,,,,',
',,,,,,-296,,,-296,-296,,-296,,-296,172,183,173,196,169,189,179,178,199',
'200,194,177,176,171,197,201,202,181,170,184,188,190,182,175,,,,191,198',
'193,192,185,195,180,168,187,186,,,,,,167,174,165,166,162,163,164,123',
'125,,,124,,,,,,,,156,157,,153,135,136,137,144,141,143,,,138,139,,,,158',
'159,145,146,,,,,,,,,,,,,,150,149,,134,155,152,151,160,147,148,142,140',
'132,154,133,,,161,91,,,,,,,,,,,,,,90,172,183,173,196,169,189,179,178',
'199,200,194,177,176,171,197,201,202,181,170,184,188,190,182,175,,,,191',
'198,193,192,185,195,180,168,187,186,,,,,,167,174,165,166,162,163,164',
'123,125,122,,124,,,,,,,,156,157,,153,135,136,137,144,141,143,,,138,139',
',,,158,159,145,146,,,,,,,,,,,,,,150,149,,134,155,152,151,160,147,148',
'142,140,132,154,133,,,161,91,,,,,,,,,,,,,,90,172,183,173,196,169,189',
'179,178,199,200,194,177,176,171,197,201,202,181,170,184,188,190,182',
'175,,,,191,198,193,192,185,195,180,168,187,186,,,,,,167,174,165,166',
'162,163,164,123,125,,,124,,,,,,,,156,157,,153,135,136,137,144,141,143',
',,138,139,,,,158,159,145,146,,,,,,,,,,,,,,150,149,,134,155,152,151,160',
'147,148,142,140,132,154,133,,,161,91,,,,,,,,,,,,,,90,172,183,173,196',
'169,189,179,178,199,200,194,177,176,171,197,201,202,181,170,184,188',
'190,182,175,,,,191,198,193,192,185,195,180,168,187,186,,,,,,167,174',
'165,166,162,163,164,123,125,,,124,,,,,,,,156,157,,153,135,136,137,144',
'141,143,,,138,139,,,,158,159,145,146,,,,,,,,,,,,,,150,149,,134,155,152',
'151,160,147,148,142,140,132,154,133,,,161,91,,,,,,,,,,,,,,90,172,183',
'173,196,169,189,179,178,199,200,194,177,176,171,197,201,202,181,170',
'184,188,190,182,175,,,,191,198,193,192,185,195,180,168,187,186,,,,,',
'167,174,165,166,162,163,164,123,125,,,124,,,,,,,,156,157,,153,135,136',
'137,144,141,143,,,138,139,,,,158,159,145,146,,,,,,,,,,,,,,150,149,,134',
'155,152,151,160,147,148,142,140,132,154,133,,,161,172,183,173,196,169',
'189,179,178,199,200,194,177,176,171,197,201,202,181,170,184,188,190',
'182,175,,,,191,198,193,369,368,370,367,168,187,186,,,,,,167,174,165',
'166,364,365,366,362,125,96,95,363,,98,,,,,,156,157,,153,135,136,137',
'144,141,143,,,138,139,,,,158,159,145,146,,,,,,374,,,,,,,,150,149,,134',
'155,152,151,160,147,148,142,140,132,154,133,,,161,237,241,246,247,248',
'243,245,253,254,249,250,,230,231,,,251,252,,,807,,666,665,664,673,667',
',,,,,234,,240,675,236,235,,232,233,244,242,238,,239,237,241,246,247',
'248,243,245,253,254,249,250,671,230,231,,,251,252,,255,,,683,682,,,',
'676,,,,,234,,240,,236,235,,232,233,244,242,238,,239,237,241,246,247',
'248,243,245,253,254,249,250,,230,231,,,251,252,,255,807,,666,665,664',
'762,667,,,,,,234,,240,675,236,235,,232,233,244,242,238,,239,237,241',
'246,247,248,243,245,253,254,249,250,671,230,231,,,251,252,,255,,,683',
'682,,,,676,,,,,234,,240,,236,235,,232,233,244,242,238,,239,237,241,246',
'247,248,243,245,253,254,249,250,,230,231,,,251,252,217,255,807,,666',
'665,664,673,667,,,,,,234,,240,675,236,235,,232,233,244,242,238,,239',
'237,241,246,247,248,243,245,253,254,249,250,671,230,231,,,251,252,,255',
',,683,682,,,,676,,,,,234,,240,,236,235,,232,233,244,242,238,,239,237',
'241,246,247,248,243,245,253,254,249,250,,230,231,,,251,252,,255,669',
',666,665,664,673,667,,,,,,234,,240,675,236,235,,232,233,244,242,238',
',239,237,241,246,247,248,243,245,253,254,249,250,671,230,231,,,251,252',
',255,680,679,683,682,,,,676,,,,,234,,240,,236,235,,232,233,244,242,238',
',239,237,241,246,247,248,243,245,253,254,249,250,,230,231,,,251,252',
',255,,,,,,,,,,,,,234,,240,,236,235,,232,233,244,242,238,,239,,,,,,417',
'421,,,416,,,,,,,,156,157,255,153,135,136,137,144,141,143,,,138,139,',
',,158,159,145,146,,,,,,262,,,,,,,,150,149,,134,155,152,151,160,147,148',
'142,140,132,154,133,639,421,161,,640,,,,,,,,156,157,,153,135,136,137',
'144,141,143,,,138,139,,,,158,159,145,146,,,,,,262,,,,,,,,150,149,,134',
'155,152,151,160,147,148,142,140,132,154,133,605,414,161,,606,,,,,,,',
'156,157,,153,135,136,137,144,141,143,,,138,139,,,,158,159,145,146,,',
',,,262,,,,,,,,150,149,,134,155,152,151,160,147,148,142,140,132,154,133',
'968,421,161,,967,,,,,,,,156,157,,153,135,136,137,144,141,143,,,138,139',
',,,158,159,145,146,,,,,,262,,,,,,,,150,149,,134,155,152,151,160,147',
'148,142,140,132,154,133,636,414,161,,637,,,,,,,,156,157,,153,135,136',
'137,144,141,143,,,138,139,,,,158,159,145,146,,,,,,262,,,,,,,,150,149',
',134,155,152,151,160,147,148,142,140,132,154,133,472,414,161,,473,,',
',,,,,156,157,,153,135,136,137,144,141,143,,,138,139,,,,158,159,145,146',
',,,,,,,,,,,,,150,149,,134,155,152,151,160,147,148,142,140,132,154,133',
'994,414,161,,995,,,,,,,,156,157,,153,135,136,137,144,141,143,,,138,139',
',,,158,159,145,146,,,,,,262,,,,,,,,150,149,,134,155,152,151,160,147',
'148,142,140,132,154,133,607,421,161,,608,,,,,,,,156,157,,153,135,136',
'137,144,141,143,,,138,139,,,,158,159,145,146,,,,,,262,,,,,,,,150,149',
',134,155,152,151,160,147,148,142,140,132,154,133,605,414,161,,606,,',
',,,,,156,157,,153,135,136,137,144,141,143,,,138,139,,,,158,159,145,146',
',,,,,262,,,,,,,,150,149,,134,155,152,151,160,147,148,142,140,132,154',
'133,996,421,161,,997,,,,,,,,156,157,,153,135,136,137,144,141,143,,,138',
'139,,,,158,159,145,146,,,,,,262,,,,,,,,150,149,,134,155,152,151,160',
'147,148,142,140,132,154,133,472,414,161,,473,,,,,,,,156,157,,153,135',
'136,137,144,141,143,,,138,139,,,,158,159,145,146,,,,,,262,,,,,,,,150',
'149,,134,155,152,151,160,147,148,142,140,132,154,133,701,421,161,,702',
',,,,,,,156,157,,153,135,136,137,144,141,143,,,138,139,,,,158,159,145',
'146,,,,,,262,,,,,,,,150,149,,134,155,152,151,160,147,148,142,140,132',
'154,133,607,421,161,,608,,,,,,,,156,157,,153,135,136,137,144,141,143',
',,138,139,,,,158,159,145,146,,,,,,262,,,,,,,,150,149,,134,155,152,151',
'160,147,148,142,140,132,154,133,698,421,161,,699,,,,,,,,156,157,,153',
'135,136,137,144,141,143,,,138,139,,,,158,159,145,146,,,,,,262,,,,,,',
',150,149,,134,155,152,151,160,147,148,142,140,132,154,133,696,414,161',
',697,,,,,,,,156,157,,153,135,136,137,144,141,143,,,138,139,,,,158,159',
'145,146,,,,,,262,,,,,,,,150,149,,134,155,152,151,160,147,148,142,140',
'132,154,133,410,414,161,,411,,,,,,,,156,157,,153,135,136,137,144,141',
'143,,,138,139,,,,158,159,145,146,,,,,,262,,,,,,,,150,149,,134,155,152',
'151,160,147,148,142,140,132,154,133,,807,161,666,665,664,762,667,807',
',666,665,664,762,667,807,675,666,665,664,762,667,,675,,,,,,761,675,666',
'665,664,762,667,,,671,,,,,,675,671,,,,683,682,,671,,676,,683,682,,,',
'676,,683,682,,671,,676,,,,,,,680,679,683,682,,,807,676,666,665,664,673',
'667,807,,666,665,664,673,667,,675,,,,,,669,675,666,665,664,673,667,',
',,,,,,,675,671,,,,,,,671,,,,683,682,,,,676,,683,682,,671,,676,,,,,,',
'680,679,683,682,,,669,676,666,665,664,673,667,,669,,666,665,664,673',
'667,675,,,,,,,,675,,669,,666,665,664,673,667,,,,,,671,655,,675,,,,,671',
'680,679,683,682,,,,676,680,679,683,682,,,,676,671,,669,,666,665,664',
'673,667,680,679,683,682,,,,676,675,,807,,666,665,664,673,667,,669,,666',
'665,664,673,667,675,,,,,671,,,675,,,,,,680,679,683,682,,,,676,671,,',
',,,,,671,711,,683,682,,,,676,680,679,683,682,,,761,676,666,665,664,762',
'667,,761,,666,665,664,762,667,675,,,,,,,,675,,807,,666,665,664,762,667',
',,,,,671,,,675,,,,,671,680,679,683,682,,,,676,680,679,683,682,,,,676',
'671,,669,,666,665,664,673,667,,,683,682,,,,676,675,,,,,,,,,,,,,,,,,',
',,,,671,711,,,,,,,,680,679,683,682,,,,676' ]
        racc_action_table = arr = ::Array.new(24856, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'94,120,120,120,120,120,120,94,94,94,120,120,94,94,94,120,94,120,120',
'120,120,120,120,120,94,617,94,94,94,120,120,120,120,120,120,120,94,94',
'120,94,94,94,94,94,120,120,120,120,120,120,120,120,120,120,120,120,1016',
'120,120,120,357,120,120,120,120,120,94,94,94,94,94,94,94,94,94,94,94',
'94,94,94,1,538,94,94,94,120,94,94,120,822,94,120,120,94,94,120,94,120',
'94,61,94,120,94,94,19,94,94,94,94,94,120,94,617,94,343,120,120,120,120',
'478,120,120,120,120,58,605,994,94,120,120,94,94,94,94,607,94,120,94',
'120,94,995,607,607,607,823,19,607,607,607,381,607,344,479,347,478,7',
'996,557,557,607,607,607,607,545,58,337,357,1013,694,888,607,607,382',
'607,607,607,607,607,605,863,336,24,521,521,654,538,61,479,24,357,538',
'696,331,10,357,331,618,537,822,440,607,607,607,607,607,607,607,607,607',
'607,607,607,607,607,697,381,607,607,607,12,607,607,470,343,607,647,647',
'607,607,13,607,618,607,996,607,306,607,607,382,607,607,607,607,607,994',
'607,607,607,823,994,637,557,440,823,636,16,557,470,995,223,344,607,347',
'995,607,607,607,607,608,607,22,607,545,607,996,608,608,608,221,996,608',
'608,608,337,608,1013,694,888,337,694,1013,694,888,654,608,608,608,863',
'336,306,696,537,863,336,608,608,537,608,608,608,608,608,223,698,37,699',
'637,14,572,647,636,26,306,697,14,434,434,561,561,327,40,221,327,14,608',
'608,608,608,608,608,608,608,608,608,608,608,608,608,45,574,608,608,608',
'220,608,608,637,108,608,637,636,608,608,636,608,637,608,377,608,636',
'608,608,606,608,608,608,608,608,698,608,699,608,572,572,806,26,806,806',
'806,893,806,893,572,376,749,608,351,380,608,608,608,608,417,608,203',
'608,220,608,26,417,417,417,222,574,574,417,417,446,417,434,631,561,698',
'574,699,606,631,417,365,363,352,377,377,377,79,365,363,224,417,417,588',
'417,417,417,417,417,79,749,351,446,311,311,225,446,446,351,79,376,376',
'376,351,380,380,380,351,229,806,261,417,417,417,417,417,417,417,417',
'417,417,417,417,417,417,352,351,417,417,417,588,417,352,362,315,417',
'588,352,417,383,362,352,275,417,276,417,379,417,417,701,417,417,417',
'417,417,416,417,417,417,279,352,353,416,416,416,353,853,38,416,416,447',
'416,417,853,328,417,417,328,417,368,417,315,853,775,417,3,368,315,639',
'290,3,416,416,318,416,416,416,416,416,291,318,701,447,383,383,383,447',
'447,701,318,379,379,379,701,38,912,653,701,912,653,38,416,416,416,416',
'416,416,416,416,416,416,416,416,416,416,775,701,416,416,416,639,416',
'775,293,556,416,294,639,416,556,15,775,639,416,378,416,639,416,416,295',
'416,416,416,416,416,97,416,301,416,39,775,304,97,97,97,639,410,97,97',
'97,923,97,416,335,335,416,416,923,416,97,416,97,97,97,416,826,923,15',
'984,984,826,97,97,15,97,97,97,97,97,943,369,943,943,943,997,943,39,369',
'378,378,378,997,39,410,794,794,997,305,411,410,997,97,97,97,97,97,97',
'97,97,97,97,97,97,97,97,310,840,97,97,97,505,97,97,219,312,97,840,505',
'97,97,219,97,316,97,317,97,505,97,97,219,97,97,97,97,97,411,97,299,97',
'366,364,411,320,286,299,325,366,364,286,840,840,943,97,299,840,97,97',
'97,97,422,97,329,97,372,97,330,422,422,422,791,372,422,422,422,803,422',
'803,803,803,791,803,298,465,370,422,422,422,422,298,340,370,685,685',
'332,340,422,422,298,422,422,422,422,422,367,712,17,17,341,466,712,367',
'803,791,791,465,41,41,791,465,465,803,465,465,342,346,422,422,422,422',
'422,422,422,422,422,422,422,422,422,422,348,466,422,422,422,466,466',
'422,466,466,422,392,398,422,422,400,422,403,422,406,422,408,422,422',
'409,422,422,422,422,422,345,422,422,422,418,426,883,345,883,883,883',
'436,883,448,449,450,345,422,451,355,422,422,422,422,476,422,355,422',
'0,0,0,0,0,0,122,355,480,0,0,122,122,495,0,883,0,0,0,0,0,0,0,496,883',
'499,501,506,0,0,0,0,0,0,0,510,671,0,671,671,671,519,671,0,0,0,0,0,0',
'0,0,0,0,0,0,520,0,0,0,916,0,0,0,0,0,1003,916,1003,1003,1003,522,1003',
'548,671,983,916,983,983,983,548,983,534,671,539,0,302,540,0,548,569',
'0,0,302,577,0,579,0,585,589,594,0,302,1003,599,981,609,981,981,981,0',
'981,983,611,616,0,0,0,0,623,0,0,0,0,625,630,633,635,0,0,228,228,228',
'228,228,228,0,638,0,228,228,641,981,642,228,645,228,228,228,228,228',
'228,228,6,6,6,6,6,228,228,228,228,228,228,228,646,944,228,944,944,944',
'648,944,228,228,228,228,228,228,228,228,228,228,228,228,651,228,228',
'228,657,228,228,228,228,228,459,885,702,885,885,885,658,885,944,702',
'660,661,662,669,702,677,459,459,702,228,681,684,228,687,692,228,228',
'695,704,228,709,228,459,728,459,228,459,459,885,459,459,733,751,459',
'228,459,752,754,755,228,228,228,228,756,228,228,228,228,758,759,760',
'761,228,228,710,710,710,710,710,710,228,765,228,710,710,769,770,774',
'710,778,710,710,710,710,710,710,710,289,289,289,289,289,710,710,710',
'710,710,710,710,781,966,710,966,966,966,782,966,710,710,710,710,710',
'710,710,710,710,710,710,710,785,710,710,710,790,710,710,710,710,710',
'461,461,461,461,461,461,461,922,640,461,461,924,805,808,922,640,461',
'461,924,710,640,813,710,922,640,710,710,924,816,710,825,710,461,829',
'461,710,461,461,830,461,461,461,461,461,710,461,833,834,850,710,710',
'710,710,854,710,710,710,710,856,869,870,874,710,710,621,621,621,621',
'621,621,710,875,710,621,621,877,878,880,621,882,621,621,621,621,621',
'621,621,493,493,493,493,493,621,621,621,621,621,621,621,565,565,621',
'884,565,565,565,890,621,621,621,621,621,621,621,621,621,621,621,621',
'891,621,621,621,897,621,621,621,621,621,445,445,445,445,445,445,445',
'445,445,445,445,926,445,445,46,902,445,445,926,621,905,46,621,906,907',
'621,621,926,908,621,46,621,445,910,445,621,445,445,925,445,445,445,445',
'445,621,445,928,929,945,621,621,621,621,967,621,621,621,621,968,969',
'976,977,621,621,954,954,954,954,954,954,621,978,621,954,954,979,980',
'982,954,985,954,954,954,954,954,954,954,986,987,988,989,990,954,954',
'954,954,954,954,954,993,851,954,851,851,851,1004,851,954,954,954,954',
'954,954,954,954,954,954,954,954,1014,954,954,954,1015,954,954,954,954',
'954,468,468,468,468,468,468,468,468,973,468,468,300,,,,973,468,468,300',
'954,,,954,,973,954,954,300,,954,,954,468,,468,954,468,468,,468,468,468',
'468,468,954,468,,,,954,954,954,954,,954,954,954,954,,,,,954,954,620',
'620,620,620,620,620,954,,954,620,620,,,,620,,620,620,620,620,620,620',
'620,,,,,,620,620,620,620,620,620,620,,,620,,,,,429,620,620,620,620,620',
'620,620,620,620,620,620,620,,620,620,620,,620,620,620,620,620,429,429',
'429,429,429,429,429,429,429,429,429,,429,429,,,429,429,,620,,,620,,',
'620,620,,,620,,620,429,,429,620,429,429,,429,429,429,429,429,620,429',
',,,620,620,620,620,,620,620,620,620,,,,,620,620,,429,56,429,,,620,,620',
'56,56,56,,,56,56,56,458,56,,,,,,,,,,56,56,56,,,458,458,,,,56,56,,56',
'56,56,56,56,,,,458,,458,,458,458,,458,458,,,458,,458,,,,,,56,56,56,56',
'56,56,56,56,56,56,56,56,56,56,,,56,56,56,,,56,,,56,,,56,56,,56,,56,',
'56,,56,56,,56,56,56,56,56,,56,,56,,,,,,,,,,,,,,56,,,56,56,56,56,,56',
',56,615,615,615,615,615,615,,,,615,615,,,,615,,615,615,615,615,615,615',
'615,,,,,,615,615,615,615,615,615,615,,,615,,,,,,615,615,615,615,615',
'615,615,615,615,615,615,615,,615,615,615,,615,615,615,615,615,467,467',
'467,467,467,467,467,,,467,467,,,,,,467,467,,615,,,615,,,615,615,,,615',
',615,467,,467,615,467,467,,467,467,467,467,467,615,467,,,,615,615,615',
'615,,615,615,615,615,,,,,615,615,323,323,323,323,323,323,615,,615,323',
'323,,,,323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323',
'323,,,323,,,,,,323,323,323,323,323,323,323,323,323,323,323,323,,323',
'323,323,,323,323,323,323,323,460,460,460,460,460,460,460,,,460,460,',
',,,,460,460,,323,,,323,,,323,323,,,323,,323,460,,460,323,460,460,,460',
'460,460,460,460,323,460,,,,323,323,323,323,,323,323,323,323,,,,,323',
'323,297,297,297,297,297,297,323,,323,297,297,,,,297,,297,297,297,297',
'297,297,297,,,,,,297,297,297,297,297,297,297,,,297,,,,,,297,297,297',
'297,297,297,297,297,297,297,297,297,,297,297,297,,297,297,297,297,297',
'463,463,463,463,463,463,463,,,463,463,,,,,,463,463,,297,,,297,,,297',
'297,,,297,,297,463,,463,297,463,463,,463,463,463,463,463,297,463,,,',
'297,297,297,297,,297,297,297,297,,,,,297,297,558,558,558,558,558,558',
'297,,297,558,558,,,,558,,558,558,558,558,558,558,558,,,,,,558,558,558',
'558,558,558,558,,,558,,,,,,558,558,558,558,558,558,558,558,558,558,558',
'558,,558,558,558,,558,558,558,558,558,444,444,444,444,444,444,444,444',
'444,444,444,,444,444,,,444,444,,558,,,558,,,558,558,,,558,,558,444,',
'444,558,444,444,,444,444,444,444,444,558,444,,,,558,558,558,558,,558',
'558,558,558,,,,,558,558,921,921,921,921,921,921,558,,558,921,921,,,',
'921,,921,921,921,921,921,921,921,,,,,,921,921,921,921,921,921,921,,',
'921,,,,,,921,921,921,921,921,921,921,921,921,921,921,921,,921,921,921',
',921,921,921,921,921,462,462,462,462,462,462,462,,,462,462,,,,,,462',
'462,,921,,,921,,,921,921,,,921,,921,462,,462,921,462,462,,462,462,462',
'462,462,921,462,,,,921,921,921,921,,921,921,921,921,,,,,921,921,817',
'817,817,817,817,817,921,,921,817,817,,,,817,,817,817,817,817,817,817',
'817,,,,,,817,817,817,817,817,817,817,,,817,,,,,,817,817,817,817,817',
'817,817,817,817,817,817,817,,817,817,817,,817,817,817,817,817,457,,',
',,,,,,,,,,,,,457,457,,817,,,817,,,817,817,,,817,,817,457,,457,817,457',
'457,,457,457,,,457,817,457,,,,817,817,817,817,,817,817,817,817,,,,,817',
'817,818,818,818,818,818,818,817,,817,818,818,,,,818,,818,818,818,818',
'818,818,818,,,,,,818,818,818,818,818,818,818,,,818,,,,,,818,818,818',
'818,818,818,818,818,818,818,818,818,,818,818,818,,818,818,818,818,818',
'456,,,,,,,,,,,,,,,,456,456,,818,,,818,,,818,818,,,818,,818,456,,456',
'818,456,456,,456,456,,,456,818,456,,,,818,818,818,818,,818,818,818,818',
',,,,818,818,860,860,860,860,860,860,818,,818,860,860,,,,860,,860,860',
'860,860,860,860,860,,,,,,860,860,860,860,860,860,860,,,860,,,,,,860',
'860,860,860,860,860,860,860,860,860,860,860,,860,860,860,,860,860,860',
'860,860,455,455,455,455,455,455,455,,,455,455,,,,,,455,455,,860,,,860',
',,860,860,,,860,,860,455,,455,860,455,455,,455,455,455,455,455,860,455',
',,,860,860,860,860,,860,860,860,860,,,,,860,860,536,536,536,536,536',
'536,860,,860,536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536',
'536,536,536,536,536,,,536,,,,,,536,536,536,536,536,536,536,536,536,536',
'536,536,,536,536,536,,536,536,536,536,536,464,464,464,464,464,464,464',
',,464,464,,,,,,464,464,,536,,,536,,,536,536,,,536,,536,464,,464,536',
'464,464,,464,464,464,464,464,536,464,,,,536,536,536,536,,536,536,536',
'536,,,,,536,536,494,494,494,494,494,494,536,,536,494,494,,,,494,,494',
'494,494,494,494,494,494,,,,,,494,494,494,494,494,494,494,,,494,,,,,',
'494,494,494,494,494,494,494,494,494,494,494,494,,494,494,494,,494,494',
'494,494,494,452,,,,,,,,,,,,,,,,452,452,,494,,,494,,,494,494,,,494,,494',
'452,,452,494,452,452,,452,452,,,,494,,,,,494,494,494,494,,494,494,494',
'494,,,,,494,494,533,533,533,533,533,533,494,,494,533,533,,,,533,,533',
'533,533,533,533,533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,',
'533,533,533,533,533,533,533,533,533,533,533,533,,533,533,533,,533,533',
'533,533,533,453,,,,,,,,,,,,,,,,453,453,,533,,,533,,,533,533,,,533,,533',
'453,,453,533,453,453,,453,453,,,,533,,,,,533,533,533,533,,533,533,533',
'533,,,,,533,533,867,867,867,867,867,867,533,,533,867,867,,,,867,,867',
'867,867,867,867,867,867,,,,,,867,867,867,867,867,867,867,,,867,,,,,',
'867,867,867,867,867,867,867,867,867,867,867,867,,867,867,867,,867,867',
'867,867,867,454,,,,,,,,,,,,,,,,454,454,,867,,,867,,,867,867,,,867,,867',
'454,,,867,454,454,,454,454,,,,867,,,,,867,867,867,867,,867,867,867,867',
',,,,867,867,868,868,868,868,868,868,867,,867,868,868,,,,868,,868,868',
'868,868,868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,868',
'868,868,868,868,868,868,868,868,868,868,868,,868,868,868,,868,868,868',
'868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868,868,,,868,,868,,,,868,,,',
',,,,,868,,,,,868,868,868,868,,868,868,868,868,,,,,868,868,821,821,821',
'821,821,821,868,,868,821,821,,,,821,,821,821,821,821,821,821,821,,,',
',,821,821,821,821,821,821,821,,,821,,,,,,821,821,821,821,821,821,821',
'821,821,821,821,821,,821,821,821,,821,821,821,821,821,,,,,,,,,,,,,,',
',,,,,821,,,821,,,821,821,,,821,,821,,,,821,,,,,,,,,821,,,,,821,821,821',
'821,,821,821,821,821,,,,,821,821,205,205,205,205,205,205,821,,821,205',
'205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205,205,205,205,205',
'205,,,205,,,,,,205,205,205,205,205,205,205,205,205,205,205,205,,205',
'205,205,,205,205,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205,205',
',,205,,205,,,,205,,,,,,,,,205,,,,,205,205,205,205,,205,205,205,205,',
',,,205,205,33,33,33,33,33,33,205,,205,33,33,,,,33,,33,33,33,33,33,33',
'33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33',
'33,33,,33,33,33,,33,33,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,',
',33,,33,,,,33,,,,,,,,,33,,,,,33,33,33,33,,33,33,33,33,,,,,33,33,780',
'780,780,780,780,780,33,,33,780,780,,,,780,,780,780,780,780,780,780,780',
',,,,,780,780,780,780,780,780,780,,,780,,,,,,780,780,780,780,780,780',
'780,780,780,780,780,780,,780,780,780,,780,780,780,780,780,,,,,,,,,,',
',,,,,,,,,780,,,780,,,780,780,,,780,,780,,,,780,,,,,,,,,780,,,,,780,780',
'780,780,,780,780,780,780,,,,,780,780,946,946,946,946,946,946,780,,780',
'946,946,,,,946,,946,946,946,946,946,946,946,,,,,,946,946,946,946,946',
'946,946,,,946,,,,,,946,946,946,946,946,946,946,946,946,946,946,946,',
'946,946,946,,946,946,946,946,946,,,,,,,,,,,,,,,,,,,,946,,,946,,,946',
'946,,,946,,946,,,,946,,,,,,,,,946,,,,,946,946,946,946,,946,946,946,946',
',,,,946,946,705,705,705,705,705,705,946,,946,705,705,,,,705,,705,705',
'705,705,705,705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,705',
'705,705,705,705,705,705,705,705,705,705,705,,705,705,705,,705,705,705',
'705,705,,,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,,705,,705,,,,705,,,',
',,,,,705,,,,,705,705,705,705,,705,705,705,705,,,,,705,705,952,952,952',
'952,952,952,705,,705,952,952,,,,952,,952,952,952,952,952,952,952,,,',
',,952,952,952,952,952,952,952,,,952,,,,,,952,952,952,952,952,952,952',
'952,952,952,952,952,,952,952,952,,952,952,952,952,952,,,,,,,,,,,,,,',
',,,,,952,,,952,,,952,952,,,952,,952,,,,952,,,,,,,,,952,,,,,952,952,952',
'952,,952,952,952,952,,,,,952,952,292,292,292,292,292,292,952,,952,292',
'292,,,,292,,292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292',
'292,,,292,,,,,,292,292,292,292,292,292,292,292,292,292,292,292,,292',
'292,292,,292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292',
',,292,,292,,,,292,,,,,,,,,292,,,,,292,292,292,292,,292,292,292,292,',
',,,292,292,768,768,768,768,768,768,292,,292,768,768,,,,768,,768,768',
'768,768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,,768',
'768,768,768,768,768,768,768,768,768,768,768,,768,768,768,,768,768,768',
'768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,768,,,,768,,,',
',,,,,768,,,,,768,768,768,768,,768,768,768,768,,,,,768,768,827,827,827',
'827,827,827,768,,768,827,827,,,,827,,827,827,827,827,827,827,827,,,',
',,827,827,827,827,827,827,827,,,827,,,,,610,827,827,827,827,827,827',
'827,827,827,827,827,827,,827,827,827,,827,827,827,827,827,610,610,610',
'610,610,610,610,610,610,610,610,,610,610,,,610,610,,827,,,827,,,827',
'827,,,827,,827,610,,610,827,610,610,,610,610,610,610,610,827,610,,,',
'827,827,827,827,,827,827,827,827,,,,,827,827,,610,421,,,,827,,827,421',
'421,421,,,421,421,421,,421,,,,,,,,,421,421,421,421,,,,,,,,421,421,,421',
'421,421,421,421,,,,,,,,,,,,,,,,,,,,,,,421,421,421,421,421,421,421,421',
'421,421,421,421,421,421,,,421,421,421,,,421,,,421,,,421,421,,421,,421',
',421,,421,421,,421,421,421,421,421,,421,421,421,,,,,,,,,,,,,,421,,,421',
'421,421,421,,421,,421,720,720,720,720,720,720,,,,720,720,,,,720,,720',
'720,720,720,720,720,720,,,,,,720,720,720,720,720,720,720,,,720,,,,,',
'720,720,720,720,720,720,720,720,720,720,720,720,,720,720,720,,720,720',
'720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,720,,,720,,720,,,,720',
',,,,,,,,720,,,,,720,720,720,720,,720,720,720,720,,,,,720,720,,282,282',
'282,,282,720,,720,282,282,,,,282,,282,282,282,282,282,282,282,,,,,,282',
'282,282,282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282,282,282',
'282,,282,282,282,,282,282,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,',
',282,282,,,282,,,,,,282,,,,,,,,,282,,,,,282,282,282,282,,282,282,282',
'282,,,,,282,282,,283,283,283,,283,282,,282,283,283,,,,283,,283,283,283',
'283,283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283',
'283,283,283,283,283,283,283,,283,283,283,,283,283,283,283,283,,,,,,',
',,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,,,,283',
'283,283,283,,283,283,283,283,,,,,283,283,,233,233,233,,233,283,,283',
'233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233',
'233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233',
',233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233,233,,,,,233,233',
',232,232,232,,232,233,,233,232,232,,,,232,,232,232,232,232,232,232,232',
',,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232',
'232,232,232,,232,232,232,,232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232',
',,232,,,232,232,,,232,,,,,,232,,,,,,,,,232,,,,,232,232,232,232,,232',
'232,232,232,,,,,232,232,,643,643,643,,643,232,,232,643,643,,,,643,,643',
'643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,',
',643,,,643,643,643,643,643,643,643,643,,643,643,643,,643,643,,,643,',
',,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,,,,,,,,,,,,,,,,,,,643,643',
'643,643,,643,643,643,643,,,,,643,643,,231,231,231,,231,643,,643,231',
'231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231,231,231',
'231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231,231,',
'231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,',
',,231,,,,,,,,,231,,,,,231,231,231,231,,231,231,231,231,,,,,231,231,',
'230,230,230,,230,231,,231,230,230,,,,230,,230,230,230,230,230,230,230',
',,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230',
'230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230',
',,230,,,230,230,,,230,,,,,,230,,,,,,,,,230,,,,,230,230,230,230,,230',
'230,230,230,,,,,230,230,,20,20,20,,20,230,,230,20,20,,,,20,,20,20,20',
'20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20',
'20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20',
',,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,801',
'801,801,,801,20,,20,801,801,,,,801,,801,801,801,801,801,801,801,,,,',
',801,801,801,801,801,801,801,,,801,,,,,,,801,,,801,801,801,801,801,801',
'801,801,,801,801,801,,801,801,801,801,801,,,,,,,,,,,,,,,,,,,,801,,,801',
',,801,801,,,801,,,,,,801,,,,,,,,,801,,,,,801,801,801,801,,801,801,801',
'801,,,,,801,801,,288,288,288,288,288,801,,801,288,288,,,,288,,288,288',
'288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,288',
'288,,288,288,288,288,288,288,288,288,288,,288,288,288,,288,288,288,288',
'288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,288,,,,288,,,,,,,',
',288,,,,,288,288,288,288,,288,288,288,288,,,,,288,288,,815,815,815,',
'815,288,,288,815,815,,,,815,,815,815,815,815,815,815,815,,,,,,815,815',
'815,815,815,815,815,,,815,,,,,,,815,,,815,815,815,815,815,815,815,815',
',815,815,815,,815,815,815,815,815,,,,,,,,,,,,,,,,,,,,815,,,815,,,815',
'815,,,815,,,,,,815,,,,,,,,,815,,,,,815,815,815,815,,815,815,815,815',
',,,,815,815,,820,820,820,,820,815,,815,820,820,,,,820,,820,820,820,820',
'820,820,820,,,,,,820,820,820,820,820,820,820,,,820,,,,,,,820,,,820,820',
'820,820,820,820,820,820,,820,820,820,,820,820,820,820,820,,,,,,,,,,',
',,,,,,,,,820,,,820,,,820,820,,,820,,820,,,,820,,,,,,,,,820,,,,,820,820',
'820,820,,820,820,820,820,,,,,820,820,,247,247,247,,247,820,,820,247',
'247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247',
'247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,',
'247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,',
',,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247,',
'227,227,227,,227,247,,247,227,227,,,,227,,227,227,227,227,227,227,227',
',,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227,227,227',
'227,227,227,,227,227,227,,227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227',
',,227,,,227,227,,,227,,,,,,227,,,,,,,,,227,,,,,227,227,227,227,,227',
'227,227,227,,,,,227,227,,29,29,29,,29,227,,227,29,29,,,,29,,29,29,29',
'29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29',
'29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29',
'29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29',
'29,,30,30,30,,30,29,,29,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30',
'30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,',
'30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,',
',30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,,31,31,31,,31,30',
',30,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31',
',,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,',
',,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31',
'31,31,,31,31,31,31,,,,,31,31,,296,296,296,,296,31,,31,296,296,,,,296',
',296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296',
',,,,405,,296,,,296,296,296,296,296,296,296,296,,296,296,296,,296,296',
',,296,405,405,405,405,405,405,405,405,405,405,405,,405,405,,,405,405',
',296,,,296,,,296,296,,,296,,,405,,405,,405,405,,405,405,405,405,405',
',405,,,,296,296,296,296,,296,296,296,296,,,,,296,296,,405,,296,,,296',
',296,632,632,632,,632,,,,632,632,,,,632,,632,632,632,632,632,632,632',
',,,,,632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632',
'632,632,632,,632,632,632,,632,632,,,632,,,,,,,,,,,,,,,,,,,,632,,,632',
',,632,632,,,632,,,,,,,,,,,,,,,,,,,,632,632,632,632,,632,632,632,632',
',,,,632,632,,837,837,837,,837,632,,632,837,837,,,,837,,837,837,837,837',
'837,837,837,,,,,,837,837,837,837,837,837,837,,,837,,,,,,,837,,,837,837',
'837,837,837,837,837,837,837,837,837,837,,837,837,837,837,837,,,,,,,',
',,,,,,,,,,,,837,,,837,,,837,837,,,837,,,,837,,837,,,837,,,,,,837,,,',
',837,837,837,837,,837,837,837,837,,,,,837,837,,838,838,838,,838,837',
',837,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838,838,838',
'838,838,838,,,838,,,,,,,838,,,838,838,838,838,838,838,838,838,,838,838',
'838,,838,838,838,838,838,,,,,,,,,,,,,,,,,,,,838,,,838,,,838,838,,,838',
',,,,,838,,,,,,,,,838,,,,,838,838,838,838,,838,838,838,838,,,,,838,838',
',626,626,626,,626,838,,838,626,626,,,,626,,626,626,626,626,626,626,626',
',,,,,626,626,626,626,626,626,626,,,626,,,,,,,626,,,626,626,626,626,626',
'626,626,626,,626,626,626,,626,626,626,626,626,,,,,,,,,,,,,,,,,,,,626',
',,626,,,626,626,,,626,,,,,,626,,,,,,,,,626,,,,,626,626,626,626,,626',
'626,626,626,,,,,626,626,,852,852,852,,852,626,,626,852,852,,,,852,,852',
'852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852,,,852,,,,,',
',852,,,852,852,852,852,852,852,852,852,,852,852,852,,852,852,,,852,',
',,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,,852,,,,,,,,,,,,,,,,,,,,852,852',
'852,852,,852,852,852,852,,,,,852,852,,602,602,602,,602,852,,852,602',
'602,,,,602,,602,602,602,602,602,602,602,,,,,,602,602,602,602,602,602',
'602,,,602,,,,,,,602,,,602,602,602,602,602,602,602,602,,602,602,602,',
'602,602,602,602,602,,,,,,,,,,,,,,,,,,,,602,,,602,,,602,602,,,602,,,',
',,602,,,,,,,,,602,,,,,602,602,602,602,,602,602,602,602,,,,,602,602,',
'601,601,601,,601,602,,602,601,601,,,,601,,601,601,601,601,601,601,601',
',,,,,601,601,601,601,601,601,601,,,601,,,,,,,601,,,601,601,601,601,601',
'601,601,601,,601,601,601,,601,601,601,601,601,,,,,,,,,,,,,,,,,,,,601',
',,601,,,601,601,,,601,,,,,,601,,,,,,,,,601,,,,,601,601,601,601,,601',
'601,601,601,,,,,601,601,,864,864,864,,864,601,,601,864,864,,,,864,,864',
'864,864,864,864,864,864,,,,,,864,864,864,864,864,864,864,,,864,,,,,',
',864,,,864,864,864,864,864,864,864,864,,864,864,864,,864,864,,,864,',
',,,,,,,,,,,,,,,,,,864,,,864,,,864,864,,,864,,,,,,,,,,,,,,,,,,,,864,864',
'864,864,,864,864,864,864,,,,,864,864,,598,598,598,,598,864,,864,598',
'598,,,,598,,598,598,598,598,598,598,598,,,,,,598,598,598,598,598,598',
'598,,,598,,,,,,,598,,,598,598,598,598,598,598,598,598,,598,598,598,',
'598,598,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,',
',,598,,,,,,,,,598,,,,,598,598,598,598,,598,598,598,598,,,,,598,598,',
'597,597,597,,597,598,,598,597,597,,,,597,,597,597,597,597,597,597,597',
',,,,,597,597,597,597,597,597,597,,,597,,,,,,,597,,,597,597,597,597,597',
'597,597,597,,597,597,597,,597,597,597,597,597,,,,,,,,,,,,,,,,,,,,597',
',,597,,,597,597,,,597,,,,,,597,,,,,,,,,597,,,,,597,597,597,597,,597',
'597,597,597,,,,,597,597,,34,34,34,,34,597,,597,34,34,,,,34,,34,34,34',
'34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34',
'34,34,34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,',
'34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,35,35,35',
',35,34,,34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35',
'35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,,35,735',
'735,735,735,735,735,735,735,735,735,735,,735,735,,,735,735,,35,,,35',
',,35,35,,,35,,,735,,735,,735,735,,735,735,735,735,735,,735,,,,35,35',
'35,35,,35,35,35,35,,,,,35,35,,735,,35,,,35,,35,216,216,216,,216,,,,216',
'216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216',
'216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,',
'216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,',
',,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216,216',
'5,5,5,5,5,216,,216,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,',
',,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,',
'5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,593,593',
'593,,593,5,,5,593,593,,,,593,,593,593,593,593,593,593,593,,,,,,593,593',
'593,593,593,593,593,,,593,,,,,,,593,,,593,593,593,593,593,593,593,593',
',593,593,593,,593,593,593,593,593,,,,,,,,,,,,,,,,,,,,593,,,593,,,593',
'593,,,593,,,,,,593,,,,,,,,,593,,,,,593,593,593,593,,593,593,593,593',
',,,,593,593,,592,592,592,,592,593,,593,592,592,,,,592,,592,592,592,592',
'592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592',
'592,592,592,592,592,592,,592,592,592,,592,592,592,592,592,,,,,,,,,,',
',,,,,,,,,592,,,592,,,592,592,,,592,,,,,,592,,,,,,,,,592,,,,,592,592',
'592,592,,592,592,592,592,,,,,592,592,,591,591,591,,591,592,,592,591',
'591,,,,591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591',
'591,,,591,,,,,,,591,,,591,591,591,591,591,591,591,591,591,591,591,591',
',591,591,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,,591,,',
',591,,591,,,591,,,,,,591,,,,,591,591,591,591,,591,591,591,591,,,,,591',
'591,,590,590,590,,590,591,,591,590,590,,,,590,,590,590,590,590,590,590',
'590,,,,,,590,590,590,590,590,590,590,,,590,,,,,,,590,,,590,590,590,590',
'590,590,590,590,590,590,590,590,,590,590,590,590,590,,,,,,,,,,,,,,,',
',,,,590,,,590,,,590,590,,,590,,590,,590,,590,,,590,,,,,,590,,,,,590',
'590,590,590,,590,590,590,590,,,,,590,590,,313,313,313,,313,590,,590',
'313,313,,,,313,,313,313,313,313,313,313,313,,,,,,313,313,313,313,313',
'313,313,,,313,,,,,,,313,,,313,313,313,313,313,313,313,313,,313,313,313',
',313,313,,,313,,,,,,,,,,,,,,,,,,,,313,,,313,,,313,313,,,313,,,,,,,,',
',,,,,,,,,,,313,313,313,313,,313,313,313,313,,,,,313,313,,215,215,215',
',215,313,,313,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215',
'215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215',
',215,215,215,,215,215,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215',
'215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215,215,215,,215,215,215,215',
',,,,215,215,,587,587,587,,587,215,,215,587,587,,,,587,,587,587,587,587',
'587,587,587,,,,,,587,587,587,587,587,587,587,,,587,,,,,,,587,,,587,587',
'587,587,587,587,587,587,,587,587,587,,587,587,587,587,587,,,,,,,,,,',
',,,,,,,,,587,,,587,,,587,587,,,587,,,,,,587,,,,,,,,,587,,,,,587,587',
'587,587,,587,587,587,587,,,,,587,587,,586,586,586,,586,587,,587,586',
'586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586',
'586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,,586,586,586,',
'586,586,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,586',
',,,586,,,,,,,,,586,,,,,586,586,586,586,,586,586,586,586,,,,,586,586',
',214,214,214,,214,586,,586,214,214,,,,214,,214,214,214,214,214,214,214',
',,,,,214,214,214,214,214,214,214,,,214,,,,,,,214,,,214,214,214,214,214',
'214,214,214,,214,214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214',
',,214,,,214,214,,,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214,,214',
'214,214,214,,,,,214,214,,213,213,213,,213,214,,214,213,213,,,,213,,213',
'213,213,213,213,213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,',
',213,,,213,213,213,213,213,213,213,213,,213,213,213,,213,213,213,213',
'213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,,,,213',
',,,,213,213,213,213,,213,213,213,213,,,,,213,213,,212,212,212,,212,213',
',213,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212',
'212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,,212,212',
'212,,212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212',
',212,,,,212,,,,,,,,,212,,,,,212,212,212,212,,212,212,212,212,,,,,212',
'212,,322,322,322,,322,212,,212,322,322,,,,322,,322,322,322,322,322,322',
'322,,,,,,322,322,322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322',
'322,322,322,322,,322,322,322,,322,322,322,322,322,,,,,,,,,,,,,,,,,,',
',322,,,322,322,,322,322,,,322,,,,,,322,,,,,,,,,322,,,,,322,322,322,322',
',322,322,322,322,,,,,322,322,,324,324,324,,324,322,,322,324,324,,,,324',
',324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324,324,,,324',
',,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324,,324,324,324',
'324,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,324,,,,,,',
',,324,,,,,324,324,324,324,,324,324,324,324,,,,,324,324,,211,211,211',
',211,324,,324,211,211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211',
'211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211',
',211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211',
'211,,,211,,,,,,211,,,,,,,,,211,,,,,211,211,211,211,,211,211,211,211',
',,,,211,211,,552,552,552,,552,211,,211,552,552,,,,552,,552,552,552,552',
'552,552,552,,,,,,552,552,552,552,552,552,552,,,552,,,,,,,552,,,552,552',
'552,552,552,552,552,552,552,552,552,552,,552,552,552,552,552,,,,,,,',
',,,,,,,,,,,,552,,,552,,,552,552,,,552,,552,,552,,552,,,552,,,,,,552',
',,,,552,552,552,552,,552,552,552,552,,,,,552,552,,542,542,542,,542,552',
',552,542,542,,,,542,,542,542,542,542,542,542,542,,,,,,542,542,542,542',
'542,542,542,,,542,,,,,,,542,,,542,542,542,542,542,542,542,542,542,542',
'542,542,,542,542,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542',
',,542,,542,,542,,542,,,542,,,,,,542,,,,,542,542,542,542,,542,542,542',
'542,,,,,542,542,,541,541,541,,541,542,,542,541,541,,,,541,,541,541,541',
'541,541,541,541,,,,,,541,541,541,541,541,541,541,,,541,,,,,,,541,,,541',
'541,541,541,541,541,541,541,,541,541,541,,541,541,541,541,541,,,,,,',
',,,,,,,,,,,,,541,,,541,,,541,541,,,541,,541,,,,541,,,,,,,,,541,,,,,541',
'541,541,541,,541,541,541,541,,,,,541,541,,700,700,700,,700,541,,541',
'700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700,700',
'700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700,700,,700,700,700',
',700,700,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,,700,,',
',,,700,,,,,,,,,700,,,,,700,700,700,700,,700,700,700,700,,,,,700,700',
',42,42,42,,42,700,,700,42,42,,,,42,,42,42,42,42,42,42,42,,,,,,42,42',
'42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42,42,,42',
'42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,',
'42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,208,208,208,,208,42,,42,208',
'208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208',
'208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208,208,208,208,208',
',208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208',
',208,,208,,,208,,,,,,208,,,,,208,208,208,208,,208,208,208,208,,,,,208',
'208,,527,527,527,,527,208,,208,527,527,,,,527,,527,527,527,527,527,527',
'527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527',
'527,527,527,527,527,527,527,527,,527,527,527,527,527,,,,,,,,,,,,,,,',
',,,,527,,,527,,,527,527,,,527,,,,,,527,,,527,,,,,,527,,,,,527,527,527',
'527,,527,527,527,527,,,,,527,527,,524,524,524,,524,527,,527,524,524',
',,,524,,524,524,524,524,524,524,524,,,,,,524,524,524,524,524,524,524',
',,524,,,,,,,524,,,524,524,524,524,524,524,524,524,524,524,524,524,,524',
'524,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,524,,',
',524,,,524,,,,,,524,,,,,524,524,524,524,,524,524,524,524,,,,,524,524',
',207,207,207,,207,524,,524,207,207,,,,207,,207,207,207,207,207,207,207',
',,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207',
'207,207,207,,207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207',
',,207,,,207,207,,,207,,,,,,207,,,,,,,,,207,,,,,207,207,207,207,,207',
'207,207,207,,,,,207,207,,206,206,206,,206,207,,207,206,206,,,,206,,206',
'206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,',
',206,,,206,206,206,206,206,206,206,206,,206,206,206,,206,206,206,206',
'206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,206,,,,206,,,,,,,',
',206,,,,,206,206,206,206,,206,206,206,206,,,,,206,206,,518,518,518,',
'518,206,,206,518,518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518',
'518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518',
',518,518,518,,518,518,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518',
'518,,,518,,,,,,518,,,,,,,,,518,,,,,518,518,518,518,,518,518,518,518',
',,,,518,518,,43,43,43,,43,518,,518,43,43,,,,43,,43,43,43,43,43,43,43',
',,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43',
'43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43',
',,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,502,502,502,,502',
'43,,43,502,502,,,,502,,502,502,502,502,502,502,502,,,,,,502,502,502',
'502,502,502,502,,,502,,,,,,,502,,,502,502,502,502,502,502,502,502,502',
'502,502,502,,502,502,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502',
'502,,,502,,502,,502,,502,,,502,,,,,,502,,,,,502,502,502,502,,502,502',
'502,502,,,,,502,502,,374,374,374,,374,502,,502,374,374,,,,374,,374,374',
'374,374,374,374,374,,,,,,374,374,374,374,374,374,374,,,374,,,,,,,374',
',,374,374,374,374,374,374,374,374,,374,374,374,,374,374,374,374,374',
',,,,,,,,,,,,,,,,,,,374,,,374,,,374,374,,,374,,,,,,374,,,,,,,,,374,,',
',,374,374,374,374,,374,374,374,374,,,,,374,374,,402,402,402,,402,374',
',374,402,402,,,,402,,402,402,402,402,402,402,402,,,,,,402,402,402,402',
'402,402,402,,,402,,,,,,,402,,,402,402,402,402,402,402,402,402,,402,402',
'402,,402,402,402,402,402,,,,,,,,,,,,,,,,,,,,402,,,402,,,402,402,,,402',
',,,,,402,,,,,,,,,402,,,,,402,402,402,402,,402,402,402,402,,,,,402,402',
',63,63,63,,63,402,,402,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63',
'63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63',
'63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,',
'63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,60,60,60,,60,63,,63,60,60',
',,,60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60',
',,60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,',
',,,,,60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60',
'60,60,,,,,60,60,,249,249,249,,249,60,,60,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,249,249,249,,,,,,',
',,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249',
'249,249,249,,249,249,249,249,,,,,249,249,,246,246,246,,246,249,,249',
'246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246',
'246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246',
',246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246',
',245,245,245,,245,246,,246,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245,245,,245',
'245,245,245,,,,,245,245,,250,250,250,,250,245,,245,250,250,,,,250,,250',
'250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,',
',250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250,250,250',
'250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250',
',,,,250,250,250,250,,250,250,250,250,,,,,250,250,,729,729,729,,729,250',
',250,729,729,,,,729,,729,729,729,729,729,729,729,,,,,,729,729,729,729',
'729,729,729,,,729,,,,,,,729,,,729,729,729,729,729,729,729,729,,729,729',
'729,,729,729,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,,729',
',,,,,729,,,,,,,,,729,,,,,729,729,729,729,,729,729,729,729,,,,,729,729',
',244,244,244,,244,729,,729,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244',
'244,244,244,,,,,244,244,,731,731,731,,731,244,,244,731,731,,,,731,,731',
'731,731,731,731,731,731,,,,,,731,731,731,731,731,731,731,,,731,,,,,',
',731,,,731,731,731,731,731,731,731,731,,731,731,731,,731,731,731,731',
'731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731,731,,,731,,,,,,731,,,,,,,,,731',
',,,,731,731,731,731,,731,731,731,731,,,,,731,731,,251,251,251,,251,731',
',731,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251',
'251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251',
'251,,251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251',
',,,,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',243,243,243,,243,251,,251,243,243,,,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243',
'243,243,243,,,,,243,243,,242,242,242,,242,243,,243,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242',
',,,,242,242,242,242,,242,242,242,242,,,,,242,242,,673,673,673,,673,242',
',242,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673',
'673,673,673,,,673,,,,,,,673,,,673,673,673,673,673,673,673,673,,673,673',
'673,,673,673,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673',
',,,,,673,,,,,,,,,673,,,,,673,673,673,673,,673,673,673,673,,,,,673,673',
',241,241,241,,241,673,,673,241,241,,,,241,,241,241,241,241,241,241,241',
',,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241',
'241,241,241,,,,,241,241,,240,240,240,,240,241,,241,240,240,,,,240,,240',
'240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,',
',240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240,240,240',
'240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240',
',,,,240,240,240,240,,240,240,240,240,,,,,240,240,,745,745,745,,745,240',
',240,745,745,,,,745,,745,745,745,745,745,745,745,,,,,,745,745,745,745',
'745,745,745,,,745,,,,,,,745,,,745,745,745,745,745,745,745,745,,745,745',
'745,,745,745,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745,,,745',
',,,,,745,,,,,,,,,745,,,,,745,745,745,745,,745,745,745,745,,,,,745,745',
',746,746,746,,746,745,,745,746,746,,,,746,,746,746,746,746,746,746,746',
',,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746,746,746,746',
'746,746,746,,746,746,746,,746,746,746,746,746,,,,,,,,,,,,,,,,,,,,746',
',,746,,,746,746,,,746,,,,,,746,,,,,,,,,746,,,,,746,746,746,746,,746',
'746,746,746,,,,,746,746,,747,747,747,,747,746,,746,747,747,,,,747,,747',
'747,747,747,747,747,747,,,,,,747,747,747,747,747,747,747,,,747,,,,,',
',747,,,747,747,747,747,747,747,747,747,,747,747,747,,747,747,747,747',
'747,,,,,,,,,,,,,,,,,,,,747,,,747,,,747,747,,,747,,,,,,747,,,,,,,,,747',
',,,,747,747,747,747,,747,747,747,747,,,,,747,747,,748,748,748,,748,747',
',747,748,748,,,,748,,748,748,748,748,748,748,748,,,,,,748,748,748,748',
'748,748,748,,,748,,,,,,,748,,,748,748,748,748,748,748,748,748,,748,748',
'748,,748,748,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,,748',
',,,,,748,,,,,,,,,748,,,,,748,748,748,748,,748,748,748,748,,,,,748,748',
',239,239,239,,239,748,,748,239,239,,,,239,,239,239,239,239,239,239,239',
',,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239',
'239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239',
'239,239,239,,,,,239,239,,750,750,750,,750,239,,239,750,750,,,,750,,750',
'750,750,750,750,750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,',
',750,,,750,750,750,750,750,750,750,750,,750,750,750,,750,750,750,750',
'750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750,,,,,,750,,,,,,,,,750',
',,,,750,750,750,750,,750,750,750,750,,,,,750,750,,252,252,252,,252,750',
',750,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252',
'252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252',
'252,,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252',
',,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252',
',253,253,253,,253,252,,252,253,253,,,,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253',
'253,253,253,,,,,253,253,,254,254,254,,254,253,,253,254,254,,,,254,,254',
'254,254,254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,',
',254,,,254,254,254,254,254,254,254,254,,254,254,254,,254,254,254,254',
'254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254',
',,,,254,254,254,254,,254,254,254,254,,,,,254,254,,255,255,255,,255,254',
',254,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255',
'255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255',
'255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255',
',,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',238,238,238,,238,255,,255,238,238,,,,238,,238,238,238,238,238,238,238',
',,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238',
'238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238',
',,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238',
'238,238,238,,,,,238,238,,237,237,237,,237,238,,238,237,237,,,,237,,237',
'237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,',
',237,,,237,237,237,237,237,237,237,237,,237,237,237,,237,237,237,237',
'237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237',
',,,,237,237,237,237,,237,237,237,237,,,,,237,237,,262,262,262,,262,237',
',237,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262,262,262,262',
'262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,262,262',
'262,262,,262,262,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262',
',,262,,262,,262,,262,,,262,,,,,,262,,,,,262,262,262,262,,262,262,262',
'262,,,,,262,262,,263,263,263,,263,262,,262,263,263,,,,263,,263,263,263',
'263,263,263,263,,,,,,263,263,263,263,263,263,263,,,263,,,,,,,263,,,263',
'263,263,263,263,263,263,263,263,263,263,263,,263,263,263,263,263,,,',
',,,,,,,,,,,,,,,,263,,,263,,,263,263,,,263,,263,,263,,263,,,263,,,,,',
'263,,,,,263,263,263,263,,263,263,263,263,,,,,263,263,,271,271,271,,271',
'263,,263,271,271,,,,271,,271,271,271,271,271,271,271,,,,,,271,271,271',
'271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271,271,271,271,271',
'271,271,271,,271,271,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271',
'271,,,271,,271,,271,,271,,,271,,,,,,271,,,,,271,271,271,271,,271,271',
'271,271,,,,,271,271,271,762,762,762,,762,271,,271,762,762,,,,762,,762',
'762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762,,,762,,,,,',
',762,,,762,762,762,762,762,762,762,762,,762,762,762,,762,762,,,762,',
',,,,,,,,,,,,,,,,,,762,,,762,,,762,762,,,762,,,,,,,,,,,,,,,,,,,,762,762',
'762,762,,762,762,762,762,,,,,762,762,,236,236,236,,236,762,,762,236',
'236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236',
'236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,',
'236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,',
',,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236,',
'235,235,235,,235,236,,236,235,235,,,,235,,235,235,235,235,235,235,235',
',,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235',
'235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235',
',,235,,,235,235,,,235,,,,,,235,,,,,,,,,235,,,,,235,235,235,235,,235',
'235,235,235,,,,,235,235,,278,278,278,,278,235,,235,278,278,,,,278,,278',
'278,278,278,278,278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,',
',278,,,278,278,278,278,278,278,278,278,,278,278,278,,278,278,278,278',
'278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278,278,,,278,,,,,,278,,,,,,,,,278',
',,,,278,278,278,278,,278,278,278,278,,,,,278,278,,649,649,649,,649,278',
',278,649,649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649',
'649,649,649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649',
'649,,649,649,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649',
',649,,,,649,,,,,,,,,649,,,,,649,649,649,649,,649,649,649,649,,,,,649',
'649,,234,234,234,,234,649,,649,234,234,,,,234,,234,234,234,234,234,234',
'234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234',
'234,234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,',
',234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234',
',234,234,234,234,,,,,234,234,,280,280,280,,280,234,,234,280,280,,,,280',
',280,280,280,280,280,280,280,,,,,,280,280,280,280,280,280,280,,,280',
',,,,,,280,,,280,280,280,280,280,280,280,280,,280,280,280,,280,280,280',
'280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,',
',,280,,,,,280,280,280,280,,280,280,280,280,,,,,280,280,,117,117,117',
',117,280,,280,117,117,,,,117,,117,117,117,117,117,117,117,,,,,,117,117',
'117,117,117,117,117,,,117,,,,,,,117,,,117,117,117,117,117,117,117,117',
',117,117,117,,117,117,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117',
'117,,,117,,,,,,117,,,,,,,,,117,,,,,117,117,117,117,,117,117,117,117',
',,,,117,117,,338,338,338,,338,117,,117,338,338,,,,338,,338,338,338,338',
'338,338,338,,,,,,338,338,338,338,338,338,338,,,338,,,,,,,338,,,338,338',
'338,338,338,338,338,338,,338,338,338,,338,338,338,338,338,,,,,,,,,,',
',,,,,,,,,338,,,338,,,338,338,,,338,,,,,,338,,,,,,,,,338,,,,,338,338',
'338,338,,338,338,338,338,,,,,338,338,,339,339,339,,339,338,,338,339',
'339,,,,339,,339,339,339,339,339,339,339,,,,,,339,339,339,339,339,339',
'339,,,339,,,,,,,339,,,339,339,339,339,339,339,339,339,,339,339,339,',
'339,339,339,339,339,,,,,,,,,,,,,,,,,,,,339,,,339,,,339,339,,,339,,,',
',,339,,,,,,,,,339,,,,,339,339,339,339,,339,339,339,339,,,,,339,339,',
'492,492,492,492,492,339,,339,492,492,,,,492,,492,492,492,492,492,492',
'492,,,,,,492,492,492,492,492,492,492,,,492,,,,,,492,492,492,492,492',
'492,492,492,492,492,492,492,,492,492,492,,492,492,492,492,492,740,740',
'740,740,740,740,740,740,740,740,740,,740,740,,,740,740,,492,,,492,,',
'492,492,,,492,,492,740,,740,492,740,740,,740,740,740,740,740,492,740',
',,,492,492,492,492,,492,492,492,492,,,,,492,492,,740,,,,492,492,,492',
'487,487,487,,487,,,,487,487,,,,487,,487,487,487,487,487,487,487,,,,',
',487,487,487,487,487,487,487,,,487,,,,,,,487,,,487,487,487,487,487,487',
'487,487,,487,487,487,,487,487,487,487,487,,,,,,,,,,,,,,,,,,,,487,,,487',
',,487,487,,,487,,,,,,487,,,,,,,,,487,,,,,487,487,487,487,,487,487,487',
'487,,,,,487,487,,485,485,485,,485,487,,487,485,485,,,,485,,485,485,485',
'485,485,485,485,,,,,,485,485,485,485,485,485,485,,,485,,,,,,,485,,,485',
'485,485,485,485,485,485,485,485,485,485,485,,485,485,485,485,485,,,',
',,,,,,,,,,,,,,,,485,,,485,,,485,485,,,485,,,,485,,485,,,485,,,,,,485',
',,,,485,485,485,485,,485,485,485,485,,,,,485,485,,483,483,483,,483,485',
',485,483,483,,,,483,,483,483,483,483,483,483,483,,,,,,483,483,483,483',
'483,483,483,,,483,,,,,,,483,,,483,483,483,483,483,483,483,483,483,483',
'483,483,,483,483,483,483,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483',
',,483,,483,,483,,483,,,483,,,,,,483,,,,,483,483,483,483,,483,483,483',
'483,,,,,483,483,,116,116,116,,116,483,,483,116,116,,,,116,,116,116,116',
'116,116,116,116,,,,,,116,116,116,116,116,116,116,,,116,,,,,,,116,,,116',
'116,116,116,116,116,116,116,,116,116,116,,116,116,116,116,116,,,,,,',
',,,,,,,,,,,,,116,,,116,,,116,116,,,116,,,,,,116,,,,,,,,,116,,,,,116',
'116,116,116,,116,116,116,116,,,,,116,116,,248,248,248,,248,116,,116',
'248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248',
'248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248',
',248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,',
',,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248,,,,,248,248',
',115,115,115,,115,248,,248,115,115,,,,115,,115,115,115,115,115,115,115',
',,,,,115,115,115,115,115,115,115,,,115,,,,,,,115,,,115,115,115,115,115',
'115,115,115,,115,115,115,,115,115,115,115,115,,,,,,,,,,,,,,,,,,,,115',
',,115,,,115,115,,,115,,,,,,115,,,,,,,,,115,,,,,115,115,115,115,,115',
'115,115,115,,,,,115,115,,706,706,706,,706,115,,115,706,706,,,,706,,706',
'706,706,706,706,706,706,,,,,,706,706,706,706,706,706,706,,,706,,,,,',
',706,,,706,706,706,706,706,706,706,706,,706,706,706,,706,706,706,706',
'706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,,706,,,,,,706,,,,,,,,,706',
',,,,706,706,706,706,,706,706,706,706,,,,,706,706,,110,110,110,110,110',
'706,,706,110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110,110,110',
'110,110,110,110,,,110,,,,,,110,110,110,110,110,110,110,110,110,110,110',
'110,,110,110,110,,110,110,110,110,110,742,742,742,742,742,742,742,742',
'742,742,742,,742,742,,,742,742,,110,,,110,,,110,110,,,110,,110,742,',
'742,110,742,742,,742,742,742,742,742,110,742,,,,110,110,110,110,,110',
'110,110,110,,,,,110,110,,742,,,,110,110,,110,59,59,59,,59,,,,59,59,',
',,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,',
',59,59,59,59,59,59,59,59,59,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,',
',,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,,,59,,,,,59,59,59,59,,59',
'59,59,59,,,,,59,59,,443,443,443,,443,59,,59,443,443,,,,443,,443,443',
'443,443,443,443,443,,,,,,443,443,443,443,443,443,443,,,443,,,,,,,443',
',,443,443,443,443,443,443,443,443,,443,443,443,,443,443,443,443,443',
',,,,,,,,,,,,,,,,,,,443,,,443,,,443,443,,,443,,,,,,443,,,,,,,,,443,,',
',,443,443,443,443,,443,443,443,443,,,,,443,443,,442,442,442,,442,443',
',443,442,442,,,,442,,442,442,442,442,442,442,442,,,,,,442,442,442,442',
'442,442,442,,,442,,,,,,,442,,,442,442,442,442,442,442,442,442,,442,442',
'442,,442,442,442,442,442,,,,,,,,,,,,,,,,,,,,442,,,442,,,442,442,,,442',
',,,,,442,,,,,,,,,442,,,,,442,442,442,442,,442,442,442,442,,,,,442,442',
',441,441,441,,441,442,,442,441,441,,,,441,,441,441,441,441,441,441,441',
',,,,,441,441,441,441,441,441,441,,,441,,,,,,,441,,,441,441,441,441,441',
'441,441,441,,441,441,441,,441,441,441,441,441,,,,,,,,,,,,,,,,,,,,441',
',,441,,,441,441,,,441,,,,,,441,,,,,,,,,441,,,,,441,441,441,441,,441',
'441,441,441,,,,,441,441,,439,439,439,,439,441,,441,439,439,,,,439,,439',
'439,439,439,439,439,439,,,,,,439,439,439,439,439,439,439,,,439,,,,,',
',439,,,439,439,439,439,439,439,439,439,439,439,439,439,,439,439,439',
'439,439,,,,,,,,,,,,,,,,,,,,439,,,439,,,439,439,,,439,,439,,439,,439',
',,439,,,,,,439,,,,,439,439,439,439,,439,439,439,439,,,,,439,439,,358',
'358,358,,358,439,,439,358,358,,,,358,,358,358,358,358,358,358,358,,',
',,,358,358,358,358,358,358,358,,,358,,,,,,,358,,,358,358,358,358,358',
'358,358,358,,358,358,358,,358,358,358,358,358,,,,,,,,,,,,,,,,,,,,358',
',,358,,,358,358,,,358,,,,,,358,,,,,,,,,358,,,,,358,358,358,358,,358',
'358,358,358,,,,,358,358,,70,70,70,,70,358,,358,70,70,,,,70,,70,70,70',
'70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70',
'70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,',
'70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,,69,69,69,',
'69,70,,70,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69',
',,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,,69,,,,,,',
',,,,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,',
'69,69,69,69,,,,,69,69,,68,68,68,,68,69,,69,68,68,,,,68,,68,68,68,68',
'68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68',
'68,68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68',
',68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,67,67,67,,67',
'68,,68,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,',
',67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,744',
'744,744,744,744,744,744,744,744,744,744,,744,744,,,744,744,,67,,,67',
',,67,67,,,67,,,744,,744,67,744,744,,744,744,744,744,744,67,744,,,,67',
'67,67,67,,67,67,67,67,,,,,67,67,67,744,,,,67,67,,67,514,514,514,,514',
',,,514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514',
'514,514,514,,,514,,,,,,,514,,,514,514,514,514,514,514,514,514,,514,514',
'514,,514,514,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514',
',,,,,514,,,,,,,,,514,,,,,514,514,514,514,,514,514,514,514,,,,,514,514',
',513,513,513,,513,514,,514,513,513,,,,513,,513,513,513,513,513,513,513',
',,,,,513,513,513,513,513,513,513,,,513,,,,,,,513,,,513,513,513,513,513',
'513,513,513,,513,513,513,,513,513,513,513,513,,,,,,,,,,,,,,,,,,,,513',
',,513,,,513,513,,,513,,,,,,513,,,,,,,,,513,,,,,513,513,513,513,,513',
'513,513,513,,,,,513,513,,512,512,512,,512,513,,513,512,512,,,,512,,512',
'512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,512,,,,,',
',512,,,512,512,512,512,512,512,512,512,,512,512,512,,512,512,512,512',
'512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,,,,,512,,,,,,,,,512',
',,,,512,512,512,512,,512,512,512,512,,,,,512,512,,509,509,509,,509,512',
',512,509,509,,,,509,,509,509,509,509,509,509,509,,,,,,509,509,509,509',
'509,509,509,,,509,,,,,,,509,,,509,509,509,509,509,509,509,509,,509,509',
'509,,509,509,,,509,,,,,,,,,,,,,,,,,,,,509,,,509,,,509,509,,,509,,,,',
',,,,,,,,,,,,,,,509,509,509,509,,509,509,509,509,,,,,509,509,,64,64,64',
',64,509,,509,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64',
'64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64',
',,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64',
'64,64,,64,64,64,64,,,,,64,64,,44,44,44,,44,64,,64,44,44,,,,44,,44,44',
'44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44',
'44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44',
'44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,500',
'500,500,,500,44,,44,500,500,,,,500,,500,500,500,500,500,500,500,,,,',
',500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500,500',
'500,500,,500,500,500,,500,500,,,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500',
'500,,,500,,,,,,,,,,,,,,,,,,,,500,500,500,500,,500,500,500,500,,,,,500',
'500,,970,970,970,,970,500,,500,970,970,,,,970,,970,970,970,970,970,970',
'970,,,,,,970,970,970,970,970,970,970,,,970,,,,,,,970,,,970,970,970,970',
'970,970,970,970,970,970,970,970,,970,970,970,970,970,,,,,,,,,,,,,,,',
',,,,970,,,970,,,970,970,,,970,,970,,970,,970,,,970,,,,,,970,,,,,970',
'970,970,970,,970,970,970,970,,,,,970,970,,119,119,119,119,119,970,,970',
'119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119',
'119,119,,,119,,,,,,119,119,,119,119,119,119,119,119,119,119,119,,119',
'119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119',
',,119,,119,,,,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119,',
',,,119,119,,118,118,118,,118,119,,119,118,118,,,,118,,118,118,118,118',
'118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118',
'118,118,118,118,118,118,,118,118,118,,118,118,118,118,118,836,836,836',
'836,836,836,836,836,836,836,836,,836,836,,,836,836,,118,,,118,,,118',
'118,,,118,,,836,,836,118,836,836,,836,836,836,836,836,118,836,,,,118',
'118,118,118,,118,118,118,118,,,,,118,118,,836,471,,,,118,,118,471,471',
'471,,,471,471,471,613,471,613,613,613,613,613,,,,471,471,,,,613,,,,',
',471,471,,471,471,471,471,471,,,,,,,,,613,,,,,,,,,613,613,613,613,,',
',613,,,,,,,,,471,,412,,,,,471,,412,412,412,471,471,412,412,412,613,412',
',,,,,,,,412,412,412,,,,,,471,471,,412,412,,412,412,412,412,412,,,,,471',
',,471,,,,,471,,,,,,,,,,412,412,412,412,412,412,412,412,412,412,412,412',
'412,412,,,412,412,412,,,412,,412,412,,,412,412,,412,,412,,412,,412,412',
',412,412,412,412,412,,412,412,412,,,,,,,,,,,,,,412,,27,412,412,,412',
',412,27,27,27,,,27,27,27,,27,,,,,,,,,27,27,27,,,,,,,,,27,27,,27,27,27',
'27,27,,,,,,,,,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27',
',,27,27,27,,,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,28',
'27,27,27,,,,28,28,28,,,28,28,28,,28,27,,,27,27,,27,,27,28,28,,,,,,,',
',28,28,,28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28',
',28,28,28,28,28,,28,,28,,,,,,,,,,,,,,28,,,28,28,,28,,28,583,583,583',
'583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583',
'583,583,583,583,,,,583,583,583,583,583,583,583,583,583,583,,,,,,583',
'583,583,583,583,583,583,583,583,,,583,,,,,,,,583,583,,583,583,583,583',
'583,583,583,,,583,583,,,,583,583,583,583,,,,,,,,,,,,,,583,583,,583,583',
'583,583,583,583,583,583,583,583,583,583,,,583,583,,,,,,,,,,,,,,583,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8',
',,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8',
'8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,393',
'393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393',
'393,393,393,393,393,393,,,,393,393,393,393,393,393,393,393,393,393,',
',,,,393,393,393,393,393,393,393,393,393,,,393,,,,,,,,393,393,,393,393',
'393,393,393,393,393,,,393,393,,,,393,393,393,393,,,,,,,,,,,,,,393,393',
',393,393,393,393,393,393,393,393,393,393,393,393,,,393,393,,,,,,,,,',
',,,,393,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9',
'9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9',
',,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,',
',,,,9,713,713,713,713,713,713,713,713,713,713,713,713,713,713,713,713',
'713,713,713,713,713,713,713,713,,,,713,713,713,713,713,713,713,713,713',
'713,,,,,,713,713,713,713,713,713,713,713,713,,,713,,,,,,,,713,713,,713',
'713,713,713,713,713,713,,,713,713,,,,713,713,713,713,,,,,,,,,,,,,,713',
'713,,713,713,713,713,713,713,713,713,713,713,713,713,,,713,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,,,,71',
'71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71,71,71,71',
',71,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71,,,,,,71',
',,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,71,,,71,644,644,644,644',
'644,644,644,644,644,644,644,,644,644,,,644,644,,,938,,938,938,938,938',
'938,,,,,,644,,644,938,644,644,,644,644,644,644,644,,644,517,517,517',
'517,517,517,517,517,517,517,517,938,517,517,,,517,517,,644,,,938,938',
',,,938,,,,,517,,517,,517,517,,517,517,517,517,517,,517,273,273,273,273',
'273,273,273,273,273,273,273,,273,273,,,273,273,,517,1008,,1008,1008',
'1008,1008,1008,,,,,,273,,273,1008,273,273,,273,273,273,273,273,,273',
'469,469,469,469,469,469,469,469,469,469,469,1008,469,469,,,469,469,',
'273,,,1008,1008,,,,1008,,,,,469,,469,,469,469,,469,469,469,469,469,',
'469,424,424,424,424,424,424,424,424,424,424,424,,424,424,,,424,424,469',
'469,998,,998,998,998,998,998,,,,,,424,,424,998,424,424,,424,424,424',
'424,424,,424,21,21,21,21,21,21,21,21,21,21,21,998,21,21,,,21,21,,424',
',,998,998,,,,998,,,,,21,,21,,21,21,,21,21,21,21,21,,21,839,839,839,839',
'839,839,839,839,839,839,839,,839,839,,,839,839,,21,655,,655,655,655',
'655,655,,,,,,839,,839,655,839,839,,839,839,839,839,839,,839,730,730',
'730,730,730,730,730,730,730,730,730,655,730,730,,,730,730,,839,655,655',
'655,655,,,,655,,,,,730,,730,,730,730,,730,730,730,730,730,,730,737,737',
'737,737,737,737,737,737,737,737,737,,737,737,,,737,737,,730,,,,,,,,',
',,,,737,,737,,737,737,,737,737,737,737,737,,737,,,,,,210,210,,,210,',
',,,,,,210,210,737,210,210,210,210,210,210,210,,,210,210,,,,210,210,210',
'210,,,,,,210,,,,,,,,210,210,,210,210,210,210,210,210,210,210,210,210',
'210,210,504,504,210,,504,,,,,,,,504,504,,504,504,504,504,504,504,504',
',,504,504,,,,504,504,504,504,,,,,,504,,,,,,,,504,504,,504,504,504,504',
'504,504,504,504,504,504,504,504,437,437,504,,437,,,,,,,,437,437,,437',
'437,437,437,437,437,437,,,437,437,,,,437,437,437,437,,,,,,437,,,,,,',
',437,437,,437,437,437,437,437,437,437,437,437,437,437,437,917,917,437',
',917,,,,,,,,917,917,,917,917,917,917,917,917,917,,,917,917,,,,917,917',
'917,917,,,,,,917,,,,,,,,917,917,,917,917,917,917,917,917,917,917,917',
'917,917,917,503,503,917,,503,,,,,,,,503,503,,503,503,503,503,503,503',
'503,,,503,503,,,,503,503,503,503,,,,,,503,,,,,,,,503,503,,503,503,503',
'503,503,503,503,503,503,503,503,503,258,258,503,,258,,,,,,,,258,258',
',258,258,258,258,258,258,258,,,258,258,,,,258,258,258,258,,,,,,,,,,',
',,,258,258,,258,258,258,258,258,258,258,258,258,258,258,258,971,971',
'258,,971,,,,,,,,971,971,,971,971,971,971,971,971,971,,,971,971,,,,971',
'971,971,971,,,,,,971,,,,,,,,971,971,,971,971,971,971,971,971,971,971',
'971,971,971,971,516,516,971,,516,,,,,,,,516,516,,516,516,516,516,516',
'516,516,,,516,516,,,,516,516,516,516,,,,,,516,,,,,,,,516,516,,516,516',
'516,516,516,516,516,516,516,516,516,516,515,515,516,,515,,,,,,,,515',
'515,,515,515,515,515,515,515,515,,,515,515,,,,515,515,515,515,,,,,,515',
',,,,,,,515,515,,515,515,515,515,515,515,515,515,515,515,515,515,972',
'972,515,,972,,,,,,,,972,972,,972,972,972,972,972,972,972,,,972,972,',
',,972,972,972,972,,,,,,972,,,,,,,,972,972,,972,972,972,972,972,972,972',
'972,972,972,972,972,551,551,972,,551,,,,,,,,551,551,,551,551,551,551',
'551,551,551,,,551,551,,,,551,551,551,551,,,,,,551,,,,,,,,551,551,,551',
'551,551,551,551,551,551,551,551,551,551,551,550,550,551,,550,,,,,,,',
'550,550,,550,550,550,550,550,550,550,,,550,550,,,,550,550,550,550,,',
',,,550,,,,,,,,550,550,,550,550,550,550,550,550,550,550,550,550,550,550',
'438,438,550,,438,,,,,,,,438,438,,438,438,438,438,438,438,438,,,438,438',
',,,438,438,438,438,,,,,,438,,,,,,,,438,438,,438,438,438,438,438,438',
'438,438,438,438,438,438,544,544,438,,544,,,,,,,,544,544,,544,544,544',
'544,544,544,544,,,544,544,,,,544,544,544,544,,,,,,544,,,,,,,,544,544',
',544,544,544,544,544,544,544,544,544,544,544,544,543,543,544,,543,,',
',,,,,543,543,,543,543,543,543,543,543,543,,,543,543,,,,543,543,543,543',
',,,,,543,,,,,,,,543,543,,543,543,543,543,543,543,543,543,543,543,543',
'543,209,209,543,,209,,,,,,,,209,209,,209,209,209,209,209,209,209,,,209',
'209,,,,209,209,209,209,,,,,,209,,,,,,,,209,209,,209,209,209,209,209',
'209,209,209,209,209,209,209,,962,209,962,962,962,962,962,960,,960,960',
'960,960,960,958,962,958,958,958,958,958,,960,,,,,,956,958,956,956,956',
'956,956,,,962,,,,,,956,960,,,,962,962,,958,,962,,960,960,,,,960,,958',
'958,,956,,958,,,,,,,956,956,956,956,,,936,956,936,936,936,936,936,934',
',934,934,934,934,934,,936,,,,,,932,934,932,932,932,932,932,,,,,,,,,932',
'936,,,,,,,934,,,,936,936,,,,936,,934,934,,932,,934,,,,,,,932,932,932',
'932,,,532,932,532,532,532,532,532,,795,,795,795,795,795,795,532,,,,',
',,,795,,711,,711,711,711,711,711,,,,,,532,532,,711,,,,,795,532,532,532',
'532,,,,532,795,795,795,795,,,,795,711,,797,,797,797,797,797,797,711',
'711,711,711,,,,711,797,,799,,799,799,799,799,799,,559,,559,559,559,559',
'559,799,,,,,797,,,559,,,,,,797,797,797,797,,,,797,799,,,,,,,,559,559',
',799,799,,,,799,559,559,559,559,,,843,559,843,843,843,843,843,,845,',
'845,845,845,845,845,843,,,,,,,,845,,847,,847,847,847,847,847,,,,,,843',
',,847,,,,,845,843,843,843,843,,,,843,845,845,845,845,,,,845,847,,900',
',900,900,900,900,900,,,847,847,,,,847,900,,,,,,,,,,,,,,,,,,,,,,900,900',
',,,,,,,900,900,900,900,,,,900' ]
        racc_action_check = arr = ::Array.new(24856, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   893,    80,   nil,   412,   nil,  9058,  1007,    43, 22436, 22692,
    81,   nil,    80,   143,   240,   521,   116,   766,   nil,    15,
  5946, 23212,   243,   nil,   104,   nil,   296, 22064, 22174,  6849,
  6978,  7107,   nil,  3742,  8663,  8792,   nil,   181,   438,   540,
   275,   751, 11509, 12412, 21208,   218,  1283,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1670,   nil,    34, 19265,
 13057,    74,   nil, 12928, 21079,   nil,   nil, 20426, 20297, 20168,
 20039, 22933,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   318,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     0,   nil,   nil,   622,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   357,   nil,
 19128,   nil,   nil,   nil,   nil, 18870, 18612, 17701, 21724, 21595,
     0,   nil,   847,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   271,   nil,  3613, 12154, 12025, 11638, 24331,
 23416, 10864, 10477, 10348, 10219,  9832,  8929,   nil,   nil,   633,
   267,   192,   357,   173,   298,   366,   nil,  6720,  1022,   376,
  5817,  5688,  5430,  5301, 17443, 17056, 16927, 16282, 16153, 15379,
 14734, 14605, 14347, 14218, 13831, 13444, 13315,  6591, 18741, 13186,
 13573, 14089, 15637, 15766, 15895, 16024,   nil,   nil, 23721,   nil,
   nil,   371, 16411, 16540,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 16669,   nil, 23074,   nil,   366,   368,   nil, 17185,   429,
 17572,   nil,  5043,  5172,   nil,   nil,   610,   nil,  6204,  1136,
   434,   417,  4387,   470,   513,   483,  7236,  2065,   701,   657,
  1409,   569,   902,   nil,   539,   554,   210,   nil,   nil,   nil,
   613,   389,   578,  9703,   nil,   405,   653,   655,   473,   nil,
   673,   nil, 10606,  1936, 10735,   612,   nil,   199,   401,   664,
   649,    62,   703,   nil,   nil,   604,   168,   153, 17830, 17959,
   656,   788,   685,    90,   127,   789,   766,   129,   812,   nil,
   nil,   371,   405,   467,   nil,   808,   nil,    59, 19910,   nil,
   nil,   nil,   413,   352,   660,   351,   659,   723,   459,   590,
   703,   nil,   683,   nil, 12670,   nil,   333,   307,   551,   443,
   337,    89,   112,   436,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   734, 22564,   nil,   nil,   nil,   nil,   735,   nil,
   718,   nil, 12799,   720,   nil,  7236,   725,   nil,   724,   727,
   547,   599, 21935,   nil,   nil,   nil,   512,   402,   781,   nil,
   nil,  4777,   756,   nil, 23166,   nil,   732,   nil,   nil,  1538,
   nil,   nil,   nil,   nil,   289,   nil,   787, 23538, 24148, 19781,
   113, 19652, 19523, 19394,  2194,  1280,   351,   461,   813,   814,
   815,   818,  2968,  3097,  3226,  2710,  2581,  2452,  1619,  1022,
  1936,  1151,  2323,  2065,  2839,   713,   739,  1807,  1409, 23120,
   148, 21856,   nil,   nil,   nil,   nil,   760,   nil,    45,    78,
   772,   nil,   nil, 18483,   nil, 18354,   nil, 18225,   nil,   nil,
   nil,   nil, 18088,  1265,  2968,   777,   784,   nil,   nil,   786,
 21337,   790, 12541, 23660, 23477,   630,   832,   nil,   nil, 20950,
   796,   nil, 20821, 20692, 20563, 23904, 23843, 23028, 12283,   928,
   940,   146,   874,   nil, 11896,   nil,   nil, 11767,   nil,   nil,
   nil,   nil, 24546,  3097,   963,   nil,  2839,   171,    55,   961,
   971, 11251, 11122, 24270, 24209,   139,   nil,   nil,   889,   nil,
 24087, 24026, 10993,   nil,   nil,   nil,   471,   121,  2194, 24635,
   nil,   291,   nil,   nil,   nil,  1263,   nil,   nil,   nil,   864,
   nil,   nil,   258,   nil,   289,   nil,   nil,   853,   nil,   855,
   nil,   nil,   nil, 22308,   nil,   858, 10090,  9961,   354,   898,
  9574,  9445,  9316,  9187,   897,   nil,   nil,  8534,  8405,   901,
   nil,  8147,  8018,   nil,   nil,    39,   286,   134,   268,   869,
  4645,   874,   nil, 21820,   nil,  1807,   980,     0,   122,   nil,
  1538,  1280,   nil,   879,   nil,   930,  7760,   nil,   nil,   nil,
   905,   287,  7373,   886,   nil,   890,   230,   226,   941,   520,
  1148,   945,   903,  5559, 22982,   972,   992,   189,  1050, 17314,
   nil,   948,   nil,   443,   156, 23293,   nil,   949,   961,   nil,
   965,   966,   967,   nil,   nil,   nil,   nil,   nil,   nil,   962,
   nil,   879,   nil, 14476,   nil,   nil,   nil,  1052,   nil,   nil,
   nil,  1057,   nil,   nil,  1058,   775,   nil,  1097,   nil,   nil,
   nil,   nil,  1103,   nil,   156,   985,   167,   190,   289,   291,
 11380,   481,  1013,   nil,   986,  4129, 18999,   nil,   nil,  1109,
  1151, 24571,   671, 22820,   nil,   nil,   nil,   nil,   nil,   nil,
  4914,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   988, 13702,
 23304, 13960,   nil,   996,   nil,  8792,   nil, 23350,   nil,   nil,
 18088,   nil, 19128,   nil, 20426, 14863, 14992, 15121, 15250,   308,
 15508,   997,  1001,   nil,  1002,  1003,  1008,   nil,  1037,  1017,
  1013,  1010, 16798,   nil,   nil,  1150,   nil,   nil,  4516,  1050,
  1155,   nil,   nil,   nil,  1032,   515,   nil,   nil,  1159,   nil,
  3871,  1054,  1106,   nil,   nil,  1117,   nil,   nil,   nil,   nil,
  1081,   710,   nil,   nil,   582, 24554,   nil, 24610,   nil, 24627,
   nil,  6075,   nil,   720,   nil,  1096,   333,   nil,  1100,   nil,
   nil,   nil,   nil,  1229,   nil,  6333,  1236,  2452,  2581,   nil,
  6462,  3484,    65,   118,   nil,  1238,   522,  4645,   nil,  1241,
  1125,   nil,   nil,  1136,  1131,   nil, 21724,  7502,  7631, 23258,
   647,   nil,   nil, 24687,   nil, 24695,   nil, 24712,   nil,   nil,
  1156,  1395,  7889,   446,  1215,   nil,  1162,   nil,   nil,   nil,
  2710,   nil,   nil,   167,  8276,   nil,   nil,  3226,  3355,  1186,
  1144,   nil,   nil,   nil,  1145,  1155,   nil,  1159,  1160,   nil,
  1161,   nil,  1166,   821,  1186,  1038,   nil,   nil,   157,   nil,
  1314,  1327,   nil,   375,   nil,   nil,   nil,  1331,   nil,   nil,
 24751,   nil,  1228,   nil,   nil,  1233,  1236,  1237,  1241,   nil,
  1246,   nil,   442,   nil,   nil,   nil,   876, 23599,   nil,   nil,
   nil,  2323,  1147,   560,  1151,  1329,  1280,   nil,  1279,  1384,
   nil,   nil, 24494,   nil, 24480,   nil, 24473,   nil, 23017,   nil,
   nil,   nil,   nil,   615,  1008,  1261,  4000,   nil,   nil,   nil,
   nil,   nil,  4258,   nil,  1409,   nil, 24421,   nil, 24407,   nil,
 24400,   nil, 24393,   nil,   nil,   nil,  1137,  1310,  1315,  1398,
 21466, 23782, 23965,  1406,   nil,   nil,  1273,  1274,  1284,  1288,
  1289,   947,  1290,   917,   642,  1416,  1424,  1301,  1302,  1303,
  1304,   nil,   nil,  1315,   114,   128,   144,   594, 23201,   nil,
   nil,   nil,   nil,   908,  1318,   nil,   nil,   nil, 23109,   nil,
   nil,   nil,   nil,   155,  1332,  1336,   -77,   nil,   nil ]

racc_action_default = [
    -3,  -591,    -1,  -577,    -4,  -591,    -7,  -591,  -591,  -591,
  -591,   -29,  -591,  -591,  -591,  -279,  -591,   -41,   -44,  -579,
  -591,   -49,   -51,   -52,   -53,   -57,  -258,  -258,  -258,  -293,
  -329,  -330,   -69,   -11,   -73,   -81,   -83,  -591,  -488,  -489,
  -591,  -591,  -591,  -591,  -591,  -579,  -239,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -567,  -281,  -283,  -590,
  -558,  -301,  -303,  -591,  -591,  -307,  -310,  -577,  -591,  -591,
  -591,  -591,  -331,  -332,  -334,  -335,  -431,  -432,  -433,  -434,
  -435,  -456,  -438,  -439,  -458,  -460,  -443,  -448,  -452,  -454,
  -470,  -458,  -472,  -473,  -565,  -477,  -478,  -566,  -480,  -481,
  -482,  -483,  -484,  -485,  -486,  -487,  -492,  -493,  -591,    -2,
  -578,  -586,  -587,  -588,    -6,  -591,  -591,  -591,  -591,  -591,
    -3,   -17,  -591,  -112,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,   -22,  -121,   -11,  -591,  -591,  -248,  -591,
  -591,  -591,  -591,  -591,  -591,  -591,  -579,  -580,   -48,  -591,
  -488,  -489,  -591,  -279,  -591,  -591,  -231,  -591,   -11,  -591,
  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,
  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,  -591,
  -591,  -591,  -591,  -591,  -591,  -591,  -400,  -402,  -591,  -575,
  -576,   -58,  -248,  -591,  -300,  -406,  -415,  -417,   -64,  -412,
   -65,  -579,   -66,  -240,  -253,  -262,  -262,  -257,  -591,  -263,
  -591,  -560,  -591,  -591,   -67,   -68,  -577,   -12,  -591,   -15,
  -591,   -71,   -11,  -579,  -591,   -74,   -77,   -11,   -89,   -90,
  -591,  -591,   -97,  -293,  -296,  -579,  -591,  -329,  -330,  -333,
  -413,  -591,   -79,  -591,   -85,  -290,  -474,  -475,  -591,  -216,
  -217,  -232,  -591,   -11,  -591,  -579,  -241,  -583,  -583,  -591,
  -591,  -583,  -591,  -302,  -392,   -50,  -591,  -591,  -591,  -591,
  -577,  -591,  -578,  -488,  -489,  -591,  -591,  -279,  -591,  -345,
  -346,  -107,  -108,  -591,  -110,  -591,  -279,  -591,  -591,  -488,
  -489,  -322,  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,
  -187,  -324,  -591,  -556,  -591,  -436,  -591,  -591,  -591,  -591,
  -591,  -591,  -591,  -591,  1019,    -5,  -589,   -23,   -24,   -25,
   -26,   -27,  -591,  -591,   -19,   -20,   -21,  -122,  -591,   -30,
   -39,   -40,  -591,  -591,   -31,  -197,  -579,  -249,  -262,  -262,
  -568,  -569,  -258,  -410,  -570,  -571,  -569,  -568,  -258,  -409,
  -411,  -570,  -571,   -37,  -205,   -38,  -591,   -42,   -43,  -195,
  -263,   -45,   -46,   -47,  -579,  -299,  -591,  -591,  -591,  -248,
  -290,  -591,  -591,  -591,  -206,  -207,  -208,  -209,  -210,  -211,
  -212,  -213,  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,
  -226,  -227,  -228,  -229,  -230,  -233,  -234,  -235,  -236,  -579,
  -381,  -258,  -568,  -569,   -55,   -59,  -579,  -259,  -381,  -381,
  -579,  -295,  -254,  -591,  -255,  -591,  -260,  -591,  -264,  -563,
  -564,   -10,  -578,   -14,    -3,  -579,   -70,  -288,   -86,   -75,
  -591,  -579,  -248,  -591,  -591,   -96,  -591,  -474,  -475,  -591,
   -82,   -87,  -591,  -591,  -591,  -591,  -591,  -237,  -591,  -423,
  -591,  -284,  -591,  -242,  -585,  -584,  -244,  -585,  -291,  -292,
  -559,  -304,  -520,   -11,  -336,  -337,   -11,  -591,  -591,  -591,
  -591,  -591,  -248,  -591,  -591,  -290,  -315,  -107,  -108,  -109,
  -591,  -591,  -248,  -318,  -494,  -495,  -591,  -591,   -11,  -520,
  -326,  -579,  -437,  -457,  -462,  -591,  -464,  -440,  -459,  -591,
  -461,  -442,  -591,  -445,  -591,  -447,  -450,  -591,  -451,  -591,
  -471,    -8,   -18,  -591,   -28,  -269,  -591,  -591,  -414,  -591,
  -250,  -252,  -591,  -591,   -60,  -247,  -407,  -591,  -591,   -62,
  -408,  -591,  -591,  -298,  -581,  -568,  -569,  -568,  -569,  -579,
  -195,  -591,  -382,  -579,  -384,   -11,   -54,  -403,  -381,  -245,
   -11,   -11,  -294,  -262,  -261,  -265,  -591,  -561,  -562,   -13,
  -591,   -72,  -591,   -78,   -84,  -579,  -568,  -569,  -246,   -93,
   -95,  -591,   -80,  -591,  -204,  -214,  -215,  -579,  -590,  -590,
  -282,  -579,  -287,  -583,  -591,  -520,  -395,  -555,  -555,  -503,
  -505,  -505,  -505,  -519,  -521,  -522,  -523,  -524,  -525,  -526,
  -527,  -591,  -529,  -591,  -535,  -537,  -538,  -540,  -545,  -547,
  -548,  -550,  -551,  -552,  -591,  -590,  -338,  -590,  -308,  -339,
  -340,  -311,  -591,  -314,  -591,  -579,  -568,  -569,  -572,  -289,
  -591,  -107,  -108,  -111,  -579,   -11,  -591,  -497,  -320,  -591,
   -11,  -520,  -591,  -591,  -557,  -463,  -466,  -467,  -468,  -469,
   -11,  -441,  -444,  -446,  -449,  -453,  -455,  -123,  -267,  -591,
  -198,  -591,  -582,  -262,   -33,  -200,   -34,  -201,   -61,   -35,
  -203,   -36,  -202,   -63,  -196,  -591,  -591,  -591,  -591,  -414,
  -591,  -555,  -555,  -363,  -365,  -365,  -365,  -380,  -591,  -579,
  -386,  -526,  -591,  -533,  -543,  -591,  -405,  -404,   -11,  -591,
  -591,  -256,  -266,   -16,   -76,   -91,   -88,  -297,  -590,  -343,
   -11,  -424,  -590,  -425,  -426,  -591,  -243,  -393,  -396,  -398,
  -579,  -591,  -501,  -502,  -591,  -591,  -512,  -591,  -515,  -591,
  -517,  -591,  -347,  -591,  -349,  -351,  -358,  -526,  -579,  -531,
  -539,  -549,  -553,  -591,  -341,  -591,  -591,   -11,   -11,  -313,
  -591,   -11,  -414,  -591,  -414,  -591,  -591,   -11,  -323,  -591,
  -579,  -499,  -327,  -591,  -268,   -32,  -199,  -251,  -591,  -238,
  -591,  -361,  -362,  -371,  -373,  -591,  -376,  -591,  -378,  -383,
  -591,  -591,  -591,  -532,  -591,  -401,  -591,  -416,  -418,    -9,
   -11,  -430,  -344,  -591,  -591,  -428,  -285,   -11,   -11,  -591,
  -555,  -536,  -554,  -504,  -505,  -505,  -530,  -505,  -505,  -546,
  -505,  -541,  -579,  -591,  -356,  -591,  -528,  -305,  -591,  -306,
  -591,  -591,  -265,  -590,  -316,  -319,  -496,  -591,  -325,  -498,
  -520,  -465,  -555,  -534,  -364,  -365,  -365,  -365,  -365,  -544,
  -365,  -385,  -579,  -388,  -390,  -391,  -542,  -591,  -290,   -56,
  -429,   -11,   -98,   -99,  -591,  -591,  -106,  -427,  -591,  -591,
  -394,  -500,  -591,  -508,  -591,  -510,  -591,  -513,  -591,  -516,
  -518,  -348,  -350,  -354,  -591,  -359,   -11,  -309,  -312,  -419,
  -420,  -421,   -11,  -321,   -11,  -360,  -591,  -368,  -591,  -370,
  -591,  -374,  -591,  -377,  -379,  -387,  -591,  -289,  -572,  -423,
  -248,  -591,  -591,  -105,  -397,  -399,  -505,  -505,  -505,  -505,
  -352,  -591,  -357,  -591,  -590,  -591,  -591,  -365,  -365,  -365,
  -365,  -389,  -422,  -579,  -568,  -569,  -572,  -104,  -591,  -506,
  -509,  -511,  -514,  -591,  -355,  -342,  -317,  -328,  -591,  -366,
  -369,  -372,  -375,  -414,  -505,  -353,  -365,  -507,  -367 ]

clist = [
'215,406,295,265,269,14,333,126,126,326,14,274,274,274,412,418,257,113',
'2,648,371,520,484,533,536,219,322,540,258,428,121,204,129,129,219,219',
'219,710,14,300,300,336,337,510,588,340,335,335,131,131,335,110,6,475',
'813,476,656,6,663,261,268,270,752,471,627,401,549,109,219,219,126,425',
'219,345,355,355,312,275,275,275,624,113,624,218,755,663,913,435,688',
'691,808,778,915,387,388,389,390,909,335,335,335,335,758,615,357,361',
'627,327,700,523,526,620,621,530,563,14,570,573,573,114,219,219,219,219',
'14,14,276,276,276,293,816,341,377,952,942,705,879,876,392,383,572,574',
'481,756,827,558,559,713,900,324,323,372,757,553,348,484,328,331,531',
'330,291,759,6,373,496,617,329,792,793,583,627,391,6,912,1,654,787,532',
'618,790,867,663,868,470,478,876,413,624,624,479,274,949,309,309,782',
'863,431,432,433,434,375,991,376,378,272,284,285,915,909,422,14,219,219',
'219,379,393,219,219,219,219,219,219,882,380,385,692,309,309,309,381',
'633,382,609,14,942,830,715,663,720,642,870,706,412,418,274,274,350,749',
'850,203,874,768,629,274,403,871,709,903,859,325,403,841,842,703,802',
'945,651,219,219,399,404,879,334,775,423,427,219,338,817,869,876,511',
'339,265,818,,506,269,,902,,,752,14,752,635,752,14,,,113,300,14,,876',
'603,522,521,638,,723,275,723,,905,,537,538,300,275,638,335,335,,982',
'875,,877,14,219,,,,822,492,695,950,499,,,493,557,824,219,219,704,,619',
'638,,491,622,,1005,113,,638,561,,,276,1004,774,219,,,631,,276,771,,554',
'634,906,894,907,560,,954,219,931,821,294,1015,,,738,589,495,595,,743',
'126,501,,600,802,,,884,,,,825,539,752,,752,829,752,,752,955,,413,582',
'627,129,428,291,,274,,,291,38,663,,,,38,,714,131,624,786,,422,477,,',
',,,219,594,480,,595,,611,599,,,309,,,752,38,298,298,,976,,753,,,,511',
'992,,309,,,,,802,511,802,771,413,,,,274,,987,,,,,,413,343,359,359,359',
'14,,14,,647,,422,616,300,,219,783,,,,630,,300,422,,,777,,413,,,219,274',
'897,,,413,,,,,,274,38,980,802,14,,,14,,422,38,38,6,219,,422,921,689',
'689,,398,,,219,,,,,767,14,,,,,,,707,708,,,802,946,802,294,,951,623,',
'126,,,,,,,694,589,,,,760,,802,219,219,784,511,,219,219,,727,219,129',
',,766,776,,,,595,589,,600,,14,653,,131,,14,14,844,846,848,38,1013,785',
',,,,300,,26,,294,872,,26,872,294,,300,,,,986,38,,734,736,,309,26,739',
'741,832,,427,,,309,26,26,26,,26,,,,589,,823,886,,,,335,826,589,,733',
',335,,872,,,753,,753,403,753,,,899,26,26,,219,26,,,,14,219,126,38,,14',
',38,,,,298,38,,,14,831,,861,,,,865,,,,219,,298,,760,,,,,,,,38,26,,,',
'941,26,26,26,26,26,26,,,,993,,,,853,,,,760,,14,,,638,,957,959,961,963',
',964,,14,,,,,309,,,888,835,,,,335,,,309,,,,754,,753,,753,,753,,753,',
',,,,,219,,14,14,,,14,,,,,,14,,,,,689,,,896,,,,26,26,26,26,,,26,26,26',
'26,26,26,,916,,753,1009,1010,1011,1012,,14,,26,,924,,,14,14,,,,,,,,',
'685,,,687,,,,1018,,,,965,,,,,,,,26,26,,,,,,,,26,,,,,,422,38,,38,309',
',,,,298,14,26,,,,26,39,,298,,26,39,,,,,,,,,,,413,,,14,274,,,,,14,38',
'14,,38,26,26,765,39,299,299,,769,770,422,,,589,219,,26,26,,,,,38,,,',
'16,332,878,,880,16,,,,,26,,,344,360,360,360,,,,,,,309,,,26,,,,,,,16',
',309,,,,,,,,,,,,,,,908,,910,38,,39,,,38,38,796,798,800,,39,39,,,349',
',298,,,,,,,,,,,298,833,,,,,,,,,26,,,,,,,,,,,,,,,,,,,16,,,,,,,,,16,16',
',,,,,,,,,856,,,,,,,977,,978,,979,862,38,26,,26,400,38,,39,,,430,26,',
',,38,,,988,,989,,990,,,,,26,,,39,,,,,,890,891,,,893,,26,,,26,,,,,,26',
',,,,,359,,,1014,26,16,38,,,,26,,426,1016,,,,,38,486,,488,920,489,490',
',,,16,928,929,,,39,,,,39,,,,299,39,,26,26,,,,26,26,,,26,,38,38,,299',
'38,,,,,,38,,26,39,,,,26,26,933,935,,937,939,,940,,,969,,,,,16,,359,',
'16,,,,,16,38,,,,922,,,38,38,,984,,,,,,985,,,,,,,,,16,,,,,,,,,,,,,15',
',,,,15,,585,,,,,,,,,26,,,,13,26,26,38,,13,26,,,,,,,15,302,302,26,,,',
'999,1000,1001,1002,,,,26,38,,,,,13,38,,38,,,,,,,,,,,,347,356,356,,,',
',,,,1017,,,,,,26,,,,625,,332,,628,,,,26,,,,,39,,39,,,,,,299,15,,,,,',
',,299,15,15,,,,,,,,,625,13,26,332,26,26,,,26,,13,13,,39,26,,39,430,',
',,,,,,,,16,,16,,,,,,,,,39,,,,,,,,,26,,,,,,,26,26,,,,,,,728,,,,625,332',
'16,,,16,,,,,15,,,,,,,,,,,,,,,,,16,,39,13,,,15,39,39,772,,,,,,26,,,,299',
',,,,,,13,,,,299,,781,,,,,,,,26,,,426,,,26,,26,,,,,,,,809,16,,,,,16,16',
'26,,15,,,,15,,,,302,15,,,,,,,,,,,13,,,,13,302,39,,,13,,39,,,,15,,,,',
',39,,,,,834,,,,,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,16,,360,,,16,,,39,,',
',,,,16,,,,,39,,,,,,,,,,,,,,,,,881,,,,,,,,,,,,,,,,,,,892,39,39,,,39,',
'16,,,,39,,,,,,332,,16,,,,,,,,,,,,,,,,,360,,,,,,,,39,,,,923,,,39,39,',
',,16,16,,,16,,,,,,16,15,,15,,,,,,302,,,,,,,,,302,,,13,,13,,,,,,,,,,16',
',,,927,,39,16,16,15,,,15,,,,,,,,,,,,,,,,,13,,39,13,,15,,,39,,39,,719',
',,,,,,,,,,,,13,,,,,,,16,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,15,16,,16,,15',
'15,,,,,,,,,,,302,,,13,,,,,13,13,,302,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,15,,,,,15,,,,,,,,,,15,,,,,13,,,,,13,,',
',,,,,,,13,,,,,,,,,,,,,,,,,,,,,,356,,,,,,15,,,,226,,,,,,,,15,273,273',
'273,,,,,13,,,,,,319,320,321,,,,13,,,,,,,,,,,273,273,,,,,15,15,,,15,',
',,,,15,,,,,,,,,,13,13,,,13,,,,,,13,,,,,356,,,,,,,,15,,,,926,,,15,15',
',,,,,,,,,,,13,,,,,,,13,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,15,,,,,,,',
',,,,,,,,,,,,13,,,,,15,,,,,,15,,15,,,,273,405,273,,,424,429,,13,,,,,',
'13,,13,,,,,226,,,444,445,446,447,448,449,450,451,452,453,454,455,456',
'457,458,459,460,461,462,463,464,465,466,467,468,469,,,,,,,273,273,,',
',,,,,273,,,,,,,273,,273,,273,273,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,517,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,273,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,273,,424,610',
'405,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,273,,273,,273,,,,,,,,,,,',
',,,273,,,,,,,,,,644,645,646,,,,,,,,,,273,,,273,,,,,,,,,,,,,,273,273',
',,,,,,,,,273,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,273,730,,,273,273,735',
'737,,,,740,742,,,610,744,,,,,,,,,,,,,,,,,,,,,,,,273,,,,,,,,,,,,,,,,',
',,,,,,273,,,,,,,,,,,,,,,,,,,,,,,,273,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,273,,836,,,,,,,,,,,,,,735,737,742,740,,839,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,273,,,,,,,,,,,,,,,',
',,,273,,,,,,,,,,,,,,,,,273,836,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,273' ]
        racc_goto_table = arr = ::Array.new(3046, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'31,23,49,69,69,22,84,57,57,65,22,33,33,33,37,37,138,94,2,10,56,8,71',
'87,87,22,31,90,36,18,15,15,60,60,22,22,22,96,22,22,22,17,17,51,24,17',
'29,29,61,61,29,6,7,39,88,23,137,7,163,38,38,38,121,37,175,27,54,4,22',
'22,57,27,22,22,22,22,50,66,66,66,72,94,72,20,127,163,132,47,89,89,117',
'11,133,17,17,17,17,172,29,29,29,29,130,40,55,55,175,66,107,67,67,40',
'40,67,156,22,156,156,156,5,22,22,22,22,22,22,68,68,68,46,11,4,152,108',
'115,109,171,167,2,152,155,155,47,128,110,111,112,113,114,99,98,97,119',
'93,91,71,68,68,86,83,45,125,7,82,47,70,64,122,122,62,175,7,7,131,1,134',
'135,136,42,137,139,163,140,141,143,167,69,72,72,144,33,145,63,63,146',
'147,29,29,29,29,150,132,151,153,44,44,44,133,172,57,22,22,22,22,154',
'30,22,22,22,22,22,22,117,157,5,90,63,63,63,158,51,159,23,22,115,137',
'160,163,161,51,121,162,37,37,33,33,19,24,130,16,166,40,14,33,66,168',
'8,169,12,101,66,122,122,54,116,118,100,22,22,20,20,171,102,24,20,20',
'22,103,104,130,167,49,105,69,106,,31,69,,121,,,121,22,121,23,121,22',
',,94,22,22,,167,47,31,29,37,,156,66,156,,127,,17,17,22,66,37,29,29,',
'118,128,,128,22,22,,,,24,6,23,11,50,,,7,29,24,22,22,23,,47,37,,4,47',
',88,94,,37,29,,,68,118,51,22,,,47,,68,71,,94,47,128,89,128,36,,96,22',
'122,87,9,118,,,39,31,46,69,,39,57,46,,69,116,,,116,,,,8,4,121,,121,8',
'121,,121,122,,69,15,175,60,18,45,,33,,,45,52,163,,,,52,,47,61,72,67',
',57,44,,,,,,22,38,44,,69,,31,38,,,63,,,121,52,52,52,,128,,123,,,,49',
'10,,63,,,,,116,49,116,71,69,,,,33,,128,,,,,,69,52,52,52,52,22,,22,,29',
',57,38,22,,22,27,,,,2,,22,57,,,47,,69,,,22,33,8,,,69,,,,,,33,52,116',
'116,22,,,22,,57,52,52,7,22,,57,87,94,94,,9,,,22,,,,,84,22,,,,,,,94,94',
',,116,87,116,9,,90,68,,57,,,,,,,66,31,,,,31,,116,22,22,65,49,,22,22',
',15,22,60,,,138,49,,,,69,31,,69,,22,68,,61,,22,22,124,124,124,52,24',
'31,,,,,22,,41,,9,123,,41,123,9,,22,,,,8,52,,20,20,,63,41,20,20,56,,20',
',,63,41,41,41,,41,,,,31,,17,47,,,,29,17,31,,68,,29,,123,,,123,,123,66',
'123,,,47,41,41,,22,41,,,,22,22,57,52,,22,,52,,,,52,52,,,22,94,,65,,',
',65,,,,22,,52,,31,,,,,,,,52,41,,,,47,41,41,41,41,41,41,,,,23,,,,22,',
',,31,,22,,,37,,124,124,124,124,,124,,22,,,,,63,,,17,20,,,,29,,,63,,',
',126,,123,,123,,123,,123,,,,,,,22,,22,22,,,22,,,,,,22,,,,,94,,,94,,',
',41,41,41,41,,,41,41,41,41,41,41,,22,,123,124,124,124,124,,22,,41,,22',
',,22,22,,,,,,,,,9,,,9,,,,124,,,,31,,,,,,,,41,41,,,,,,,,41,,,,,,57,52',
',52,63,,,,,52,22,41,,,,41,53,,52,,41,53,,,,,,,,,,,69,,,22,33,,,,,22',
'52,22,,52,41,41,9,53,53,53,,9,9,57,,,31,22,,41,41,,,,,52,,,,26,28,126',
',126,26,,,,,41,,,53,53,53,53,,,,,,,63,,,41,,,,,,,26,,63,,,,,,,,,,,,',
',,126,,126,52,,53,,,52,52,165,165,165,,53,53,,,26,,52,,,,,,,,,,,52,9',
',,,,,,,,41,,,,,,,,,,,,,,,,,,,26,,,,,,,,,26,26,,,,,,,,,,9,,,,,,,126,',
'126,,126,9,52,41,,41,28,52,,53,,,28,41,,,,52,,,126,,126,,126,,,,,41',
',,53,,,,,,9,9,,,9,,41,,,41,,,,,,41,,,,,,52,,,126,41,26,52,,,,41,,26',
'126,,,,,52,28,,28,9,28,28,,,,26,9,9,,,53,,,,53,,,,53,53,,41,41,,,,41',
'41,,,41,,52,52,,53,52,,,,,,52,,41,53,,,,41,41,165,165,,165,165,,165',
',,9,,,,,26,,52,,26,,,,,26,52,,,,52,,,52,52,,9,,,,,,9,,,,,,,,,26,,,,',
',,,,,,,,25,,,,,25,,28,,,,,,,,,41,,,,21,41,41,52,,21,41,,,,,,,25,25,25',
'41,,,,165,165,165,165,,,,41,52,,,,,21,52,,52,,,,,,,,,,,,25,25,25,,,',
',,,,165,,,,,,41,,,,28,,28,,28,,,,41,,,,,53,,53,,,,,,53,25,,,,,,,,53',
'25,25,,,,,,,,,28,21,41,28,41,41,,,41,,21,21,,53,41,,53,28,,,,,,,,,,26',
',26,,,,,,,,,53,,,,,,,,,41,,,,,,,41,41,,,,,,,28,,,,28,28,26,,,26,,,,',
'25,,,,,,,,,,,,,,,,,26,,53,21,,,25,53,53,28,,,,,,41,,,,53,,,,,,,21,,',
',53,,28,,,,,,,,41,,,26,,,41,,41,,,,,,,,28,26,,,,,26,26,41,,25,,,,25',
',,,25,25,,,,,,,,,,,21,,,,21,25,53,,,21,,53,,,,25,,,,,,53,,,,,28,,,,',
',,,,21,,,,,,,,,,,,,,,,,,,,,,,,,,26,,53,,,26,,,53,,,,,,,26,,,,,53,,,',
',,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,28,53,53,,,53,,26,,,,53,,,,,,28,,26',
',,,,,,,,,,,,,,,,53,,,,,,,,53,,,,53,,,53,53,,,,26,26,,,26,,,,,,26,25',
',25,,,,,,25,,,,,,,,,25,,,21,,21,,,,,,,,,,26,,,,26,,53,26,26,25,,,25',
',,,,,,,,,,,,,,,,21,,53,21,,25,,,53,,53,,25,,,,,,,,,,,,,21,,,,,,,26,',
',,,,,,,,,,,,,,,,,,,,,,,26,,,,,25,26,,26,,25,25,,,,,,,,,,,25,,,21,,,',
',21,21,,25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,25,,,,,25,,,,,,,,,,25,,,,,21,,,,,21,,,,,,,,,,21,,,,,,,,,,,,,,,,',
',,,,,25,,,,,,25,,,,32,,,,,,,,25,32,32,32,,,,,21,,,,,,32,32,32,,,,21',
',,,,,,,,,,32,32,,,,,25,25,,,25,,,,,,25,,,,,,,,,,21,21,,,21,,,,,,21,',
',,,25,,,,,,,,25,,,,25,,,25,25,,,,,,,,,,,,21,,,,,,,21,21,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,25,,,,,,,,,,,,,,,,,,,,21,,,,,25,,,,,,25,,25,,,,32',
'32,32,,,32,32,,21,,,,,,21,,21,,,,,32,,,32,32,32,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,,,,,,,32,32,,,,,,,,32',
',,,,,,32,,32,,32,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,32,32,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,32,,,,,,,,,,,,,,,32,,,,,,,,,,32,32',
'32,,,,,,,,,,32,,,32,,,,,,,,,,,,,,32,32,,,,,,,,,,32,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,32,32,,,32,32,32,32,,,,32,32,,,32,32,,,,,,,,,,,,,,,',
',,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,32,,,,,,,,,,,,',
',32,32,32,32,,32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32',
',,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,32,32,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,32' ]
        racc_goto_check = arr = ::Array.new(3046, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   174,    18,   nil,    64,   114,    48,    52,  -302,   349,
  -500,  -557,  -520,   nil,  -240,    22,   240,   -22,  -183,   178,
    63,  1343,     5,  -207,  -362,  1323,   987,  -141,   928,   -17,
    94,   -19,  2075,   -18,   nil,   nil,     4,  -195,    33,  -208,
  -367,   639,  -296,   nil,   175,   127,    96,  -129,   nil,   -32,
    41,  -270,   425,   932,  -287,    35,   -51,    -1,   nil,   nil,
    24,    40,  -228,   158,   107,   -50,    48,  -218,    97,   -23,
  -306,  -254,  -403,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    92,    99,   -55,   nil,  -176,  -313,  -631,  -449,
  -314,    86,   nil,  -204,    14,   nil,  -522,    80,    93,    91,
  -255,   201,   210,   212,  -410,   216,  -407,  -438,  -761,  -418,
  -564,  -216,  -225,  -413,  -684,  -749,  -407,  -581,  -620,  -461,
   nil,  -551,  -490,  -149,  -127,  -452,   192,  -529,  -470,   nil,
  -511,  -678,  -765,  -759,  -357,  -478,  -157,  -476,    -6,  -608,
  -607,   -73,   nil,   -82,   -78,  -702,  -455,  -587,   nil,   nil,
   121,   121,    48,   118,   128,  -239,  -262,   136,   141,   142,
  -329,  -328,  -314,  -474,   nil,   387,  -545,  -658,  -536,  -583,
   nil,  -661,  -748,   nil,   nil,  -421 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   342,   289,   nil,   519,
   nil,   814,   nil,   286,   287,   nil,   nil,   nil,    11,    12,
    18,   225,   318,   nil,   nil,   223,   224,   nil,   279,    17,
   nil,   436,    21,    22,    23,    24,   nil,   641,   nil,   nil,
   nil,   306,   nil,    25,   407,    32,   nil,   nil,    34,    37,
    36,   nil,   220,   221,   354,   nil,   128,   415,   127,   130,
    77,    78,   nil,    46,   nil,   779,   408,   nil,   409,   420,
   596,   482,   277,   263,    47,    48,    49,    50,    51,    52,
    53,    54,    55,   nil,   264,    61,   nil,   nil,   nil,   nil,
   nil,   nil,    69,   nil,   534,    70,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   804,   670,   nil,   805,   904,
   751,   658,   nil,   659,   nil,   nil,   660,   nil,   662,   612,
   nil,   nil,   nil,   668,   nil,   nil,   nil,   712,   nil,   nil,
   nil,   nil,   419,   nil,   nil,   nil,   nil,   nil,    76,    79,
    80,   nil,   nil,   nil,   nil,   nil,   568,   nil,   nil,   nil,
   nil,   nil,   nil,   873,   657,   nil,   661,   672,   674,   763,
   677,   678,   764,   681,   684,   281 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 142, :_reduce_none,
  2, 143, :_reduce_2,
  0, 144, :_reduce_3,
  1, 144, :_reduce_4,
  3, 144, :_reduce_5,
  2, 144, :_reduce_6,
  1, 146, :_reduce_none,
  4, 146, :_reduce_8,
  4, 149, :_reduce_9,
  2, 150, :_reduce_10,
  0, 154, :_reduce_11,
  1, 154, :_reduce_12,
  3, 154, :_reduce_13,
  2, 154, :_reduce_14,
  1, 155, :_reduce_none,
  4, 155, :_reduce_16,
  0, 171, :_reduce_17,
  4, 148, :_reduce_18,
  3, 148, :_reduce_19,
  3, 148, :_reduce_20,
  3, 148, :_reduce_21,
  2, 148, :_reduce_22,
  3, 148, :_reduce_23,
  3, 148, :_reduce_24,
  3, 148, :_reduce_25,
  3, 148, :_reduce_26,
  3, 148, :_reduce_27,
  4, 148, :_reduce_28,
  1, 148, :_reduce_none,
  3, 148, :_reduce_30,
  3, 148, :_reduce_31,
  6, 148, :_reduce_32,
  5, 148, :_reduce_33,
  5, 148, :_reduce_34,
  5, 148, :_reduce_35,
  5, 148, :_reduce_36,
  3, 148, :_reduce_37,
  3, 148, :_reduce_38,
  3, 148, :_reduce_39,
  3, 148, :_reduce_40,
  1, 148, :_reduce_none,
  3, 159, :_reduce_42,
  3, 159, :_reduce_43,
  1, 170, :_reduce_none,
  3, 170, :_reduce_45,
  3, 170, :_reduce_46,
  3, 170, :_reduce_47,
  2, 170, :_reduce_48,
  1, 170, :_reduce_none,
  1, 158, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 175, :_reduce_none,
  4, 175, :_reduce_54,
  0, 183, :_reduce_55,
  5, 180, :_reduce_56,
  1, 182, :_reduce_none,
  2, 174, :_reduce_58,
  3, 174, :_reduce_59,
  4, 174, :_reduce_60,
  5, 174, :_reduce_61,
  4, 174, :_reduce_62,
  5, 174, :_reduce_63,
  2, 174, :_reduce_64,
  2, 174, :_reduce_65,
  2, 174, :_reduce_66,
  2, 174, :_reduce_67,
  2, 174, :_reduce_68,
  1, 160, :_reduce_69,
  3, 160, :_reduce_70,
  1, 187, :_reduce_71,
  3, 187, :_reduce_72,
  1, 186, :_reduce_none,
  2, 186, :_reduce_74,
  3, 186, :_reduce_75,
  5, 186, :_reduce_76,
  2, 186, :_reduce_77,
  4, 186, :_reduce_78,
  2, 186, :_reduce_79,
  4, 186, :_reduce_80,
  1, 186, :_reduce_81,
  3, 186, :_reduce_82,
  1, 190, :_reduce_none,
  3, 190, :_reduce_84,
  2, 189, :_reduce_85,
  3, 189, :_reduce_86,
  1, 192, :_reduce_87,
  3, 192, :_reduce_88,
  1, 191, :_reduce_89,
  1, 191, :_reduce_90,
  4, 191, :_reduce_91,
  3, 191, :_reduce_92,
  3, 191, :_reduce_93,
  3, 191, :_reduce_94,
  3, 191, :_reduce_95,
  2, 191, :_reduce_96,
  1, 191, :_reduce_97,
  1, 167, :_reduce_98,
  1, 167, :_reduce_99,
  4, 167, :_reduce_100,
  3, 167, :_reduce_101,
  3, 167, :_reduce_102,
  3, 167, :_reduce_103,
  3, 167, :_reduce_104,
  2, 167, :_reduce_105,
  1, 167, :_reduce_106,
  1, 195, :_reduce_107,
  1, 195, :_reduce_none,
  2, 196, :_reduce_109,
  1, 196, :_reduce_110,
  3, 196, :_reduce_111,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 200, :_reduce_117,
  1, 200, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 157, :_reduce_121,
  0, 203, :_reduce_122,
  4, 157, :_reduce_123,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  3, 173, :_reduce_195,
  5, 173, :_reduce_196,
  3, 173, :_reduce_197,
  5, 173, :_reduce_198,
  6, 173, :_reduce_199,
  5, 173, :_reduce_200,
  5, 173, :_reduce_201,
  5, 173, :_reduce_202,
  5, 173, :_reduce_203,
  4, 173, :_reduce_204,
  3, 173, :_reduce_205,
  3, 173, :_reduce_206,
  3, 173, :_reduce_207,
  3, 173, :_reduce_208,
  3, 173, :_reduce_209,
  3, 173, :_reduce_210,
  3, 173, :_reduce_211,
  3, 173, :_reduce_212,
  3, 173, :_reduce_213,
  4, 173, :_reduce_214,
  4, 173, :_reduce_215,
  2, 173, :_reduce_216,
  2, 173, :_reduce_217,
  3, 173, :_reduce_218,
  3, 173, :_reduce_219,
  3, 173, :_reduce_220,
  3, 173, :_reduce_221,
  3, 173, :_reduce_222,
  3, 173, :_reduce_223,
  3, 173, :_reduce_224,
  3, 173, :_reduce_225,
  3, 173, :_reduce_226,
  3, 173, :_reduce_227,
  3, 173, :_reduce_228,
  3, 173, :_reduce_229,
  3, 173, :_reduce_230,
  2, 173, :_reduce_231,
  2, 173, :_reduce_232,
  3, 173, :_reduce_233,
  3, 173, :_reduce_234,
  3, 173, :_reduce_235,
  3, 173, :_reduce_236,
  3, 173, :_reduce_237,
  6, 173, :_reduce_238,
  1, 173, :_reduce_none,
  1, 169, :_reduce_none,
  1, 205, :_reduce_none,
  2, 205, :_reduce_none,
  4, 205, :_reduce_243,
  2, 205, :_reduce_244,
  3, 210, :_reduce_245,
  0, 211, :_reduce_246,
  1, 211, :_reduce_none,
  0, 164, :_reduce_248,
  1, 164, :_reduce_none,
  2, 164, :_reduce_none,
  4, 164, :_reduce_251,
  2, 164, :_reduce_252,
  1, 185, :_reduce_253,
  2, 185, :_reduce_254,
  2, 185, :_reduce_255,
  4, 185, :_reduce_256,
  1, 185, :_reduce_257,
  0, 214, :_reduce_258,
  2, 179, :_reduce_259,
  2, 213, :_reduce_260,
  2, 212, :_reduce_261,
  0, 212, :_reduce_262,
  1, 207, :_reduce_263,
  2, 207, :_reduce_264,
  3, 207, :_reduce_265,
  4, 207, :_reduce_266,
  3, 168, :_reduce_267,
  4, 168, :_reduce_268,
  2, 168, :_reduce_269,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_280,
  0, 239, :_reduce_281,
  4, 204, :_reduce_282,
  0, 240, :_reduce_283,
  0, 241, :_reduce_284,
  6, 204, :_reduce_285,
  0, 242, :_reduce_286,
  4, 204, :_reduce_287,
  3, 204, :_reduce_288,
  3, 204, :_reduce_289,
  2, 204, :_reduce_290,
  3, 204, :_reduce_291,
  3, 204, :_reduce_292,
  1, 204, :_reduce_293,
  4, 204, :_reduce_294,
  3, 204, :_reduce_295,
  1, 204, :_reduce_296,
  5, 204, :_reduce_297,
  4, 204, :_reduce_298,
  3, 204, :_reduce_299,
  2, 204, :_reduce_300,
  1, 204, :_reduce_none,
  2, 204, :_reduce_302,
  0, 243, :_reduce_303,
  3, 204, :_reduce_304,
  6, 204, :_reduce_305,
  6, 204, :_reduce_306,
  0, 244, :_reduce_307,
  0, 245, :_reduce_308,
  7, 204, :_reduce_309,
  0, 246, :_reduce_310,
  0, 247, :_reduce_311,
  7, 204, :_reduce_312,
  5, 204, :_reduce_313,
  4, 204, :_reduce_314,
  0, 248, :_reduce_315,
  0, 249, :_reduce_316,
  9, 204, :_reduce_317,
  0, 250, :_reduce_318,
  6, 204, :_reduce_319,
  0, 251, :_reduce_320,
  7, 204, :_reduce_321,
  0, 252, :_reduce_322,
  5, 204, :_reduce_323,
  0, 253, :_reduce_324,
  6, 204, :_reduce_325,
  0, 254, :_reduce_326,
  0, 255, :_reduce_327,
  9, 204, :_reduce_328,
  1, 204, :_reduce_329,
  1, 204, :_reduce_330,
  1, 204, :_reduce_331,
  1, 204, :_reduce_332,
  1, 163, :_reduce_none,
  1, 233, :_reduce_334,
  1, 236, :_reduce_335,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  2, 228, :_reduce_338,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 229, :_reduce_none,
  5, 229, :_reduce_342,
  1, 152, :_reduce_none,
  2, 152, :_reduce_344,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  1, 256, :_reduce_347,
  3, 256, :_reduce_348,
  1, 259, :_reduce_349,
  3, 259, :_reduce_350,
  1, 258, :_reduce_none,
  4, 258, :_reduce_352,
  6, 258, :_reduce_353,
  3, 258, :_reduce_354,
  5, 258, :_reduce_355,
  2, 258, :_reduce_356,
  4, 258, :_reduce_357,
  1, 258, :_reduce_358,
  3, 258, :_reduce_359,
  4, 260, :_reduce_360,
  2, 260, :_reduce_361,
  2, 260, :_reduce_362,
  1, 260, :_reduce_363,
  2, 265, :_reduce_364,
  0, 265, :_reduce_365,
  6, 266, :_reduce_366,
  8, 266, :_reduce_367,
  4, 266, :_reduce_368,
  6, 266, :_reduce_369,
  4, 266, :_reduce_370,
  2, 266, :_reduce_none,
  6, 266, :_reduce_372,
  2, 266, :_reduce_373,
  4, 266, :_reduce_374,
  6, 266, :_reduce_375,
  2, 266, :_reduce_376,
  4, 266, :_reduce_377,
  2, 266, :_reduce_378,
  4, 266, :_reduce_379,
  1, 266, :_reduce_none,
  0, 181, :_reduce_381,
  1, 181, :_reduce_382,
  3, 270, :_reduce_383,
  1, 270, :_reduce_384,
  4, 270, :_reduce_385,
  1, 271, :_reduce_386,
  4, 271, :_reduce_387,
  1, 272, :_reduce_388,
  3, 272, :_reduce_389,
  1, 273, :_reduce_390,
  1, 273, :_reduce_none,
  0, 277, :_reduce_392,
  3, 227, :_reduce_393,
  4, 275, :_reduce_394,
  1, 275, :_reduce_395,
  0, 280, :_reduce_396,
  4, 276, :_reduce_397,
  0, 281, :_reduce_398,
  4, 276, :_reduce_399,
  0, 282, :_reduce_400,
  5, 279, :_reduce_401,
  2, 176, :_reduce_402,
  4, 176, :_reduce_403,
  5, 176, :_reduce_404,
  5, 176, :_reduce_405,
  2, 226, :_reduce_406,
  4, 226, :_reduce_407,
  4, 226, :_reduce_408,
  3, 226, :_reduce_409,
  3, 226, :_reduce_410,
  3, 226, :_reduce_411,
  2, 226, :_reduce_412,
  1, 226, :_reduce_413,
  4, 226, :_reduce_414,
  0, 284, :_reduce_415,
  5, 225, :_reduce_416,
  0, 285, :_reduce_417,
  5, 225, :_reduce_418,
  5, 231, :_reduce_419,
  1, 286, :_reduce_420,
  1, 286, :_reduce_none,
  6, 151, :_reduce_422,
  0, 151, :_reduce_423,
  1, 287, :_reduce_424,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 288, :_reduce_427,
  1, 288, :_reduce_none,
  2, 153, :_reduce_429,
  1, 153, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 216, :_reduce_434,
  1, 290, :_reduce_435,
  2, 290, :_reduce_436,
  3, 291, :_reduce_437,
  1, 291, :_reduce_438,
  1, 291, :_reduce_439,
  3, 217, :_reduce_440,
  4, 218, :_reduce_441,
  3, 219, :_reduce_442,
  0, 295, :_reduce_443,
  3, 295, :_reduce_444,
  1, 296, :_reduce_445,
  2, 296, :_reduce_446,
  3, 221, :_reduce_447,
  0, 298, :_reduce_448,
  3, 298, :_reduce_449,
  3, 220, :_reduce_450,
  3, 222, :_reduce_451,
  0, 299, :_reduce_452,
  3, 299, :_reduce_453,
  0, 300, :_reduce_454,
  3, 300, :_reduce_455,
  0, 292, :_reduce_456,
  2, 292, :_reduce_457,
  0, 293, :_reduce_458,
  2, 293, :_reduce_459,
  0, 294, :_reduce_460,
  2, 294, :_reduce_461,
  1, 297, :_reduce_462,
  2, 297, :_reduce_463,
  0, 302, :_reduce_464,
  4, 297, :_reduce_465,
  1, 301, :_reduce_466,
  1, 301, :_reduce_467,
  1, 301, :_reduce_468,
  1, 301, :_reduce_none,
  1, 201, :_reduce_470,
  3, 202, :_reduce_471,
  1, 289, :_reduce_472,
  1, 289, :_reduce_473,
  2, 289, :_reduce_474,
  2, 289, :_reduce_475,
  1, 193, :_reduce_476,
  1, 193, :_reduce_477,
  1, 193, :_reduce_478,
  1, 193, :_reduce_479,
  1, 193, :_reduce_480,
  1, 194, :_reduce_481,
  1, 194, :_reduce_482,
  1, 194, :_reduce_483,
  1, 194, :_reduce_484,
  1, 194, :_reduce_485,
  1, 194, :_reduce_486,
  1, 194, :_reduce_487,
  1, 223, :_reduce_488,
  1, 223, :_reduce_489,
  1, 162, :_reduce_490,
  1, 162, :_reduce_491,
  1, 166, :_reduce_492,
  1, 166, :_reduce_493,
  1, 234, :_reduce_494,
  0, 303, :_reduce_495,
  4, 234, :_reduce_496,
  2, 234, :_reduce_497,
  3, 237, :_reduce_498,
  2, 237, :_reduce_499,
  4, 304, :_reduce_500,
  2, 304, :_reduce_501,
  2, 304, :_reduce_502,
  1, 304, :_reduce_503,
  2, 306, :_reduce_504,
  0, 306, :_reduce_505,
  6, 278, :_reduce_506,
  8, 278, :_reduce_507,
  4, 278, :_reduce_508,
  6, 278, :_reduce_509,
  4, 278, :_reduce_510,
  6, 278, :_reduce_511,
  2, 278, :_reduce_512,
  4, 278, :_reduce_513,
  6, 278, :_reduce_514,
  2, 278, :_reduce_515,
  4, 278, :_reduce_516,
  2, 278, :_reduce_517,
  4, 278, :_reduce_518,
  1, 278, :_reduce_519,
  0, 278, :_reduce_520,
  1, 274, :_reduce_521,
  1, 274, :_reduce_522,
  1, 274, :_reduce_523,
  1, 274, :_reduce_524,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  1, 308, :_reduce_527,
  3, 308, :_reduce_528,
  1, 267, :_reduce_529,
  3, 267, :_reduce_530,
  2, 309, :_reduce_531,
  2, 310, :_reduce_532,
  1, 261, :_reduce_533,
  3, 261, :_reduce_534,
  1, 305, :_reduce_535,
  3, 305, :_reduce_536,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 262, :_reduce_539,
  1, 262, :_reduce_540,
  3, 312, :_reduce_541,
  3, 313, :_reduce_542,
  1, 268, :_reduce_543,
  3, 268, :_reduce_544,
  1, 307, :_reduce_545,
  3, 307, :_reduce_546,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  2, 269, :_reduce_549,
  1, 269, :_reduce_550,
  1, 315, :_reduce_none,
  1, 315, :_reduce_none,
  2, 264, :_reduce_553,
  2, 263, :_reduce_554,
  0, 263, :_reduce_555,
  1, 238, :_reduce_none,
  3, 238, :_reduce_557,
  0, 224, :_reduce_558,
  2, 224, :_reduce_none,
  1, 209, :_reduce_560,
  3, 209, :_reduce_561,
  3, 316, :_reduce_562,
  2, 316, :_reduce_563,
  2, 316, :_reduce_564,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  0, 145, :_reduce_none,
  1, 145, :_reduce_none,
  0, 172, :_reduce_none,
  1, 172, :_reduce_none,
  2, 188, :_reduce_581,
  2, 165, :_reduce_582,
  0, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 235, :_reduce_586,
  1, 235, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_none,
  0, 206, :_reduce_590 ]

racc_reduce_n = 591

racc_shift_n = 1019

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tEQL => 139,
  :tLOWEST => 140 }

racc_nt_base = 141

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@22",
  "f_args",
  "do_block",
  "@23",
  "@24",
  "@25",
  "operation3",
  "@26",
  "@27",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@28",
  "@29",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      if @context.in_def
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_55(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_56(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

def _reduce_117(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_122(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

def _reduce_243(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val
                    
    result
end

def _reduce_246(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = []
                    
    result
end

# reduce 249 omitted

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_257(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_259(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = []
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_304(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_314(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_318(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_319(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_320(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_321(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_322(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_323(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_324(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_335(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = val
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_353(val, _values, result)
                      @static_env.declare val[3][0]

                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_356(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = []
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_382(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = []
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_390(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_393(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_398(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_400(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_402(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_415(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_416(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_417(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 421 omitted

def _reduce_422(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = []
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 425 omitted

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 428 omitted

def _reduce_429(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_435(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_441(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = []
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = []
                    
    result
end

def _reduce_449(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = []
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = []
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = []
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = []
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_465(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_475(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_495(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_500(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = []
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_520(val, _values, result)
                      result = []
                    
    result
end

def _reduce_521(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_522(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_523(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 525 omitted

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_528(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_530(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_531(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_532(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_535(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 537 omitted

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_541(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_542(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_543(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 547 omitted

# reduce 548 omitted

def _reduce_549(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 551 omitted

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_554(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = []
                    
    result
end

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      result = []
                    
    result
end

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_563(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_564(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_582(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

def _reduce_586(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby20
  end   # module Parser
