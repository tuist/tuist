# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby23 < Parser::Base


  def version
    23
  end

  def default_encoding
    Encoding::UTF_8
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-580,-98,540,-101,518,-104,695,-580,-580,-580,272,-103,-580,-580,-580',
'115,-580,272,540,582,114,221,218,219,-83,-580,-580,-580,-580,580,540',
'785,967,546,-69,871,-580,-580,540,-580,-580,-580,-580,-580,-493,-105',
'-99,817,785,-97,-97,-91,399,540,111,218,219,401,400,-286,-98,-104,222',
'123,-100,-102,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580',
'-580,-580,-580,-576,695,-580,-580,-580,581,751,-580,-577,-105,-580,695',
'-104,-580,-580,579,-580,271,-580,-286,-580,-97,-580,-580,271,-580,-580',
'-580,-580,-580,115,-580,-580,-580,-100,114,222,-91,-102,-98,115,-101',
'208,-104,-98,114,-101,-580,-104,-103,-580,-580,-580,-580,-103,-580,115',
'-580,-482,822,-99,114,-580,-101,870,-482,-482,-482,115,222,-482,-482',
'-482,114,-482,-90,115,-91,209,-88,-91,114,-482,-105,-482,-482,-482,-97',
'-105,-89,-91,115,-97,-90,-482,-482,114,-482,-482,-482,-482,-482,-100',
'-102,210,115,217,-100,-102,-101,114,617,218,219,-92,115,749,261,-96',
'552,114,-95,-103,553,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482',
'-482,-482,-482,-482,320,272,-482,-482,-482,-91,-482,-482,616,-93,-482',
'321,-93,-482,-482,222,-482,389,-482,402,-482,-90,-482,-482,750,-482',
'-482,-482,-482,-482,-289,-482,-494,-482,446,-100,-576,-289,-289,-289',
'-99,-576,-92,-289,-289,-99,-289,-482,617,-577,-482,-482,-482,-482,447',
'-482,448,-482,-580,617,449,-90,-482,-482,-90,267,-289,-289,222,-289',
'-289,-289,-289,-289,-90,218,219,-479,-93,214,-92,-102,-92,616,-479,-92',
'265,530,271,-98,532,272,617,-94,616,-92,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-580,-105,-289,-289,-289,221',
'600,-580,-93,480,-289,-93,-576,-289,93,94,-580,616,-289,840,-289,-93',
'-289,-289,489,-289,-289,-289,-289,-289,-479,-289,-479,-289,215,-580',
'491,-479,-479,-479,93,94,-479,-479,-479,267,-479,-289,493,530,-289,-289',
'532,-94,-479,-289,-479,-479,-479,115,688,687,-289,-103,114,-580,-479',
'-479,271,-479,-479,-479,-479,-479,-494,530,-99,672,529,669,668,667,672',
'670,669,668,667,-486,670,501,115,-68,95,96,-486,114,-479,-479,-479,-479',
'-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,115,222,-479,-479',
'-479,114,-479,-479,95,96,-479,-89,567,-479,-479,567,-479,567,-479,567',
'-479,-98,-479,-479,504,-479,-479,-479,-479,-479,567,-479,-289,-479,222',
'218,219,971,115,-289,-289,-289,-486,114,-289,-289,-289,-479,-289,986',
'-479,-479,-479,-479,889,-479,115,-479,-289,-289,-289,114,-479,-479,530',
'-573,216,532,-289,-289,505,-289,-289,-289,-289,-289,569,568,565,569',
'568,569,568,569,568,565,817,785,512,728,276,726,222,632,569,568,570',
'267,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,242,-96,-289,-289,-289,-479,752,-289,218,219,-289,-105,-479,-289',
'-289,567,-289,-573,-289,515,-289,-479,-289,-289,519,-289,-289,-289,-289',
'-289,242,-289,239,-289,218,219,241,240,567,672,-573,669,668,667,677',
'670,567,-289,222,567,-289,-289,-289,-289,680,-289,81,-289,-580,533,735',
'534,-289,-103,493,-580,-580,-580,82,546,-479,-580,-580,391,-580,550',
'675,551,83,569,568,572,559,-580,584,685,684,688,687,-491,587,-574,681',
'-261,-580,-580,-491,-580,-580,-580,-580,-580,569,568,578,-491,589,-90',
'222,-485,569,568,574,569,568,583,-485,-99,222,118,119,120,121,122,-580',
'-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,593',
'594,-580,-580,-580,-482,601,-484,214,267,-580,604,-482,-580,-484,555',
'-491,-574,-580,607,-580,-482,-580,-580,557,-580,-580,-580,-580,-580',
'242,-580,-580,-580,242,242,-485,-487,-492,518,-574,214,-279,-493,-487',
'-492,242,-580,511,-279,-580,-580,-582,-92,-492,-580,222,509,-279,-582',
'-582,-582,-580,-101,-582,-582,-582,214,-582,222,-482,222,-484,215,549',
'-83,636,-582,-582,-582,-582,222,523,547,647,652,-95,653,-582,-582,-88',
'-582,-582,-582,-582,-582,-104,214,655,691,-97,-333,-487,-492,444,546',
'215,-279,-333,-490,698,715,725,445,729,730,-490,-333,-582,-582,-582',
'-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,215,214,-582',
'-582,-582,-262,736,-582,521,480,-582,480,-488,-582,-582,222,-582,445',
'-582,-488,-582,754,-582,-582,261,-582,-582,-582,-582,-582,215,-582,-582',
'-582,-333,491,214,-489,-290,-482,493,778,-490,265,-489,-290,-482,-582',
'242,647,-582,-582,-582,-582,-290,-582,-414,-582,222,595,267,596,-582',
'-414,-414,-414,215,267,-414,-414,-414,214,-414,647,242,785,222,-488',
'213,794,239,-414,-414,-414,241,240,797,211,798,800,802,804,-414,-414',
'812,-414,-414,-414,-414,-414,813,215,-489,-290,-482,-289,-91,672,-93',
'669,668,667,-289,670,814,785,-100,-577,-102,821,222,-289,-414,-414,-414',
'-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,215,222,-414',
'-414,-414,830,-263,-414,806,267,-414,839,842,-414,-414,797,-414,809',
'-414,845,-414,847,-414,-414,849,-414,-414,-414,-414,-414,-296,-414,-414',
'-414,-289,851,222,-296,-296,-296,853,854,-296,-296,-296,214,-296,-414',
'242,857,-414,-414,922,-414,859,-414,-296,-296,860,720,721,557,-414,722',
'109,110,-296,-296,647,-296,-296,-296,-296,-296,862,214,-261,866,868',
'214,239,222,922,887,241,240,977,237,238,222,891,557,893,899,902,975',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296',
'215,-290,-296,-296,-296,222,906,-296,-290,276,-296,-264,916,-296,-296',
'923,-296,-290,-296,924,-296,935,-296,-296,797,-296,-296,-296,-296,-296',
'215,-296,-581,-296,215,937,939,941,943,-581,-581,-581,677,943,-581,-581',
'-581,-296,-581,222,-296,-296,680,-296,949,-296,952,-581,-581,-581,-581',
'919,-296,669,668,667,-290,670,-581,-581,953,-581,-581,-581,-581,-581',
'919,-289,669,668,667,958,670,715,-289,688,687,797,961,-577,681,963,965',
'-289,967,967,978,988,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581',
'-581,-581,-581,-581,-577,677,-581,-581,-581,-576,652,-581,1003,1004',
'-581,680,1005,-581,-581,943,-581,943,-581,943,-581,1010,-581,-581,988',
'-581,-581,-581,-581,-581,-289,-581,-581,-581,118,119,120,121,122,118',
'119,120,121,122,688,687,1013,-581,1014,681,-581,-581,-581,-581,1015',
'-581,-244,-581,967,967,967,222,-581,-244,-244,-244,988,943,-244,-244',
'-244,672,-244,669,668,667,677,670,242,988,,-244,-244,,,672,680,669,668',
'667,,670,-244,-244,,-244,-244,-244,-244,-244,672,,669,668,667,,670,',
'675,,239,,,,241,240,,237,238,688,687,,806,672,681,669,668,667,,670,',
'948,,-244,,-280,,806,,,-244,,-280,-280,-280,267,-244,-280,-280,-280',
'672,-280,669,668,667,,670,,,,806,-280,-280,-280,,,,,-244,-244,,-280',
'-280,,-280,-280,-280,-280,-280,,,,,-244,,,-244,806,,,,-244,,,,,809,',
'-244,,,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,,,-280,-280,-280,,,-280,,,-280,,,-280,-280,,-280,,-280,,-280,,-280',
'-280,,-280,-280,-280,-280,-280,,-280,,-280,,,672,,669,668,667,,670,',
',,,-280,,,-280,-280,-280,-280,,-280,-244,-280,,,,,-280,-244,-244,-244',
',,-244,-244,-244,242,-244,806,,,,,,,,-244,-244,-244,,,,256,257,,,,-244',
'-244,,-244,-244,-244,-244,-244,,,,239,,245,,241,240,,237,238,,,243,',
'244,,,,,,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244',
'-244,-244,,,-244,-244,-244,,,-244,,267,-244,,,-244,-244,,-244,,-244',
',-244,,-244,-244,,-244,-244,-244,-244,-244,,-244,-244,-244,672,,669',
'668,667,,670,,672,,669,668,667,-244,670,,-244,-244,,-244,,-244,294,74',
'75,71,9,57,-244,,,63,64,,,,67,806,65,66,68,30,31,72,73,806,,,,,29,28',
'27,103,102,104,105,,,19,,,,,605,8,45,296,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248,250,258,259',
'254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241',
'240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',260,,-238,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,605,8,45,296,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,246,251,252',
'253,248,250,258,259,254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60',
',35,239,,245,44,241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,260,,,,,62,,83,95,96,5,74,75,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,590',
'8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242',
'246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,40,,,33',
',,58,59,,,60,,35,239,,245,44,241,240,,237,238,249,247,243,20,244,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62,,83,95,96,294,74,75,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238,249',
'247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62,,83',
'95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248,250,258,259',
'254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241',
'240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',260,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60,,35',
'239,,245,44,241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,260,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45',
'296,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242',
'246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,40,,,33',
',,58,59,,,60,,35,239,,245,44,241,240,,237,238,249,247,243,20,244,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62,,83,95,96,294,74,75,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238,249',
'247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62,,83',
'95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248,250,258,259',
'254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241',
'240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',260,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60,,35',
'239,,245,44,241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,260,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45',
'296,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242',
'246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,40,,,33',
',,58,59,,,60,,35,239,,245,44,241,240,,237,238,249,247,243,20,244,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62,,83,95,96,5,74,75,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238,249,247,243',
'20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62,,83,95,96,294',
'74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103',
'102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,242,246,251,252,253,248,250,258,259,254,255,,235',
'236,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238',
'249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62',
',83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44',
'241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,',
'82,90,,260,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,246,251,252',
'253,248,250,258,259,254,255,,235,236,,,256,257,,40,,,33,,,58,59,,,60',
',35,239,,245,44,241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,260,,,,,62,,83,95,96,5,74,75,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,',
'8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242',
'246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,40,,,33',
',,58,59,,,60,,35,239,,245,44,241,240,,237,238,249,247,243,20,244,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,222,260,,,,,62,,83,95,96,294,74,75',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238,249',
'247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,260,,,,,62,,83',
'95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248,250,,,254,255',
',,,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238',
'249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83',
'95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,242,-601,-601,-601,-601,248,250,,,-601',
'-601,,,,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237',
'238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62',
',83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,242,-601,-601,-601,-601,248,250',
',,-601,-601,,,,,,256,257,,40,,,298,,,58,59,,,60,,35,239,,245,44,241',
'240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248',
'250,258,,254,255,,,,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44',
'241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,',
'82,90,,,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,,,,,,,,,,,',
',,,,256,257,,40,,,298,,,58,59,,,60,,35,239,,245,44,241,240,,237,238',
',,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96',
'294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,242,-601,-601,-601,-601,248,250,,,-601,-601',
',,,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238',
'249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83',
'95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,242,-601,-601,-601,-601,248,250,,,-601',
'-601,,,,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237',
'238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62',
',83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248,250,258',
'259,254,255,,-601,-601,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245',
'44,241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,-601,-601,-601',
'-601,248,250,,,-601,-601,,,,,,256,257,,40,,,33,,,58,59,,,60,,35,239',
',245,44,241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,-601,-601',
'-601,-601,248,250,,,-601,-601,,,,,,256,257,,40,,,33,,,58,59,,,60,,35',
'239,,245,44,241,240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296',
'10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,,,,',
',,,,,,,,,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237',
'238,,,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83',
'95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98',
'100,,101,109,110,,93,94,42,43,41,242,246,251,252,253,248,250,258,259',
'254,255,,-601,-601,,,256,257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241',
'240,,237,238,249,247,243,20,244,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,,62,,83,95,96,294,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,296,10,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,242,,,,,,,,,,,,,,,,256',
'257,,40,,,33,,,58,59,,,60,,35,239,,245,44,241,240,,237,238,,,243,20',
'244,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,294,74',
'75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,42,43,41,242,,,,,,,,,,,,,,,,256,257,,40,,,298,,,58,59,,,60,,35',
'239,,,44,241,240,,237,238,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,',
',,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,242,,,,,,,,,,,,,,,,256,257,,227',
',,233,,,58,59,,,60,,,239,,245,44,241,240,,237,238,,,,232,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,311',
',242,107,106,108,97,56,99,98,100,,101,109,110,,93,94,256,257,317,,,',
',,,,,,,,,,239,,245,,241,240,307,237,238,303,,,58,59,,,60,,,,,,,,,,,',
',,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96',
'63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105',
',,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,',
'234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,74,75,71,9,57,,,',
'63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19',
',,,,,8,45,,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,629,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,311,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,,,317,,,,,,,,,,,,,,,,,,',
',307,,,233,,,58,59,,,60,,,672,,669,668,667,677,670,,,,,,,,,680,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,507,,675,62,,83,95,96,74,75,71,,57,688',
'687,,63,64,681,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,',
'234,,,,,,,45,,,107,106,108,97,56,99,98,100,288,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,283,,44,,,289,,,',
',,232,,,,,91,286,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104',
'105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,',
'234,,,,,,,311,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,317',
',,,,,,,,,,,,,,,,,,,307,,,303,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313',
'314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314',
'72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,311,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,,,317,,,,,,,,,,,,,,,,,,,,856,,,233',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309',
'310,316,103,102,104,105,,,234,,,,,,,311,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,,,317,,,,,,,,,,,,,,,,,,,,930,,,233,,,58,59,,,60',
',,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103',
'102,104,105,,,234,,,,,,,311,,,107,106,108,97,56,99,98,100,,101,109,110',
',93,94,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,58,59,,,60,,302,,,,,,,,',
',,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104',
'105,,,234,,,,,,,311,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
',,317,,,,,,,,,,,,,,,,,,,,307,,,233,,,58,59,,,60,,,672,,669,668,667,677',
'670,,,,,,,,,680,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,319,,675,62,',
'83,95,96,74,75,71,,57,688,687,,63,64,681,,,67,,65,66,68,313,314,72,73',
',,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233',
',,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,,,,62,,83,95,96,74,75,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,7,10,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,',
'60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44',
',,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,',
',,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,',
',,,,311,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,317,,,,',
',,,,,,,,,,,,,,,307,,,303,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314',
'72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,,,283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313',
'314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,',
',,,227,,,233,,,58,59,,,60,,629,,283,,44,,,289,,,,,,232,,,,,91,286,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,222,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313',
'314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'227,,,233,523,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,',
',,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58',
'59,,,60,,733,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,',
',,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,',
',,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,',
',,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,407,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,',
',,,227,,,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,227,,,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,285,,,,44,,,,,,,,,232,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,311',
',,107,106,108,356,56,99,98,357,,101,109,110,,93,94,,,317,,,,,,,,,,,',
',,,,,363,,,358,,,233,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,311,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,,,317,,,,,,,,,,,,,,,,,,',
',351,,,33,,,58,59,,,60,,35,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,',
',74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309',
'310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,',
'60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44',
',,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,115,,,,,114,62,,83,95,96,74,75',
'71,,57,,,,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102',
'104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,',
',,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104',
'105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,',
'234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313',
'314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314',
'72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72',
'73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233',
',,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,',
',,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58',
'59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309',
'310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,',
'60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310',
'316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,',
',,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316',
'103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44',
',,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102',
'104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,',
',,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104',
'105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,',
'234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,',
',45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,',
',,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313',
'314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314',
'72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56',
'99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233',
',,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97',
'56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86',
'88,87,89,,,,,82,90,222,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,311,,',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,,,317,,,,,,,,,,,,,,',
',,,,,856,,,233,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314',
'72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89',
',,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72',
'73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233',
',,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,',
',,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58',
'59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309',
'310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100',
',101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,',
'60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310',
'316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,',
',,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316',
'103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44',
',,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102',
'104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,',
',,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234',
',,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41',
',,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,407,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,',
'107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,',
',,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86',
'88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108',
'97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227',
',,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,',
',,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72',
'73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97',
'56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233',
',,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,',
',,,309,310,316,103,102,104,105,,,234,,,,,,,311,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75',
'71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103',
'102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,288,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,285,',
'283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310',
'316,103,102,104,105,,,234,,,,,,,311,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,58,59,,,60,,,672',
',669,668,667,677,670,,,,,,,,,680,,91,81,84,85,,86,88,87,89,,,,,82,90',
',,,,,675,62,,83,95,96,74,75,71,9,57,688,687,,63,64,681,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,8,45,,10,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56',
'99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233',
',,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82',
'90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,',
',,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99',
'98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58',
'59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,',
',,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,',
',,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,74,75',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104',
'105,,,19,,,,,,8,45,296,10,107,106,108,97,56,99,98,100,,101,109,110,',
'93,94,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,',
',,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,391,62,,83,95,96',
'74,75,71,,57,,,,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316',
'103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44',
',,,,,,,,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57',
'83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102',
'104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,288,101,109,110',
',93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,283,,44',
',,289,,,,,,232,,,,,91,286,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62',
'57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103',
'102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,288,101,109',
'110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,629,',
'283,,44,,,289,,,,,,232,,,,,91,286,84,85,,86,88,87,89,,,,,82,90,,,,74',
'75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310',
'316,103,102,104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,288',
'101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60',
',285,,,,44,,,289,,,,,,232,,,,,91,286,84,85,,86,88,87,89,,,,,82,90,,',
',74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,103,102,104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101',
'109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71',
'62,57,83,95,96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102',
'104,105,,,19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,',
',,20,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',19,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,,62,,83,95,96,74,75,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,',
',19,,,,,,8,45,7,10,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,',
',,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,,,391,62,,83,95,96,74,75,71',
',57,,,,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102',
'104,105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93',
'94,42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,',
',,232,,,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95',
'96,63,64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104',
'105,,,234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94',
'42,43,41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232',
',,,,91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,',
'234,,,,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43',
'41,,,,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,',
',91,81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,',
',,45,,,107,106,108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232',
',,,,91,286,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,',
',311,,,107,106,108,356,56,99,98,357,,101,109,110,,93,94,,,317,,,,,,',
',,,,,,,,,,,,,358,,,233,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,91,81,84,85,',
'86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107',
'106,108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,',
',,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,289,,,,,,232,,,,,91,286,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,',
',,,227,,,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45',
',,107,106,108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,',
',,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,289,,,,,,232,,,,,91,286',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,',
',45,,,107,106,108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,629,,,,44,,,289,,,,,,232,,',
',,91,286,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,',
',,,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,',
',,,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91',
'81,84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,',
'67,,65,66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,',
',,,,45,,,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,',
',,,,,,,,,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81',
'84,85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,',
',107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,',
',,,,,,,,,227,,,233,,,58,59,,,60,,407,,,,44,,,,,,,,,232,,,,,91,81,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,313,314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45',
',,107,106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,',
',,,,,,,,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85',
',86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,288,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,',
',,,227,,,233,,,58,59,,,60,,285,,283,,44,,,289,,,,,,232,,,,,91,286,84',
'85,,86,88,87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,103,102,104,105,,,19,,,,,,,45,,,107',
'106,108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,',
',,,,227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,91,81,84,85,,86,88',
'87,89,,,,,82,90,,,,74,75,71,62,57,83,95,96,63,64,,,,67,,65,66,68,313',
'314,72,73,,,,,,309,310,316,103,102,104,105,,,234,,,,,,,45,,,107,106',
'108,97,56,99,98,100,,101,109,110,,93,94,42,43,41,,,,,,,,,,,,,,,,,,,',
'227,,,233,,,58,59,,,60,,,,,,44,,,,,,,,,232,,,,,91,81,84,85,,86,88,87',
'89,,,,,82,90,,,,,,,62,,83,95,96,175,186,176,199,172,192,182,181,202',
'203,197,180,179,174,200,204,205,184,173,187,191,193,185,178,,,,194,201',
'196,195,188,198,183,171,190,189,,,,,,170,177,168,169,165,166,167,126',
'128,,,127,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161',
'162,148,149,,,,,,,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143',
'135,157,136,,,164,91,,,,,,,,,,,,,,90,175,186,176,199,172,192,182,181',
'202,203,197,180,179,174,200,204,205,184,173,187,191,193,185,178,,,,194',
'201,196,195,188,198,183,171,190,189,,,,,,170,177,168,169,165,166,167',
'126,128,,,127,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142',
',,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158,155,154,163,150,151',
'145,143,135,157,136,,,164,91,,,,,,,,,,,,,,90,175,186,176,199,172,192',
'182,181,202,203,197,180,179,174,200,204,205,184,173,187,191,193,185',
'178,,,,194,201,196,195,188,198,183,171,190,189,,,,,,170,177,168,169',
'165,166,167,126,128,,,127,,,,,,,,159,160,,156,138,139,140,147,144,146',
',,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158,155,154,163',
'150,151,145,143,135,157,136,,,164,91,,,,,,,,,,,,,,90,175,186,176,199',
'172,192,182,181,202,203,197,180,179,174,200,204,205,184,173,187,191',
'193,185,178,,,,194,201,196,195,188,198,183,171,190,189,,,,,,170,177',
'168,169,165,166,167,126,128,125,,127,,,,,,,,159,160,,156,138,139,140',
'147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152,,137,158',
'155,154,163,150,151,145,143,135,157,136,,,164,91,,,,,,,,,,,,,,90,175',
'186,176,199,172,192,182,181,202,203,197,180,179,174,200,204,205,184',
'173,187,191,193,185,178,,,,194,201,196,195,188,198,183,171,190,189,',
',,,,170,177,168,169,165,166,167,126,128,,,127,,,,,,,,159,160,,156,138',
'139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,,,,,,,,,153,152',
',137,158,155,154,163,150,151,145,143,135,157,136,,,164,175,186,176,199',
'172,192,182,181,202,203,197,180,179,174,200,204,205,184,173,187,191',
'193,185,178,,,,194,201,196,374,373,375,372,171,190,189,,,,,,170,177',
'168,169,369,370,371,367,128,99,98,368,,101,,,,,,159,160,,156,138,139',
'140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,379,,,,,,,,153,152',
',137,158,155,154,163,150,151,145,143,135,157,136,973,427,164,,972,,',
',,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149',
',,,,,267,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157',
'136,608,420,164,,609,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141',
'142,,,,161,162,148,149,,,,,,267,,,,,,,,153,152,,137,158,155,154,163',
'150,151,145,143,135,157,136,610,427,164,,611,,,,,,,,159,160,,156,138',
'139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,267,,,,,,,,153',
'152,,137,158,155,154,163,150,151,145,143,135,157,136,703,427,164,,704',
',,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148',
'149,,,,,,267,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135',
'157,136,1001,427,164,,1002,,,,,,,,159,160,,156,138,139,140,147,144,146',
',,141,142,,,,161,162,148,149,,,,,,267,,,,,,,,153,152,,137,158,155,154',
'163,150,151,145,143,135,157,136,999,420,164,,1000,,,,,,,,159,160,,156',
'138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,267,,,,,,',
',153,152,,137,158,155,154,163,150,151,145,143,135,157,136,610,427,164',
',611,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162',
'148,149,,,,,,267,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143',
'135,157,136,416,420,164,,417,,,,,,,,159,160,,156,138,139,140,147,144',
'146,,,141,142,,,,161,162,148,149,,,,,,267,,,,,,,,153,152,,137,158,155',
'154,163,150,151,145,143,135,157,136,608,420,164,,609,,,,,,,,159,160',
',156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,267,',
',,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,423,427',
'164,,422,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,,,,161',
'162,148,149,,,,,,267,,,,,,,,153,152,,137,158,155,154,163,150,151,145',
'143,135,157,136,478,420,164,,479,,,,,,,,159,160,,156,138,139,140,147',
'144,146,,,141,142,,,,161,162,148,149,,,,,,267,,,,,,,,153,152,,137,158',
'155,154,163,150,151,145,143,135,157,136,701,420,164,,702,,,,,,,,159',
'160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,,,,,267',
',,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136,643',
'427,164,,644,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142,',
',,161,162,148,149,,,,,,267,,,,,,,,153,152,,137,158,155,154,163,150,151',
'145,143,135,157,136,706,427,164,,707,,,,,,,,159,160,,156,138,139,140',
'147,144,146,,,141,142,,,,161,162,148,149,,,,,,267,,,,,,,,153,152,,137',
'158,155,154,163,150,151,145,143,135,157,136,640,420,164,,641,,,,,,,',
'159,160,,156,138,139,140,147,144,146,,,141,142,,,,161,162,148,149,,',
',,,267,,,,,,,,153,152,,137,158,155,154,163,150,151,145,143,135,157,136',
'478,420,164,,479,,,,,,,,159,160,,156,138,139,140,147,144,146,,,141,142',
',,,161,162,148,149,672,,669,668,667,677,670,,,,,,,153,152,680,137,158',
'155,154,163,150,151,145,143,135,157,136,,672,164,669,668,667,677,670',
'672,675,669,668,667,677,670,,680,,,,688,687,,680,,681,672,,669,668,667',
'677,670,,,,,,675,658,,680,,,,675,,685,684,688,687,,,,681,,688,687,,',
',681,672,675,669,668,667,677,670,,,,685,684,688,687,,680,,681,672,,669',
'668,667,677,670,672,,669,668,667,677,670,,680,,,,675,,672,680,669,668',
'667,677,670,685,684,688,687,,,,681,680,675,,,,,,,675,,,,688,687,,,,681',
',688,687,,675,,681,,,,,,,685,684,688,687,,,672,681,669,668,667,677,670',
',672,,669,668,667,677,670,680,,,,,,,,680,,672,,669,668,667,677,670,',
',,,,675,,,680,,,,,675,685,684,688,687,,,,681,685,684,688,687,,,,681',
'675,,672,,669,668,667,677,670,685,684,688,687,,,,681,680,,672,,669,668',
'667,677,670,,672,,669,668,667,677,670,680,,,,,675,,,680,,,,,,685,684',
'688,687,,,,681,675,,,,,,,,675,,,688,687,,,,681,685,684,688,687,,,672',
'681,669,668,667,677,670,672,,669,668,667,677,670,,680,,,,,,,680,,,,',
',,,,,,,,,,675,,,,,,,675,,685,684,688,687,,,,681,,688,687,,,,681' ]
        racc_action_table = arr = ::Array.new(25101, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'610,928,865,1001,446,978,542,610,610,610,61,1002,610,610,610,3,610,620',
'699,387,3,19,650,650,635,610,610,610,610,386,341,897,1023,897,635,792',
'610,610,342,610,610,610,610,610,225,931,824,989,989,927,348,640,125',
'892,1,440,440,125,125,58,349,446,19,7,999,1000,610,610,610,610,610,610',
'610,610,610,610,610,610,610,610,1001,825,610,610,610,387,610,610,1002',
'352,610,543,550,610,610,386,610,61,610,58,610,225,610,610,620,610,610',
'610,610,610,542,610,610,610,701,542,650,640,702,928,865,1001,10,978',
'928,865,1001,610,978,1002,610,610,610,610,1002,610,699,610,100,699,1020',
'699,610,610,792,100,100,100,341,440,100,100,100,341,100,824,342,640',
'12,348,640,342,100,931,100,100,100,927,931,349,640,892,927,780,100,100',
'892,100,100,100,100,100,999,1000,13,825,16,999,1000,703,825,621,564',
'564,643,543,608,22,352,358,543,550,704,358,100,100,100,100,100,100,100',
'100,100,100,100,100,100,100,37,312,100,100,100,701,100,100,621,702,100',
'40,641,100,100,45,100,111,100,206,100,780,100,100,609,100,100,100,100',
'100,422,100,226,100,227,608,703,422,422,422,1020,643,643,422,422,1020',
'422,100,476,704,100,100,100,100,228,100,229,100,706,484,230,780,100',
'100,780,312,422,422,564,422,422,422,422,422,780,560,560,367,641,377',
'703,609,643,476,367,643,377,333,312,226,333,26,485,704,484,643,422,422',
'422,422,422,422,422,422,422,422,422,422,422,422,706,228,422,422,422',
'234,422,706,641,266,422,641,706,422,41,41,706,485,422,753,422,641,422',
'422,280,422,422,422,422,422,97,422,367,422,377,706,281,97,97,97,317',
'317,97,97,97,26,97,422,284,656,422,422,656,422,97,422,97,97,97,560,797',
'797,422,422,560,706,97,97,26,97,97,97,97,97,39,332,753,948,332,948,948',
'948,809,948,809,809,809,375,809,296,292,297,41,41,375,292,97,97,97,97',
'97,97,97,97,97,97,97,97,97,97,828,299,97,97,97,828,97,97,317,317,97',
'39,495,97,97,577,97,575,97,381,97,39,97,97,300,97,97,97,97,97,382,97',
'611,97,917,340,340,917,833,611,611,611,375,833,611,611,611,97,611,948',
'97,97,97,97,809,97,345,97,611,611,611,345,97,97,336,356,15,336,611,611',
'301,611,611,611,611,611,495,495,495,577,577,575,575,381,381,381,690',
'690,307,577,310,575,311,495,382,382,382,316,611,611,611,611,611,611',
'611,611,611,611,611,611,611,611,452,15,611,611,611,356,611,611,526,526',
'611,15,356,611,611,383,611,356,611,318,611,356,611,611,322,611,611,611',
'611,611,325,611,452,611,17,17,452,452,385,616,356,616,616,616,616,616',
'384,611,330,388,611,611,611,611,616,611,79,611,423,334,591,335,611,611',
'337,423,423,423,79,346,356,423,423,347,423,351,616,353,79,383,383,383',
'362,423,397,616,616,616,616,304,403,357,616,406,423,423,304,423,423',
'423,423,423,385,385,385,304,408,591,412,374,384,384,384,388,388,388',
'374,591,616,6,6,6,6,6,423,423,423,423,423,423,423,423,423,423,423,423',
'423,423,414,415,423,423,423,357,423,373,360,424,423,432,357,423,373',
'360,304,357,423,442,423,357,423,423,360,423,423,423,423,423,454,423',
'423,423,455,456,374,372,305,321,357,306,308,38,372,305,457,423,306,308',
'423,423,428,423,305,423,482,306,308,428,428,428,423,423,428,428,428',
'350,428,486,357,502,373,360,350,503,506,428,428,428,428,508,513,350',
'516,524,321,525,428,428,38,428,428,428,428,428,321,224,527,539,38,46',
'372,305,224,544,306,308,46,371,545,562,572,224,580,582,371,46,428,428',
'428,428,428,428,428,428,428,428,428,428,428,428,350,323,428,428,428',
'588,592,428,323,597,428,602,370,428,428,612,428,323,428,370,428,614',
'428,428,619,428,428,428,428,428,224,428,428,428,46,626,24,369,512,368',
'628,634,371,24,369,512,368,428,453,637,428,428,428,428,512,428,27,428',
'639,416,642,417,428,27,27,27,323,645,27,27,27,14,27,646,649,651,654',
'370,14,660,453,27,27,27,453,453,661,14,663,664,665,674,27,27,682,27',
'27,27,27,27,686,24,369,512,368,644,416,806,417,806,806,806,644,806,689',
'692,416,644,417,697,700,644,27,27,27,27,27,27,27,27,27,27,27,27,27,27',
'14,709,27,27,27,713,732,27,806,27,27,737,755,27,27,756,27,806,27,758',
'27,759,27,27,760,27,27,27,27,27,28,27,27,27,644,762,763,28,28,28,764',
'765,28,28,28,855,28,27,471,769,27,27,855,27,773,27,28,28,774,568,568',
'855,27,568,568,568,28,28,779,28,28,28,28,28,783,921,786,787,790,929',
'471,793,921,808,471,471,929,471,471,810,815,921,818,827,831,929,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,855,553,28,28,28,832,835,28,553',
'28,28,836,852,28,28,856,28,553,28,858,28,872,28,28,873,28,28,28,28,28',
'921,28,427,28,929,877,878,880,881,427,427,427,794,883,427,427,427,28',
'427,886,28,28,794,28,888,28,894,427,427,427,427,853,28,853,853,853,553',
'853,427,427,895,427,427,427,427,427,971,707,971,971,971,901,971,905',
'707,794,794,907,910,707,794,911,912,707,913,915,930,950,427,427,427',
'427,427,427,427,427,427,427,427,427,427,427,972,842,427,427,427,973',
'974,427,979,980,427,842,981,427,427,982,427,983,427,984,427,985,427',
'427,987,427,427,427,427,427,707,427,427,427,295,295,295,295,295,500',
'500,500,500,500,842,842,990,427,991,842,427,427,427,427,992,427,477',
'427,993,994,995,998,427,477,477,477,1011,1021,477,477,477,1015,477,1015',
'1015,1015,1015,1015,472,1022,,477,477,,,887,1015,887,887,887,,887,477',
'477,,477,477,477,477,477,1010,,1010,1010,1010,,1010,,1015,,472,,,,472',
'472,,472,472,1015,1015,,887,889,1015,889,889,889,,889,,887,,477,,56',
',1010,,,477,,56,56,56,477,477,56,56,56,675,56,675,675,675,,675,,,,889',
'56,56,56,,,,,477,477,,56,56,,56,56,56,56,56,,,,,477,,,477,675,,,,477',
',,,,675,,477,,,56,56,56,56,56,56,56,56,56,56,56,56,56,56,,,56,56,56',
',,56,,,56,,,56,56,,56,,56,,56,,56,56,,56,56,56,56,56,,56,,56,,,988,',
'988,988,988,,988,,,,,56,,,56,56,56,56,,56,418,56,,,,,56,418,418,418',
',,418,418,418,464,418,988,,,,,,,,418,418,418,,,,464,464,,,,418,418,',
'418,418,418,418,418,,,,464,,464,,464,464,,464,464,,,464,,464,,,,,,418',
'418,418,418,418,418,418,418,418,418,418,418,418,418,,,418,418,418,,',
'418,,418,418,,,418,418,,418,,418,,418,,418,418,,418,418,418,418,418',
',418,418,418,986,,986,986,986,,986,,949,,949,949,949,418,949,,418,418',
',418,,418,624,624,624,624,624,624,418,,,624,624,,,,624,986,624,624,624',
'624,624,624,624,949,,,,,624,624,624,624,624,624,624,,,624,,,,,435,624',
'624,624,624,624,624,624,624,624,624,624,624,,624,624,624,,624,624,624',
'624,624,435,435,435,435,435,435,435,435,435,435,435,,435,435,,,435,435',
',624,,,624,,,624,624,,,624,,624,435,,435,624,435,435,,435,435,435,435',
'435,624,435,,,,624,624,624,624,,624,624,624,624,,,,,624,624,,435,,435',
',,624,,624,624,624,926,926,926,926,926,926,,,,926,926,,,,926,,926,926',
'926,926,926,926,926,,,,,,926,926,926,926,926,926,926,,,926,,,,,613,926',
'926,926,926,926,926,926,926,926,926,926,926,,926,926,926,,926,926,926',
'926,926,613,613,613,613,613,613,613,613,613,613,613,,613,613,,,613,613',
',926,,,926,,,926,926,,,926,,926,613,,613,926,613,613,,613,613,613,613',
'613,926,613,,,,926,926,926,926,,926,926,926,926,,,,,926,926,,613,,,',
',926,,926,926,926,123,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,411,123',
'123,123,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,123',
'123,123,411,411,411,411,411,411,411,411,411,411,411,,411,411,,,411,411',
',123,,,123,,,123,123,,,123,,123,411,,411,123,411,411,,411,411,411,411',
'411,123,411,,,,123,123,123,123,,123,123,123,123,,,,,123,123,,411,,,',
',123,,123,123,123,208,208,208,208,208,208,,,,208,208,,,,208,,208,208',
'208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,208',
'208,208,208,208,208,208,208,208,208,208,208,,208,208,208,,208,208,208',
'208,208,430,430,430,430,430,430,430,430,430,430,430,,430,430,,,430,430',
',208,,,208,,,208,208,,,208,,208,430,,430,208,430,430,,430,430,430,430',
'430,208,430,,,,208,208,208,208,,208,208,208,208,,,,,208,208,,430,,,',
',208,,208,208,208,785,785,785,785,785,785,,,,785,785,,,,785,,785,785',
'785,785,785,785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,785',
'785,785,785,785,785,785,785,785,785,785,785,,785,785,785,,785,785,785',
'785,785,734,734,734,734,734,734,734,734,734,734,734,,734,734,,,734,734',
',785,,,785,,,785,785,,,785,,785,734,,734,785,734,734,,734,734,734,734',
'734,785,734,,,,785,785,785,785,,785,785,785,785,,,,,785,785,,734,,,',
',785,,785,785,785,623,623,623,623,623,623,,,,623,623,,,,623,,623,623',
'623,623,623,623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,623',
'623,623,623,623,623,623,623,623,623,623,623,,623,623,623,,623,623,623',
'623,623,739,739,739,739,739,739,739,739,739,739,739,,739,739,,,739,739',
',623,,,623,,,623,623,,,623,,623,739,,739,623,739,739,,739,739,739,739',
'739,623,739,,,,623,623,623,623,,623,623,623,623,,,,,623,623,,739,,,',
',623,,623,623,623,538,538,538,538,538,538,,,,538,538,,,,538,,538,538',
'538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,,538',
'538,538,538,538,538,538,538,538,538,538,538,,538,538,538,,538,538,538',
'538,538,741,741,741,741,741,741,741,741,741,741,741,,741,741,,,741,741',
',538,,,538,,,538,538,,,538,,538,741,,741,538,741,741,,741,741,741,741',
'741,538,741,,,,538,538,538,538,,538,538,538,538,,,,,538,538,,741,,,',
',538,,538,538,538,933,933,933,933,933,933,,,,933,933,,,,933,,933,933',
'933,933,933,933,933,,,,,,933,933,933,933,933,933,933,,,933,,,,,,933',
'933,933,933,933,933,933,933,933,933,933,933,,933,933,933,,933,933,933',
'933,933,744,744,744,744,744,744,744,744,744,744,744,,744,744,,,744,744',
',933,,,933,,,933,933,,,933,,933,744,,744,933,744,744,,744,744,744,744',
'744,933,744,,,,933,933,933,933,,933,933,933,933,,,,,933,933,,744,,,',
',933,,933,933,933,934,934,934,934,934,934,,,,934,934,,,,934,,934,934',
'934,934,934,934,934,,,,,,934,934,934,934,934,934,934,,,934,,,,,,934',
'934,934,934,934,934,934,934,934,934,934,934,,934,934,934,,934,934,934',
'934,934,746,746,746,746,746,746,746,746,746,746,746,,746,746,,,746,746',
',934,,,934,,,934,934,,,934,,934,746,,746,934,746,746,,746,746,746,746',
'746,934,746,,,,934,934,934,934,,934,934,934,934,,,,,934,934,,746,,,',
',934,,934,934,934,561,561,561,561,561,561,,,,561,561,,,,561,,561,561',
'561,561,561,561,561,,,,,,561,561,561,561,561,561,561,,,561,,,,,,561',
'561,561,561,561,561,561,561,561,561,561,561,,561,561,561,,561,561,561',
'561,561,748,748,748,748,748,748,748,748,748,748,748,,748,748,,,748,748',
',561,,,561,,,561,561,,,561,,561,748,,748,561,748,748,,748,748,748,748',
'748,561,748,,,,561,561,561,561,,561,561,561,561,,,,,561,561,,748,,,',
',561,,561,561,561,618,618,618,618,618,618,,,,618,618,,,,618,,618,618',
'618,618,618,618,618,,,,,,618,618,618,618,618,618,618,,,618,,,,,,618',
'618,618,618,618,618,618,618,618,618,618,618,,618,618,618,,618,618,618',
'618,618,21,21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,618,,,618,',
',618,618,,,618,,618,21,,21,618,21,21,,21,21,21,21,21,618,21,,,,618,618',
'618,618,,618,618,618,618,,,,,618,618,,21,,,,,618,,618,618,618,0,0,0',
'0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0',
'0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,278,278,278,278,278,278,278,278,278',
'278,278,,278,278,,,278,278,,0,,,0,,,0,0,,,0,,0,278,,278,0,278,278,,278',
'278,278,278,278,0,278,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,278,,,,,0,,0,0,0',
'862,862,862,862,862,862,,,,862,862,,,,862,,862,862,862,862,862,862,862',
',,,,,862,862,862,862,862,862,862,,,862,,,,,,862,862,862,862,862,862',
'862,862,862,862,862,862,,862,862,862,,862,862,862,862,862,648,648,648',
'648,648,648,648,648,648,648,648,,648,648,,,648,648,,862,,,862,,,862',
'862,,,862,,862,648,,648,862,648,648,,648,648,648,648,648,862,648,,,',
'862,862,862,862,,862,862,862,862,,,,,862,862,,648,,,,,862,,862,862,862',
'959,959,959,959,959,959,,,,959,959,,,,959,,959,959,959,959,959,959,959',
',,,,,959,959,959,959,959,959,959,,,959,,,,,,959,959,959,959,959,959',
'959,959,959,959,959,959,,959,959,959,,959,959,959,959,959,838,838,838',
'838,838,838,838,838,838,838,838,,838,838,,,838,838,,959,,,959,,,959',
'959,,,959,,959,838,,838,959,838,838,,838,838,838,838,838,959,838,,,',
'959,959,959,959,,959,959,959,959,,,,,959,959,,838,,,,,959,,959,959,959',
'541,541,541,541,541,541,,,,541,541,,,,541,,541,541,541,541,541,541,541',
',,,,,541,541,541,541,541,541,541,,,541,,,,,,541,541,541,541,541,541',
'541,541,541,541,541,541,,541,541,541,,541,541,541,541,541,841,841,841',
'841,841,841,841,841,841,841,841,,841,841,,,841,841,,541,,,541,,,541',
'541,,,541,,541,841,,841,541,841,841,,841,841,841,841,841,541,841,,,',
'541,541,541,541,,541,541,541,541,,,,,541,541,,841,,,,,541,,541,541,541',
'501,501,501,501,501,501,,,,501,501,,,,501,,501,501,501,501,501,501,501',
',,,,,501,501,501,501,501,501,501,,,501,,,,,,501,501,501,501,501,501',
'501,501,501,501,501,501,,501,501,501,,501,501,501,501,501,475,475,475',
'475,475,475,475,475,475,475,475,,475,475,,,475,475,,501,,,501,,,501',
'501,,,501,,501,475,,475,501,475,475,,475,475,475,475,475,501,475,,,',
'501,501,501,501,,501,501,501,501,,,,,501,501,475,475,,,,,501,,501,501',
'501,951,951,951,951,951,951,,,,951,951,,,,951,,951,951,951,951,951,951',
'951,,,,,,951,951,951,951,951,951,951,,,951,,,,,,951,951,951,951,951',
'951,951,951,951,951,951,951,,951,951,951,,951,951,951,951,951,522,522',
'522,522,522,522,522,522,522,522,522,,522,522,,,522,522,,951,,,951,,',
'951,951,,,951,,951,522,,522,951,522,522,,522,522,522,522,522,951,522',
',,,951,951,951,951,,951,951,951,951,,,,,951,951,,522,,,,,951,,951,951',
'951,823,823,823,823,823,823,,,,823,823,,,,823,,823,823,823,823,823,823',
'823,,,,,,823,823,823,823,823,823,823,,,823,,,,,,823,823,823,823,823',
'823,823,823,823,823,823,823,,823,823,823,,823,823,823,823,823,473,473',
'473,473,473,473,473,,,473,473,,,,,,473,473,,823,,,823,,,823,823,,,823',
',823,473,,473,823,473,473,,473,473,473,473,473,823,473,,,,823,823,823',
'823,,823,823,823,823,,,,,823,823,,,,,,,823,,823,823,823,957,957,957',
'957,957,957,,,,957,957,,,,957,,957,957,957,957,957,957,957,,,,,,957',
'957,957,957,957,957,957,,,957,,,,,,957,957,957,957,957,957,957,957,957',
'957,957,957,,957,957,957,,957,957,957,957,957,469,469,469,469,469,469',
'469,,,469,469,,,,,,469,469,,957,,,957,,,957,957,,,957,,957,469,,469',
'957,469,469,,469,469,469,469,469,957,469,,,,957,957,957,957,,957,957',
'957,957,,,,,957,957,,,,,,,957,,957,957,957,33,33,33,33,33,33,,,,33,33',
',,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,33,33',
'33,33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,33,33,33,470,470,470',
'470,470,470,470,,,470,470,,,,,,470,470,,33,,,33,,,33,33,,,33,,33,470',
',470,33,470,470,,470,470,470,470,470,33,470,,,,33,33,33,33,,33,33,33',
'33,,,,,33,33,,,,,,,33,,33,33,33,710,710,710,710,710,710,,,,710,710,',
',,710,,710,710,710,710,710,710,710,,,,,,710,710,710,710,710,710,710',
',,710,,,,,,710,710,710,710,710,710,710,710,710,710,710,710,,710,710',
'710,,710,710,710,710,710,474,474,474,474,474,474,474,474,,474,474,,',
',,,474,474,,710,,,710,,,710,710,,,710,,710,474,,474,710,474,474,,474',
'474,474,474,474,710,474,,,,710,710,710,710,,710,710,710,710,,,,,710',
'710,,,,,,,710,,710,710,710,298,298,298,298,298,298,,,,298,298,,,,298',
',298,298,298,298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298',
',,,,,298,298,298,298,298,298,298,298,298,298,298,298,,298,298,298,,298',
'298,298,298,298,465,,,,,,,,,,,,,,,,465,465,,298,,,298,,,298,298,,,298',
',298,465,,465,298,465,465,,465,465,,,465,298,465,,,,298,298,298,298',
',298,298,298,298,,,,,298,298,,,,,,,298,,298,298,298,829,829,829,829',
'829,829,,,,829,829,,,,829,,829,829,829,829,829,829,829,,,,,,829,829',
'829,829,829,829,829,,,829,,,,,,829,829,829,829,829,829,829,829,829,829',
'829,829,,829,829,829,,829,829,829,829,829,466,466,466,466,466,466,466',
',,466,466,,,,,,466,466,,829,,,829,,,829,829,,,829,,829,466,,466,829',
'466,466,,466,466,466,466,466,829,466,,,,829,829,829,829,,829,829,829',
'829,,,,,829,829,,,,,,,829,,829,829,829,772,772,772,772,772,772,,,,772',
'772,,,,772,,772,772,772,772,772,772,772,,,,,,772,772,772,772,772,772',
'772,,,772,,,,,,772,772,772,772,772,772,772,772,772,772,772,772,,772',
'772,772,,772,772,772,772,772,467,467,467,467,467,467,467,,,467,467,',
',,,,467,467,,772,,,772,,,772,772,,,772,,772,467,,467,772,467,467,,467',
'467,467,467,467,772,467,,,,772,772,772,772,,772,772,772,772,,,,,772',
'772,,,,,,,772,,772,772,772,714,714,714,714,714,714,,,,714,714,,,,714',
',714,714,714,714,714,714,714,,,,,,714,714,714,714,714,714,714,,,714',
',,,,,714,714,714,714,714,714,714,714,714,714,714,714,,714,714,714,,714',
'714,714,714,714,451,451,451,451,451,451,451,451,451,451,451,,451,451',
',,451,451,,714,,,714,,,714,714,,,714,,714,451,,451,714,451,451,,451',
'451,451,451,451,714,451,,,,714,714,714,714,,714,714,714,714,,,,,714',
'714,,,,,,,714,,714,714,714,724,724,724,724,724,724,,,,724,724,,,,724',
',724,724,724,724,724,724,724,,,,,,724,724,724,724,724,724,724,,,724',
',,,,,724,724,724,724,724,724,724,724,724,724,724,724,,724,724,724,,724',
'724,724,724,724,468,468,468,468,468,468,468,,,468,468,,,,,,468,468,',
'724,,,724,,,724,724,,,724,,724,468,,468,724,468,468,,468,468,468,468',
'468,724,468,,,,724,724,724,724,,724,724,724,724,,,,,724,724,,,,,,,724',
',724,724,724,233,233,233,233,233,233,,,,233,233,,,,233,,233,233,233',
'233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,233,233',
'233,233,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233',
'233,461,461,461,461,461,461,461,,,461,461,,,,,,461,461,,233,,,233,,',
'233,233,,,233,,233,461,,461,233,461,461,,461,461,461,461,461,233,461',
',,,233,233,233,233,,233,233,233,233,,,,,233,233,,,,,,,233,,233,233,233',
'328,328,328,328,328,328,,,,328,328,,,,328,,328,328,328,328,328,328,328',
',,,,,328,328,328,328,328,328,328,,,328,,,,,,328,328,328,328,328,328',
'328,328,328,328,328,328,,328,328,328,,328,328,328,328,328,462,,,,,,',
',,,,,,,,,462,462,,328,,,328,,,328,328,,,328,,328,462,,462,328,462,462',
',462,462,,,462,328,462,,,,328,328,328,328,,328,328,328,328,,,,,328,328',
',,,,,,328,,328,328,328,819,819,819,819,819,819,,,,819,819,,,,819,,819',
'819,819,819,819,819,819,,,,,,819,819,819,819,819,819,819,,,819,,,,,',
'819,819,819,819,819,819,819,819,819,819,819,819,,819,819,819,,819,819',
'819,819,819,450,450,450,450,450,450,450,450,450,450,450,,450,450,,,450',
'450,,819,,,819,,,819,819,,,819,,819,450,,450,819,450,450,,450,450,450',
'450,450,819,450,,,,819,819,819,819,,819,819,819,819,,,,,819,819,,,,',
',,819,,819,819,819,820,820,820,820,820,820,,,,820,820,,,,820,,820,820',
'820,820,820,820,820,,,,,,820,820,820,820,820,820,820,,,820,,,,,,820',
'820,820,820,820,820,820,820,820,820,820,820,,820,820,820,,820,820,820',
'820,820,463,,,,,,,,,,,,,,,,463,463,,820,,,820,,,820,820,,,820,,820,463',
',463,820,463,463,,463,463,,,463,820,463,,,,820,820,820,820,,820,820',
'820,820,,,,,820,820,,,,,,,820,,820,820,820,303,303,303,303,303,303,',
',,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303,303',
'303,303,,,303,,,,,,303,303,303,303,303,303,303,303,303,303,303,303,',
'303,303,303,,303,303,303,303,303,460,,,,,,,,,,,,,,,,460,460,,303,,,303',
',,303,303,,,303,,303,460,,,303,460,460,,460,460,,,,303,,,,,303,303,303',
'303,,303,303,303,303,,,,,303,303,,,,238,238,238,303,238,303,303,303',
'238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238',
'238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238',
',238,238,238,238,238,458,,,,,,,,,,,,,,,,458,458,,238,,,238,,,238,238',
',,238,,,458,,458,238,458,458,,458,458,,,,238,,,,,238,238,238,238,,238',
'238,238,238,,,,,238,238,,,,647,647,647,238,647,238,238,238,647,647,',
',,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647,647,647',
',,647,,,,,,,647,,459,647,647,647,647,647,647,647,647,,647,647,647,,647',
'647,459,459,647,,,,,,,,,,,,,,459,,459,,459,459,647,459,459,647,,,647',
'647,,,647,,,,,,,,,,,,,,,,,,,,647,647,647,647,,647,647,647,647,,,,,647',
'647,,,,237,237,237,647,237,647,647,647,237,237,,,,237,,237,237,237,237',
'237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237',
'237,237,237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,',
',,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237,237',
'237,237,,237,237,237,237,,,,,237,237,,,,804,804,804,237,804,237,237',
'237,804,804,,,,804,,804,804,804,804,804,804,804,,,,,,804,804,804,804',
'804,804,804,,,804,,,,,,,804,,,804,804,804,804,804,804,804,804,,804,804',
'804,,804,804,804,804,804,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,804,,,804',
',,,,,804,,,,,,,,,804,,,,,804,804,804,804,,804,804,804,804,,,,,804,804',
',,,236,236,236,804,236,804,804,804,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,',
',,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236',
'236,,236,236,236,236,,,,,236,236,,,,,,,236,,236,236,236,294,294,294',
'294,294,,,,294,294,,,,294,,294,294,294,294,294,294,294,,,,,,294,294',
'294,294,294,294,294,,,294,,,,,,294,294,,294,294,294,294,294,294,294',
'294,294,,294,294,294,,294,294,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294',
',,294,294,,,294,,294,,,,294,,,,,,,,,294,,,,,294,294,294,294,,294,294',
'294,294,,,,,294,294,,,,235,235,235,294,235,294,294,294,235,235,,,,235',
',235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235',
',,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235,235,235',
'235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,',
',,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235,,,,817,817,817',
'235,817,235,235,235,817,817,,,,817,,817,817,817,817,817,817,817,,,,',
',817,817,817,817,817,817,817,,,817,,,,,,,817,,,817,817,817,817,817,817',
'817,817,,817,817,817,,817,817,817,817,817,,,,,,,,,,,,,,,,,,,,817,,,817',
',,817,817,,,817,,,,,,817,,,,,,,,,817,,,,,817,817,817,817,,817,817,817',
'817,,,,,817,817,,,,822,822,822,817,822,817,817,817,822,822,,,,822,,822',
'822,822,822,822,822,822,,,,,,822,822,822,822,822,822,822,,,822,,,,,',
',822,,,822,822,822,822,822,822,822,822,,822,822,822,,822,822,822,822',
'822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,,822,,822,,,,822,,,,,,,',
',822,,,,,822,822,822,822,,822,822,822,822,,,,,822,822,,,,253,253,253',
'822,253,822,822,822,253,253,,,,253,,253,253,253,253,253,253,253,,,,',
',253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253',
'253,253,,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253',
'253,,,,,253,253,,,,29,29,29,253,29,253,253,253,29,29,,,,29,,29,29,29',
'29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29',
'29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29',
'29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29',
'29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30,30,30,30,30,30,30,,,,',
',30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30',
'30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30',
',30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,,,,31,31,31',
'30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31',
'31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31',
'31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,',
'31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,302,302,302,31,302,31,31',
'31,302,302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302,302,302',
'302,302,302,,,302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302,302',
'302,,302,302,,,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,1005',
',1005,1005,1005,1005,1005,,,,,,,,,1005,,302,302,302,302,,302,302,302',
'302,,,,,302,302,,,,302,,1005,302,,302,302,302,20,20,20,,20,1005,1005',
',20,20,1005,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20',
',,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,',
',,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20',
',20,20,20,20,,,,,20,20,,,,839,839,839,20,839,20,20,20,839,839,,,,839',
',839,839,839,839,839,839,839,,,,,,839,839,839,839,839,839,839,,,839',
',,,,,,839,,,839,839,839,839,839,839,839,839,839,839,839,839,,839,839',
'839,839,839,,,,,,,,,,,,,,,,,,,,839,,,839,,,839,839,,,839,,,,839,,839',
',,839,,,,,,839,,,,,839,839,839,839,,839,839,839,839,,,,,839,839,,,,840',
'840,840,839,840,839,839,839,840,840,,,,840,,840,840,840,840,840,840',
'840,,,,,,840,840,840,840,840,840,840,,,840,,,,,,,840,,,840,840,840,840',
'840,840,840,840,,840,840,840,,840,840,840,840,840,,,,,,,,,,,,,,,,,,',
',840,,,840,,,840,840,,,840,,,,,,840,,,,,,,,,840,,,,,840,840,840,840',
',840,840,840,840,,,,,840,840,,,,636,636,636,840,636,840,840,840,636',
'636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636',
'636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636,,636,636,636,',
'636,636,,,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,,,,,,,,',
',,,,,,,,,,636,636,636,636,,636,636,636,636,,,,,636,636,,,,232,232,232',
'636,232,636,636,636,232,232,,,,232,,232,232,232,232,232,232,232,,,,',
',232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232',
'232,232,,232,232,232,,232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232',
',,232,232,,,232,,,,,,232,,,,,,,,,232,,,,,232,232,232,232,,232,232,232',
'232,,,,,232,232,,,,632,632,632,232,632,232,232,232,632,632,,,,632,,632',
'632,632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,',
',632,,,632,632,632,632,632,632,632,632,,632,632,632,,632,632,632,632',
'632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,,,,,632,,,,,,,,,632',
',,,,632,632,632,632,,632,632,632,632,,,,,632,632,,,,629,629,629,632',
'629,632,632,632,629,629,,,,629,,629,629,629,629,629,629,629,,,,,,629',
'629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629,629,629,629,629',
'629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,,,,,,,629,,,629,',
',629,629,,,629,,,,,,629,,,,,,,,,629,,,,,629,629,629,629,,629,629,629',
'629,,,,,629,629,,,,854,854,854,629,854,629,629,629,854,854,,,,854,,854',
'854,854,854,854,854,854,,,,,,854,854,854,854,854,854,854,,,854,,,,,',
',854,,,854,854,854,854,854,854,854,854,,854,854,854,,854,854,,,854,',
',,,,,,,,,,,,,,,,,,854,,,854,,,854,854,,,854,,,,,,,,,,,,,,,,,,,,854,854',
'854,854,,854,854,854,854,,,,,854,854,,,,866,866,866,854,866,854,854',
'854,866,866,,,,866,,866,866,866,866,866,866,866,,,,,,866,866,866,866',
'866,866,866,,,866,,,,,,,866,,,866,866,866,866,866,866,866,866,,866,866',
'866,,866,866,,,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866,,,866,,,,',
',,,,,,,,,,,,,,,866,866,866,866,,866,866,866,866,,,,,866,866,,,,34,34',
'34,866,34,866,866,866,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34',
'34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34',
',,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34',
'34,34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,',
'35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35',
'35,35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35',
',,35,35,,,35,,,967,,967,967,967,967,967,,,,,,,,,967,,35,35,35,35,,35',
'35,35,35,,,,,35,35,,,,35,,967,35,,35,35,35,605,605,605,,605,967,967',
',605,605,967,,,605,,605,605,605,605,605,605,605,,,,,,605,605,605,605',
'605,605,605,,,605,,,,,,,605,,,605,605,605,605,605,605,605,605,,605,605',
'605,,605,605,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605',
',,,,,605,,,,,,,,,605,,,,,605,605,605,605,,605,605,605,605,,,,,605,605',
',,,,,,605,,605,605,605,5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5',
'5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,',
',,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,',
',,,5,5,,,,604,604,604,5,604,5,5,5,604,604,,,,604,,604,604,604,604,604',
'604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604,604,604',
'604,604,604,604,604,,604,604,604,,604,604,604,604,604,,,,,,,,,,,,,,',
',,,,,604,,,604,,,604,604,,,604,,,,,,604,,,,,,,,,604,,,,,604,604,604',
'604,,604,604,604,604,,,,,604,604,,,,601,601,601,604,601,604,604,604',
'601,601,,,,601,,601,601,601,601,601,601,601,,,,,,601,601,601,601,601',
'601,601,,,601,,,,,,,601,,,601,601,601,601,601,601,601,601,,601,601,601',
',601,601,601,601,601,,,,,,,,,,,,,,,,,,,,601,,,601,,,601,601,,,601,,',
',,,601,,,,,,,,,601,,,,,601,601,601,601,,601,601,601,601,,,,,601,601',
',,,600,600,600,601,600,601,601,601,600,600,,,,600,,600,600,600,600,600',
'600,600,,,,,,600,600,600,600,600,600,600,,,600,,,,,,,600,,,600,600,600',
'600,600,600,600,600,,600,600,600,,600,600,600,600,600,,,,,,,,,,,,,,',
',,,,,600,,,600,,,600,600,,,600,,,,,,600,,,,,,,,,600,,,,,600,600,600',
'600,,600,600,600,600,,,,,600,600,,,,596,596,596,600,596,600,600,600',
'596,596,,,,596,,596,596,596,596,596,596,596,,,,,,596,596,596,596,596',
'596,596,,,596,,,,,,,596,,,596,596,596,596,596,596,596,596,,596,596,596',
',596,596,596,596,596,,,,,,,,,,,,,,,,,,,,596,,,596,,,596,596,,,596,,',
',,,596,,,,,,,,,596,,,,,596,596,596,596,,596,596,596,596,,,,,596,596',
',,,319,319,319,596,319,596,596,596,319,319,,,,319,,319,319,319,319,319',
'319,319,,,,,,319,319,319,319,319,319,319,,,319,,,,,,,319,,,319,319,319',
'319,319,319,319,319,,319,319,319,,319,319,,,319,,,,,,,,,,,,,,,,,,,,319',
',,319,,,319,319,,,319,,,,,,,,,,,,,,,,,,,,319,319,319,319,,319,319,319',
'319,,,,,319,319,,,,595,595,595,319,595,319,319,319,595,595,,,,595,,595',
'595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595,,,,,',
',595,,,595,595,595,595,595,595,595,595,,595,595,595,,595,595,595,595',
'595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,,,,,595,,,,,,,,,595',
',,,,595,595,595,595,,595,595,595,595,,,,,595,595,,,,594,594,594,595',
'594,595,595,595,594,594,,,,594,,594,594,594,594,594,594,594,,,,,,594',
'594,594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594,594',
'594,594,594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594',
',,594,594,,,594,,,,594,,594,,,594,,,,,,594,,,,,594,594,594,594,,594',
'594,594,594,,,,,594,594,,,,593,593,593,594,593,594,594,594,593,593,',
',,593,,593,593,593,593,593,593,593,,,,,,593,593,593,593,593,593,593',
',,593,,,,,,,593,,,593,593,593,593,593,593,593,593,593,593,593,593,,593',
'593,593,593,593,,,,,,,,,,,,,,,,,,,,593,,,593,,,593,593,,,593,,593,,593',
',593,,,593,,,,,,593,,,,,593,593,593,593,,593,593,593,593,,,,,593,593',
',,,221,221,221,593,221,593,593,593,221,221,,,,221,,221,221,221,221,221',
'221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221',
'221,221,221,221,221,,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,',
',,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,,221,,,,,221,221,221',
'221,,221,221,221,221,,,,,221,221,221,,,590,590,590,221,590,221,221,221',
'590,590,,,,590,,590,590,590,590,590,590,590,,,,,,590,590,590,590,590',
'590,590,,,590,,,,,,,590,,,590,590,590,590,590,590,590,590,,590,590,590',
',590,590,590,590,590,,,,,,,,,,,,,,,,,,,,590,,,590,,,590,590,,,590,,',
',,,590,,,,,,,,,590,,,,,590,590,590,590,,590,590,590,590,,,,,590,590',
',,,327,327,327,590,327,590,590,590,327,327,,,,327,,327,327,327,327,327',
'327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327',
'327,327,327,327,327,,327,327,327,,327,327,327,327,327,,,,,,,,,,,,,,',
',,,,,327,,,327,327,,327,327,,,327,,,,,,327,,,,,,,,,327,,,,,327,327,327',
'327,,327,327,327,327,,,,,327,327,,,,329,329,329,327,329,327,327,327',
'329,329,,,,329,,329,329,329,329,329,329,329,,,,,,329,329,329,329,329',
'329,329,,,329,,,,,,,329,,,329,329,329,329,329,329,329,329,,329,329,329',
',329,329,329,329,329,,,,,,,,,,,,,,,,,,,,329,,,329,,,329,329,,,329,,',
',,,329,,,,,,,,,329,,,,,329,329,329,329,,329,329,329,329,,,,,329,329',
',,,589,589,589,329,589,329,329,329,589,589,,,,589,,589,589,589,589,589',
'589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589,,,589,589,589',
'589,589,589,589,589,,589,589,589,,589,589,589,589,589,,,,,,,,,,,,,,',
',,,,,589,,,589,,,589,589,,,589,,589,,,,589,,,,,,,,,589,,,,,589,589,589',
'589,,589,589,589,589,,,,,589,589,,,,220,220,220,589,220,589,589,589',
'220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220',
'220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220',
',220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,',
',,,220,,,,,,,,,220,,,,,220,220,220,220,,220,220,220,220,,,,,220,220',
',,,219,219,219,220,219,220,220,220,219,219,,,,219,,219,219,219,219,219',
'219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219',
'219,219,219,219,219,,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,',
',,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219',
'219,,219,219,219,219,,,,,219,219,,,,218,218,218,219,218,219,219,219',
'218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218,218',
'218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218',
',218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,',
',,,218,,,,,,,,,218,,,,,218,218,218,218,,218,218,218,218,,,,,218,218',
',,,217,217,217,218,217,218,218,218,217,217,,,,217,,217,217,217,217,217',
'217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,',
',,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,,,,,,,217,,,,,217,217,217',
'217,,217,217,217,217,,,,,217,217,,,,216,216,216,217,216,217,217,217',
'216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216',
'216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216',
',216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,',
',,,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,,216,216',
',,,557,557,557,216,557,216,216,216,557,557,,,,557,,557,557,557,557,557',
'557,557,,,,,,557,557,557,557,557,557,557,,,557,,,,,,,557,,,557,557,557',
'557,557,557,557,557,557,557,557,557,,557,557,557,557,557,,,,,,,,,,,',
',,,,,,,,557,,,557,,,557,557,,,557,,557,,557,,557,,,557,,,,,,557,,,,',
'557,557,557,557,,557,557,557,557,,,,,557,557,,,,547,547,547,557,547',
'557,557,557,547,547,,,,547,,547,547,547,547,547,547,547,,,,,,547,547',
'547,547,547,547,547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547',
'547,547,547,547,,547,547,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,',
'547,547,,,547,,547,,547,,547,,,547,,,,,,547,,,,,547,547,547,547,,547',
'547,547,547,,,,,547,547,,,,546,546,546,547,546,547,547,547,546,546,',
',,546,,546,546,546,546,546,546,546,,,,,,546,546,546,546,546,546,546',
',,546,,,,,,,546,,,546,546,546,546,546,546,546,546,,546,546,546,,546',
'546,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,546,,,546,,546,,',
',546,,,,,,,,,546,,,,,546,546,546,546,,546,546,546,546,,,,,546,546,,',
',42,42,42,546,42,546,546,546,42,42,,,,42,,42,42,42,42,42,42,42,,,,,',
'42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42,42,42,42,42,42,42,,42,42',
'42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,42,,,42,,,,,,42,',
',,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,,42,42,,,,69,69,69,42,69,42',
'42,42,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,',
'69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,,69,,,,,,,,',
',,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,69,69,69,,69',
'69,69,69,,,,,69,69,,,,68,68,68,69,68,69,69,69,68,68,,,,68,,68,68,68',
'68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68',
'68,68,68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,',
'68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,63,63',
'63,68,63,68,68,68,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63',
'63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,,63,,,',
',63,63,63,63,,63,63,63,63,,,,,63,63,,,,407,407,407,63,407,63,63,63,407',
'407,,,,407,,407,407,407,407,407,407,407,,,,,,407,407,407,407,407,407',
'407,,,407,,,,,,,407,,,407,407,407,407,407,407,407,407,,407,407,407,',
'407,407,407,407,407,,,,,,,,,,,,,,,,,,,,407,,,407,,,407,407,,,407,,,',
',,407,,,,,,,,,407,,,,,407,407,407,407,,407,407,407,407,,,,,407,407,',
',,64,64,64,407,64,407,407,407,64,64,,,,64,,64,64,64,64,64,64,64,,,,',
',64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64',
'64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,',
',,,,,,,64,,,,,64,64,64,64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64',
'64,64,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,',
'67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,',
',,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67',
'67,,67,67,67,67,,,,,67,67,67,,,,,67,67,,67,67,67,252,252,252,,252,,',
',252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252',
'252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252',
',252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252,,,,,252,252',
',,,255,255,255,252,255,252,252,252,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,',
',,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255',
'255,,255,255,255,255,,,,,255,255,,,,733,733,733,255,733,255,255,255',
'733,733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733,733,733,733',
'733,733,,,733,,,,,,,733,,,733,733,733,733,733,733,733,733,,733,733,733',
',733,733,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733,733,,,733,,',
',,,733,,,,,,,,,733,,,,,733,733,733,733,,733,733,733,733,,,,,733,733',
',,,251,251,251,733,251,733,733,733,251,251,,,,251,,251,251,251,251,251',
'251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251',
'251,251,251,251,251,,251,251,251,,251,251,251,251,251,,,,,,,,,,,,,,',
',,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251,,,,,251,251,251',
'251,,251,251,251,251,,,,,251,251,,,,735,735,735,251,735,251,251,251',
'735,735,,,,735,,735,735,735,735,735,735,735,,,,,,735,735,735,735,735',
'735,735,,,735,,,,,,,735,,,735,735,735,735,735,735,735,735,,735,735,735',
',735,735,735,735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735,735,,,735,,',
',,,735,,,,,,,,,735,,,,,735,735,735,735,,735,735,735,735,,,,,735,735',
',,,256,256,256,735,256,735,735,735,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,250,250,250,256,250,256,256,256',
'250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250',
'250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250',
',250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250,,,,,250,250',
',,,249,249,249,250,249,250,250,250,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,249,249,249,,,,,,,,,,,,,,',
',,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,,,,249,249,249',
'249,,249,249,249,249,,,,,249,249,,,,248,248,248,249,248,249,249,249',
'248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248',
'248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248',
',248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,',
',,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248,,,,,248,248',
',,,247,247,247,248,247,248,248,248,247,247,,,,247,,247,247,247,247,247',
'247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247',
'247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,,,,,,,,,',
',,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247,247,247',
'247,,247,247,247,247,,,,,247,247,,,,678,678,678,247,678,247,247,247',
'678,678,,,,678,,678,678,678,678,678,678,678,,,,,,678,678,678,678,678',
'678,678,,,678,,,,,,,678,,,678,678,678,678,678,678,678,678,,678,678,678',
',678,678,678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,',
',,,678,,,,,,,,,678,,,,,678,678,678,678,,678,678,678,678,,,,,678,678',
',,,749,749,749,678,749,678,678,678,749,749,,,,749,,749,749,749,749,749',
'749,749,,,,,,749,749,749,749,749,749,749,,,749,,,,,,,749,,,749,749,749',
'749,749,749,749,749,,749,749,749,,749,749,749,749,749,,,,,,,,,,,,,,',
',,,,,749,,,749,,,749,749,,,749,,,,,,749,,,,,,,,,749,,,,,749,749,749',
'749,,749,749,749,749,,,,,749,749,,,,750,750,750,749,750,749,749,749',
'750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750,750,750,750,750',
'750,750,,,750,,,,,,,750,,,750,750,750,750,750,750,750,750,,750,750,750',
',750,750,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750,,',
',,,750,,,,,,,,,750,,,,,750,750,750,750,,750,750,750,750,,,,,750,750',
',,,751,751,751,750,751,750,750,750,751,751,,,,751,,751,751,751,751,751',
'751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,,,751,,,751,751,751',
'751,751,751,751,751,,751,751,751,,751,751,751,751,751,,,,,,,,,,,,,,',
',,,,,751,,,751,,,751,751,,,751,,,,,,751,,,,,,,,,751,,,,,751,751,751',
'751,,751,751,751,751,,,,,751,751,,,,752,752,752,751,752,751,751,751',
'752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752',
'752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752,752,752',
',752,752,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,',
',,,752,,,,,,,,,752,,,,,752,752,752,752,,752,752,752,752,,,,,752,752',
',,,246,246,246,752,246,752,752,752,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,754,754,754,246,754,246,246,246',
'754,754,,,,754,,754,754,754,754,754,754,754,,,,,,754,754,754,754,754',
'754,754,,,754,,,,,,,754,,,754,754,754,754,754,754,754,754,,754,754,754',
',754,754,754,754,754,,,,,,,,,,,,,,,,,,,,754,,,754,,,754,754,,,754,,',
',,,754,,,,,,,,,754,,,,,754,754,754,754,,754,754,754,754,,,,,754,754',
',,,257,257,257,754,257,754,754,754,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,',
',,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257',
'257,,257,257,257,257,,,,,257,257,,,,258,258,258,257,258,257,257,257',
'258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258',
'258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258',
',258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258',
',,,259,259,259,258,259,258,258,258,259,259,,,,259,,259,259,259,259,259',
'259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259',
'259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,',
',,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259',
'259,,259,259,259,259,,,,,259,259,,,,260,260,260,259,260,259,259,259',
'260,260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260',
'260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260',
',260,260,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260',
',,,245,245,245,260,245,260,260,260,245,245,,,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,',
',,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245',
'245,,245,245,245,245,,,,,245,245,,,,244,244,244,245,244,245,245,245',
'244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244',
'244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244',
',244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,',
',,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244',
',,,267,267,267,244,267,244,244,244,267,267,,,,267,,267,267,267,267,267',
'267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267',
'267,267,267,267,267,267,267,267,267,,267,267,267,267,267,,,,,,,,,,,',
',,,,,,,,267,,,267,,,267,267,,,267,,267,,267,,267,,,267,,,,,,267,,,,',
'267,267,267,267,,267,267,267,267,,,,,267,267,,,,268,268,268,267,268',
'267,267,267,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268',
'268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268',
'268,268,268,268,,268,268,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,',
'268,268,,,268,,268,,268,,268,,,268,,,,,,268,,,,,268,268,268,268,,268',
'268,268,268,,,,,268,268,,,,276,276,276,268,276,268,268,268,276,276,',
',,276,,276,276,276,276,276,276,276,,,,,,276,276,276,276,276,276,276',
',,276,,,,,,,276,,,276,276,276,276,276,276,276,276,276,276,276,276,,276',
'276,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276',
',276,,,276,,,,,,276,,,,,276,276,276,276,,276,276,276,276,,,,,276,276',
'276,,,766,766,766,276,766,276,276,276,766,766,,,,766,,766,766,766,766',
'766,766,766,,,,,,766,766,766,766,766,766,766,,,766,,,,,,,766,,,766,766',
'766,766,766,766,766,766,,766,766,766,,766,766,,,766,,,,,,,,,,,,,,,,',
',,,766,,,766,,,766,766,,,766,,,,,,,,,,,,,,,,,,,,766,766,766,766,,766',
'766,766,766,,,,,766,766,,,,243,243,243,766,243,766,766,766,243,243,',
',,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243',
',,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243,,243',
'243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243',
',,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243,,,,242',
'242,242,243,242,243,243,243,242,242,,,,242,,242,242,242,242,242,242',
'242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242',
'242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,,,,,',
',242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242,242',
',242,242,242,242,,,,,242,242,,,,283,283,283,242,283,242,242,242,283',
'283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283',
'283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,,283,283,283,',
'283,283,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,,',
',,283,,,,,,,,,283,,,,,283,283,283,283,,283,283,283,283,,,,,283,283,',
',,241,241,241,283,241,283,283,283,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,',
',,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241',
'241,,241,241,241,241,,,,,241,241,,,,285,285,285,241,285,241,241,241',
'285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285,285',
'285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285,,285,285,285',
',285,285,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,',
',,,285,,,,,,,,,285,,,,,285,285,285,285,,285,285,285,285,,,,,285,285',
',,,288,288,288,285,288,285,285,285,288,288,,,,288,,288,288,288,288,288',
'288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288',
'288,288,288,288,288,,288,288,288,,288,288,288,288,288,,,,,,,,,,,,,,',
',,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,,288,,,,,288,288,288',
'288,,288,288,288,288,,,,,288,288,,,,289,289,289,288,289,288,288,288',
'289,289,,,,289,,289,289,289,289,289,289,289,,,,,,289,289,289,289,289',
'289,289,,,289,,,,,,,289,,,289,289,289,289,289,289,289,289,,289,289,289',
',289,289,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,',
',,,289,,,,,,,,,289,,,,,289,289,289,289,,289,289,289,289,,,,,289,289',
',,,705,705,705,289,705,289,289,289,705,705,,,,705,,705,705,705,705,705',
'705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705',
'705,705,705,705,705,,705,705,705,,705,705,705,705,705,,,,,,,,,,,,,,',
',,,,,705,,,705,,,705,705,,,705,,,,,,705,,,,,,,,,705,,,,,705,705,705',
'705,,705,705,705,705,,,,,705,705,,,,240,240,240,705,240,705,705,705',
'240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240',
'240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240',
',240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,',
',,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240,240,,,,,240,240',
',,,652,652,652,240,652,240,240,240,652,652,,,,652,,652,652,652,652,652',
'652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,,652,,,652,652,652',
'652,652,652,652,652,,652,652,652,,652,652,652,652,652,,,,,,,,,,,,,,',
',,,,,652,,,652,,,652,652,,,652,,652,,,,652,,,,,,,,,652,,,,,652,652,652',
'652,,652,652,652,652,,,,,652,652,,,,239,239,239,652,239,652,652,652',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,343,343,343,239,343,239,239,239,343,343,,,,343,,343,343,343,343,343',
'343,343,,,,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343',
'343,343,343,343,343,,343,343,343,,343,343,343,343,343,,,,,,,,,,,,,,',
',,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,,,,343,,,,,343,343,343',
'343,,343,343,343,343,,,,,343,343,,,,344,344,344,343,344,343,343,343',
'344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344',
'344,344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344',
',344,344,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,',
',,,344,,,,,,,,,344,,,,,344,344,344,344,,344,344,344,344,,,,,344,344',
',,,518,518,518,344,518,344,344,344,518,518,,,,518,,518,518,518,518,518',
'518,518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518',
'518,518,518,518,518,,518,518,518,,518,518,518,518,518,,,,,,,,,,,,,,',
',,,,,518,,,518,,,518,518,,,518,,,,,,518,,,,,,,,,518,,,,,518,518,518',
'518,,518,518,518,518,,,,,518,518,,,,515,515,515,518,515,518,518,518',
'515,515,,,,515,,515,515,515,515,515,515,515,,,,,,515,515,515,515,515',
'515,515,,,515,,,,,,,515,,,515,515,515,515,515,515,515,515,,515,515,515',
',515,515,,,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515,,,515,,,,,,,,',
',,,,,,,,,,,515,515,515,515,,515,515,515,515,,,,,515,515,,,,509,509,509',
'515,509,515,515,515,509,509,,,,509,,509,509,509,509,509,509,509,,,,',
',509,509,509,509,509,509,509,,,509,,,,,,,509,,,509,509,509,509,509,509',
'509,509,509,509,509,509,,509,509,509,509,509,,,,,,,,,,,,,,,,,,,,509',
',,509,,,509,509,,,509,,509,,509,,509,,,509,,,,,,509,,,,,509,509,509',
'509,,509,509,509,509,,,,,509,509,,,,507,507,507,509,507,509,509,509',
'507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507,507,507,507,507',
'507,507,,,507,,,,,,,507,,,507,507,507,507,507,507,507,507,,507,507,507',
',507,507,,,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507,,,939,,939',
'939,939,939,939,,,,,,,,,939,,507,507,507,507,,507,507,507,507,,,,,507',
'507,,,,,,939,507,,507,507,507,122,122,122,122,122,939,939,,122,122,939',
',,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122,122',
',,122,,,,,,122,122,,122,122,122,122,122,122,122,122,122,,122,122,122',
',122,122,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,122',
',,,122,,,,,,,,,122,,,,,122,122,122,122,,122,122,122,122,,,,,122,122',
',,,711,711,711,122,711,122,122,122,711,711,,,,711,,711,711,711,711,711',
'711,711,,,,,,711,711,711,711,711,711,711,,,711,,,,,,,711,,,711,711,711',
'711,711,711,711,711,,711,711,711,,711,711,711,711,711,,,,,,,,,,,,,,',
',,,,,711,,,711,,,711,711,,,711,,,,,,711,,,,,,,,,711,,,,,711,711,711',
'711,,711,711,711,711,,,,,711,711,,,,254,254,254,711,254,711,711,711',
'254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254',
'254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254',
',254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254,254,,,,,254,254',
',,,121,121,121,254,121,254,254,254,121,121,,,,121,,121,121,121,121,121',
'121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121',
'121,121,121,121,121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,',
',,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,,121,,,,,121,121,121',
'121,,121,121,121,121,,,,,121,121,,,,120,120,120,121,120,121,121,121',
'120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120',
'120,120,,,120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120',
',120,120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,',
',,,120,,,,,,,,,120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120',
',,,,,,120,,120,120,120,499,499,499,499,499,,,,499,499,,,,499,,499,499',
'499,499,499,499,499,,,,,,499,499,499,499,499,499,499,,,499,,,,,,499',
'499,499,499,499,499,499,499,499,499,499,499,,499,499,499,,499,499,499',
'499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,499,,,,499,,,',
',,,,,499,,,,,499,499,499,499,,499,499,499,499,,,,,499,499,,,,,,499,499',
',499,499,499,493,493,493,,493,,,,493,493,,,,493,,493,493,493,493,493',
'493,493,,,,,,493,493,493,493,493,493,493,,,493,,,,,,,493,,,493,493,493',
'493,493,493,493,493,,493,493,493,,493,493,493,493,493,,,,,,,,,,,,,,',
',,,,,493,,,493,,,493,493,,,493,,,,,,493,,,,,,,,,493,,,,,493,493,493',
'493,,493,493,493,493,,,,,493,493,,,,491,491,491,493,491,493,493,493',
'491,491,,,,491,,491,491,491,491,491,491,491,,,,,,491,491,491,491,491',
'491,491,,,491,,,,,,,491,,,491,491,491,491,491,491,491,491,491,491,491',
'491,,491,491,491,491,491,,,,,,,,,,,,,,,,,,,,491,,,491,,,491,491,,,491',
',,,491,,491,,,491,,,,,,491,,,,,491,491,491,491,,491,491,491,491,,,,',
'491,491,,,,489,489,489,491,489,491,491,491,489,489,,,,489,,489,489,489',
'489,489,489,489,,,,,,489,489,489,489,489,489,489,,,489,,,,,,,489,,,489',
'489,489,489,489,489,489,489,489,489,489,489,,489,489,489,489,489,,,',
',,,,,,,,,,,,,,,,489,,,489,,,489,489,,,489,,489,,489,,489,,,489,,,,,',
'489,,,,,489,489,489,489,,489,489,489,489,,,,,489,489,,,,59,59,59,489',
'59,489,489,489,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59',
'59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59,59',
'59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,,,59',
',,,,59,59,59,59,,59,59,59,59,,,,,59,59,,,,363,363,363,59,363,59,59,59',
'363,363,,,,363,,363,363,363,363,363,363,363,,,,,,363,363,363,363,363',
'363,363,,,363,,,,,,,363,,,363,363,363,363,363,363,363,363,,363,363,363',
',363,363,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,,,363,363,,,363,,',
',,,363,,,,,,,,,363,,,,,363,363,363,363,,363,363,363,363,,,,,363,363',
',,,119,119,119,363,119,363,363,363,119,119,,,,119,,119,119,119,119,119',
'119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119',
'119,119,119,119,119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,',
',,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119',
'119,,119,119,119,119,,,,,119,119,,,,118,118,118,119,118,119,119,119',
'118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118',
'118,118,,,118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118,118,118',
',118,118,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,',
',,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,,118,118',
',,,,,,118,,118,118,118,113,113,113,113,113,,,,113,113,,,,113,,113,113',
'113,113,113,113,113,,,,,,113,113,113,113,113,113,113,,,113,,,,,,113',
'113,113,113,113,113,113,113,113,113,113,113,,113,113,113,,113,113,113',
'113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113,,113,,,,113,,,',
',,,,,113,,,,,113,113,113,113,,113,113,113,113,,,,,113,113,,,,,,113,113',
',113,113,113,449,449,449,,449,,,,449,449,,,,449,,449,449,449,449,449',
'449,449,,,,,,449,449,449,449,449,449,449,,,449,,,,,,,449,,,449,449,449',
'449,449,449,449,449,,449,449,449,,449,449,449,449,449,,,,,,,,,,,,,,',
',,,,,449,,,449,,,449,449,,,449,,,,,,449,,,,,,,,,449,,,,,449,449,449',
'449,,449,449,449,449,,,,,449,449,,,,448,448,448,449,448,449,449,449',
'448,448,,,,448,,448,448,448,448,448,448,448,,,,,,448,448,448,448,448',
'448,448,,,448,,,,,,,448,,,448,448,448,448,448,448,448,448,,448,448,448',
',448,448,448,448,448,,,,,,,,,,,,,,,,,,,,448,,,448,,,448,448,,,448,,',
',,,448,,,,,,,,,448,,,,,448,448,448,448,,448,448,448,448,,,,,448,448',
',,,447,447,447,448,447,448,448,448,447,447,,,,447,,447,447,447,447,447',
'447,447,,,,,,447,447,447,447,447,447,447,,,447,,,,,,,447,,,447,447,447',
'447,447,447,447,447,,447,447,447,,447,447,447,447,447,,,,,,,,,,,,,,',
',,,,,447,,,447,,,447,447,,,447,,,,,,447,,,,,,,,,447,,,,,447,447,447',
'447,,447,447,447,447,,,,,447,447,,,,445,445,445,447,445,447,447,447',
'445,445,,,,445,,445,445,445,445,445,445,445,,,,,,445,445,445,445,445',
'445,445,,,445,,,,,,,445,,,445,445,445,445,445,445,445,445,445,445,445',
'445,,445,445,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,,445',
',445,,445,,445,,,445,,,,,,445,,,,,445,445,445,445,,445,445,445,445,',
',,,445,445,,,,379,379,379,445,379,445,445,445,379,379,,,,379,,379,379',
'379,379,379,379,379,,,,,,379,379,379,379,379,379,379,,,379,,,,,,,379',
',,379,379,379,379,379,379,379,379,,379,379,379,,379,379,379,379,379',
',,,,,,,,,,,,,,,,,,,379,,,379,,,379,379,,,379,,,,,,379,,,,,,,,,379,,',
',,379,379,379,379,,379,379,379,379,,,,,379,379,,,,70,70,70,379,70,379',
'379,379,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70',
',,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,',
',,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70',
'70,70,70,,,,,70,70,,,,60,60,60,70,60,70,70,70,60,60,,,,60,,60,60,60',
'60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60',
'60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60',
'60,,,60,,,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60,60',
',,,211,211,211,60,211,60,60,60,211,211,,,,211,,211,211,211,211,211,211',
'211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211',
'211,211,211,211,211,211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,,',
',,,,211,,,211,,,211,211,,,211,,211,,211,,211,,,211,,,,,,211,,,,,211',
'211,211,211,,211,211,211,211,,,,,211,211,,,,532,532,532,211,532,211',
'211,211,532,532,,,,532,,532,532,532,532,532,532,532,,,,,,532,532,532',
'532,532,532,532,,,532,,,,,,,532,,,532,532,532,532,532,532,532,532,532',
'532,532,532,,532,532,532,532,532,,,,,,,,,,,,,,,,,,,,532,,,532,,,532',
'532,,,532,,,,,,532,,,532,,,,,,532,,,,,532,532,532,532,,532,532,532,532',
',,,,532,532,,,,529,529,529,532,529,532,532,532,529,529,,,,529,,529,529',
'529,529,529,529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,,,529',
',,529,529,529,529,529,529,529,529,529,529,529,529,,529,529,529,529,529',
',,,,,,,,,,,,,,,,,,,529,,,529,,,529,529,,,529,,529,,,,529,,,529,,,,,',
'529,,,,,529,529,529,529,,529,529,529,529,,,,,529,529,,,,210,210,210',
'529,210,529,529,529,210,210,,,,210,,210,210,210,210,210,210,210,,,,',
',210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210',
'210,210,,210,210,210,,210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210',
',,210,210,,,210,,,,,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210,210',
'210,,,,,210,210,,,,43,43,43,210,43,210,210,210,43,43,,,,43,,43,43,43',
'43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43',
'43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43',
',,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,209',
'209,209,43,209,43,43,43,209,209,,,,209,,209,209,209,209,209,209,209',
',,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209',
'209,209,209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209',
',,209,,,209,209,,,209,,209,,,,209,,,,,,,,,209,,,,,209,209,209,209,,209',
'209,209,209,,,,,209,209,,,,44,44,44,209,44,209,209,209,44,44,,,,44,',
'44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44',
'44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,',
'44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,',
'44,44,,,,975,975,975,44,975,44,44,44,975,975,,,,975,,975,975,975,975',
'975,975,975,,,,,,975,975,975,975,975,975,975,,,975,,,,,,,975,,,975,975',
'975,975,975,975,975,975,975,975,975,975,,975,975,975,975,975,,,,,,,',
',,,,,,,,,,,,975,,,975,,,975,975,,,975,,975,,975,,975,,,975,,,,,,975',
',,,,975,975,975,975,,975,975,975,975,,,,,975,975,,,,523,523,523,975',
'523,975,975,975,523,523,,,,523,,523,523,523,523,523,523,523,,,,,,523',
'523,523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523',
'523,,523,523,523,,523,523,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,',
',523,523,,,523,,,,,,523,,,,,,,,,523,,,,,523,523,523,523,,523,523,523',
'523,,,,,523,523,,,,519,519,519,523,519,523,523,523,519,519,,,,519,,519',
'519,519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,',
',519,,,519,519,519,519,519,519,519,519,,519,519,519,,519,519,519,519',
'519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,,,519,,,,,,,,,519',
',,,,519,519,519,519,,519,519,519,519,,,,,519,519,,,,,,,519,,519,519',
'519,586,586,586,586,586,586,586,586,586,586,586,586,586,586,586,586',
'586,586,586,586,586,586,586,586,,,,586,586,586,586,586,586,586,586,586',
'586,,,,,,586,586,586,586,586,586,586,586,586,,,586,,,,,,,,586,586,,586',
'586,586,586,586,586,586,,,586,586,,,,586,586,586,586,,,,,,,,,,,,,,586',
'586,,586,586,586,586,586,586,586,586,586,586,586,586,,,586,586,,,,,',
',,,,,,,,586,398,398,398,398,398,398,398,398,398,398,398,398,398,398',
'398,398,398,398,398,398,398,398,398,398,,,,398,398,398,398,398,398,398',
'398,398,398,,,,,,398,398,398,398,398,398,398,398,398,,,398,,,,,,,,398',
'398,,398,398,398,398,398,398,398,,,398,398,,,,398,398,398,398,,,,,,',
',,,,,,,398,398,,398,398,398,398,398,398,398,398,398,398,398,398,,,398',
'398,,,,,,,,,,,,,,398,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
',,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9',
'9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,',
',9,9,,,,,,,,,,,,,,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
',,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8',
'8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,',
',8,8,,,,,,,,,,,,,,8,717,717,717,717,717,717,717,717,717,717,717,717',
'717,717,717,717,717,717,717,717,717,717,717,717,,,,717,717,717,717,717',
'717,717,717,717,717,,,,,,717,717,717,717,717,717,717,717,717,,,717,',
',,,,,,717,717,,717,717,717,717,717,717,717,,,717,717,,,,717,717,717',
'717,,,,,,,,,,,,,,717,717,,717,717,717,717,717,717,717,717,717,717,717',
'717,,,717,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71',
'71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,71,922',
'922,71,,922,,,,,,,,922,922,,922,922,922,922,922,922,922,,,922,922,,',
',922,922,922,922,,,,,,922,,,,,,,,922,922,,922,922,922,922,922,922,922',
'922,922,922,922,922,520,520,922,,520,,,,,,,,520,520,,520,520,520,520',
'520,520,520,,,520,520,,,,520,520,520,520,,,,,,520,,,,,,,,520,520,,520',
'520,520,520,520,520,520,520,520,520,520,520,521,521,520,,521,,,,,,,',
'521,521,,521,521,521,521,521,521,521,,,521,521,,,,521,521,521,521,,',
',,,521,,,,,,,,521,521,,521,521,521,521,521,521,521,521,521,521,521,521',
'549,549,521,,549,,,,,,,,549,549,,549,549,549,549,549,549,549,,,549,549',
',,,549,549,549,549,,,,,,549,,,,,,,,549,549,,549,549,549,549,549,549',
'549,549,549,549,549,549,977,977,549,,977,,,,,,,,977,977,,977,977,977',
'977,977,977,977,,,977,977,,,,977,977,977,977,,,,,,977,,,,,,,,977,977',
',977,977,977,977,977,977,977,977,977,977,977,977,976,976,977,,976,,',
',,,,,976,976,,976,976,976,976,976,976,976,,,976,976,,,,976,976,976,976',
',,,,,976,,,,,,,,976,976,,976,976,976,976,976,976,976,976,976,976,976',
'976,444,444,976,,444,,,,,,,,444,444,,444,444,444,444,444,444,444,,,444',
'444,,,,444,444,444,444,,,,,,444,,,,,,,,444,444,,444,444,444,444,444',
'444,444,444,444,444,444,444,212,212,444,,212,,,,,,,,212,212,,212,212',
'212,212,212,212,212,,,212,212,,,,212,212,212,212,,,,,,212,,,,,,,,212',
'212,,212,212,212,212,212,212,212,212,212,212,212,212,443,443,212,,443',
',,,,,,,443,443,,443,443,443,443,443,443,443,,,443,443,,,,443,443,443',
'443,,,,,,443,,,,,,,,443,443,,443,443,443,443,443,443,443,443,443,443',
'443,443,213,213,443,,213,,,,,,,,213,213,,213,213,213,213,213,213,213',
',,213,213,,,,213,213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213,213',
'213,213,213,213,213,213,213,213,556,556,213,,556,,,,,,,,556,556,,556',
'556,556,556,556,556,556,,,556,556,,,,556,556,556,556,,,,,,556,,,,,,',
',556,556,,556,556,556,556,556,556,556,556,556,556,556,556,548,548,556',
',548,,,,,,,,548,548,,548,548,548,548,548,548,548,,,548,548,,,,548,548',
'548,548,,,,,,548,,,,,,,,548,548,,548,548,548,548,548,548,548,548,548',
'548,548,548,511,511,548,,511,,,,,,,,511,511,,511,511,511,511,511,511',
'511,,,511,511,,,,511,511,511,511,,,,,,511,,,,,,,,511,511,,511,511,511',
'511,511,511,511,511,511,511,511,511,555,555,511,,555,,,,,,,,555,555',
',555,555,555,555,555,555,555,,,555,555,,,,555,555,555,555,,,,,,555,',
',,,,,,555,555,,555,555,555,555,555,555,555,555,555,555,555,555,510,510',
'555,,510,,,,,,,,510,510,,510,510,510,510,510,510,510,,,510,510,,,,510',
'510,510,510,,,,,,510,,,,,,,,510,510,,510,510,510,510,510,510,510,510',
'510,510,510,510,263,263,510,,263,,,,,,,,263,263,,263,263,263,263,263',
'263,263,,,263,263,,,,263,263,263,263,965,,965,965,965,965,965,,,,,,',
'263,263,965,263,263,263,263,263,263,263,263,263,263,263,263,,537,263',
'537,537,537,537,537,963,965,963,963,963,963,963,,537,,,,965,965,,963',
',965,961,,961,961,961,961,961,,,,,,537,537,,961,,,,963,,537,537,537',
'537,,,,537,,963,963,,,,963,715,961,715,715,715,715,715,,,,961,961,961',
'961,,715,,961,941,,941,941,941,941,941,943,,943,943,943,943,943,,941',
',,,715,,658,943,658,658,658,658,658,715,715,715,715,,,,715,658,941,',
',,,,,943,,,,941,941,,,,941,,943,943,,658,,943,,,,,,,658,658,658,658',
',,937,658,937,937,937,937,937,,716,,716,716,716,716,716,937,,,,,,,,716',
',798,,798,798,798,798,798,,,,,,937,,,798,,,,,716,937,937,937,937,,,',
'937,716,716,716,716,,,,716,798,,800,,800,800,800,800,800,798,798,798',
'798,,,,798,800,,802,,802,802,802,802,802,,845,,845,845,845,845,845,802',
',,,,800,,,845,,,,,,800,800,800,800,,,,800,802,,,,,,,,845,,,802,802,',
',,802,845,845,845,845,,,847,845,847,847,847,847,847,849,,849,849,849',
'849,849,,847,,,,,,,849,,,,,,,,,,,,,,,847,,,,,,,849,,847,847,847,847',
',,,847,,849,849,,,,849' ]
        racc_action_check = arr = ::Array.new(25101, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3124,    54,   nil,  -115,   nil,  9353,   630,   -49, 23417, 23289,
    10,   nil,    15,    98,   814,   418,    43,   548,   nil,   -68,
  7765,  2984,   170,   nil,   779,   nil,   284,   876,   986,  7233,
  7364,  7495,   nil,  4244,  8944,  9075,   nil,    85,   645,   316,
   174,   281, 12235, 22239, 22501,   103,   712,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1313,   nil,   -31, 20127,
 21584,   -15,   nil, 12628, 12890,   nil,   nil, 13021, 12497, 12366,
 21453, 23658,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   490,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   358,   nil,   nil,
   138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   235,   nil, 20659,   nil,   nil,   nil,   nil, 20520, 20389,
 19456, 19325, 18932,  1864,   nil,    -1,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   104,   nil,  2004, 22370,
 22108, 21715, 24146, 24268,   nil,   nil, 11711, 11580, 11449, 11318,
 11187, 10532,   nil,   nil,   708,   -42,   164,   197,   186,   131,
   192,   nil,  8289,  5224,   244,  6709,  6439,  6177,  5915, 18007,
 17745, 17090, 16828, 16697, 16042, 15911, 15125, 14339, 14208, 14077,
 13946, 13553, 13160,  7102, 19194, 13291, 13815, 15387, 15518, 15649,
 15780,   nil,   nil, 24634,   nil,   nil,   241, 16173, 16304,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 16435,   nil,  3124,   nil,
   219,   231,   nil, 16959,   289, 17221,   nil,   nil, 17352, 17483,
   nil,   nil,   288,   nil,  6578,  1173,   305,   276,  4524,   309,
   372,   375,  7626,  5784,   562,   649,   652,   471,   653,   nil,
   439,   400,   194,   nil,   nil,   nil,   446,   307,   436, 10008,
   nil,   641,   508,   744,   nil,   514,   nil, 10794,  5364, 10925,
   468,   nil,   273,   175,   515,   498,   372,   527,   nil,   nil,
   437,    18,    26, 18138, 18269,   364,   603,   488,    26,    36,
   678,   570,    65,   603,   nil,   nil,   478,   616,   148,   nil,
   619,   nil,   525, 20258,   nil,   nil,   nil,   218,   782,   780,
   755,   720,   648,   618,   582,   338,   nil,   220,   nil, 21322,
   nil,   397,   408,   505,   536,   528,   -31,   -41,   539,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   521, 23161,   nil,
   nil,   nil,   nil,   527,   nil,   nil,   510, 12759,   523,   nil,
   nil,  1864,   528,   nil,   555,   556,   793,   795,  1449,   nil,
   nil,   nil,   248,   608,   608,   nil,   nil,  1098,   740,   nil,
  2004,   nil,   556,   nil,   nil,  1584,   nil,   nil,   nil,   nil,
    19,   nil,   617, 24207, 24085, 21191,   -82, 21060, 20929, 20798,
  5504,  4944,   484,   802,   652,   656,   657,   668,  5915,  6027,
  5784,  5224,  5364,  5644,  1398,  4524,  4664,  4804,  5084,  4104,
  4244,   938,  1190,  3964,  4384,  3684,   192,  1234,   nil,   nil,
   nil,   nil,   614,   nil,   203,   236,   627,   nil,   nil, 19996,
   nil, 19865,   nil, 19734,   nil,   390,   nil,   nil,   nil, 19595,
  1178,  3684,   629,   630,   nil,   nil,   631, 18793,   639, 18662,
 24573, 24451,   781,   681,   nil, 18531,   639,   nil, 18400, 22894,
 23780, 23841,  3824, 22763,   766,   766,   522,   696,   nil, 21977,
   nil,   nil, 21846,   nil,   nil,   nil,   nil, 24696,  2424,   775,
   nil,  3544,   -20,    65,   777,   789, 12104, 11973, 24390, 23902,
    68,   nil,   nil,   990,   nil, 24512, 24329, 11842,   nil,   nil,
   257,  2844,   710,   nil,   156,   nil,   nil,   nil,   962,   nil,
   nil,   nil,   681,   nil,   nil,   395,   nil,   393,   nil,   nil,
   668,   nil,   669,   nil,   nil,   nil, 23033,   nil,   692, 11056,
 10663,   524,   732, 10401, 10270, 10139,  9877,   733,   nil,   nil,
  9746,  9615,   735,   nil,  9484,  9214,   nil,   nil,   110,   156,
     0,   470,   705,  1724,   709,   nil,   538,   nil,  2984,   817,
    -8,   117,   nil,  2284,  1584,   nil,   722,   nil,   773,  8551,
   nil,   nil,  8420,   nil,   748,  -109,  8158,   736,   nil,   748,
    27,   206,   791,   170,   848,   798,   760,  6046,  3264,   828,
   -14,   881, 17876,   nil,   766,   nil,   247,   nil, 24796,   nil,
   766,   773,   nil,   775,   776,   777,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   768,  1277,   nil,   nil, 14470,   nil,
   nil,   nil,   863,   nil,   nil,   nil,   869,   nil,   nil,   883,
   511,   nil,   921,   nil,   nil,   nil,   nil,   930,   nil,     6,
   810,    90,    94,   165,   178, 17614,   251,  1066,   nil,   827,
  4384, 19063,   nil,   952,  4944, 24757, 24856, 23545,   nil,   nil,
   nil,   nil,   nil,   nil,  5084,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   829, 13422,  2144, 13684,   nil,   834,   nil,  2284,
   nil,  2424,   nil,   nil,  2564,   nil,  2704,   nil,  2844, 14601,
 14732, 14863, 14994,   261, 15256,   835,   838,   nil,   842,   844,
   847,   nil,   882,   862,   861,   854, 16566,   nil,   nil,   996,
   nil,   nil,  4804,   897,  1005,   nil,   nil,   nil,   nil,   891,
   149,   nil,   nil,  1022,   nil,  2144,   899,   946,   nil,   nil,
   944,   nil,     7,   907,  1052,   nil,   nil,   289, 24873,   nil,
 24912,   nil, 24929,   nil,  6308,   nil,   876,   nil,   906,   359,
   915,   nil,   nil,   nil,   nil,  1037,   nil,  6840,  1039,  5504,
  5644,   nil,  6971,  3964,    22,    55,   nil,  1040,   308,  4664,
   nil,  1041,   941,   346,   nil,   945,   944,   nil,  3404,  7896,
  8027,  3544,  1123,   nil,   nil, 24937,   nil, 24989,   nil, 24996,
   nil,   nil,   969,  1076,  8682,   924,  1026,   nil,   972,   nil,
   nil,   nil,  3264,   nil,   nil,   -10,  8813,   nil,   nil,   nil,
   nil,   nil,   997,   957,   nil,   nil,   nil,   968,   969,   nil,
   970,   971,   nil,   976,   nil,   nil,   985,  1212,   987,  1250,
   nil,   nil,    41,   nil,  1113,  1127,   nil,    17,   nil,   nil,
   nil,  1138,   nil,   nil,   nil,  1060,   nil,  1020,   nil,   nil,
  1021,  1024,  1025,  1027,   nil,  1028,   nil,   342,   nil,   nil,
   nil,   954, 23719,   nil,   nil,   nil,  1724,    37,   -11,   958,
  1107,    33,   nil,  2564,  2704,   nil,   nil, 24848,   nil, 18840,
   nil, 24775,   nil, 24782,   nil,   nil,   nil,   nil,   354,  1520,
  1030,  3824,   nil,   nil,   nil,   nil,   nil,  4104,   nil,  3404,
   nil, 24721,   nil, 24703,   nil, 24667,   nil,  9122,   nil,   nil,
   nil,  1091,  1089,  1094,  1177, 22632, 24024, 23963,    -7,  1073,
  1178,  1057,  1060,  1062,  1064,  1066,  1512,  1069,  1378,    34,
  1215,  1217,  1099,  1103,  1104,  1105,   nil,   nil,  1109,    52,
    53,    -9,    -1,   nil,   nil,  7673,   nil,   nil,   nil,   nil,
  1227,  1111,   nil,   nil,   nil,  1198,   nil,   nil,   nil,   nil,
   128,  1112,  1124,  -101,   nil,   nil ]

racc_action_default = [
    -3,  -601,    -1,  -587,    -4,  -601,    -7,  -601,  -601,  -601,
  -601,   -29,  -601,  -601,  -601,  -279,  -601,   -40,   -43,  -589,
  -601,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -329,  -330,   -68,   -11,   -72,   -80,   -82,  -601,  -491,  -492,
  -601,  -601,  -601,  -601,  -601,  -589,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -575,  -281,  -283,  -600,
  -565,  -301,  -303,  -601,  -601,  -307,  -310,  -587,  -601,  -601,
  -601,  -601,  -331,  -332,  -334,  -335,  -432,  -433,  -434,  -435,
  -436,  -457,  -439,  -440,  -459,  -461,  -444,  -449,  -453,  -455,
  -471,  -459,  -473,  -475,  -476,  -477,  -478,  -573,  -480,  -481,
  -574,  -483,  -484,  -485,  -486,  -487,  -488,  -489,  -490,  -495,
  -496,  -601,    -2,  -588,  -596,  -597,  -598,    -6,  -601,  -601,
  -601,  -601,  -601,    -3,   -17,  -601,  -111,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -601,
  -601,  -246,  -601,  -601,  -585,  -586,  -601,  -601,  -601,  -601,
  -601,  -589,  -590,   -47,  -601,  -491,  -492,  -601,  -279,  -601,
  -601,  -229,  -601,   -11,  -601,  -601,  -601,  -601,  -601,  -601,
  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
  -601,  -401,  -403,  -601,  -583,  -584,   -57,  -246,  -601,  -300,
  -407,  -416,  -418,   -63,  -413,   -64,  -589,   -65,  -238,  -251,
  -260,  -260,  -255,  -601,  -261,  -601,  -457,  -567,  -601,  -601,
   -66,   -67,  -587,   -12,  -601,   -15,  -601,   -70,   -11,  -589,
  -601,   -73,   -76,   -11,   -88,   -89,  -601,  -601,   -96,  -293,
  -296,  -589,  -601,  -329,  -330,  -333,  -414,  -601,   -78,  -601,
   -84,  -290,  -474,  -601,  -214,  -215,  -230,  -601,   -11,  -601,
  -589,  -239,  -593,  -593,  -601,  -601,  -593,  -601,  -302,  -392,
   -49,  -601,  -601,  -601,  -601,  -587,  -601,  -588,  -491,  -492,
  -601,  -601,  -279,  -601,  -345,  -346,  -106,  -107,  -601,  -109,
  -601,  -279,  -499,  -601,  -491,  -492,  -322,  -111,  -112,  -153,
  -154,  -155,  -171,  -176,  -183,  -186,  -324,  -601,  -563,  -601,
  -437,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  1026,
    -5,  -599,   -23,   -24,   -25,   -26,   -27,  -601,  -601,   -19,
   -20,   -21,  -121,  -601,   -30,   -39,  -266,  -601,  -601,  -265,
   -31,  -196,  -589,  -247,  -260,  -260,  -576,  -577,  -256,  -411,
  -578,  -579,  -577,  -576,  -256,  -410,  -412,  -578,  -579,   -37,
  -204,   -38,  -601,   -41,   -42,  -194,  -261,   -44,   -45,   -46,
  -589,  -299,  -601,  -601,  -601,  -246,  -290,  -601,  -601,  -601,
  -205,  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -216,  -217,
  -218,  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,
  -228,  -231,  -232,  -233,  -234,  -589,  -381,  -256,  -576,  -577,
   -54,   -58,  -589,  -257,  -381,  -381,  -589,  -295,  -252,  -601,
  -253,  -601,  -258,  -601,  -262,  -601,  -570,  -572,   -10,  -588,
   -14,    -3,  -589,   -69,  -288,   -85,   -74,  -601,  -589,  -246,
  -601,  -601,   -95,  -601,  -474,  -601,   -81,   -86,  -601,  -601,
  -601,  -601,  -235,  -601,  -424,  -601,  -284,  -601,  -240,  -595,
  -594,  -242,  -595,  -291,  -292,  -566,  -304,  -523,   -11,  -336,
  -337,   -11,  -601,  -601,  -601,  -601,  -601,  -246,  -601,  -601,
  -290,  -315,  -106,  -107,  -108,  -601,  -601,  -246,  -318,  -497,
  -601,   -11,  -501,  -326,  -589,  -438,  -458,  -463,  -601,  -465,
  -441,  -460,  -601,  -462,  -443,  -601,  -446,  -601,  -448,  -451,
  -601,  -452,  -601,  -472,    -8,   -18,  -601,   -28,  -269,  -601,
  -601,  -415,  -601,  -248,  -250,  -601,  -601,   -59,  -245,  -408,
  -601,  -601,   -61,  -409,  -601,  -601,  -298,  -591,  -576,  -577,
  -576,  -577,  -589,  -194,  -601,  -382,  -589,  -384,   -11,   -53,
  -404,  -381,  -243,   -11,   -11,  -294,  -260,  -259,  -263,  -601,
  -568,  -569,  -601,   -13,  -601,   -71,  -601,   -77,   -83,  -589,
  -576,  -577,  -244,  -580,   -94,  -601,   -79,  -601,  -203,  -213,
  -589,  -600,  -600,  -282,  -589,  -287,  -593,  -393,  -523,  -396,
  -562,  -562,  -506,  -508,  -508,  -508,  -522,  -524,  -525,  -526,
  -527,  -528,  -529,  -530,  -531,  -601,  -533,  -535,  -537,  -542,
  -544,  -545,  -547,  -552,  -554,  -555,  -557,  -558,  -559,  -601,
  -600,  -338,  -600,  -308,  -339,  -340,  -311,  -601,  -314,  -601,
  -589,  -576,  -577,  -580,  -289,  -601,  -106,  -107,  -110,  -589,
   -11,  -601,  -320,  -601,   -11,  -523,  -523,  -601,  -564,  -464,
  -467,  -468,  -469,  -470,   -11,  -442,  -445,  -447,  -450,  -454,
  -456,  -122,  -267,  -601,  -197,  -601,  -592,  -260,   -33,  -199,
   -34,  -200,   -60,   -35,  -202,   -36,  -201,   -62,  -195,  -601,
  -601,  -601,  -601,  -415,  -601,  -562,  -562,  -363,  -365,  -365,
  -365,  -380,  -601,  -589,  -386,  -531,  -539,  -540,  -550,  -601,
  -406,  -405,   -11,  -601,  -601,  -254,  -264,  -571,   -16,   -75,
  -415,   -87,  -297,  -600,  -343,   -11,  -425,  -600,  -426,  -427,
  -601,  -241,  -601,  -589,  -601,  -504,  -505,  -601,  -601,  -515,
  -601,  -518,  -601,  -520,  -601,  -347,  -601,  -349,  -351,  -358,
  -589,  -536,  -546,  -556,  -560,  -601,  -341,  -601,  -601,   -11,
   -11,  -313,  -601,   -11,  -415,  -601,  -415,  -601,  -601,   -11,
  -323,  -601,  -589,  -601,  -327,  -601,  -268,   -32,  -198,  -249,
  -601,  -236,  -601,  -361,  -362,  -371,  -373,  -601,  -376,  -601,
  -378,  -383,  -601,  -601,  -601,  -538,  -601,  -402,  -601,  -417,
  -419,    -9,   -11,  -431,  -344,  -601,  -601,  -429,  -285,  -394,
  -397,  -399,  -601,  -562,  -543,  -561,  -507,  -508,  -508,  -534,
  -508,  -508,  -553,  -508,  -531,  -548,  -589,  -601,  -356,  -601,
  -532,  -305,  -601,  -306,  -601,  -601,  -263,  -600,  -316,  -319,
  -498,  -601,  -325,  -500,  -502,  -501,  -466,  -562,  -541,  -364,
  -365,  -365,  -365,  -365,  -551,  -365,  -385,  -589,  -388,  -390,
  -391,  -549,  -601,  -290,   -55,  -430,   -11,  -491,  -492,  -601,
  -601,  -279,  -428,   -11,   -11,  -395,  -503,  -601,  -511,  -601,
  -513,  -601,  -516,  -601,  -519,  -521,  -348,  -350,  -354,  -601,
  -359,   -11,  -309,  -312,  -420,  -421,  -422,   -11,  -321,   -11,
  -360,  -601,  -368,  -601,  -370,  -601,  -374,  -601,  -377,  -379,
  -387,  -601,  -289,  -580,  -424,  -246,  -601,  -601,  -290,  -601,
  -601,  -508,  -508,  -508,  -508,  -352,  -601,  -357,  -601,  -600,
  -601,  -601,  -365,  -365,  -365,  -365,  -389,  -423,  -589,  -576,
  -577,  -580,  -289,  -398,  -400,  -601,  -509,  -512,  -514,  -517,
  -601,  -355,  -342,  -317,  -328,  -601,  -366,  -369,  -372,  -375,
  -415,  -508,  -353,  -365,  -510,  -367 ]

clist = [
'220,418,424,26,376,525,212,223,26,331,338,279,279,279,490,301,264,262',
'412,116,714,651,2,26,270,274,327,545,815,591,6,434,26,26,26,6,26,263',
'341,342,381,409,345,759,315,315,124,207,481,431,554,630,477,318,129',
'129,659,693,696,132,132,134,134,266,273,275,26,26,113,627,26,627,516',
'322,482,810,795,796,315,315,315,528,531,116,762,535,112,783,666,280',
'280,280,630,392,393,394,395,950,717,918,299,538,541,300,277,290,291',
'297,920,882,861,382,633,914,947,206,26,129,388,332,441,26,26,26,26,26',
'26,355,818,766,340,340,117,405,340,879,362,366,618,575,577,398,621,6',
'586,397,623,624,490,334,346,620,396,6,630,378,335,987,536,281,281,281',
'353,558,377,328,329,654,330,339,343,843,844,627,627,487,819,793,344',
'820,705,957,879,710,829,340,340,340,340,333,336,561,760,279,1011,562',
'404,410,503,571,573,576,576,429,433,571,886,1,905,666,419,26,26,26,26',
'947,443,996,1022,26,26,26,26,26,26,697,920,914,761,753,763,852,418,424',
'832,833,26,917,713,657,390,869,537,792,933,495,882,708,934,279,279,476',
'612,484,485,954,780,787,279,428,637,872,865,380,383,384,666,666,646',
'408,26,26,910,385,386,387,719,408,403,26,879,724,711,772,877,437,438',
'439,440,936,874,908,513,,,,,26,510,642,517,26,13,300,879,,26,13,116',
'642,270,527,315,,274,520,639,824,542,543,506,,,960,500,,826,1012,280',
'315,,26,26,955,,13,280,642,,606,898,,548,483,,642,26,26,,514,,486,,',
'700,766,,499,766,775,766,116,766,959,709,502,26,,300,264,508,,297,300',
'878,498,880,297,,742,,622,26,,747,625,,827,,779,563,831,727,592,727',
',526,,281,630,,635,,,,791,281,638,,,340,340,,,,13,598,,434,627,,911',
'603,912,13,13,,279,544,,560,,,,,,585,,,,,419,,,129,,564,,26,132,,134',
'14,,,597,614,14,,823,,602,,718,,,,,,,775,997,224,,766,598,766,,766,',
'766,224,224,224,788,14,306,306,517,,428,279,,,,,517,,,,,,26,,26,,901',
',419,,13,,26,981,619,224,224,315,419,224,350,360,360,634,,315,26,,766',
'279,,6,,,,13,,992,,279,,26,,,26,805,419,,,782,26,,,,419,,758,428,694',
'694,26,,,,26,14,,428,,771,224,224,224,224,14,14,712,,956,,,,738,740',
',,,743,745,,650,433,,592,,428,13,764,26,26,13,428,789,26,26,13,699,26',
'690,,,692,,,770,1020,,517,,626,592,26,,,731,926,26,26,781,,13,674,129',
',,790,991,132,,134,598,,,603,,,315,,,,834,,951,,,,,315,,656,14,224,224',
'224,,,,,224,224,224,224,224,224,,,805,,,888,825,592,,756,,14,828,,769',
',592,,,773,774,,,,,,,,,,,,,,26,890,765,,408,26,26,,,26,,224,224,,837',
'737,,,,26,224,,,903,,863,,,,867,26,,881,,883,,764,,14,,,,14,,674,,306',
'14,,805,,805,,,,129,,642,,,,,,306,340,,764,26,315,,340,,14,224,998,',
',946,,913,26,915,,757,892,,835,224,224,,,,39,13,,13,,39,,,,674,674,',
',,,224,,,985,805,26,,26,26,,,26,,846,848,850,224,26,39,305,305,,,,,13',
'694,858,13,900,,,,,904,,,,,,864,805,,805,,,873,,13,315,26,,,349,365',
'365,365,,,,,315,982,,983,805,984,,,340,,,,,894,895,,674,897,674,,,224',
'970,,,993,,994,,995,,,,907,,,756,39,756,,756,,,,13,976,39,39,,13,13',
',,26,,,925,,,,26,26,,765,,765,,,,1021,,,,,,14,,14,26,1023,,279,,306',
'26,224,26,,799,801,803,306,428,875,,,875,,419,224,,,26,592,962,964,966',
'968,,969,,,337,,14,,,14,,,974,,,224,,,,979,980,,,,39,224,,,13,14,,,13',
'875,,,757,989,757,428,757,,13,990,756,,756,674,756,39,756,,,,,,,,,,',
',38,224,224,,,38,224,224,,765,224,,,,,,1016,1017,1018,1019,,,,,14,,',
',13,14,14,,,38,304,304,756,,,,,13,306,,,,,1025,39,,,,39,306,,,305,39',
',,,,,,,,,,348,364,364,364,,305,,13,13,,,13,,,39,,,13,,,,,757,406,757',
',757,,757,,,436,,,,,,,,,,,,224,,38,,,14,224,13,,14,,38,38,,,,,,16,14',
',938,940,16,942,944,,945,,,224,,,757,,,,,,,15,,,,,15,,,,,,16,,,492,',
'494,,,496,497,855,,,,,,14,,,,13,,15,308,308,,,13,13,14,,,,,,354,,,,',
',,,,,13,38,,,,,13,,13,,,,352,361,361,,224,,14,14,,,14,,,,38,,14,1006',
'1007,1008,1009,,,16,,,,,,,,,16,16,39,,39,,,,,921,305,,,15,,,,14,305',
',,929,15,15,,1024,,,,,,,,,,,,,588,,,39,,38,39,,,38,,,,304,38,,,,,,,',
',,,,39,,,,304,,,,,,,,,38,,,,14,,,,,16,,14,14,,,,,,432,,,,,,,,,,,14,',
'15,,,16,14,,14,,,,,,628,39,337,,631,,39,39,,,224,,,15,,,,,,305,,,,,',
',,,,,305,,,,,,,,,,628,,,337,,,,,,,,,16,,,,16,436,,,,16,,,,,,,,,,,,,15',
',,,15,,,,308,15,,,16,,,,,,,39,,,,39,,308,732,,,,628,337,,39,15,,,,,',
',,,,,,,,,,,,,,38,,38,,,,,,304,,,,776,,,777,304,,,,,365,,,,,,39,,,,,',
',,786,,,,38,39,,38,,,,,,,,,,,,,,,,,,,811,38,,,,,,,,,,,,39,39,,,39,,',
',,,39,,,,,,,,,,,,,,,,,,,,,,,,,365,,,,,,,836,39,,38,,928,,,38,38,,,,16',
',16,,,,,,304,,,,,,,,,,,304,,,15,,15,,,,,,308,,,,,,,,308,16,,,16,,,,',
',,,,,39,,,,,,885,39,39,15,16,,15,,,,,,,,,,,,896,39,,,,,38,39,15,39,38',
',,,,723,,337,,,38,,,,,,,,,432,,,,,,,,,,,,,,16,,,,,16,16,,,,,,,,,,,,',
'364,,,15,,,38,,15,15,,,,,,,,,,38,,308,,,,,,,,,,,308,,,,,,,,,,,,,,,,',
',,,,38,38,,,38,,,,,,38,,,,,,,,,,16,,,,16,,,,,,,,,,16,364,,,,,,,15,38',
',,15,927,,,,,,,,,15,,,,,,,,,,,,,,,,,,,,,,,,,,16,,,,,,,,,,,,,16,,,361',
',,,,,15,,,38,,,,,,,38,38,,15,,,,,,,,231,,,,16,16,,38,16,278,278,278',
',38,16,38,,,,,,,324,325,326,,15,15,,,15,,,,,,15,,,278,278,,,,,,,16,',
',,932,,,,,,,,,,361,,,,,,,,15,,,,931,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,16,,,,,,,16,16,,,,,,,,,,,,,,15,,,16,,,,15,15,16,,16,,,,,,,,,,,',
',,15,,,,,,15,,15,,,,,,,,,,,,,,,,,,,,,,,278,411,278,,,,,430,435,,,,,',
',,,,,,,,,231,,,450,451,452,453,454,455,456,457,458,459,460,461,462,463',
'464,465,466,467,468,469,470,471,472,473,474,475,,,,,,,278,278,,,,,,',
',278,,,,,,,278,,278,,,278,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,522',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,430,613,411',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,278,,278,,,,,,,,,,,,,,,',
'278,,,,,,,,,648,649,,,,,,,,,,278,,,278,,,,,,,,,,,,,,278,278,,,,,,,,',
',278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,734,,,278,278,739,741,,,,744',
'746,,,613,748,,,,,,,,,,,,,,,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,278',
',,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,278,,838,,,,,,,,,,,,,,739,741,746,744,,841,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,278,,,,',
',,,,,,,,,,,,278,838,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(2946, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'32,38,38,42,57,8,25,20,42,68,87,34,34,34,74,50,25,142,23,97,99,10,2',
'42,72,72,32,93,91,24,7,18,42,42,42,7,42,37,17,17,155,28,17,130,65,65',
'15,15,40,28,55,182,38,51,58,58,141,92,92,61,61,62,62,39,39,39,42,42',
'6,75,42,75,52,64,23,120,125,125,65,65,65,70,70,97,133,70,4,11,167,69',
'69,69,182,17,17,17,17,121,116,135,47,90,90,9,45,45,45,46,136,178,12',
'156,14,179,118,16,42,58,156,69,48,42,42,42,42,42,42,19,11,174,30,30',
'5,29,30,173,56,56,41,159,159,31,43,7,63,2,41,41,74,67,4,73,7,7,182,85',
'86,121,89,71,71,71,94,96,100,101,102,103,104,105,106,125,125,75,75,48',
'107,141,108,109,110,111,173,112,113,30,30,30,30,71,71,114,131,34,121',
'115,20,20,48,160,160,160,160,20,20,160,120,1,117,167,72,42,42,42,42',
'118,25,135,121,42,42,42,42,42,42,93,136,179,122,24,128,133,38,38,141',
'141,42,134,8,137,5,138,139,140,143,155,178,55,144,34,34,145,23,147,148',
'149,24,150,34,58,52,133,151,154,157,158,167,167,52,69,42,42,130,161',
'162,163,164,69,9,42,173,165,166,41,171,30,30,30,30,125,175,176,32,,',
',,42,25,38,50,42,21,9,173,,42,21,97,38,72,32,65,,72,25,23,24,17,17,51',
',,125,7,,24,91,69,65,,42,42,11,,21,69,38,,48,92,,25,45,,38,42,42,,64',
',45,,,23,174,,6,174,74,174,97,174,99,23,47,42,,9,25,47,,46,9,131,4,131',
'46,,40,,48,42,,40,48,,8,,52,37,8,160,32,160,,30,,71,182,,48,,,,70,71',
'48,,,30,30,,,,21,72,,18,75,,131,72,131,21,21,,34,4,,30,,,,,,15,,,,,72',
',,58,,30,,42,61,,62,22,,,39,32,22,,90,,39,,48,,,,,,,74,10,22,,174,72',
'174,,174,,174,22,22,22,28,22,22,22,50,,58,34,,,,,50,,,,,,42,,42,,8,',
'72,,21,,42,131,39,22,22,65,72,22,22,22,22,2,,65,42,,174,34,,7,,,,21',
',131,,34,,42,,,42,119,72,,,48,42,,,,72,,129,58,97,97,42,,,,42,22,,58',
',87,22,22,22,22,22,22,97,,93,,,,20,20,,,,20,20,,30,20,,32,,58,21,32',
'42,42,21,58,68,42,42,21,69,42,9,,,9,,,142,24,,50,,71,32,42,,,15,90,42',
'42,50,,21,172,58,,,32,8,61,,62,72,,,72,,,65,,,,57,,90,,,,,65,,71,22',
'22,22,22,,,,,22,22,22,22,22,22,,,119,,,119,17,32,,124,,22,17,,9,,32',
',,9,9,,,,,,,,,,,,,,42,48,172,,69,42,42,,,42,,22,22,,20,71,,,,42,22,',
',48,,68,,,,68,42,,129,,129,,32,,22,,,,22,,172,,22,22,,119,,119,,,,58',
',38,,,,,,22,30,,32,42,65,,30,,22,22,23,,,48,,129,42,129,,126,17,,9,22',
'22,,,,54,21,,21,,54,,,,172,172,,,,,22,,,119,119,42,,42,42,,,42,,127',
'127,127,22,42,54,54,54,,,,,21,97,9,21,97,,,,,97,,,,,,9,119,,119,,,124',
',21,65,42,,,54,54,54,54,,,,,65,129,,129,119,129,,,30,,,,,9,9,,172,9',
'172,,,22,32,,,129,,129,,129,,,,124,,,124,54,124,,124,,,,21,25,54,54',
',21,21,,,42,,,9,,,,42,42,,172,,172,,,,129,,,,,,22,,22,42,129,,34,,22',
'42,22,42,,170,170,170,22,58,126,,,126,,72,22,,,42,32,127,127,127,127',
',127,,,66,,22,,,22,,,9,,,22,,,,9,9,,,,54,22,,,21,22,,,21,126,,,126,9',
'126,58,126,,21,9,124,,124,172,124,54,124,,,,,,,,,,,,53,22,22,,,53,22',
'22,,172,22,,,,,,127,127,127,127,,,,,22,,,,21,22,22,,,53,53,53,124,,',
',,21,22,,,,,127,54,,,,54,22,,,54,54,,,,,,,,,,,53,53,53,53,,54,,21,21',
',,21,,,54,,,21,,,,,126,66,126,,126,,126,,,66,,,,,,,,,,,,22,,53,,,22',
'22,21,,22,,53,53,,,,,,27,22,,170,170,27,170,170,,170,,,22,,,126,,,,',
',,26,,,,,26,,,,,,27,,,66,,66,,,66,66,22,,,,,,22,,,,21,,26,26,26,,,21',
'21,22,,,,,,27,,,,,,,,,,21,53,,,,,21,,21,,,,26,26,26,,22,,22,22,,,22',
',,,53,,22,170,170,170,170,,,27,,,,,,,,,27,27,54,,54,,,,,22,54,,,26,',
',,22,54,,,22,26,26,,170,,,,,,,,,,,,,66,,,54,,53,54,,,53,,,,53,53,,,',
',,,,,,,,54,,,,53,,,,,,,,,53,,,,22,,,,,27,,22,22,,,,,,27,,,,,,,,,,,22',
',26,,,27,22,,22,,,,,,66,54,66,,66,,54,54,,,22,,,26,,,,,,54,,,,,,,,,',
',54,,,,,,,,,,66,,,66,,,,,,,,,27,,,,27,66,,,,27,,,,,,,,,,,,,26,,,,26',
',,,26,26,,,27,,,,,,,54,,,,54,,26,66,,,,66,66,,54,26,,,,,,,,,,,,,,,,',
',,,53,,53,,,,,,53,,,,66,,,66,53,,,,,54,,,,,,54,,,,,,,,66,,,,53,54,,53',
',,,,,,,,,,,,,,,,,,66,53,,,,,,,,,,,,54,54,,,54,,,,,,54,,,,,,,,,,,,,,',
',,,,,,,,,,54,,,,,,,66,54,,53,,54,,,53,53,,,,27,,27,,,,,,53,,,,,,,,,',
',53,,,26,,26,,,,,,26,,,,,,,,26,27,,,27,,,,,,,,,,54,,,,,,66,54,54,26',
'27,,26,,,,,,,,,,,,66,54,,,,,53,54,26,54,53,,,,,26,,66,,,53,,,,,,,,,27',
',,,,,,,,,,,,,27,,,,,27,27,,,,,,,,,,,,,53,,,26,,,53,,26,26,,,,,,,,,,53',
',26,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,53,53,,,53,,,,,,53,,,,,,,,,,27',
',,,27,,,,,,,,,,27,53,,,,,,,26,53,,,26,53,,,,,,,,,26,,,,,,,,,,,,,,,,',
',,,,,,,,,27,,,,,,,,,,,,,27,,,26,,,,,,26,,,53,,,,,,,53,53,,26,,,,,,,',
'33,,,,27,27,,53,27,33,33,33,,53,27,53,,,,,,,33,33,33,,26,26,,,26,,,',
',,26,,,33,33,,,,,,,27,,,,27,,,,,,,,,,26,,,,,,,,26,,,,26,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,27,27,,,,,,,,,,,,,,26,,,27,,,,26,26',
'27,,27,,,,,,,,,,,,,,26,,,,,,26,,26,,,,,,,,,,,,,,,,,,,,,,,33,33,33,,',
',,33,33,,,,,,,,,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,,,,,,,33,33,,,,,,,,33,,,,,,,33,',
'33,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,33,33,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,33,,33,,33,,,,,,,,,,,,,,,,33,,,,,,,,,33,33,,,,,,,',
',,33,,,33,,,,,,,,,,,,,,33,33,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,33,33,,,33,33,33,33,,,,33,33,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,33,',
',33,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,,,,,,,,,,,,,,33,33,33',
'33,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,',
',,,,,,,,33,,,,,,,,,,,,,,,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33' ]
        racc_goto_check = arr = ::Array.new(2946, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   207,    22,   nil,    83,   127,    65,    30,  -323,    70,
  -503,  -564,  -673,   nil,  -387,    38,   106,   -25,  -186,    59,
   -13,   302,   452,  -193,  -383,    -8,  1197,  1175,  -168,   -76,
    67,    17,   -19,  1970,   -18,   nil,   nil,    13,  -211,    37,
  -218,  -338,     3,  -338,   nil,    75,    74,    67,  -101,   nil,
   -19,    18,  -247,  1046,   800,  -308,    67,   -67,    46,   nil,
   nil,    51,    53,  -258,    32,    10,   928,    90,   -50,    60,
  -251,   130,    -2,  -326,  -267,  -420,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    84,    96,   -51,   nil,  -181,
  -240,  -662,  -485,  -319,    94,   nil,  -199,    16,   nil,  -542,
    93,   108,   108,  -359,   110,   107,   105,  -517,   112,  -517,
  -371,  -717,  -375,  -528,  -175,  -181,  -465,  -626,  -773,  -130,
  -600,  -792,  -388,   nil,    67,  -584,   175,    70,  -386,   -60,
  -573,  -424,   nil,  -532,  -616,  -754,  -745,  -298,  -551,   -97,
  -414,  -481,    -5,  -626,  -623,   -10,   nil,   -18,   -18,  -642,
  -395,  -525,   nil,   nil,   184,   -41,    27,   179,   179,  -245,
  -183,   186,   186,   186,  -292,  -288,  -277,  -449,   nil,   nil,
   301,  -514,    94,  -663,  -487,  -504,  -551,   nil,  -691,  -734,
   nil,   nil,  -440 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   347,   295,   nil,   524,
   nil,   816,   nil,   292,   293,   nil,   nil,   nil,    11,    12,
    18,   230,   323,   nil,   nil,   556,   228,   229,   nil,   nil,
    17,   nil,   442,    21,    22,    23,    24,   nil,   645,   nil,
   nil,   nil,   312,   nil,    25,   413,    32,   nil,   nil,    34,
    37,    36,   nil,   225,   226,   359,   nil,   131,   421,   130,
   133,    77,    78,   nil,    92,    46,   284,   nil,   784,   414,
   nil,   415,   426,   599,   488,   282,   268,    47,    48,    49,
    50,    51,    52,    53,    54,    55,   nil,   269,    61,   nil,
   nil,   nil,   nil,   nil,   nil,    69,   nil,   539,    70,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   807,   673,
   nil,   808,   909,   755,   661,   nil,   662,   nil,   nil,   663,
   nil,   665,   615,   nil,   nil,   nil,   671,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   425,   nil,   nil,   nil,
   nil,   nil,    76,    79,    80,   nil,   nil,   nil,   nil,   nil,
   566,   nil,   nil,   nil,   nil,   nil,   nil,   876,   716,   660,
   nil,   664,   884,   676,   678,   679,   767,   682,   683,   768,
   686,   689,   287 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 176, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  6, 152, :_reduce_32,
  5, 152, :_reduce_33,
  5, 152, :_reduce_34,
  5, 152, :_reduce_35,
  5, 152, :_reduce_36,
  3, 152, :_reduce_37,
  3, 152, :_reduce_38,
  3, 152, :_reduce_39,
  1, 152, :_reduce_none,
  3, 163, :_reduce_41,
  3, 163, :_reduce_42,
  1, 175, :_reduce_none,
  3, 175, :_reduce_44,
  3, 175, :_reduce_45,
  3, 175, :_reduce_46,
  2, 175, :_reduce_47,
  1, 175, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 180, :_reduce_none,
  4, 180, :_reduce_53,
  0, 188, :_reduce_54,
  5, 185, :_reduce_55,
  1, 187, :_reduce_none,
  2, 179, :_reduce_57,
  3, 179, :_reduce_58,
  4, 179, :_reduce_59,
  5, 179, :_reduce_60,
  4, 179, :_reduce_61,
  5, 179, :_reduce_62,
  2, 179, :_reduce_63,
  2, 179, :_reduce_64,
  2, 179, :_reduce_65,
  2, 179, :_reduce_66,
  2, 179, :_reduce_67,
  1, 164, :_reduce_68,
  3, 164, :_reduce_69,
  1, 192, :_reduce_70,
  3, 192, :_reduce_71,
  1, 191, :_reduce_none,
  2, 191, :_reduce_73,
  3, 191, :_reduce_74,
  5, 191, :_reduce_75,
  2, 191, :_reduce_76,
  4, 191, :_reduce_77,
  2, 191, :_reduce_78,
  4, 191, :_reduce_79,
  1, 191, :_reduce_80,
  3, 191, :_reduce_81,
  1, 195, :_reduce_none,
  3, 195, :_reduce_83,
  2, 194, :_reduce_84,
  3, 194, :_reduce_85,
  1, 197, :_reduce_86,
  3, 197, :_reduce_87,
  1, 196, :_reduce_88,
  1, 196, :_reduce_89,
  4, 196, :_reduce_90,
  3, 196, :_reduce_91,
  3, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  2, 196, :_reduce_95,
  1, 196, :_reduce_96,
  1, 172, :_reduce_97,
  1, 172, :_reduce_98,
  4, 172, :_reduce_99,
  3, 172, :_reduce_100,
  3, 172, :_reduce_101,
  3, 172, :_reduce_102,
  3, 172, :_reduce_103,
  2, 172, :_reduce_104,
  1, 172, :_reduce_105,
  1, 200, :_reduce_106,
  1, 200, :_reduce_none,
  2, 201, :_reduce_108,
  1, 201, :_reduce_109,
  3, 201, :_reduce_110,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 205, :_reduce_116,
  1, 205, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_120,
  0, 208, :_reduce_121,
  4, 161, :_reduce_122,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 178, :_reduce_194,
  5, 178, :_reduce_195,
  3, 178, :_reduce_196,
  5, 178, :_reduce_197,
  6, 178, :_reduce_198,
  5, 178, :_reduce_199,
  5, 178, :_reduce_200,
  5, 178, :_reduce_201,
  5, 178, :_reduce_202,
  4, 178, :_reduce_203,
  3, 178, :_reduce_204,
  3, 178, :_reduce_205,
  3, 178, :_reduce_206,
  3, 178, :_reduce_207,
  3, 178, :_reduce_208,
  3, 178, :_reduce_209,
  3, 178, :_reduce_210,
  3, 178, :_reduce_211,
  3, 178, :_reduce_212,
  4, 178, :_reduce_213,
  2, 178, :_reduce_214,
  2, 178, :_reduce_215,
  3, 178, :_reduce_216,
  3, 178, :_reduce_217,
  3, 178, :_reduce_218,
  3, 178, :_reduce_219,
  3, 178, :_reduce_220,
  3, 178, :_reduce_221,
  3, 178, :_reduce_222,
  3, 178, :_reduce_223,
  3, 178, :_reduce_224,
  3, 178, :_reduce_225,
  3, 178, :_reduce_226,
  3, 178, :_reduce_227,
  3, 178, :_reduce_228,
  2, 178, :_reduce_229,
  2, 178, :_reduce_230,
  3, 178, :_reduce_231,
  3, 178, :_reduce_232,
  3, 178, :_reduce_233,
  3, 178, :_reduce_234,
  3, 178, :_reduce_235,
  6, 178, :_reduce_236,
  1, 178, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_none,
  2, 212, :_reduce_none,
  4, 212, :_reduce_241,
  2, 212, :_reduce_242,
  3, 217, :_reduce_243,
  0, 218, :_reduce_244,
  1, 218, :_reduce_none,
  0, 168, :_reduce_246,
  1, 168, :_reduce_none,
  2, 168, :_reduce_none,
  4, 168, :_reduce_249,
  2, 168, :_reduce_250,
  1, 190, :_reduce_251,
  2, 190, :_reduce_252,
  2, 190, :_reduce_253,
  4, 190, :_reduce_254,
  1, 190, :_reduce_255,
  0, 221, :_reduce_256,
  2, 184, :_reduce_257,
  2, 220, :_reduce_258,
  2, 219, :_reduce_259,
  0, 219, :_reduce_260,
  1, 214, :_reduce_261,
  2, 214, :_reduce_262,
  3, 214, :_reduce_263,
  4, 214, :_reduce_264,
  1, 174, :_reduce_265,
  1, 174, :_reduce_none,
  3, 173, :_reduce_267,
  4, 173, :_reduce_268,
  2, 173, :_reduce_269,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_280,
  0, 246, :_reduce_281,
  4, 210, :_reduce_282,
  0, 247, :_reduce_283,
  0, 248, :_reduce_284,
  6, 210, :_reduce_285,
  0, 249, :_reduce_286,
  4, 210, :_reduce_287,
  3, 210, :_reduce_288,
  3, 210, :_reduce_289,
  2, 210, :_reduce_290,
  3, 210, :_reduce_291,
  3, 210, :_reduce_292,
  1, 210, :_reduce_293,
  4, 210, :_reduce_294,
  3, 210, :_reduce_295,
  1, 210, :_reduce_296,
  5, 210, :_reduce_297,
  4, 210, :_reduce_298,
  3, 210, :_reduce_299,
  2, 210, :_reduce_300,
  1, 210, :_reduce_none,
  2, 210, :_reduce_302,
  0, 250, :_reduce_303,
  3, 210, :_reduce_304,
  6, 210, :_reduce_305,
  6, 210, :_reduce_306,
  0, 251, :_reduce_307,
  0, 252, :_reduce_308,
  7, 210, :_reduce_309,
  0, 253, :_reduce_310,
  0, 254, :_reduce_311,
  7, 210, :_reduce_312,
  5, 210, :_reduce_313,
  4, 210, :_reduce_314,
  0, 255, :_reduce_315,
  0, 256, :_reduce_316,
  9, 210, :_reduce_317,
  0, 257, :_reduce_318,
  6, 210, :_reduce_319,
  0, 258, :_reduce_320,
  7, 210, :_reduce_321,
  0, 259, :_reduce_322,
  5, 210, :_reduce_323,
  0, 260, :_reduce_324,
  6, 210, :_reduce_325,
  0, 261, :_reduce_326,
  0, 262, :_reduce_327,
  9, 210, :_reduce_328,
  1, 210, :_reduce_329,
  1, 210, :_reduce_330,
  1, 210, :_reduce_331,
  1, 210, :_reduce_332,
  1, 167, :_reduce_none,
  1, 240, :_reduce_334,
  1, 243, :_reduce_335,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  2, 235, :_reduce_338,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 236, :_reduce_none,
  5, 236, :_reduce_342,
  1, 156, :_reduce_none,
  2, 156, :_reduce_344,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 263, :_reduce_347,
  3, 263, :_reduce_348,
  1, 266, :_reduce_349,
  3, 266, :_reduce_350,
  1, 265, :_reduce_none,
  4, 265, :_reduce_352,
  6, 265, :_reduce_353,
  3, 265, :_reduce_354,
  5, 265, :_reduce_355,
  2, 265, :_reduce_356,
  4, 265, :_reduce_357,
  1, 265, :_reduce_358,
  3, 265, :_reduce_359,
  4, 267, :_reduce_360,
  2, 267, :_reduce_361,
  2, 267, :_reduce_362,
  1, 267, :_reduce_363,
  2, 272, :_reduce_364,
  0, 272, :_reduce_365,
  6, 273, :_reduce_366,
  8, 273, :_reduce_367,
  4, 273, :_reduce_368,
  6, 273, :_reduce_369,
  4, 273, :_reduce_370,
  2, 273, :_reduce_none,
  6, 273, :_reduce_372,
  2, 273, :_reduce_373,
  4, 273, :_reduce_374,
  6, 273, :_reduce_375,
  2, 273, :_reduce_376,
  4, 273, :_reduce_377,
  2, 273, :_reduce_378,
  4, 273, :_reduce_379,
  1, 273, :_reduce_none,
  0, 186, :_reduce_381,
  1, 186, :_reduce_382,
  3, 277, :_reduce_383,
  1, 277, :_reduce_384,
  4, 277, :_reduce_385,
  1, 278, :_reduce_386,
  4, 278, :_reduce_387,
  1, 279, :_reduce_388,
  3, 279, :_reduce_389,
  1, 280, :_reduce_390,
  1, 280, :_reduce_none,
  0, 284, :_reduce_392,
  0, 285, :_reduce_393,
  4, 234, :_reduce_394,
  4, 282, :_reduce_395,
  1, 282, :_reduce_396,
  0, 288, :_reduce_397,
  4, 283, :_reduce_398,
  0, 289, :_reduce_399,
  4, 283, :_reduce_400,
  0, 290, :_reduce_401,
  5, 287, :_reduce_402,
  2, 181, :_reduce_403,
  4, 181, :_reduce_404,
  5, 181, :_reduce_405,
  5, 181, :_reduce_406,
  2, 233, :_reduce_407,
  4, 233, :_reduce_408,
  4, 233, :_reduce_409,
  3, 233, :_reduce_410,
  3, 233, :_reduce_411,
  3, 233, :_reduce_412,
  2, 233, :_reduce_413,
  1, 233, :_reduce_414,
  4, 233, :_reduce_415,
  0, 292, :_reduce_416,
  5, 232, :_reduce_417,
  0, 293, :_reduce_418,
  5, 232, :_reduce_419,
  5, 238, :_reduce_420,
  1, 294, :_reduce_421,
  1, 294, :_reduce_none,
  6, 155, :_reduce_423,
  0, 155, :_reduce_424,
  1, 295, :_reduce_425,
  1, 295, :_reduce_none,
  1, 295, :_reduce_none,
  2, 296, :_reduce_428,
  1, 296, :_reduce_none,
  2, 157, :_reduce_430,
  1, 157, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 223, :_reduce_435,
  1, 298, :_reduce_436,
  2, 298, :_reduce_437,
  3, 299, :_reduce_438,
  1, 299, :_reduce_439,
  1, 299, :_reduce_440,
  3, 224, :_reduce_441,
  4, 225, :_reduce_442,
  3, 226, :_reduce_443,
  0, 303, :_reduce_444,
  3, 303, :_reduce_445,
  1, 304, :_reduce_446,
  2, 304, :_reduce_447,
  3, 228, :_reduce_448,
  0, 306, :_reduce_449,
  3, 306, :_reduce_450,
  3, 227, :_reduce_451,
  3, 229, :_reduce_452,
  0, 307, :_reduce_453,
  3, 307, :_reduce_454,
  0, 308, :_reduce_455,
  3, 308, :_reduce_456,
  0, 300, :_reduce_457,
  2, 300, :_reduce_458,
  0, 301, :_reduce_459,
  2, 301, :_reduce_460,
  0, 302, :_reduce_461,
  2, 302, :_reduce_462,
  1, 305, :_reduce_463,
  2, 305, :_reduce_464,
  0, 310, :_reduce_465,
  4, 305, :_reduce_466,
  1, 309, :_reduce_467,
  1, 309, :_reduce_468,
  1, 309, :_reduce_469,
  1, 309, :_reduce_none,
  1, 206, :_reduce_471,
  3, 207, :_reduce_472,
  1, 297, :_reduce_473,
  2, 297, :_reduce_474,
  1, 209, :_reduce_475,
  1, 209, :_reduce_476,
  1, 209, :_reduce_477,
  1, 209, :_reduce_478,
  1, 198, :_reduce_479,
  1, 198, :_reduce_480,
  1, 198, :_reduce_481,
  1, 198, :_reduce_482,
  1, 198, :_reduce_483,
  1, 199, :_reduce_484,
  1, 199, :_reduce_485,
  1, 199, :_reduce_486,
  1, 199, :_reduce_487,
  1, 199, :_reduce_488,
  1, 199, :_reduce_489,
  1, 199, :_reduce_490,
  1, 230, :_reduce_491,
  1, 230, :_reduce_492,
  1, 166, :_reduce_493,
  1, 166, :_reduce_494,
  1, 171, :_reduce_495,
  1, 171, :_reduce_496,
  0, 311, :_reduce_497,
  4, 241, :_reduce_498,
  0, 241, :_reduce_499,
  3, 244, :_reduce_500,
  0, 313, :_reduce_501,
  3, 244, :_reduce_502,
  4, 312, :_reduce_503,
  2, 312, :_reduce_504,
  2, 312, :_reduce_505,
  1, 312, :_reduce_506,
  2, 315, :_reduce_507,
  0, 315, :_reduce_508,
  6, 286, :_reduce_509,
  8, 286, :_reduce_510,
  4, 286, :_reduce_511,
  6, 286, :_reduce_512,
  4, 286, :_reduce_513,
  6, 286, :_reduce_514,
  2, 286, :_reduce_515,
  4, 286, :_reduce_516,
  6, 286, :_reduce_517,
  2, 286, :_reduce_518,
  4, 286, :_reduce_519,
  2, 286, :_reduce_520,
  4, 286, :_reduce_521,
  1, 286, :_reduce_522,
  0, 286, :_reduce_523,
  1, 281, :_reduce_524,
  1, 281, :_reduce_525,
  1, 281, :_reduce_526,
  1, 281, :_reduce_527,
  1, 264, :_reduce_none,
  1, 264, :_reduce_529,
  1, 317, :_reduce_530,
  1, 318, :_reduce_531,
  3, 318, :_reduce_532,
  1, 274, :_reduce_533,
  3, 274, :_reduce_534,
  1, 319, :_reduce_535,
  2, 320, :_reduce_536,
  1, 320, :_reduce_537,
  2, 321, :_reduce_538,
  1, 321, :_reduce_539,
  1, 268, :_reduce_540,
  3, 268, :_reduce_541,
  1, 314, :_reduce_542,
  3, 314, :_reduce_543,
  1, 322, :_reduce_none,
  1, 322, :_reduce_none,
  2, 269, :_reduce_546,
  1, 269, :_reduce_547,
  3, 323, :_reduce_548,
  3, 324, :_reduce_549,
  1, 275, :_reduce_550,
  3, 275, :_reduce_551,
  1, 316, :_reduce_552,
  3, 316, :_reduce_553,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 276, :_reduce_556,
  1, 276, :_reduce_557,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  2, 271, :_reduce_560,
  2, 270, :_reduce_561,
  0, 270, :_reduce_562,
  1, 245, :_reduce_none,
  3, 245, :_reduce_564,
  0, 231, :_reduce_565,
  2, 231, :_reduce_none,
  1, 216, :_reduce_567,
  3, 216, :_reduce_568,
  3, 327, :_reduce_569,
  2, 327, :_reduce_570,
  4, 327, :_reduce_571,
  2, 327, :_reduce_572,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 170, :_reduce_585,
  1, 170, :_reduce_586,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 177, :_reduce_none,
  1, 177, :_reduce_none,
  2, 193, :_reduce_591,
  2, 169, :_reduce_592,
  0, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 242, :_reduce_596,
  1, 242, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 213, :_reduce_600 ]

racc_reduce_n = 601

racc_shift_n = 1026

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@22",
  "@23",
  "f_args",
  "do_block",
  "@24",
  "@25",
  "@26",
  "operation3",
  "@27",
  "@28",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@29",
  "@30",
  "args_tail",
  "@31",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_37(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_54(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_55(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_58(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_60(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_62(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 82 omitted

def _reduce_83(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_121(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_122(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

def _reduce_194(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      result = []
                    
    result
end

# reduce 247 omitted

# reduce 248 omitted

def _reduce_249(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_253(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_254(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_255(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_257(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = []
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 266 omitted

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_282(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_284(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_304(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_314(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_318(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_319(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_320(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_321(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_322(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_323(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_324(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_335(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      result = val
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = []
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_373(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 380 omitted

def _reduce_381(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_382(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = []
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_390(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 391 omitted

def _reduce_392(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_394(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_395(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_399(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_401(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_403(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_416(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_417(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_418(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 422 omitted

def _reduce_423(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = []
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 426 omitted

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_436(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_438(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_439(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_441(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_442(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = []
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = []
                    
    result
end

def _reduce_450(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = []
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = []
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_466(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_474(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_501(val, _values, result)
                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_502(val, _values, result)
                      @context.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_508(val, _values, result)
                      result = []
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_523(val, _values, result)
                      result = []
                    
    result
end

def _reduce_524(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_525(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_526(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 528 omitted

def _reduce_529(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_530(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_535(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 544 omitted

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_557(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 558 omitted

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_561(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_562(val, _values, result)
                      result = []
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = []
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_586(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

def _reduce_596(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

def _reduce_600(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby23
  end   # module Parser
