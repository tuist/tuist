# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class RubyMotion < Parser::Base


  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-279,540,509,509,509,-93,-90,-279,-279,-279,-87,206,207,-279,-279,530',
'-279,452,521,583,583,209,522,206,207,-93,551,583,509,509,-88,583,499',
'206,207,498,-279,-279,-456,-279,-279,-279,-279,-279,-90,-456,625,-466',
'515,-91,661,-88,751,582,582,-92,-87,-86,210,731,210,582,542,541,552',
'582,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279',
'-279,661,661,-279,-279,-279,-92,571,206,207,550,-279,210,274,-279,206',
'207,-456,-86,-279,883,-279,210,-279,-279,-279,-279,-279,-279,-279,-86',
'-279,-82,-279,210,-528,-79,104,104,104,-93,529,103,103,103,-93,-279',
'-279,-279,-89,-83,-85,-279,-279,-279,-279,-279,-91,-279,-279,-279,104',
'-279,104,104,-88,103,779,103,103,-88,104,-279,-279,-279,-83,103,-80',
'750,-90,-91,274,-279,-279,-90,-279,-279,-279,-279,-279,-92,-87,-86,713',
'886,-92,-87,-86,104,273,-89,104,104,103,104,210,103,103,540,103,486',
'-84,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279',
'-279,-527,-80,-279,-279,-279,-73,571,-279,274,-78,-279,760,-59,-279',
'-279,796,-279,-90,-279,269,-279,540,-279,-279,-279,-279,-279,-279,-279',
'888,-279,-528,-279,-81,-92,417,890,-89,203,-527,890,273,-89,542,541',
'878,-279,-279,-279,-279,-531,-279,693,-279,876,-279,-91,-531,-531,-531',
'761,701,-531,-531,-531,-87,-531,-80,-91,104,774,625,269,-91,103,-531',
'-531,-531,-531,-81,712,-462,542,541,547,-93,-531,-531,-462,-531,-531',
'-531,-531,-531,273,104,204,-82,-527,-81,103,-458,760,-80,-79,210,-80',
'203,-458,499,540,-87,501,-80,267,895,-531,-531,-531,-531,-531,-531,-531',
'-531,-531,-531,-531,-531,-531,-531,-88,-79,-531,-531,-531,-81,714,-531',
'-81,-462,-531,-466,-461,-531,-531,-81,-531,299,-531,-461,-531,810,-531',
'-531,-531,-531,-531,-531,-531,-458,-531,-531,-531,-82,724,204,641,640',
'639,645,642,542,541,545,898,563,-531,-531,-531,-531,-456,-531,899,-531',
'-78,-531,-89,-456,-456,-456,104,-86,-456,-456,-456,103,-456,-79,904',
'-82,-461,647,-82,229,-456,906,-456,-456,-456,-82,651,650,654,653,206',
'207,-456,-456,-80,-456,-456,-456,-456,-456,768,-88,641,640,639,645,642',
'-464,909,-79,911,226,-79,540,-464,228,227,890,540,-79,723,890,-456,-456',
'-456,-456,-456,-456,-456,-456,-456,-456,-456,-456,-456,-456,75,916,-456',
'-456,-456,499,-456,-456,501,76,-456,298,499,-456,-456,501,-456,205,-456',
'77,-456,494,-456,-456,-456,-456,-456,-456,-456,-464,-456,768,-456,641',
'640,639,645,642,542,541,543,248,843,542,541,538,-456,-456,-456,-456',
'-453,-456,486,-456,-323,-456,-456,-453,-453,-453,-85,-323,-453,-453',
'-453,564,-453,-93,229,924,-323,925,203,-453,-453,933,-453,-453,-453',
'202,-453,300,301,-531,481,482,-453,-453,200,-453,-453,-453,-453,-453',
'104,-84,774,625,199,103,226,198,-92,-463,228,227,197,203,-82,931,-463',
'450,-323,210,536,-90,-453,-453,-453,-453,-453,-453,-453,-453,-453,-453',
'-453,-453,-453,-453,204,-453,-453,-453,-453,-531,-453,-453,206,207,-453',
'196,-531,-453,-453,195,-453,-527,-453,946,-453,-531,-453,-453,-453,-453',
'-453,-453,-453,-531,-453,-463,-453,-460,-273,204,-531,-531,-531,-531',
'-460,-273,-531,-531,890,-531,-453,-453,-453,-453,-273,-453,-459,-453',
'-531,-453,-453,890,890,-459,-280,950,-525,-531,933,-531,-531,-280,-531',
'-531,-531,-531,-531,953,954,956,-280,890,890,768,890,641,640,639,645',
'642,-528,210,373,210,-73,-460,-273,375,374,-531,-531,-531,-531,-531',
'-531,-531,-531,-531,-531,-531,-531,-531,-531,210,-459,-531,-531,-531',
'-456,568,764,607,-280,-531,210,-456,-531,492,-524,894,-525,-531,618',
'-531,-456,-531,-531,-531,-531,-531,-531,-531,625,-531,-531,-531,210',
'-465,229,229,657,229,-525,229,-465,515,664,573,-286,-531,-531,269,-81',
'-465,-531,-286,-286,-286,-531,-89,-286,-286,-286,210,-286,-259,-456',
'687,688,229,-453,689,98,99,-286,-286,203,-453,559,556,692,555,-524,518',
'-286,-286,-453,-286,-286,-286,-286,-286,516,695,808,-465,641,640,639',
'-260,642,226,702,459,-524,228,227,224,225,106,107,108,109,110,-286,-286',
'-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-453,229',
'-286,-286,-286,203,204,-286,459,278,-286,210,915,-286,-286,716,-286',
'728,-286,452,-286,526,-286,-286,-286,-286,-286,-286,-286,520,-286,519',
'-286,226,203,450,210,228,227,224,225,524,366,515,618,-533,-286,-286',
'210,-286,526,-286,-533,-533,-533,-286,269,-533,-533,-533,452,-533,808',
'204,641,640,639,203,642,269,-533,-533,-533,-533,490,106,107,108,109',
'110,618,-533,-533,415,-533,-533,-533,-533,-533,-527,229,229,204,503',
'768,742,641,640,639,645,642,106,107,108,109,110,502,-259,746,723,754',
'-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533',
'204,756,-533,-533,-533,759,764,-533,762,770,-533,771,625,-533,-533,767',
'-533,778,-533,210,-533,495,-533,-533,-533,-533,-533,-533,-533,494,-533',
'-533,-533,229,488,210,-280,487,203,787,483,100,-261,-280,269,478,-533',
'-533,-533,-533,-274,-533,-280,-533,476,-533,210,-274,-274,-274,933,890',
'-274,-274,-274,644,-274,641,640,639,645,642,-279,278,479,798,-274,-274',
'-274,-279,800,803,804,723,-528,811,-274,-274,-279,-274,-274,-274,-274',
'-274,-280,472,204,471,210,818,819,768,647,641,640,639,645,642,618,210',
'-58,651,650,654,653,459,-274,-274,-274,-274,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-279,452,-274,-274,-274,723,838,-274,764,450',
'-274,841,448,-274,-274,760,-274,767,-274,210,-274,845,-274,-274,-274',
'-274,-274,-274,-274,209,-274,847,-274,419,418,768,203,641,640,639,645',
'642,416,414,853,376,-274,-274,-274,-274,-232,-274,415,-274,855,-274',
'210,-232,-232,-232,858,-279,-232,-232,-232,-262,-232,933,-279,890,865',
'866,647,-528,870,871,-232,-279,873,450,364,879,,654,653,,-232,-232,',
'-232,-232,-232,-232,-232,204,,,,768,,641,640,639,645,642,,,,,,,,644',
',641,640,639,645,642,-279,,,,,,,,-232,,-532,,,,,-232,647,-532,-532,-532',
'269,-232,-532,-532,-532,,-532,654,653,,647,682,,,,-532,-532,-532,-532',
'651,650,654,653,-232,,,-532,-532,,-532,-532,-532,-532,-532,,,,-232,',
',,,-232,,,768,-232,641,640,639,645,642,,,,,-532,-532,-532,-532,-532',
'-532,-532,-532,-532,-532,-532,-532,-532,-532,,,-532,-532,-532,,,-532',
',,-532,,764,-532,-532,,-532,,-532,,-532,,-532,-532,-532,-532,-532,-532',
'-532,,-532,-532,-532,644,,641,640,639,645,642,,,,,,,-532,-532,-532,-532',
'-232,-532,,-532,,-532,,-232,-232,-232,,,-232,-232,-232,,-232,,,644,647',
'641,640,639,645,642,-232,,,651,650,654,653,,,,-232,-232,,-232,-232,-232',
'-232,-232,229,,,,768,,641,640,639,645,642,,647,633,,,243,244,,,,651',
'650,654,653,,,,,,,,226,-232,232,-232,228,227,224,225,-232,647,-232,-232',
'-232,269,-232,-232,-232,-232,,-232,654,653,,,,,,,-232,-232,-232,,,,',
',-232,,,-232,-232,,-232,-232,-232,-232,-232,,,,-232,,,,,-232,,,768,-232',
'641,640,639,645,642,,,,,-232,-232,-232,-232,-232,-232,-232,-232,-232',
'-232,-232,-232,-232,-232,,,-232,-232,-232,,,-232,,269,-232,,764,-232',
'-232,,-232,,-232,,-232,,-232,-232,-232,-232,-232,-232,-232,,-232,-232',
'-232,,,,768,,641,640,639,645,642,,,-396,-232,-232,,-232,,-232,-396,-396',
'-396,-232,,-396,-396,-396,724,-396,641,640,639,645,642,,,,-396,-396',
'-396,764,,,,,,,,-396,-396,,-396,-396,-396,-396,-396,768,,641,640,639',
'645,642,768,647,641,640,639,645,642,,,,651,650,654,653,,-396,-396,-396',
'-396,-396,-396,-396,-396,-396,-396,-396,-396,-396,-396,,764,-396,-396',
'-396,,,-396,764,269,-396,,,-396,-396,,-396,,-396,,-396,,-396,-396,-396',
'-396,-396,-396,-396,,-396,-396,-396,,724,,641,640,639,645,642,,,,,,-396',
'-396,,-396,,-396,,,,-396,5,68,69,65,7,51,,,,57,58,,,,61,647,59,60,62',
'23,24,66,67,,651,650,654,653,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9',
'96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,768,,641,640',
'639,645,642,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,768,,641,640,639,645',
'642,18,647,,,,83,75,78,79,,80,81,654,653,,76,82,5,68,69,65,7,51,56,',
'77,57,58,,,647,61,,59,60,62,23,24,66,67,,654,653,,,22,28,27,92,91,93',
'94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39',
'37,,,,,,,,768,,641,640,639,645,642,,,,,,36,,,30,,,52,53,,,54,,32,,,',
'40,768,,641,640,639,645,642,18,647,,,,83,75,78,79,,80,81,654,653,,76',
'82,5,68,69,65,7,51,56,,77,57,58,,,647,61,,59,60,62,23,24,66,67,,654',
'653,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,768,,641,640,639,645,642,,,,,,36,,',
'30,,,52,53,,,54,,32,,,,40,768,,641,640,639,645,642,18,647,,,,83,75,78',
'79,,80,81,654,653,,76,82,5,68,69,65,7,51,56,,77,57,58,,,647,61,,59,60',
'62,23,24,66,67,,654,653,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,229,-552,-552,-552,-552',
'235,237,,,-552,-552,,,,,,243,244,,36,,,30,,,52,53,,,54,,32,226,,232',
'40,228,227,224,225,236,234,230,18,231,,,,83,75,78,79,,80,81,,,,76,82',
'5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28',
'27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99',
',84,85,38,39,37,229,-552,-552,-552,-552,235,237,,,-552,-552,,,,,,243',
'244,,36,,,30,,,52,53,,,54,,32,226,,232,40,228,227,224,225,236,234,230',
'18,231,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41',
'8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,229,-552,-552',
'-552,-552,235,237,,,-552,-552,,,,,,243,244,,36,,,30,,,52,53,,,54,,32',
'226,,232,40,228,227,224,225,236,234,230,18,231,,,,83,75,78,79,,80,81',
',,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,',
',,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,',
'90,98,99,,84,85,38,39,37,229,,,,,,,,,,,,,,,,243,244,,36,,,30,,,52,53',
',,54,,32,226,,232,40,228,227,224,225,,,230,18,231,,,,83,75,78,79,,80',
'81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,229,,,,,,,,,,,,,,,,243,244,,36,,,30,,,52,53',
',,54,,32,226,,232,40,228,227,224,225,,,230,18,231,,,,83,75,78,79,,80',
'81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,229,233,238,239,240,235,237,245,,241,242,',
',,,,243,244,,36,,,30,,,52,53,,,54,,32,226,,232,40,228,227,224,225,236',
'234,230,18,231,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,',
',,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,229,233',
'238,239,240,235,237,,,241,242,,,,,,243,244,,36,,,280,,,52,53,,,54,,32',
'226,,232,40,228,227,224,225,236,234,230,18,231,,,,83,75,78,79,,80,81',
',,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,',
',,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,',
'90,98,99,,84,85,38,39,37,229,233,238,239,240,235,237,245,246,241,242',
',-552,-552,,,243,244,,36,,,30,,,52,53,,,54,,32,226,,232,40,228,227,224',
'225,236,234,230,18,231,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51',
'56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,',
',17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
'229,233,238,239,240,235,237,245,246,241,242,,-552,-552,,,243,244,,36',
',,30,,,52,53,,,54,,32,226,,232,40,228,227,224,225,236,234,230,18,231',
',,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95',
'97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,229,,,,,,,,,,,,,,,,243,244',
',36,,,30,,,52,53,,,54,,32,226,,232,40,228,227,224,225,,,230,18,231,',
',,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95',
'97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,229,-552,-552,-552,-552',
'235,237,,,-552,-552,,,,,,243,244,,36,,,30,,,52,53,,,54,,32,226,,232',
'40,228,227,224,225,236,234,230,18,231,,,,83,75,78,79,,80,81,,,,76,82',
'5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28',
'27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99',
',84,85,38,39,37,229,,,,,,,,,,,,,,,,243,244,,36,,,280,,,52,53,,,54,,32',
'226,,232,40,228,227,224,225,,,230,18,231,,,,83,75,78,79,,80,81,,,,76',
'82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98',
'99,,84,85,38,39,37,229,-552,-552,-552,-552,235,237,,,-552,-552,,,,,',
'243,244,,36,,,30,,,52,53,,,54,,32,226,,232,40,228,227,224,225,236,234',
'230,18,231,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6',
'41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,229,-552,-552',
'-552,-552,235,237,,,-552,-552,,,,,,243,244,,36,,,30,,,52,53,,,54,,32',
'226,,232,40,228,227,224,225,236,234,230,18,231,,,,83,75,78,79,,80,81',
',,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,',
',,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,',
'90,98,99,,84,85,38,39,37,229,,,,,,,,,,,,,,,,243,244,,36,,,30,,,52,53',
',,54,,32,226,,,40,228,227,224,225,,,,18,,,,,83,75,78,79,,80,81,,,,76',
'82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98',
'99,,84,85,38,39,37,229,,,,,,,,,,,,,,,,243,244,,36,,,30,,,52,53,,,54',
',32,226,,232,40,228,227,224,225,,,,18,,,,,83,75,78,79,,80,81,,,,76,82',
'5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28',
'27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99',
',84,85,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,',
',,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41',
'8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,',
',,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81',
',,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,',
',,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,',
'90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32',
',,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,',
'77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17',
',,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,',
',,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,83,75,78',
'79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88',
'87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,',
',54,,32,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7',
'51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94',
',,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,83,75',
'78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50',
'88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53',
',,54,,32,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,5,68,69,65',
'7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93',
'94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39',
'37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,83',
'75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52',
'53,,,54,,32,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,5,68,69',
'65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91',
'93,94,,,17,,,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38',
'39,37,,,,,,,,,,,,,,,,,,,,36,,,280,,,52,53,,,54,,32,,,,40,,,,,,,,18,',
',,,83,75,78,79,,80,81,,,,76,82,5,68,69,65,7,51,56,,77,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6,41,8,9,96,95',
'97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,36,,',
'30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,',
'84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,',
',,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,',
',96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,',
',,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,',
',76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,',
',259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90',
'98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,',
',40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77',
'57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221',
',,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,',
',,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79',
',80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66',
'67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87',
'89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,',
'54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51',
'56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93',
'94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97',
'86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220',
',,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68',
'69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294',
'92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
'38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219',
',,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,',
'84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,',
',,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,',
',,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,',
',,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80',
'81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,',
',,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92',
'91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38',
'39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,',
',,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,',
'84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,',
',,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,',
',,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,',
',,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80',
'81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,',
',,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92',
'91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38',
'39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,',
',,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,',
'84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,',
',,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,',
',,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,',
',,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80',
'81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,',
',,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92',
'91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38',
'39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,',
',,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,291,,,96,95,97,86,50,88,87,89,,90,98,99',
',84,85,,644,295,641,640,639,645,642,,,,,,,,,,,,,,,824,,,220,,,52,53',
',,54,,,,,,647,,,,,,,,,651,650,654,653,83,75,78,79,,80,81,,,,76,82,,68',
'69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294',
'92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
'38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219',
',,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,',
'84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,699,,,,40',
',,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,7,51,56,,77,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,6',
'41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,',
',,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,83,75,78,79,,80',
'81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,588,,256,,40,,,,,,,,219,',
',,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,',
',214,,,220,,,52,53,,,54,,,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81',
',,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98',
'99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40',
',,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58',
',,,61,,59,60,62,260,261,66,67,,,,,,259,28,27,92,91,93,94,,,221,,,,,',
',41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,',
',,,,,,,,,,214,,,220,,,52,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50',
'88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,28',
'27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99',
',84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,258,,256',
',40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77',
'57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,28,27,92,91,93,94,,,221',
',,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,',
',,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,291,,,96,95,97',
'86,50,88,87,89,,90,98,99,,84,85,,644,295,641,640,639,645,642,,,,,,,',
',,,,,,,288,,,285,,,52,53,,,54,,284,,,,647,682,,,,,,,,651,650,654,653',
'83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60',
'62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,557,291,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,,,295,,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,,243,244,288,,,220,,,52,53,,,54,,,,226',
',232,,228,227,224,225,236,234,230,,231,,,83,75,78,79,,80,81,,,,76,82',
',,247,297,-226,,56,,77,68,69,65,,51,,,,57,58,,,,61,,59,60,62,260,261',
'66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88',
'87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52',
'53,,,54,,588,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68',
'69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294',
'92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
'38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,588,,256,,40,,,',
',,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,',
',,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,',
',,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80',
'81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,',
',,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88',
'87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51',
'56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93',
'94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39',
'37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,258,,,,40,,,,,,,,219,',
',,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,',
',214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,',
',76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99',
',84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,',
',96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,',
',,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,',
',76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,92,91,93,94,,,17,,,,,560,,41,,,96,95,97,86,50,88,87,89,,90,98',
'99,,84,85,38,39,37,229,233,238,239,240,235,237,245,246,241,242,,222',
'223,,,243,244,,214,,,220,,,52,53,,,54,,,226,,232,40,228,227,224,225',
'236,234,230,18,231,,,,83,75,78,79,,80,81,,,,76,82,104,247,,,,103,56',
',77,68,69,65,,51,,,,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,291,,,96,95,97,86,50,88,87,89,,90,98,99',
',84,85,,644,295,641,640,639,645,642,,,,,,,,,,,,,,,329,,,30,,,52,53,',
',54,,32,,,,647,,,,,,,,,651,650,654,653,83,75,78,79,,80,81,,,,76,82,',
'68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,291,,,96,95,97,334,50,88,87,335,,90,98,99',
',84,85,,724,295,641,640,639,645,642,,,,,,,,,,,,341,,,336,,,220,,,52',
'53,,,54,,,,,,647,,,,,,,,,651,650,654,653,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,291,,,96,95,97,334,50,88,87,335,,90,98,99',
',84,85,,644,295,641,640,639,645,642,,,,,,,,,,,,,,,336,,,220,,,52,53',
',,54,,,,,,647,,,,,,,,,651,650,654,653,83,75,78,79,,80,81,,,,76,82,,68',
'69,65,7,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92',
'91,93,94,,,17,,,,,557,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84',
'85,38,39,37,229,233,238,239,240,235,237,245,246,241,242,,222,223,,,243',
'244,,36,,,30,,,52,53,,,54,,32,226,,232,40,228,227,224,225,236,234,230',
'18,231,,,,83,75,78,79,,80,81,,,,76,82,,247,,,,366,56,,77,68,69,65,,51',
',,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17',
',,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,',
',,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79',
',80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,',
'77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17',
',,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,',
',,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79',
',80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,7,51,56',
',77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17',
',,,,,6,41,8,9,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,',
',,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,83,75,78',
'79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261',
'66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,291,,,96,95,97,86,50',
'88,87,89,,90,98,99,,84,85,,,295,,,,,,,,,,,,,,,,,,,,868,,,220,,,52,53',
',,54,,,,,,,,,,,,,,,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,',
',,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88',
'87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53',
',,54,,383,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65',
',51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93',
'94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,383,,,,40,,,,,,,,219,,,,',
'83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,28,27,92',
'91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85',
'38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,258,,256,,40,,,',
',,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,221,,,,,,,41',
',,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,',
',,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81',
',,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98',
'99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40',
',,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41',
',,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,',
',,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,',
',,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,',
'22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98',
'99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40',
',,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41',
',,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,',
',,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,',
',,76,82,210,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',588,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51',
'56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,28,27,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,258,,256,,40,,,,,,,,219,',
',,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95',
'97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,464,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81',
',,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,',
',,,259,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263',
'90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,',
'258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,210,68,69,65',
',51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91',
'93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85,38',
'39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,258,,256,,40,,,,,,',
',219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61',
',59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,291',
',,96,95,97,86,50,88,87,89,,90,98,99,,84,85,,,295,229,233,238,239,240',
'235,237,245,246,241,242,,222,223,,,243,244,,288,,,220,,,52,53,,,54,',
',226,,232,,228,227,224,225,236,234,230,,231,,,,83,75,78,79,,80,81,,',
',76,82,,247,,474,,,56,,77,68,69,65,,51,,,,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220',
',,52,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,',
'84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,',
',,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,',
',,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,',
',,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,',
',,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80',
'81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,',
',,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88',
'87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53',
',,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51',
'56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93',
'94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,291,,,96,95,97',
'86,50,88,87,89,,90,98,99,,84,85,,,295,,,,,,,,,,,,,,,,,,,,288,,,285,',
',52,53,,,54,,,,,,,,,,,,,,,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65',
',51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93',
'94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,492',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92',
'91,93,94,,,221,,,,,,,291,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
',,295,,,,,,,,,,,,,,,,,,,,288,,,285,,,52,53,,,54,,,,,,,,,,,,,,,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50',
'88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65',
',51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93',
'94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,291,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,,,295,,,,,,,,,,,,,,,,,,,,288,,,285,,,52',
'53,,,54,,,,,,,,,,,,,,,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51',
'56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93',
'94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50',
'88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65',
',51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91',
'93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39',
'37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,',
'83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91',
'93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39',
'37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,',
'83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92',
'91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38',
'39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,',
',,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
'38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18',
',,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96',
'95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'92,91,93,94,,,17,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
'38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18',
',,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95',
'97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,',
',,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,',
',,259,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263',
'90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,',
'258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51',
'56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93',
'94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97',
'86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220',
',,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68',
'69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294',
'92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
'38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219',
',,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,260,261,66,67,,,,,,259,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95',
'97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214',
',,220,,,52,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,',
',,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,',
',,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,',
'90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,',
'258,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,263,90,98,99,,84,85,38,39,37',
',,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'260,261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97',
'86,50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,',
',220,,,52,53,,,54,,588,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76',
'82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259',
'290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98',
'99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,383,,',
',40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,',
',,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,',
',,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,83,75,78,79,,80',
'81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67',
',,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86,50,88,87,89',
',90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54',
',,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56',
',77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92,91,93,94',
',,221,,,,,,,41,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85,38,39,37,',
',,,,,,,,,,,,,,,,,,214,,,220,,,52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75',
'78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260',
'261,66,67,,,,,,259,290,294,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220,',
',52,53,,,54,,,,,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82,,68,69',
'65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290,294,92',
'91,93,94,,,221,,,,,,,291,,,96,95,97,86,50,88,87,89,,90,98,99,,84,85',
',,295,,,,,,,,,,,,,,,,,,,,288,,,285,,,52,53,,,54,,,,,,,,,,,,,,,,,,,83',
'75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59,60,62',
'260,261,66,67,,,,,,259,28,27,92,91,93,94,,,221,,,,,,,41,,,96,95,97,86',
'50,88,87,89,263,90,98,99,,84,85,38,39,37,,,,,,,,,,,,,,,,,,,,214,,,220',
',,52,53,,,54,,258,,256,,40,,,,,,,,219,,,,,83,75,78,79,,80,81,,,,76,82',
',68,69,65,,51,56,,77,57,58,,,,61,,59,60,62,260,261,66,67,,,,,,259,290',
'294,92,91,93,94,,,221,,,,,,,291,,,96,95,97,86,50,88,87,89,,90,98,99',
',84,85,,,295,,,,,,,,,,,,,,,,,,,,288,,,285,,,52,53,,,54,,,,,,,,,,,,,',
',,,,,83,75,78,79,,80,81,,,,76,82,,68,69,65,,51,56,,77,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,92,91,93,94,,,17,,,,,,,41,,,96,95,97',
'86,50,88,87,89,263,90,98,99,,84,85,38,39,37,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,,243,244,,214,,-226,220,,,52,53,,,54,',
',226,256,232,40,228,227,224,225,236,234,230,18,231,,,,83,75,78,79,,80',
'81,,,,76,82,,247,,-226,,,56,,77,162,173,163,186,159,179,169,168,189',
'190,184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188',
'183,182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114',
'116,,,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,,,151,83,,,,,,,,,,,82,162,173,163,186,159,179,169,168,189,190',
'184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183',
'182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116',
',,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,83,,,,,,,,,,,82,162,173,163,186,159,179,169,168,189,190,184',
'167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,182',
'175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116,113',
',115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,83,,,,,,,,,,,82,162,173,163,186,159,179,169,168,189,190,184',
'167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,182',
'175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
',,151,83,,,,,,,,,,,82,162,173,163,186,159,179,169,168,189,190,184,167',
'166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,182,175',
'185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115,',
',,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
',,151,162,173,163,186,159,179,169,168,189,190,184,167,166,161,187,191',
'192,171,160,174,178,180,172,165,,,,181,188,183,351,350,352,349,158,177',
'176,,,,,,157,164,155,156,346,347,348,344,116,88,87,345,,90,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,356',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,576,403',
'151,,577,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,269,,,,,,,,141,140,,125,146,143,142,138,139,133,131',
'123,145,124,456,396,151,,457,,,,,,,,147,148,,144,126,127,128,135,132',
'134,,,129,130,,,,149,150,136,137,,,,,,269,,,,,,,,141,140,,125,146,143',
'142,138,139,133,131,123,145,124,392,396,151,,393,,,,,,,,147,148,,144',
'126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,269,,,,,,',
',141,140,,125,146,143,142,138,139,133,131,123,145,124,574,396,151,,575',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,269,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,942,403,151,,941,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129',
'130,,,,149,150,136,137,,,,,,269,,,,,,,,141,140,,125,146,143,142,138',
'139,133,131,123,145,124,611,396,151,,612,,,,,,,,147,148,,144,126,127',
'128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,269,,,,,,,,141,140',
',125,146,143,142,138,139,133,131,123,145,124,614,403,151,,615,,,,,,',
',147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,',
',,,,269,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
'576,403,151,,577,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130',
',,,149,150,136,137,,,,,,269,,,,,,,,141,140,,125,146,143,142,138,139',
'133,131,123,145,124,398,403,151,,400,,,,,,,,147,148,,144,126,127,128',
'135,132,134,,,129,130,,,,149,150,136,137,,,,,,269,,,,,,,,141,140,,125',
'146,143,142,138,139,133,131,123,145,124,574,396,151,,575,,,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,269',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,920,396',
'151,,921,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,269,,,,,,,,141,140,,125,146,143,142,138,139,133,131',
'123,145,124,456,396,151,,457,,,,,,,,147,148,,144,126,127,128,135,132',
'134,,,129,130,,,,149,150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142',
'138,139,133,131,123,145,124,456,396,151,,457,,,,,,,,147,148,,144,126',
'127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,,,,,,,,,141,140',
',125,146,143,142,138,139,133,131,123,145,124,669,403,151,,670,,,,,,',
',147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,',
',,,,269,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
'672,403,151,,673,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130',
',,,149,150,136,137,,,,,,269,,,,,,,,141,140,,125,146,143,142,138,139',
'133,131,123,145,124,922,403,151,,923,,,,,,,,147,148,,144,126,127,128',
'135,132,134,,,129,130,,,,149,150,136,137,,,,,,269,,,,,,,,141,140,,125',
'146,143,142,138,139,133,131,123,145,124,667,396,151,,668,,,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,269',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,,,151,229',
'233,238,239,240,235,237,245,246,241,242,,222,223,,,243,244,,,,,,,,,',
',,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240',
'235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232',
',228,227,224,225,236,234,230,,231,,229,233,238,239,240,235,237,245,246',
'241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225',
'236,234,230,,231,,229,233,238,239,240,235,237,245,246,241,242,,222,223',
',247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231',
',229,233,238,239,240,235,237,245,246,241,242,,222,223,210,247,243,244',
',,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238',
'239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,',
'226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228',
'227,224,225,236,234,230,,231,,229,233,238,239,240,235,237,245,246,241',
'242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236',
'234,230,,231,,229,233,238,239,240,235,237,245,246,241,242,,222,223,',
'247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231',
',229,233,238,239,240,235,237,245,246,241,242,,222,223,,247,243,244,',
',,,,,,,,,,,,,226,,232,,228,227,224,225,236,234,230,,231,,229,233,238',
'239,240,235,237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,',
'226,,232,,228,227,224,225,236,234,230,,231,,229,233,238,239,240,235',
'237,245,246,241,242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228',
'227,224,225,236,234,230,,231,,229,233,238,239,240,235,237,245,246,241',
'242,,222,223,,247,243,244,,,,,,,,,,,,,,,226,,232,,228,227,224,225,236',
'234,230,,231,,,,,,,,,,,,,,,,,247' ]
        racc_action_table = arr = ::Array.new(23453, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'400,363,745,321,320,825,668,400,400,400,781,537,537,400,400,340,400',
'598,336,465,595,17,336,622,622,330,362,446,846,665,920,466,311,309,309',
'311,400,400,345,400,400,400,400,400,921,345,851,213,851,670,512,667',
'632,465,595,879,944,822,17,598,41,446,363,363,363,466,400,400,400,400',
'400,400,400,400,400,400,400,400,400,400,511,782,400,400,400,519,400',
'531,531,362,400,829,55,400,410,410,345,213,400,830,400,537,400,400,400',
'400,400,400,400,327,400,668,400,622,670,781,745,321,320,825,340,745',
'321,320,825,577,400,400,922,400,330,400,577,577,577,400,400,577,577',
'577,340,577,846,665,920,340,665,846,665,920,512,577,577,577,670,512',
'667,632,921,923,26,577,577,921,577,577,577,577,577,879,944,822,575,831',
'879,944,822,531,55,669,511,782,531,3,410,511,782,548,3,416,519,577,577',
'577,577,577,577,577,577,577,577,577,577,577,577,922,611,577,577,577',
'606,577,577,292,327,577,644,606,577,577,715,577,575,577,26,577,361,577',
'577,577,577,577,577,577,834,577,923,577,614,416,215,835,922,823,669',
'837,26,922,548,548,823,577,577,577,577,576,577,548,577,823,577,577,576',
'576,576,644,561,576,576,576,715,576,611,923,324,934,934,292,923,324',
'576,576,576,576,669,574,347,361,361,361,215,576,576,347,576,576,576',
'576,576,292,683,823,612,614,614,683,350,724,611,561,840,611,25,350,315',
'360,561,315,611,25,842,576,576,576,576,576,576,576,576,576,576,576,576',
'576,576,574,738,576,576,576,614,576,576,614,347,576,35,349,576,576,614',
'576,36,576,349,576,724,576,576,576,576,576,576,576,350,576,576,576,612',
'582,25,582,582,582,582,582,360,360,360,848,392,576,576,576,576,89,576',
'849,576,35,576,576,89,89,89,530,35,89,89,89,530,89,738,854,612,349,582',
'612,423,89,859,89,89,89,612,582,582,582,582,319,319,89,89,392,89,89',
'89,89,89,767,392,767,767,767,767,767,348,860,738,861,423,738,359,348',
'423,423,862,358,738,582,864,89,89,89,89,89,89,89,89,89,89,89,89,89,89',
'73,868,89,89,89,631,89,89,631,73,89,34,312,89,89,312,89,14,89,73,89',
'875,89,89,89,89,89,89,89,348,89,894,89,894,894,894,894,894,359,359,359',
'20,767,358,358,358,89,89,89,89,86,89,299,89,42,89,89,86,86,86,14,42',
'86,86,86,393,86,14,422,880,42,881,13,344,86,896,86,86,86,13,344,37,37',
'672,295,295,86,86,13,86,86,86,86,86,677,299,656,656,12,677,422,11,299',
'346,422,422,10,354,393,894,346,917,42,919,354,393,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,13,344,86,86,86,672,86,86,15,15,86,9,672,86',
'86,8,86,672,86,926,86,672,86,86,86,86,86,86,86,398,86,346,86,352,289',
'354,398,398,398,672,352,289,398,398,927,398,86,86,86,86,289,86,351,86',
'398,86,86,928,929,351,522,930,335,672,932,398,398,522,398,398,398,398',
'398,935,936,937,522,938,939,841,940,841,841,841,841,841,941,461,113',
'467,470,352,289,113,113,398,398,398,398,398,398,398,398,398,398,398',
'398,398,398,469,351,398,398,398,335,398,841,473,522,398,475,335,398',
'480,334,841,335,398,484,398,335,398,398,398,398,398,398,398,493,398',
'398,398,496,286,427,426,508,425,335,424,286,513,514,412,28,398,398,399',
'398,286,398,28,28,28,398,398,28,28,28,390,28,386,335,541,541,441,334',
'541,541,541,28,28,328,334,384,378,545,377,334,328,28,28,334,28,28,28',
'28,28,328,551,723,286,723,723,723,558,723,441,562,565,334,441,441,441',
'441,4,4,4,4,4,28,28,28,28,28,28,28,28,28,28,28,28,28,28,334,442,28,28',
'28,867,328,28,569,28,28,578,867,28,28,580,28,585,28,587,28,867,28,28',
'28,28,28,28,28,331,28,329,28,442,338,599,601,442,442,442,442,338,326',
'325,608,404,28,28,610,28,338,28,404,404,404,28,613,404,404,404,316,404',
'866,867,866,866,866,302,866,616,404,404,404,404,302,365,365,365,365',
'365,617,404,404,302,404,404,404,404,404,942,620,621,338,314,647,623',
'647,647,647,647,647,111,111,111,111,111,313,626,627,634,635,404,404',
'404,404,404,404,404,404,404,404,404,404,404,404,302,636,404,404,404',
'637,647,404,645,652,404,655,658,404,404,647,404,663,404,666,404,308',
'404,404,404,404,404,404,404,307,404,404,404,304,301,675,479,300,287',
'680,296,1,698,479,294,287,404,404,404,404,50,404,479,404,287,404,291',
'50,50,50,951,960,50,50,50,754,50,754,754,754,754,754,673,290,288,717',
'50,50,50,673,718,719,721,722,673,726,50,50,673,50,50,50,50,50,479,283',
'287,282,734,735,736,764,754,764,764,764,764,764,737,281,279,754,754',
'754,754,268,50,50,50,50,50,50,50,50,50,50,50,50,50,50,673,257,50,50',
'50,752,760,50,764,254,50,766,253,50,50,768,50,764,50,769,50,772,50,50',
'50,50,50,50,50,221,50,775,50,217,216,759,212,759,759,759,759,759,214',
'212,784,193,50,50,50,50,455,50,212,50,788,50,789,455,455,455,792,615',
'455,455,455,793,455,961,615,962,805,806,759,615,812,813,455,615,814',
'816,100,824,,759,759,,455,455,,455,455,455,455,455,212,,,,803,,803,803',
'803,803,803,,,,,,,,533,,533,533,533,533,533,615,,,,,,,,455,,403,,,,',
'455,803,403,403,403,455,455,403,403,403,,403,803,803,,533,533,,,,403',
'403,403,403,533,533,533,533,455,,,403,403,,403,403,403,403,403,,,,455',
',,,,455,,,950,455,950,950,950,950,950,,,,,403,403,403,403,403,403,403',
'403,403,403,403,403,403,403,,,403,403,403,,,403,,,403,,950,403,403,',
'403,,403,,403,,403,403,403,403,403,403,403,,403,403,403,633,,633,633',
'633,633,633,,,,,,,403,403,403,403,458,403,,403,,403,,458,458,458,,,458',
'458,458,,458,,,506,633,506,506,506,506,506,458,,,633,633,633,633,,,',
'458,458,,458,458,458,458,458,428,,,,946,,946,946,946,946,946,,506,506',
',,428,428,,,,506,506,506,506,,,,,,,,428,458,428,394,428,428,428,428',
'458,946,394,394,394,458,458,394,394,394,,394,946,946,,,,,,,394,394,394',
',,,,,458,,,394,394,,394,394,394,394,394,,,,458,,,,,458,,,931,458,931',
'931,931,931,931,,,,,394,394,394,394,394,394,394,394,394,394,394,394',
'394,394,,,394,394,394,,,394,,394,394,,931,394,394,,394,,394,,394,,394',
'394,394,394,394,394,394,,394,394,394,,,,895,,895,895,895,895,895,,,27',
'394,394,,394,,394,27,27,27,394,,27,27,27,798,27,798,798,798,798,798',
',,,27,27,27,895,,,,,,,,27,27,,27,27,27,27,27,843,,843,843,843,843,843',
'933,798,933,933,933,933,933,,,,798,798,798,798,,27,27,27,27,27,27,27',
'27,27,27,27,27,27,27,,843,27,27,27,,,27,933,27,27,,,27,27,,27,,27,,27',
',27,27,27,27,27,27,27,,27,27,27,,800,,800,800,800,800,800,,,,,,27,27',
',27,,27,,,,27,903,903,903,903,903,903,,,,903,903,,,,903,800,903,903',
'903,903,903,903,903,,800,800,800,800,903,903,903,903,903,903,903,,,903',
',,,,,903,903,903,903,903,903,903,903,903,903,903,903,,903,903,903,,903',
'903,903,903,903,,,,,,,,956,,956,956,956,956,956,,,,,,903,,,903,,,903',
'903,,,903,,903,,,,903,886,,886,886,886,886,886,903,956,,,,903,903,903',
'903,,903,903,956,956,,903,903,897,897,897,897,897,897,903,,903,897,897',
',,886,897,,897,897,897,897,897,897,897,,886,886,,,897,897,897,897,897',
'897,897,,,897,,,,,,897,897,897,897,897,897,897,897,897,897,897,897,',
'897,897,897,,897,897,897,897,897,,,,,,,,888,,888,888,888,888,888,,,',
',,897,,,897,,,897,897,,,897,,897,,,,897,890,,890,890,890,890,890,897',
'888,,,,897,897,897,897,,897,897,888,888,,897,897,828,828,828,828,828',
'828,897,,897,828,828,,,890,828,,828,828,828,828,828,828,828,,890,890',
',,828,828,828,828,828,828,828,,,828,,,,,,828,828,828,828,828,828,828',
'828,828,828,828,828,,828,828,828,,828,828,828,828,828,,,,,,,,909,,909',
'909,909,909,909,,,,,,828,,,828,,,828,828,,,828,,828,,,,828,911,,911',
'911,911,911,911,828,909,,,,828,828,828,828,,828,828,909,909,,828,828',
'786,786,786,786,786,786,828,,828,786,786,,,911,786,,786,786,786,786',
'786,786,786,,911,911,,,786,786,786,786,786,786,786,,,786,,,,,,786,786',
'786,786,786,786,786,786,786,786,786,786,,786,786,786,,786,786,786,786',
'786,437,437,437,437,437,437,437,,,437,437,,,,,,437,437,,786,,,786,,',
'786,786,,,786,,786,437,,437,786,437,437,437,437,437,437,437,786,437',
',,,786,786,786,786,,786,786,,,,786,786,195,195,195,195,195,195,786,',
'786,195,195,,,,195,,195,195,195,195,195,195,195,,,,,,195,195,195,195',
'195,195,195,,,195,,,,,,195,195,195,195,195,195,195,195,195,195,195,195',
',195,195,195,,195,195,195,195,195,431,431,431,431,431,431,431,,,431',
'431,,,,,,431,431,,195,,,195,,,195,195,,,195,,195,431,,431,195,431,431',
'431,431,431,431,431,195,431,,,,195,195,195,195,,195,195,,,,195,195,196',
'196,196,196,196,196,195,,195,196,196,,,,196,,196,196,196,196,196,196',
'196,,,,,,196,196,196,196,196,196,196,,,196,,,,,,196,196,196,196,196',
'196,196,196,196,196,196,196,,196,196,196,,196,196,196,196,196,439,439',
'439,439,439,439,439,,,439,439,,,,,,439,439,,196,,,196,,,196,196,,,196',
',196,439,,439,196,439,439,439,439,439,439,439,196,439,,,,196,196,196',
'196,,196,196,,,,196,196,827,827,827,827,827,827,196,,196,827,827,,,',
'827,,827,827,827,827,827,827,827,,,,,,827,827,827,827,827,827,827,,',
'827,,,,,,827,827,827,827,827,827,827,827,827,827,827,827,,827,827,827',
',827,827,827,827,827,435,,,,,,,,,,,,,,,,435,435,,827,,,827,,,827,827',
',,827,,827,435,,435,827,435,435,435,435,,,435,827,435,,,,827,827,827',
'827,,827,827,,,,827,827,625,625,625,625,625,625,827,,827,625,625,,,',
'625,,625,625,625,625,625,625,625,,,,,,625,625,625,625,625,625,625,,',
'625,,,,,,625,625,625,625,625,625,625,625,625,625,625,625,,625,625,625',
',625,625,625,625,625,434,,,,,,,,,,,,,,,,434,434,,625,,,625,,,625,625',
',,625,,625,434,,434,625,434,434,434,434,,,434,625,434,,,,625,625,625',
'625,,625,625,,,,625,625,676,676,676,676,676,676,625,,625,676,676,,,',
'676,,676,676,676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,',
'676,,,,,,676,676,676,676,676,676,676,676,676,676,676,676,,676,676,676',
',676,676,676,676,676,444,444,444,444,444,444,444,444,,444,444,,,,,,444',
'444,,676,,,676,,,676,676,,,676,,676,444,,444,676,444,444,444,444,444',
'444,444,676,444,,,,676,676,676,676,,676,676,,,,676,676,285,285,285,285',
'285,285,676,,676,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285',
'285,285,285,285,285,285,,,285,,,,,,285,285,285,285,285,285,285,285,285',
'285,285,285,,285,285,285,,285,285,285,285,285,443,443,443,443,443,443',
'443,,,443,443,,,,,,443,443,,285,,,285,,,285,285,,,285,,285,443,,443',
'285,443,443,443,443,443,443,443,285,443,,,,285,285,285,285,,285,285',
',,,285,285,730,730,730,730,730,730,285,,285,730,730,,,,730,,730,730',
'730,730,730,730,730,,,,,,730,730,730,730,730,730,730,,,730,,,,,,730',
'730,730,730,730,730,730,730,730,730,730,730,,730,730,730,,730,730,730',
'730,730,421,421,421,421,421,421,421,421,421,421,421,,421,421,,,421,421',
',730,,,730,,,730,730,,,730,,730,421,,421,730,421,421,421,421,421,421',
'421,730,421,,,,730,730,730,730,,730,730,,,,730,730,51,51,51,51,51,51',
'730,,730,51,51,,,,51,,51,51,51,51,51,51,51,,,,,,51,51,51,51,51,51,51',
',,51,,,,,,51,51,51,51,51,51,51,51,51,51,51,51,,51,51,51,,51,51,51,51',
'51,420,420,420,420,420,420,420,420,420,420,420,,420,420,,,420,420,,51',
',,51,,,51,51,,,51,,51,420,,420,51,420,420,420,420,420,420,420,51,420',
',,,51,51,51,51,,51,51,,,,51,51,532,532,532,532,532,532,51,,51,532,532',
',,,532,,532,532,532,532,532,532,532,,,,,,532,532,532,532,532,532,532',
',,532,,,,,,532,532,532,532,532,532,532,532,532,532,532,532,,532,532',
'532,,532,532,532,532,532,433,,,,,,,,,,,,,,,,433,433,,532,,,532,,,532',
'532,,,532,,532,433,,433,532,433,433,433,433,,,433,532,433,,,,532,532',
'532,532,,532,532,,,,532,532,0,0,0,0,0,0,532,,532,0,0,,,,0,,0,0,0,0,0',
'0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0',
'0,0,0,438,438,438,438,438,438,438,,,438,438,,,,,,438,438,,0,,,0,,,0',
'0,,,0,,0,438,,438,0,438,438,438,438,438,438,438,0,438,,,,0,0,0,0,,0',
'0,,,,0,0,280,280,280,280,280,280,0,,0,280,280,,,,280,,280,280,280,280',
'280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,280,280,280',
'280,280,280,280,280,280,280,280,280,,280,280,280,,280,280,280,280,280',
'432,,,,,,,,,,,,,,,,432,432,,280,,,280,,,280,280,,,280,,280,432,,432',
'280,432,432,432,432,,,432,280,432,,,,280,280,280,280,,280,280,,,,280',
'280,681,681,681,681,681,681,280,,280,681,681,,,,681,,681,681,681,681',
'681,681,681,,,,,,681,681,681,681,681,681,681,,,681,,,,,,681,681,681',
'681,681,681,681,681,681,681,681,681,,681,681,681,,681,681,681,681,681',
'436,436,436,436,436,436,436,,,436,436,,,,,,436,436,,681,,,681,,,681',
'681,,,681,,681,436,,436,681,436,436,436,436,436,436,436,681,436,,,,681',
'681,681,681,,681,681,,,,681,681,742,742,742,742,742,742,681,,681,742',
'742,,,,742,,742,742,742,742,742,742,742,,,,,,742,742,742,742,742,742',
'742,,,742,,,,,,742,742,742,742,742,742,742,742,742,742,742,742,,742',
'742,742,,742,742,742,742,742,440,440,440,440,440,440,440,,,440,440,',
',,,,440,440,,742,,,742,,,742,742,,,742,,742,440,,440,742,440,440,440',
'440,440,440,440,742,440,,,,742,742,742,742,,742,742,,,,742,742,691,691',
'691,691,691,691,742,,742,691,691,,,,691,,691,691,691,691,691,691,691',
',,,,,691,691,691,691,691,691,691,,,691,,,,,,691,691,691,691,691,691',
'691,691,691,691,691,691,,691,691,691,,691,691,691,691,691,430,,,,,,',
',,,,,,,,,430,430,,691,,,691,,,691,691,,,691,,691,430,,,691,430,430,430',
'430,,,,691,,,,,691,691,691,691,,691,691,,,,691,691,780,780,780,780,780',
'780,691,,691,780,780,,,,780,,780,780,780,780,780,780,780,,,,,,780,780',
'780,780,780,780,780,,,780,,,,,,780,780,780,780,780,780,780,780,780,780',
'780,780,,780,780,780,,780,780,780,780,780,429,,,,,,,,,,,,,,,,429,429',
',780,,,780,,,780,780,,,780,,780,429,,429,780,429,429,429,429,,,,780',
',,,,780,780,780,780,,780,780,,,,780,780,584,584,584,584,584,584,780',
',780,584,584,,,,584,,584,584,584,584,584,584,584,,,,,,584,584,584,584',
'584,584,584,,,584,,,,,,584,584,584,584,584,584,584,584,584,584,584,584',
',584,584,584,,584,584,584,584,584,,,,,,,,,,,,,,,,,,,,584,,,584,,,584',
'584,,,584,,584,,,,584,,,,,,,,584,,,,,584,584,584,584,,584,584,,,,584',
'584,777,777,777,777,777,777,584,,584,777,777,,,,777,,777,777,777,777',
'777,777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,777,777,777',
'777,777,777,777,777,777,777,777,777,,777,777,777,,777,777,777,777,777',
',,,,,,,,,,,,,,,,,,,777,,,777,,,777,777,,,777,,777,,,,777,,,,,,,,777',
',,,,777,777,777,777,,777,777,,,,777,777,776,776,776,776,776,776,777',
',777,776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776,776',
'776,776,776,,,776,,,,,,776,776,776,776,776,776,776,776,776,776,776,776',
',776,776,776,,776,776,776,776,776,,,,,,,,,,,,,,,,,,,,776,,,776,,,776',
'776,,,776,,776,,,,776,,,,,,,,776,,,,,776,776,776,776,,776,776,,,,776',
'776,507,507,507,507,507,507,776,,776,507,507,,,,507,,507,507,507,507',
'507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,,507,507,507',
'507,507,507,507,507,507,507,507,507,,507,507,507,,507,507,507,507,507',
',,,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507,,507,,,,507,,,,,,,,507',
',,,,507,507,507,507,,507,507,,,,507,507,220,220,220,220,220,220,507',
',507,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,220,220,220,220,220,220,220,220,220,220,220,220',
',220,220,220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220',
'220,,,220,,220,,,,220,,,,,,,,220,,,,,220,220,220,220,,220,220,,,,220',
'220,510,510,510,510,510,510,220,,220,510,510,,,,510,,510,510,510,510',
'510,510,510,,,,,,510,510,510,510,510,510,510,,,510,,,,,,510,510,510',
'510,510,510,510,510,510,510,510,510,,510,510,510,,510,510,510,510,510',
',,,,,,,,,,,,,,,,,,,510,,,510,,,510,510,,,510,,510,,,,510,,,,,,,,510',
',,,,510,510,510,510,,510,510,,,,510,510,603,603,603,603,603,603,510',
',510,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603,603,603,603',
'603,603,603,,,603,,,,,,603,603,603,603,603,603,603,603,603,603,603,603',
',603,603,603,,603,603,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603',
'603,,,603,,603,,,,603,,,,,,,,603,,,,,603,603,603,603,,603,603,,,,603',
'603,604,604,604,604,604,604,603,,603,604,604,,,,604,,604,604,604,604',
'604,604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,604,604,604',
'604,604,604,604,604,604,604,604,604,,604,604,604,,604,604,604,604,604',
',,,,,,,,,,,,,,,,,,,604,,,604,,,604,604,,,604,,604,,,,604,,,,,,,,604',
',,,,604,604,604,604,,604,604,,,,604,604,821,821,821,821,821,821,604',
',604,821,821,,,,821,,821,821,821,821,821,821,821,,,,,,821,821,821,821',
'821,821,821,,,821,,,,,,821,821,821,821,821,821,821,821,821,821,821,821',
',821,821,821,,821,821,821,821,821,,,,,,,,,,,,,,,,,,,,821,,,821,,,821',
'821,,,821,,821,,,,821,,,,,,,,821,,,,,821,821,821,821,,821,821,,,,821',
'821,30,30,30,30,30,30,821,,821,30,30,,,,30,,30,30,30,30,30,30,30,,,',
',,30,30,30,30,30,30,30,,,30,,,,,,30,30,30,30,30,30,30,30,30,30,30,30',
',30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30',
',,,30,,,,,,,,30,,,,,30,30,30,30,,30,30,,,,30,30,905,905,905,905,905',
'905,30,,30,905,905,,,,905,,905,905,905,905,905,905,905,,,,,,905,905',
'905,905,905,905,905,,,905,,,,,,905,905,905,905,905,905,905,905,905,905',
'905,905,,905,905,905,,905,905,905,905,905,,,,,,,,,,,,,,,,,,,,905,,,905',
',,905,905,,,905,,905,,,,905,,,,,,,,905,,,,,905,905,905,905,,905,905',
',,,905,905,,219,219,219,,219,905,,905,219,219,,,,219,,219,219,219,219',
'219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219',
'219,219,219,219,219,219,,219,219,219,,219,219,219,219,219,,,,,,,,,,',
',,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219',
'219,,219,219,,,,219,219,,774,774,774,,774,219,,219,774,774,,,,774,,774',
'774,774,774,774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,',
',774,,,774,774,774,774,774,774,774,774,,774,774,774,,774,774,774,774',
'774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,,,,,774,,,,,,,,774',
',,,,774,774,774,774,,774,774,,,,774,774,,222,222,222,,222,774,,774,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,',
',,222,,,,,,,,222,,,,,222,222,222,222,,222,222,,,,222,222,,223,223,223',
',223,222,,222,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,,223,223,,,,223,223',
',224,224,224,,224,223,,223,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224',
',,,224,224,,225,225,225,,225,224,,224,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225',
'225,,225,225,,,,225,225,,226,226,226,,226,225,,225,226,226,,,,226,,226',
'226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,',
',226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226,226,226',
'226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226',
',,,,226,226,226,226,,226,226,,,,226,226,,227,227,227,,227,226,,226,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,',
',,227,,,,,,,,227,,,,,227,227,227,227,,227,227,,,,227,227,,228,228,228',
',228,227,,227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228',
'228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228',
',228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228',
'228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,,228,228,,,,228,228',
',229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,,229,229',
',,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230,230,230,230',
'230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230',
'230,230,230,230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,',
',,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230',
'230,,230,230,,,,230,230,,231,231,231,,231,230,,230,231,231,,,,231,,231',
'231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,',
',231,,,231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231',
'231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231',
',,,,231,231,231,231,,231,231,,,,231,231,,232,232,232,,232,231,,231,232',
'232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232',
'232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,',
'232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,',
',,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232,,233,233,233',
',233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233',
'233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,,233,233,,,,233,233',
',234,234,234,,234,233,,233,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,,234,234',
',,,234,234,,235,235,235,,235,234,,234,235,235,,,,235,,235,235,235,235',
'235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235',
'235,235,235,235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,',
',,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,,235,235,,,,235,235,,236,236,236,,236,235,,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236',
',,,,236,236,236,236,,236,236,,,,236,236,,237,237,237,,237,236,,236,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,',
',,237,,,,,,,,237,,,,,237,237,237,237,,237,237,,,,237,237,,238,238,238',
',238,237,,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238',
',238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238',
'238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,,238,238,,,,238,238',
',239,239,239,,239,238,,238,239,239,,,,239,,239,239,239,239,239,239,239',
',,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239',
'239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,,239,239',
',,,239,239,,240,240,240,,240,239,,239,240,240,,,,240,,240,240,240,240',
'240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240',
'240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,',
',,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,,240,240,,,,240,240,,241,241,241,,241,240,,240,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,,241,241,,,,241,241,,242,242,242,,242,241,,241,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,',
',,242,,,,,,,,242,,,,,242,242,242,242,,242,242,,,,242,242,,243,243,243',
',243,242,,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,,243,243,,,,243,243',
',244,244,244,,244,243,,243,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,,244,244',
',,,244,244,,245,245,245,,245,244,,244,245,245,,,,245,,245,245,245,245',
'245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245',
'245,245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,',
',,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245',
'245,,245,245,,,,245,245,,246,246,246,,246,245,,245,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246',
',,,,246,246,246,246,,246,246,,,,246,246,,247,247,247,,247,246,,246,247',
'247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247',
'247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,',
'247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,',
',,247,,,,,,,,247,,,,,247,247,247,247,,247,247,,,,247,247,,761,761,761',
',761,247,,247,761,761,,,,761,,761,761,761,761,761,761,761,,,,,,761,761',
'761,761,761,761,761,,,761,,,,,,,761,,,761,761,761,761,761,761,761,761',
',761,761,761,,761,761,761,761,761,,,,,,,,,,,,,,,,,,,,761,,,761,,,761',
'761,,,761,,,,,,761,,,,,,,,761,,,,,761,761,761,761,,761,761,,,,761,761',
',256,256,256,,256,761,,761,256,256,,,,256,,256,256,256,256,256,256,256',
',,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256',
'256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256',
',,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,,256,256',
',,,256,256,,746,746,746,,746,256,,256,746,746,,,,746,,746,746,746,746',
'746,746,746,,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746',
'746,746,746,746,746,746,,746,746,746,,746,746,,682,746,682,682,682,682',
'682,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,682,,,,,,,,,682,682',
'682,682,746,746,746,746,,746,746,,,,746,746,,258,258,258,,258,746,,746',
'258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258',
'258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258',
',258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,',
',,,258,,,,,,,,258,,,,,258,258,258,258,,258,258,,,,258,258,,263,263,263',
',263,258,,258,263,263,,,,263,,263,263,263,263,263,263,263,,,,,,263,263',
'263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263',
',263,263,263,,263,263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263',
'263,,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263,,263,263,,,,263,263',
',559,559,559,,559,263,,263,559,559,,,,559,,559,559,559,559,559,559,559',
',,,,,559,559,559,559,559,559,559,,,559,,,,,,,559,,,559,559,559,559,559',
'559,559,559,,559,559,559,,559,559,559,559,559,,,,,,,,,,,,,,,,,,,,559',
',,559,,,559,559,,,559,,559,,,,559,,,,,,,,559,,,,,559,559,559,559,,559',
'559,,,,559,559,,5,5,5,5,5,559,,559,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5',
'5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,',
',,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5',
',452,452,452,,452,5,,5,452,452,,,,452,,452,452,452,452,452,452,452,',
',,,,452,452,452,452,452,452,452,,,452,,,,,,,452,,,452,452,452,452,452',
'452,452,452,,452,452,452,,452,452,452,452,452,,,,,,,,,,,,,,,,,,,,452',
',,452,,,452,452,,,452,,,,,,452,,,,,,,,452,,,,,452,452,452,452,,452,452',
',,,452,452,,448,448,448,,448,452,,452,448,448,,,,448,,448,448,448,448',
'448,448,448,,,,,,448,448,448,448,448,448,448,,,448,,,,,,,448,,,448,448',
'448,448,448,448,448,448,448,448,448,448,,448,448,448,448,448,,,,,,,',
',,,,,,,,,,,,448,,,448,,,448,448,,,448,,448,,448,,448,,,,,,,,448,,,,',
'448,448,448,448,,448,448,,,,448,448,,450,450,450,,450,448,,448,450,450',
',,,450,,450,450,450,450,450,450,450,,,,,,450,450,450,450,450,450,450',
',,450,,,,,,,450,,,450,450,450,450,450,450,450,450,450,450,450,450,,450',
'450,450,450,450,,,,,,,,,,,,,,,,,,,,450,,,450,,,450,450,,,450,,,,450',
',450,,,,,,,,450,,,,,450,450,450,450,,450,450,,,,450,450,,18,18,18,,18',
'450,,450,18,18,,,,18,,18,18,18,18,18,18,18,,,,,,18,18,18,18,18,18,18',
',,18,,,,,,,18,,,18,18,18,18,18,18,18,18,,18,18,18,,18,18,18,18,18,,',
',,,,,,,,,,,,,,,,,18,,,18,,,18,18,,,18,,,,,,18,,,,,,,,18,,,,,18,18,18',
'18,,18,18,,,,18,18,,22,22,22,,22,18,,18,22,22,,,,22,,22,22,22,22,22',
'22,22,,,,,,22,22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,22,22,22,22,22',
'22,22,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22,22,,',
'22,,22,,22,,22,,,,,,,,22,,,,,22,22,22,22,,22,22,,,,22,22,,23,23,23,',
'23,22,,22,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23',
',,23,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,23,23,,23,23,23,23,23',
',,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,23,,23,,23,,,,,,,,23,,,,,23',
'23,23,23,,23,23,,,,23,23,,24,24,24,,24,23,,23,24,24,,,,24,,24,24,24',
'24,24,24,24,,,,,,24,24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,24,24,24',
'24,24,24,24,24,24,24,,24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24',
'24,,,24,,24,,24,,24,,,,,,,,24,,,,,24,24,24,24,,24,24,,,,24,24,,876,876',
'876,,876,24,,24,876,876,,,,876,,876,876,876,876,876,876,876,,,,,,876',
'876,876,876,876,876,876,,,876,,,,,,,876,,,876,876,876,876,876,876,876',
'876,876,876,876,876,,876,876,876,876,876,,,,,,,,,,,,,,,,,,,,876,,,876',
',,876,876,,,876,,876,,876,,876,,,,,,,,876,,,,,876,876,876,876,,876,876',
',,,876,876,,31,31,31,,31,876,,876,31,31,,,,31,,31,31,31,31,31,31,31',
',,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,,31',
'31,31,,31,31,,857,31,857,857,857,857,857,,,,,,,,,,,,,,,31,,,31,,,31',
'31,,,31,,31,,,,857,857,,,,,,,,857,857,857,857,31,31,31,31,,31,31,,,',
'31,31,,32,32,32,,32,31,,31,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32',
'32,32,32,32,32,32,,,32,,,,,,381,32,,,32,32,32,32,32,32,32,32,,32,32',
'32,,32,32,,,32,,381,381,381,381,381,381,381,381,381,381,381,,381,381',
',,381,381,32,,,32,,,32,32,,,32,,,,381,,381,,381,381,381,381,381,381',
'381,,381,,,32,32,32,32,,32,32,,,,32,32,,,381,32,381,,32,,32,873,873',
'873,,873,,,,873,873,,,,873,,873,873,873,873,873,873,873,,,,,,873,873',
'873,873,873,873,873,,,873,,,,,,,873,,,873,873,873,873,873,873,873,873',
'873,873,873,873,,873,873,873,873,873,,,,,,,,,,,,,,,,,,,,873,,,873,,',
'873,873,,,873,,873,,873,,873,,,,,,,,873,,,,,873,873,873,873,,873,873',
',,,873,873,,870,870,870,,870,873,,873,870,870,,,,870,,870,870,870,870',
'870,870,870,,,,,,870,870,870,870,870,870,870,,,870,,,,,,,870,,,870,870',
'870,870,870,870,870,870,,870,870,870,,870,870,870,870,870,,,,,,,,,,',
',,,,,,,,,870,,,870,,,870,870,,,870,,870,,870,,870,,,,,,,,870,,,,,870',
'870,870,870,,870,870,,,,870,870,,38,38,38,,38,870,,870,38,38,,,,38,',
'38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38',
'38,38,38,38,38,38,,38,38,38,,38,38,38,38,38,,,,,,,,,,,,,,,,,,,,38,,',
'38,,,38,38,,,38,,,,,,38,,,,,,,,38,,,,,38,38,38,38,,38,38,,,,38,38,,39',
'39,39,,39,38,,38,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39',
'39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,39',
'39,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39,,,,,,,,39,,,,',
'39,39,39,39,,39,39,,,,39,39,,40,40,40,,40,39,,39,40,40,,,,40,,40,40',
'40,40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40',
'40,40,40,40,,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40',
'40,,,40,,,,,,40,,,,,,,,40,,,,,40,40,40,40,,40,40,,,,40,40,,52,52,52',
',52,40,,40,52,52,,,,52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52',
'52,,,52,,,,,,,52,,,52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52',
',,,,,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,52,,,,,52,52',
'52,52,,52,52,,,,52,52,,53,53,53,,53,52,,52,53,53,,,,53,,53,53,53,53',
'53,53,53,,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53',
'53,53,53,53,53,53,,53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53',
',,53,,53,,,,53,,,,,,,,53,,,,,53,53,53,53,,53,53,,,,53,53,,54,54,54,',
'54,53,,53,54,54,,,,54,,54,54,54,54,54,54,54,,,,,,54,54,54,54,54,54,54',
',,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,54,,54,54,54,54,54',
',,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,,54,,,,,,,,54,,,,,54,54',
'54,54,,54,54,,,,54,54,,57,57,57,,57,54,,54,57,57,,,,57,,57,57,57,57',
'57,57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57,57,57',
'57,57,,57,57,57,,57,57,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,57,',
',57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,,57,57,,58,58,58,,58',
'57,,57,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,',
',58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,58,58,58,,,',
',,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58,58',
'58,,58,58,,,,58,58,,61,61,61,,61,58,,58,61,61,,,,61,,61,61,61,61,61',
'61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,389,,61,,,61,61,61,61,61,61',
'61,61,,61,61,61,,61,61,61,61,61,389,389,389,389,389,389,389,389,389',
'389,389,,389,389,,,389,389,,61,,,61,,,61,61,,,61,,,389,,389,61,389,389',
'389,389,389,389,389,61,389,,,,61,61,61,61,,61,61,,,,61,61,61,389,,,',
'61,61,,61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62',
'62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,,62,62,62',
',62,62,,883,62,883,883,883,883,883,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62',
',62,,,,883,,,,,,,,,883,883,883,883,62,62,62,62,,62,62,,,,62,62,,63,63',
'63,,63,62,,62,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,906',
'63,906,906,906,906,906,,,,,,,,,,,,63,,,63,,,63,,,63,63,,,63,,,,,,906',
',,,,,,,,906,906,906,906,63,63,63,63,,63,63,,,,63,63,,64,64,64,,64,63',
',63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64',
',,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,,756,64,756,756',
'756,756,756,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,756,,,,,,,,,756',
'756,756,756,64,64,64,64,,64,64,,,,64,64,,102,102,102,102,102,64,,64',
'102,102,,,,102,,102,102,102,102,102,102,102,,,,,,102,102,102,102,102',
'102,102,,,102,,,,,579,102,102,102,102,102,102,102,102,102,102,102,102',
',102,102,102,,102,102,102,102,102,579,579,579,579,579,579,579,579,579',
'579,579,,579,579,,,579,579,,102,,,102,,,102,102,,,102,,102,579,,579',
'102,579,579,579,579,579,579,579,102,579,,,,102,102,102,102,,102,102',
',,,102,102,,579,,,,102,102,,102,106,106,106,,106,,,,106,106,,,,106,',
'106,106,106,106,106,106,106,,,,,,106,106,106,106,106,106,106,,,106,',
',,,,,106,,,106,106,106,106,106,106,106,106,,106,106,106,,106,106,106',
'106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,,106,,,,,,106,,,,,,',
',106,,,,,106,106,106,106,,106,106,,,,106,106,,107,107,107,,107,106,',
'106,107,107,,,,107,,107,107,107,107,107,107,107,,,,,,107,107,107,107',
'107,107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,107,,107,107',
'107,,107,107,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,,,107,107,,,107',
',,,,,107,,,,,,,,107,,,,,107,107,107,107,,107,107,,,,107,107,,108,108',
'108,,108,107,,107,108,108,,,,108,,108,108,108,108,108,108,108,,,,,,108',
'108,108,108,108,108,108,,,108,,,,,,,108,,,108,108,108,108,108,108,108',
'108,,108,108,108,,108,108,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,',
',108,108,,,108,,,,,,108,,,,,,,,108,,,,,108,108,108,108,,108,108,,,,108',
'108,,109,109,109,,109,108,,108,109,109,,,,109,,109,109,109,109,109,109',
'109,,,,,,109,109,109,109,109,109,109,,,109,,,,,,,109,,,109,109,109,109',
'109,109,109,109,,109,109,109,,109,109,109,109,109,,,,,,,,,,,,,,,,,,',
',109,,,109,,,109,109,,,109,,,,,,109,,,,,,,,109,,,,,109,109,109,109,',
'109,109,,,,109,109,,110,110,110,110,110,109,,109,110,110,,,,110,,110',
'110,110,110,110,110,110,,,,,,110,110,110,110,110,110,110,,,110,,,,,',
'110,110,110,110,110,110,110,110,110,110,110,110,,110,110,110,,110,110',
'110,110,110,,,,,,,,,,,,,,,,,,,,110,,,110,,,110,110,,,110,,110,,,,110',
',,,,,,,110,,,,,110,110,110,110,,110,110,,,,110,110,,810,810,810,,810',
'110,,110,810,810,,,,810,,810,810,810,810,810,810,810,,,,,,810,810,810',
'810,810,810,810,,,810,,,,,,,810,,,810,810,810,810,810,810,810,810,,810',
'810,810,,810,810,,,810,,,,,,,,,,,,,,,,,,,,810,,,810,,,810,810,,,810',
',,,,,,,,,,,,,,,,,,810,810,810,810,,810,810,,,,810,810,,796,796,796,',
'796,810,,810,796,796,,,,796,,796,796,796,796,796,796,796,,,,,,796,796',
'796,796,796,796,796,,,796,,,,,,,796,,,796,796,796,796,796,796,796,796',
',796,796,796,,796,796,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796',
'796,,,796,,,,,,796,,,,,,,,796,,,,,796,796,796,796,,796,796,,,,796,796',
',197,197,197,,197,796,,796,197,197,,,,197,,197,197,197,197,197,197,197',
',,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197,197,197,197,197',
'197,197,197,,197,197,197,,197,197,197,197,197,,,,,,,,,,,,,,,,,,,,197',
',,197,,,197,197,,,197,,197,,,,197,,,,,,,,197,,,,,197,197,197,197,,197',
'197,,,,197,197,,198,198,198,,198,197,,197,198,198,,,,198,,198,198,198',
'198,198,198,198,,,,,,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198',
'198,198,198,198,198,198,198,,198,198,198,,198,198,198,198,198,,,,,,',
',,,,,,,,,,,,,198,,,198,,,198,198,,,198,,198,,,,198,,,,,,,,198,,,,,198',
'198,198,198,,198,198,,,,198,198,,199,199,199,,199,198,,198,199,199,',
',,199,,199,199,199,199,199,199,199,,,,,,199,199,199,199,199,199,199',
',,199,,,,,,,199,,,199,199,199,199,199,199,199,199,,199,199,199,,199',
'199,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199,,,,,,199',
',,,,,,,199,,,,,199,199,199,199,,199,199,,,,199,199,,200,200,200,,200',
'199,,199,200,200,,,,200,,200,200,200,200,200,200,200,,,,,,200,200,200',
'200,200,200,200,,,200,,,,,,,200,,,200,200,200,200,200,200,200,200,200',
'200,200,200,,200,200,200,200,200,,,,,,,,,,,,,,,,,,,,200,,,200,,,200',
'200,,,200,,200,,200,,200,,,,,,,,200,,,,,200,200,200,200,,200,200,,,',
'200,200,,205,205,205,,205,200,,200,205,205,,,,205,,205,205,205,205,205',
'205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205,205,205',
'205,205,205,205,205,,205,205,205,,205,205,205,205,205,,,,,,,,,,,,,,',
',,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205',
',205,205,,,,205,205,,206,206,206,,206,205,,205,206,206,,,,206,,206,206',
'206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,,,206',
',,206,206,206,206,206,206,206,206,,206,206,206,,206,206,206,206,206',
',,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,,,,,206,,,,,,,,206,,,',
',206,206,206,206,,206,206,,,,206,206,,207,207,207,,207,206,,206,207',
'207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207,207,207,207,207',
'207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207,,207,207,207,',
'207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,,',
',,207,,,,,,,,207,,,,,207,207,207,207,,207,207,,,,207,207,,208,208,208',
',208,207,,207,208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208',
'208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208',
',208,208,208,,208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208',
'208,,,208,,,,,,208,,,,,,,,208,,,,,208,208,208,208,,208,208,,,,208,208',
',209,209,209,,209,208,,208,209,209,,,,209,,209,209,209,209,209,209,209',
',,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209',
'209,209,209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209',
',,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209,209,,209,209',
',,,209,209,209,779,779,779,,779,209,,209,779,779,,,,779,,779,779,779',
'779,779,779,779,,,,,,779,779,779,779,779,779,779,,,779,,,,,,,779,,,779',
'779,779,779,779,779,779,779,,779,779,779,,779,779,779,779,779,,,,,,',
',,,,,,,,,,,,,779,,,779,,,779,779,,,779,,779,,,,779,,,,,,,,779,,,,,779',
'779,779,779,,779,779,,,,779,779,,269,269,269,,269,779,,779,269,269,',
',,269,,269,269,269,269,269,269,269,,,,,,269,269,269,269,269,269,269',
',,269,,,,,,,269,,,269,269,269,269,269,269,269,269,269,269,269,269,,269',
'269,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,,269,,269,,269',
',269,,,,,,,,269,,,,,269,269,269,269,,269,269,,,,269,269,,270,270,270',
',270,269,,269,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270',
'270,270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270',
'270,270,270,270,,270,270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,',
'270,270,,,270,,270,,270,,270,,,,,,,,270,,,,,270,270,270,270,,270,270',
',,,270,270,,278,278,278,,278,270,,270,278,278,,,,278,,278,278,278,278',
'278,278,278,,,,,,278,278,278,278,278,278,278,,,278,,,,,,,278,,,278,278',
'278,278,278,278,278,278,278,278,278,278,,278,278,278,278,278,,,,,,,',
',,,,,,,,,,,,278,,,278,,,278,278,,,278,,278,,278,,278,,,,,,,,278,,,,',
'278,278,278,278,,278,278,,,,278,278,278,731,731,731,,731,278,,278,731',
'731,,,,731,,731,731,731,731,731,731,731,,,,,,731,731,731,731,731,731',
'731,,,731,,,,,,,731,,,731,731,731,731,731,731,731,731,731,731,731,731',
',731,731,731,731,731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731,731,,,731,,731',
',731,,731,,,,,,,,731,,,,,731,731,731,731,,731,731,,,,731,731,,284,284',
'284,,284,731,,731,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284',
'284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284',
'284,,284,284,284,,284,284,,,284,491,491,491,491,491,491,491,491,491',
'491,491,,491,491,,,491,491,,284,,,284,,,284,284,,,284,,,491,,491,,491',
'491,491,491,491,491,491,,491,,,,284,284,284,284,,284,284,,,,284,284',
',491,,284,,,284,,284,728,728,728,,728,,,,728,728,,,,728,,728,728,728',
'728,728,728,728,,,,,,728,728,728,728,728,728,728,,,728,,,,,,,728,,,728',
'728,728,728,728,728,728,728,728,728,728,728,,728,728,728,728,728,,,',
',,,,,,,,,,,,,,,,728,,,728,,,728,728,,,728,,728,,728,,728,,,,,,,,728',
',,,,728,728,728,728,,728,728,,,,728,728,,716,716,716,,716,728,,728,716',
'716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716',
'716,,,716,,,,,,,716,,,716,716,716,716,716,716,716,716,,716,716,716,',
'716,716,716,716,716,,,,,,,,,,,,,,,,,,,,716,,,716,,,716,716,,,716,,,',
',,716,,,,,,,,716,,,,,716,716,716,716,,716,716,,,,716,716,,714,714,714',
',714,716,,716,714,714,,,,714,,714,714,714,714,714,714,714,,,,,,714,714',
'714,714,714,714,714,,,714,,,,,,,714,,,714,714,714,714,714,714,714,714',
',714,714,714,,714,714,714,714,714,,,,,,,,,,,,,,,,,,,,714,,,714,,,714',
'714,,,714,,,,,,714,,,,,,,,714,,,,,714,714,714,714,,714,714,,,,714,714',
',713,713,713,,713,714,,714,713,713,,,,713,,713,713,713,713,713,713,713',
',,,,,713,713,713,713,713,713,713,,,713,,,,,,,713,,,713,713,713,713,713',
'713,713,713,,713,713,713,,713,713,713,713,713,,,,,,,,,,,,,,,,,,,,713',
',,713,,,713,713,,,713,,,,,,713,,,,,,,,713,,,,,713,713,713,713,,713,713',
',,,713,713,,712,712,712,,712,713,,713,712,712,,,,712,,712,712,712,712',
'712,712,712,,,,,,712,712,712,712,712,712,712,,,712,,,,,,,712,,,712,712',
'712,712,712,712,712,712,,712,712,712,,712,712,712,712,712,,,,,,,,,,',
',,,,,,,,,712,,,712,,,712,712,,,712,,,,,,712,,,,,,,,712,,,,,712,712,712',
'712,,712,712,,,,712,712,,701,701,701,,701,712,,712,701,701,,,,701,,701',
'701,701,701,701,701,701,,,,,,701,701,701,701,701,701,701,,,701,,,,,',
',701,,,701,701,701,701,701,701,701,701,,701,701,701,,701,701,701,701',
'701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701,701,,,701,,,,,,701,,,,,,,,701',
',,,,701,701,701,701,,701,701,,,,701,701,,699,699,699,,699,701,,701,699',
'699,,,,699,,699,699,699,699,699,699,699,,,,,,699,699,699,699,699,699',
'699,,,699,,,,,,,699,,,699,699,699,699,699,699,699,699,,699,699,699,',
'699,699,699,699,699,,,,,,,,,,,,,,,,,,,,699,,,699,,,699,699,,,699,,,',
',,699,,,,,,,,699,,,,,699,699,699,699,,699,699,,,,699,699,,297,297,297',
',297,699,,699,297,297,,,,297,,297,297,297,297,297,297,297,,,,,,297,297',
'297,297,297,297,297,,,297,,,,,,,297,,,297,297,297,297,297,297,297,297',
',297,297,297,,297,297,,,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,',
',297,,,,,,,,,,,,,,,,,,,297,297,297,297,,297,297,,,,297,297,,671,671',
'671,,671,297,,297,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671',
'671,671,671,671,671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671',
'671,,671,671,671,,671,671,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,',
',671,671,,,671,,,,,,671,,,,,,,,671,,,,,671,671,671,671,,671,671,,,,671',
'671,,306,306,306,,306,671,,671,306,306,,,,306,,306,306,306,306,306,306',
'306,,,,,,306,306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306',
'306,306,306,306,,306,306,306,,306,306,306,306,306,,,,,,,,,,,,,,,,,,',
',306,,,306,306,,306,306,,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306',
',306,306,,,,306,306,,618,618,618,,618,306,,306,618,618,,,,618,,618,618',
'618,618,618,618,618,,,,,,618,618,618,618,618,618,618,,,618,,,,,,,618',
',,618,618,618,618,618,618,618,618,,618,618,618,,618,618,,,618,,,,,,',
',,,,,,,,,,,,,618,,,618,,,618,618,,,618,,,,,,,,,,,,,,,,,,,618,618,618',
'618,,618,618,,,,618,618,,322,322,322,,322,618,,618,322,322,,,,322,,322',
'322,322,322,322,322,322,,,,,,322,322,322,322,322,322,322,,,322,,,,,',
',322,,,322,322,322,322,322,322,322,322,,322,322,322,,322,322,322,322',
'322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322,,,322,,,,,,322,,,,,,,,322',
',,,,322,322,322,322,,322,322,,,,322,322,,323,323,323,,323,322,,322,323',
'323,,,,323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323',
'323,,,323,,,,,,,323,,,323,323,323,323,323,323,323,323,,323,323,323,',
'323,323,323,323,323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,,',
',,323,,,,,,,,323,,,,,323,323,323,323,,323,323,,,,323,323,,607,607,607',
',607,323,,323,607,607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607',
'607,607,607,607,607,,,607,,,,,,,607,,,607,607,607,607,607,607,607,607',
',607,607,607,,607,607,,,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,',
',607,,,,,,,,,,,,,,,,,,,607,607,607,607,,607,607,,,,607,607,,588,588',
'588,,588,607,,607,588,588,,,,588,,588,588,588,588,588,588,588,,,,,,588',
'588,588,588,588,588,588,,,588,,,,,,,588,,,588,588,588,588,588,588,588',
'588,,588,588,588,,588,588,588,588,588,,,,,,,,,,,,,,,,,,,,588,,,588,',
',588,588,,,588,,,,,,588,,,,,,,,588,,,,,588,588,588,588,,588,588,,,,588',
'588,,341,341,341,,341,588,,588,341,341,,,,341,,341,341,341,341,341,341',
'341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341,341',
'341,341,341,341,,341,341,341,,341,341,341,341,341,,,,,,,,,,,,,,,,,,',
',341,,,341,,,341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341,341,',
'341,341,,,,341,341,,571,571,571,,571,341,,341,571,571,,,,571,,571,571',
'571,571,571,571,571,,,,,,571,571,571,571,571,571,571,,,571,,,,,,,571',
',,571,571,571,571,571,571,571,571,,571,571,571,,571,571,571,571,571',
',,,,,,,,,,,,,,,,,,,571,,,571,,,571,571,,,571,,,,,,571,,,,,,,,571,,,',
',571,571,571,571,,571,571,,,,571,571,,568,568,568,,568,571,,571,568',
'568,,,,568,,568,568,568,568,568,568,568,,,,,,568,568,568,568,568,568',
'568,,,568,,,,,,,568,,,568,568,568,568,568,568,568,568,,568,568,568,',
'568,568,568,568,568,,,,,,,,,,,,,,,,,,,,568,,,568,,,568,568,,,568,,,',
',,568,,,,,,,,568,,,,,568,568,568,568,,568,568,,,,568,568,,564,564,564',
',564,568,,568,564,564,,,,564,,564,564,564,564,564,564,564,,,,,,564,564',
'564,564,564,564,564,,,564,,,,,,,564,,,564,564,564,564,564,564,564,564',
',564,564,564,,564,564,564,564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564',
'564,,,564,,,,,,564,,,,,,,,564,,,,,564,564,564,564,,564,564,,,,564,564',
',563,563,563,,563,564,,564,563,563,,,,563,,563,563,563,563,563,563,563',
',,,,,563,563,563,563,563,563,563,,,563,,,,,,,563,,,563,563,563,563,563',
'563,563,563,,563,563,563,,563,563,563,563,563,,,,,,,,,,,,,,,,,,,,563',
',,563,,,563,563,,,563,,,,,,563,,,,,,,,563,,,,,563,563,563,563,,563,563',
',,,563,563,,560,560,560,,560,563,,563,560,560,,,,560,,560,560,560,560',
'560,560,560,,,,,,560,560,560,560,560,560,560,,,560,,,,,,,560,,,560,560',
'560,560,560,560,560,560,,560,560,560,,560,560,560,560,560,,,,,,,,,,',
',,,,,,,,,560,,,560,,,560,560,,,560,,,,,,560,,,,,,,,560,,,,,560,560,560',
'560,,560,560,,,,560,560,,557,557,557,,557,560,,560,557,557,,,,557,,557',
'557,557,557,557,557,557,,,,,,557,557,557,557,557,557,557,,,557,,,,,',
',557,,,557,557,557,557,557,557,557,557,,557,557,557,,557,557,557,557',
'557,,,,,,,,,,,,,,,,,,,,557,,,557,,,557,557,,,557,,,,,,557,,,,,,,,557',
',,,,557,557,557,557,,557,557,,,,557,557,,356,356,356,,356,557,,557,356',
'356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356',
'356,,,356,,,,,,,356,,,356,356,356,356,356,356,356,356,,356,356,356,',
'356,356,356,356,356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,',
',,356,,,,,,,,356,,,,,356,356,356,356,,356,356,,,,356,356,,383,383,383',
',383,356,,356,383,383,,,,383,,383,383,383,383,383,383,383,,,,,,383,383',
'383,383,383,383,383,,,383,,,,,,,383,,,383,383,383,383,383,383,383,383',
',383,383,383,,383,383,383,383,383,,,,,,,,,,,,,,,,,,,,383,,,383,,,383',
'383,,,383,,,,,,383,,,,,,,,383,,,,,383,383,383,383,,383,383,,,,383,383',
',529,529,529,,529,383,,383,529,529,,,,529,,529,529,529,529,529,529,529',
',,,,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529',
'529,529,529,,529,529,529,,529,529,529,529,529,,,,,,,,,,,,,,,,,,,,529',
',,529,,,529,529,,,529,,,,,,529,,,,,,,,529,,,,,529,529,529,529,,529,529',
',,,529,529,,526,526,526,,526,529,,529,526,526,,,,526,,526,526,526,526',
'526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526,526',
'526,526,526,526,526,526,526,526,526,526,,526,526,526,526,526,,,,,,,',
',,,,,,,,,,,,526,,,526,,,526,526,,,526,,526,,526,,526,,,,,,,,526,,,,',
'526,526,526,526,,526,526,,,,526,526,,415,415,415,,415,526,,526,415,415',
',,,415,,415,415,415,415,415,415,415,,,,,,415,415,415,415,415,415,415',
',,415,,,,,,,415,,,415,415,415,415,415,415,415,415,415,415,415,415,,415',
'415,415,415,415,,,,,,,,,,,,,,,,,,,,415,,,415,,,415,415,,,415,,415,,415',
',415,,,,,,,,415,,,,,415,415,415,415,,415,415,,,,415,415,,417,417,417',
',417,415,,415,417,417,,,,417,,417,417,417,417,417,417,417,,,,,,417,417',
'417,417,417,417,417,,,417,,,,,,,417,,,417,417,417,417,417,417,417,417',
',417,417,417,,417,417,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417',
'417,,,417,,,,,,417,,,,,,,,417,,,,,417,417,417,417,,417,417,,,,417,417',
',418,418,418,,418,417,,417,418,418,,,,418,,418,418,418,418,418,418,418',
',,,,,418,418,418,418,418,418,418,,,418,,,,,,,418,,,418,418,418,418,418',
'418,418,418,,418,418,418,,418,418,418,418,418,,,,,,,,,,,,,,,,,,,,418',
',,418,,,418,418,,,418,,,,,,418,,,,,,,,418,,,,,418,418,418,418,,418,418',
',,,418,418,,419,419,419,,419,418,,418,419,419,,,,419,,419,419,419,419',
'419,419,419,,,,,,419,419,419,419,419,419,419,,,419,,,,,,,419,,,419,419',
'419,419,419,419,419,419,,419,419,419,,419,419,419,419,419,,,,,,,,,,',
',,,,,,,,,419,,,419,,,419,419,,,419,,,,,,419,,,,,,,,419,,,,,419,419,419',
'419,,419,419,,,,419,419,,516,516,516,,516,419,,419,516,516,,,,516,,516',
'516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516,,,516,,,,,',
',516,,,516,516,516,516,516,516,516,516,516,516,516,516,,516,516,516',
'516,516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,,516,,516,,516',
',,,,,,,516,,,,,516,516,516,516,,516,516,,,,516,516,,515,515,515,,515',
'516,,516,515,515,,,,515,,515,515,515,515,515,515,515,,,,,,515,515,515',
'515,515,515,515,,,515,,,,,,,515,,,515,515,515,515,515,515,515,515,,515',
'515,515,,515,515,515,515,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515',
',,515,,515,,,,515,,,,,,,,515,,,,,515,515,515,515,,515,515,,,,515,515',
',501,501,501,,501,515,,515,501,501,,,,501,,501,501,501,501,501,501,501',
',,,,,501,501,501,501,501,501,501,,,501,,,,,,,501,,,501,501,501,501,501',
'501,501,501,501,501,501,501,,501,501,501,501,501,,,,,,,,,,,,,,,,,,,',
'501,,,501,,,501,501,,,501,,,,,,501,,,,,,,,501,,,,,501,501,501,501,,501',
'501,,,,501,501,,498,498,498,,498,501,,501,498,498,,,,498,,498,498,498',
'498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,,,498,,,498',
'498,498,498,498,498,498,498,498,498,498,498,,498,498,498,498,498,,,',
',,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498,,498,,,,498,,,,,,,,498,,,',
',498,498,498,498,,498,498,,,,498,498,,494,494,494,,494,498,,498,494',
'494,,,,494,,494,494,494,494,494,494,494,,,,,,494,494,494,494,494,494',
'494,,,494,,,,,,,494,,,494,494,494,494,494,494,494,494,,494,494,494,',
'494,494,494,494,494,,,,,,,,,,,,,,,,,,,,494,,,494,,,494,494,,,494,,494',
',,,494,,,,,,,,494,,,,,494,494,494,494,,494,494,,,,494,494,,492,492,492',
',492,494,,494,492,492,,,,492,,492,492,492,492,492,492,492,,,,,,492,492',
'492,492,492,492,492,,,492,,,,,,,492,,,492,492,492,492,492,492,492,492',
',492,492,492,,492,492,492,492,492,,,,,,,,,,,,,,,,,,,,492,,,492,,,492',
'492,,,492,,,,,,492,,,,,,,,492,,,,,492,492,492,492,,492,492,,,,492,492',
',488,488,488,,488,492,,492,488,488,,,,488,,488,488,488,488,488,488,488',
',,,,,488,488,488,488,488,488,488,,,488,,,,,,,488,,,488,488,488,488,488',
'488,488,488,,488,488,488,,488,488,488,488,488,,,,,,,,,,,,,,,,,,,,488',
',,488,,,488,488,,,488,,,,,,488,,,,,,,,488,,,,,488,488,488,488,,488,488',
',,,488,488,,487,487,487,,487,488,,488,487,487,,,,487,,487,487,487,487',
'487,487,487,,,,,,487,487,487,487,487,487,487,,,487,,,,,,,487,,,487,487',
'487,487,487,487,487,487,,487,487,487,,487,487,487,487,487,,,,,,,,,,',
',,,,,,,,,487,,,487,,,487,487,,,487,,,,,,487,,,,,,,,487,,,,,487,487,487',
'487,,487,487,,,,487,487,,486,486,486,,486,487,,487,486,486,,,,486,,486',
'486,486,486,486,486,486,,,,,,486,486,486,486,486,486,486,,,486,,,,,',
',486,,,486,486,486,486,486,486,486,486,,486,486,486,,486,486,486,486',
'486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486,,,,,,486,,,,,,,,486',
',,,,486,486,486,486,,486,486,,,,486,486,,483,483,483,,483,486,,486,483',
'483,,,,483,,483,483,483,483,483,483,483,,,,,,483,483,483,483,483,483',
'483,,,483,,,,,,,483,,,483,483,483,483,483,483,483,483,,483,483,483,',
'483,483,,,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483,,,483,,,,,,,,,',
',,,,,,,,,483,483,483,483,,483,483,,,,483,483,,476,476,476,,476,483,',
'483,476,476,,,,476,,476,476,476,476,476,476,476,,,,,,476,476,476,476',
'476,476,476,,,476,,,,,,,476,,,476,476,476,476,476,476,476,476,476,476',
'476,476,,476,476,476,476,476,,,,,,,,,,,,,,,,,,,,476,,,476,,,476,476',
',,476,,476,,476,,476,,,,,,,,476,,,,,476,476,476,476,,476,476,,,,476',
'476,,474,474,474,,474,476,,476,474,474,,,,474,,474,474,474,474,474,474',
'474,,,,,,474,474,474,474,474,474,474,,,474,,,,,,,474,,,474,474,474,474',
'474,474,474,474,,474,474,474,,474,474,,,474,,,,,,,,,,,,,,,,,,,,474,',
',474,,,474,474,,,474,,,,,,,,,,,,,,,,,,,474,474,474,474,,474,474,,,,474',
'474,,464,464,464,,464,474,,474,464,464,,,,464,,464,464,464,464,464,464',
'464,,,,,,464,464,464,464,464,464,464,,,464,,,,,,,464,,,464,464,464,464',
'464,464,464,464,464,464,464,464,,464,464,464,464,464,597,597,597,597',
'597,597,597,597,597,597,597,,597,597,,,597,597,,464,,597,464,,,464,464',
',,464,,,597,464,597,464,597,597,597,597,597,597,597,464,597,,,,464,464',
'464,464,,464,464,,,,464,464,,597,,597,,,464,,464,554,554,554,554,554',
'554,554,554,554,554,554,554,554,554,554,554,554,554,554,554,554,554',
'554,554,,,,554,554,554,554,554,554,554,554,554,554,,,,,,554,554,554',
'554,554,554,554,554,554,,,554,,,,,,,,554,554,,554,554,554,554,554,554',
'554,,,554,554,,,,554,554,554,554,,,,,,,,,,,,,,554,554,,554,554,554,554',
'554,554,554,554,554,554,554,,,554,554,,,,,,,,,,,554,7,7,7,7,7,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,,7,7,7,7,7,7,7,7,7,7,,,,,,7,7,7,7',
'7,7,7,7,7,,,7,,,,,,,,7,7,,7,7,7,7,7,7,7,,,7,7,,,,7,7,7,7,,,,,,,,,,,',
',,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,,,,,,,,,,,7,6,6,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,6,6,6,6,6,6,6,,,,6,6,6,6,6,6,6,6,6,6,,,,,,6,6,6,6,6,6,6',
'6,6,6,,6,,,,,,,,6,6,,6,6,6,6,6,6,6,,,6,6,,,,6,6,6,6,,,,,,,,,,,,,,6,6',
',6,6,6,6,6,6,6,6,6,6,6,,,6,6,,,,,,,,,,,6,372,372,372,372,372,372,372',
'372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372,372',
',,,372,372,372,372,372,372,372,372,372,372,,,,,,372,372,372,372,372',
'372,372,372,372,,,372,,,,,,,,372,372,,372,372,372,372,372,372,372,,',
'372,372,,,,372,372,372,372,,,,,,,,,,,,,,372,372,,372,372,372,372,372',
'372,372,372,372,372,372,,,372,372,,,,,,,,,,,372,684,684,684,684,684',
'684,684,684,684,684,684,684,684,684,684,684,684,684,684,684,684,684',
'684,684,,,,684,684,684,684,684,684,684,684,684,684,,,,,,684,684,684',
'684,684,684,684,684,684,,,684,,,,,,,,684,684,,684,684,684,684,684,684',
'684,,,684,684,,,,684,684,684,684,,,,,,,,,,,,,,684,684,,684,684,684,684',
'684,684,684,684,684,684,684,,,684,65,65,65,65,65,65,65,65,65,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,,,,65,65,65,65,65,65,65,65,65,65',
',,,,,65,65,65,65,65,65,65,65,65,65,65,65,,65,,,,,,65,65,,65,65,65,65',
'65,65,65,,,65,65,,,,65,65,65,65,,,,,,65,,,,,,,,65,65,,65,65,65,65,65',
'65,65,65,65,65,65,414,414,65,,414,,,,,,,,414,414,,414,414,414,414,414',
'414,414,,,414,414,,,,414,414,414,414,,,,,,414,,,,,,,,414,414,,414,414',
'414,414,414,414,414,414,414,414,414,525,525,414,,525,,,,,,,,525,525',
',525,525,525,525,525,525,525,,,525,525,,,,525,525,525,525,,,,,,525,',
',,,,,,525,525,,525,525,525,525,525,525,525,525,525,525,525,201,201,525',
',201,,,,,,,,201,201,,201,201,201,201,201,201,201,,,201,201,,,,201,201',
'201,201,,,,,,201,,,,,,,,201,201,,201,201,201,201,201,201,201,201,201',
'201,201,413,413,201,,413,,,,,,,,413,413,,413,413,413,413,413,413,413',
',,413,413,,,,413,413,413,413,,,,,,413,,,,,,,,413,413,,413,413,413,413',
'413,413,413,413,413,413,413,915,915,413,,915,,,,,,,,915,915,,915,915',
'915,915,915,915,915,,,915,915,,,,915,915,915,915,,,,,,915,,,,,,,,915',
'915,,915,915,915,915,915,915,915,915,915,915,915,477,477,915,,477,,',
',,,,,477,477,,477,477,477,477,477,477,477,,,477,477,,,,477,477,477,477',
',,,,,477,,,,,,,,477,477,,477,477,477,477,477,477,477,477,477,477,477',
'478,478,477,,478,,,,,,,,478,478,,478,478,478,478,478,478,478,,,478,478',
',,,478,478,478,478,,,,,,478,,,,,,,,478,478,,478,478,478,478,478,478',
'478,478,478,478,478,490,490,478,,490,,,,,,,,490,490,,490,490,490,490',
'490,490,490,,,490,490,,,,490,490,490,490,,,,,,490,,,,,,,,490,490,,490',
'490,490,490,490,490,490,490,490,490,490,202,202,490,,202,,,,,,,,202',
'202,,202,202,202,202,202,202,202,,,202,202,,,,202,202,202,202,,,,,,202',
',,,,,,,202,202,,202,202,202,202,202,202,202,202,202,202,202,489,489',
'202,,489,,,,,,,,489,489,,489,489,489,489,489,489,489,,,489,489,,,,489',
'489,489,489,,,,,,489,,,,,,,,489,489,,489,489,489,489,489,489,489,489',
'489,489,489,877,877,489,,877,,,,,,,,877,877,,877,877,877,877,877,877',
'877,,,877,877,,,,877,877,877,877,,,,,,877,,,,,,,,877,877,,877,877,877',
'877,877,877,877,877,877,877,877,267,267,877,,267,,,,,,,,267,267,,267',
'267,267,267,267,267,267,,,267,267,,,,267,267,267,267,,,,,,,,,,,,,,267',
'267,,267,267,267,267,267,267,267,267,267,267,267,266,266,267,,266,,',
',,,,,266,266,,266,266,266,266,266,266,266,,,266,266,,,,266,266,266,266',
',,,,,,,,,,,,,266,266,,266,266,266,266,266,266,266,266,266,266,266,518',
'518,266,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,,,518,518,',
',,518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518,518,518,518',
'518,518,518,518,524,524,518,,524,,,,,,,,524,524,,524,524,524,524,524',
'524,524,,,524,524,,,,524,524,524,524,,,,,,524,,,,,,,,524,524,,524,524',
'524,524,524,524,524,524,524,524,524,878,878,524,,878,,,,,,,,878,878',
',878,878,878,878,878,878,878,,,878,878,,,,878,878,878,878,,,,,,878,',
',,,,,,878,878,,878,878,878,878,878,878,878,878,878,878,878,517,517,878',
',517,,,,,,,,517,517,,517,517,517,517,517,517,517,,,517,517,,,,517,517',
'517,517,,,,,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,517,517',
'517,517,,,517,19,19,19,19,19,19,19,19,19,19,19,,19,19,,,19,19,,,,,,',
',,,,,,,,19,,19,,19,19,19,19,19,19,19,,19,,251,251,251,251,251,251,251',
'251,251,251,251,,251,251,,19,251,251,,,,,,,,,,,,,,,251,,251,,251,251',
'251,251,251,251,251,,251,,406,406,406,406,406,406,406,406,406,406,406',
',406,406,,251,406,406,,,,,,,,,,,,,,,406,,406,,406,406,406,406,406,406',
'406,,406,,445,445,445,445,445,445,445,445,445,445,445,,445,445,,406',
'445,445,,,,,,,,,,,,,,,445,,445,,445,445,445,445,445,445,445,,445,,619',
'619,619,619,619,619,619,619,619,619,619,,619,619,445,445,619,619,,,',
',,,,,,,,,,,619,,619,,619,619,619,619,619,619,619,,619,,697,697,697,697',
'697,697,697,697,697,697,697,,697,697,,619,697,697,,,,,,,,,,,,,,,697',
',697,,697,697,697,697,697,697,697,,697,,700,700,700,700,700,700,700',
'700,700,700,700,,700,700,,697,700,700,,,,,,,,,,,,,,,700,,700,,700,700',
'700,700,700,700,700,,700,,704,704,704,704,704,704,704,704,704,704,704',
',704,704,,700,704,704,,,,,,,,,,,,,,,704,,704,,704,704,704,704,704,704',
'704,,704,,706,706,706,706,706,706,706,706,706,706,706,,706,706,,704',
'706,706,,,,,,,,,,,,,,,706,,706,,706,706,706,706,706,706,706,,706,,709',
'709,709,709,709,709,709,709,709,709,709,,709,709,,706,709,709,,,,,,',
',,,,,,,,709,,709,,709,709,709,709,709,709,709,,709,,711,711,711,711',
'711,711,711,711,711,711,711,,711,711,,709,711,711,,,,,,,,,,,,,,,711',
',711,,711,711,711,711,711,711,711,,711,,795,795,795,795,795,795,795',
'795,795,795,795,,795,795,,711,795,795,,,,,,,,,,,,,,,795,,795,,795,795',
'795,795,795,795,795,,795,,797,797,797,797,797,797,797,797,797,797,797',
',797,797,,795,797,797,,,,,,,,,,,,,,,797,,797,,797,797,797,797,797,797',
'797,,797,,,,,,,,,,,,,,,,,797' ]
        racc_action_check = arr = ::Array.new(23453, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3307,   995,   nil,    57,   771,  9682, 21345, 21221,   499,   495,
   435,   430,   477,   460,   396,   567,   nil,   -68, 10182, 22773,
   479,   nil, 10307, 10432, 10557,   235,   135,  1547,   749,   nil,
  5182, 10807, 10932,   nil,   347,   260,   297,   485, 11315, 11440,
 11565,   -66,   442,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1004,  3057, 11690, 11815, 11940,    67,   nil, 12065, 12190,   nil,
   nil, 12315, 12448, 12573, 12698, 21705,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   350,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   515,   nil,   nil,   385,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1164,   nil, 12823,   nil,   nil,   nil, 12956, 13081, 13206, 13331,
 13456,   891,   nil,   630,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1000,   nil,  2182,  2307, 13831, 13956, 14081,
 14206, 21885, 22245,   nil,   nil, 14331, 14456, 14581, 14706, 14831,
   nil,   nil,  1043,   -39,  1071,   154,   982,  1031,   nil,  5432,
  4557,  1024,  5682,  5807,  5932,  6057,  6182,  6307,  6432,  6557,
  6682,  6807,  6932,  7057,  7182,  7307,  7432,  7557,  7682,  7807,
  7932,  8057,  8182,  8307,  8432,  8557,  8682,  8807,   nil,   nil,
   nil, 22819,   nil,   967,   964,   nil,  9057,   998,  9307,   nil,
   nil,   nil,   nil,  9432,   nil,   nil, 22485, 22425,   973, 15081,
 15206,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 15331,   928,
  3432,   937,   961,   920, 15581,  2807,   661,   915,   973,   552,
   938,   884,   188,   nil,   909,   488,   865, 16589,   nil,   431,
   925,   922,   819,   nil,   921,   nil, 16839,   976,   966,    -3,
   nil,   -94,   351,   841,   810,   188,   802,   nil,   nil,   383,
    -8,    -9, 17089, 17214,   148,   856,   740,    85,   700,   805,
     1,   834,   nil,   nil,   694,   632,   -33,   nil,   786,   nil,
    14, 17589,   nil,   nil,   461,   -39,   491,   209,   359,   270,
   229,   570,   551,   nil,   495,   nil, 18464,   nil,   387,   382,
   255,   166,   -34,   -59,   nil,   865,   nil,   nil,   nil,   nil,
   nil,   nil, 21469,   nil,   nil,   nil,   nil,   670,   668,   nil,
   nil, 10933,   nil, 18589,   650,   nil,   637,   nil,   nil, 12315,
   638,   nil,   294,   444,  1422,   nil,   nil,   nil,   624,   663,
     0,   nil,   nil,  1213,   874,   nil, 22865,   nil,   nil,   nil,
    58,   nil,   658, 21945, 21765, 18964,   103, 19089, 19214, 19339,
  3057,  2932,   467,   342,   678,   676,   674,   673,  1321,  3932,
  3807,  2182,  3432,  3182,  2557,  2432,  3557,  2057,  3307,  2307,
  3682,   704,   764,  2807,  2682, 22911,   -47,   nil,  9932,   nil,
 10057,   nil,  9807,   nil,   nil,  1134,   nil,   nil,  1343,   nil,
   nil,   556,   nil,   nil, 20964,   -55,   -43,   558,   nil,   578,
   556,   nil,   nil,   583, 20839,   589, 20714, 22065, 22125,   913,
   629,   nil,   nil, 20589,   594,   nil, 20464, 20339, 20214, 22305,
 22185, 15581, 20089,   719, 19964,   nil,   611,   nil, 19839,   nil,
   nil, 19714,   nil,   nil,   nil,   nil,  1311,  4432,   729,   nil,
  4682,    54,    24,   730,   738, 19589, 19464, 22725, 22545,    61,
   nil,   nil,   578,   nil, 22605, 21825, 18839,   nil,   nil, 18714,
   269,    51,  3182,  1145,   nil,   nil,   nil,   -25,   nil,   nil,
   nil,   715,   nil,   nil,   nil,   663,   nil,   nil,   127,   nil,
   nil,   664,   nil,   nil, 21097,   nil,   nil, 18339,   671,  9557,
 18214,   180,   709, 18089, 17964,   708,   nil,   nil, 17839,   741,
   nil, 17714,   nil,   nil,   199,    86,   255,   125,   714, 12823,
   716,   nil,   318,   nil,  4057,   717,   nil,   761, 17464,   nil,
   nil,   nil,   nil,   nil,   nil,   -54,   nil, 20964,   -70,   735,
   nil,   739,   nil,  4807,  4932,   nil,    81, 17339,   744,   nil,
   751,   182,   278,   796,   214,  1068,   809,   780, 16964, 22957,
   853,   854,   -13,   916,   nil,  2557,   807,   850,   nil,   nil,
   nil,   344,    24,  1275,   807,   810,   826,   830,   nil,   nil,
   nil,   nil,   nil,   nil,   129,   911,   nil,   872,   nil,   nil,
   nil,   nil,   912,   nil,   nil,   914,   548,   nil,   952,   nil,
   nil,   nil,   nil,   962,   nil,    17,   847,    27,   -18,   155,
    25, 16714,   523,   949,   nil,   863,  2682,   433,   nil,   nil,
   984,  3557,  9195,   174, 21593,   nil,   nil,   nil,   nil,   nil,
   nil,  3807,   nil,   nil,   nil,   nil,   nil, 23003,   867, 16464,
 23049, 16339,   nil,   nil, 23095,   nil, 23141,   nil,   nil, 23187,
   nil, 23233, 16214, 16089, 15964,   134, 15839,   900,   905,   906,
   nil,   928,   906,   744,   220,   nil,  1030,   nil, 15714,   nil,
  2932, 15456,   nil,   nil,   926,   941,  1045,   933,   312,   nil,
   nil,   nil,  3682,   nil,   nil,   -10,  9182,   nil,   nil,   nil,
   nil,   nil,   958,   nil,   968,   nil, 12711,   nil,   nil,  1068,
  1039,  8932,   nil,   nil,  1004,   nil,   966,   378,  1012,   977,
   nil,   nil,  1096,   nil,  5557,  1106,  4307,  4182,   nil, 14956,
  3932,   -14,    55,   nil,  1119,   nil,  2057,   nil,  1129,  1014,
   nil,   nil,  1032,  1020,   nil, 23279, 13706, 23325,  1511,   nil,
  1610,   nil,   nil,  1131,   nil,  1046,  1026,   nil,   nil,   nil,
 13581,   nil,  1029,  1047,  1033,   nil,  1034,   nil,   nil,   nil,
   nil,  5057,    45,   166,  1110,    -7,   nil,  2432,  1932,   -35,
   -30,    44,   nil,   nil,   105,   112,   nil,   116,   nil,   nil,
   184,   623,   191,  1540,   nil,   nil,    16,   nil,   370,   378,
   nil,    32,   nil,   nil,   394,   nil,   nil, 10820,   nil,   281,
   308,   310,   317,   nil,   321,   nil,   840,   757,   411,   nil,
 11190,   nil,   nil, 11065,   nil,   479, 10682, 22365, 22665,    43,
   422,   527,   nil, 12461,   nil,   nil,  1733,   nil,  1829,   nil,
  1858,   nil,   nil,   nil,   445,  1487,   411,  1807,   nil,   nil,
   nil,   nil,   nil,  1682,   nil,  5307, 12586,   nil,   nil,  1954,
   nil,  1983,   nil,   nil,   nil, 22005,   nil,   447,   nil,   452,
    18,    32,   116,   147,   nil,   nil,   485,   510,   523,   524,
   527,  1426,   530,  1547,   262,   659,   660,   541,   543,   544,
   546,   592,   829,   nil,    44,   nil,  1340,   nil,   nil,   nil,
  1217,   885,   nil,   nil,   nil,   nil,  1704,   nil,   nil,   nil,
   886,  1022,  1024,   nil,   nil ]

racc_action_default = [
    -4,  -552,    -1,  -538,    -5,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -273,   -32,   -33,  -540,  -552,   -38,
   -40,   -41,  -283,  -319,  -320,   -45,  -248,  -248,  -248,   -58,
    -4,   -62,   -70,   -72,  -552,  -465,  -552,  -552,  -552,  -552,
  -552,  -540,  -225,  -266,  -267,  -268,  -269,  -270,  -271,  -272,
  -526,    -4,  -552,  -551,  -518,  -291,  -293,  -552,  -552,  -297,
  -300,  -538,  -552,  -552,  -552,  -552,  -321,  -322,  -324,  -325,
  -414,  -415,  -416,  -417,  -418,  -433,  -421,  -422,  -435,  -437,
  -426,  -431,  -447,  -435,  -449,  -450,  -524,  -454,  -455,  -525,
  -457,  -458,  -459,  -460,  -461,  -462,  -463,  -464,  -467,  -468,
  -552,    -3,  -539,  -547,  -548,  -549,  -552,  -552,  -552,  -552,
  -552,    -7,    -8,  -552,   -99,  -100,  -101,  -102,  -103,  -104,
  -105,  -106,  -107,  -111,  -112,  -113,  -114,  -115,  -116,  -117,
  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,   -13,  -108,    -4,    -4,  -552,  -552,  -552,
  -234,  -552,  -552,  -536,  -537,  -552,  -552,  -552,  -552,  -540,
  -541,   -37,  -552,  -465,  -552,  -273,  -552,  -552,  -217,  -552,
    -4,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -384,  -386,
   -42,  -226,  -236,  -258,  -258,  -241,  -552,  -259,  -552,  -283,
  -319,  -320,  -520,  -552,   -43,   -44,  -552,  -552,   -50,  -234,
  -552,  -290,  -389,  -398,  -400,   -56,  -395,   -57,  -540,   -60,
    -4,  -540,  -552,   -63,   -66,    -4,   -78,  -552,  -552,   -85,
  -286,  -540,  -552,  -323,  -396,  -552,   -68,  -552,   -74,  -280,
  -451,  -452,  -552,  -202,  -203,  -218,  -552,  -406,  -552,  -276,
  -227,  -544,  -544,  -552,  -552,  -544,  -552,  -292,  -376,   -39,
  -552,  -552,  -552,  -552,  -538,  -552,  -539,  -465,  -552,  -552,
  -273,  -552,  -335,  -336,   -94,   -95,  -552,   -97,  -552,  -273,
  -552,  -552,  -465,  -312,   -99,  -100,  -140,  -141,  -142,  -158,
  -163,  -170,  -173,  -314,  -552,  -516,  -552,  -419,  -552,  -552,
  -552,  -552,  -552,  -552,   965,    -6,  -550,   -14,   -15,   -16,
   -17,   -18,  -552,   -10,   -11,   -12,  -109,  -552,  -552,   -21,
   -29,  -181,  -259,  -552,  -552,   -22,   -30,   -31,   -23,  -183,
  -540,  -235,  -527,  -528,  -248,  -393,  -529,  -530,  -527,  -248,
  -528,  -392,  -394,  -529,  -530,   -28,  -191,   -34,   -35,   -36,
  -540,  -289,  -552,  -552,  -552,  -234,  -280,  -552,  -552,  -552,
  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -204,  -205,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,
  -216,  -219,  -220,  -221,  -222,  -540,  -365,  -237,  -257,  -238,
  -257,  -255,  -552,  -260,  -523,  -248,  -527,  -528,  -248,   -48,
   -51,  -540,  -249,  -250,  -251,  -365,  -365,  -540,  -285,  -540,
   -59,  -278,   -75,   -64,  -552,  -540,  -234,  -552,  -552,   -84,
  -552,  -451,  -452,  -552,   -71,   -76,  -552,  -552,  -552,  -552,
  -552,  -223,  -552,  -551,  -551,  -275,  -540,  -228,  -546,  -545,
  -230,  -546,  -281,  -282,  -519,  -294,  -488,    -4,  -326,  -327,
    -4,  -552,  -552,  -552,  -552,  -552,  -234,  -552,  -552,  -280,
  -305,   -94,   -95,   -96,  -552,  -552,  -234,  -308,  -469,  -552,
  -552,  -552,    -4,  -488,  -316,  -534,  -535,  -540,  -420,  -434,
  -439,  -552,  -441,  -423,  -436,  -552,  -438,  -425,  -552,  -428,
  -430,  -552,  -448,    -9,  -552,   -19,   -20,  -552,  -265,  -552,
  -552,  -397,  -552,  -552,  -552,   -52,  -233,  -390,  -552,   -54,
  -391,  -552,  -288,  -542,  -527,  -528,  -527,  -528,  -540,  -181,
  -552,  -366,  -370,  -368,    -4,  -258,  -256,  -261,  -552,  -521,
  -522,   -46,  -387,   -47,  -388,  -365,  -231,   -38,  -552,  -258,
  -247,  -540,  -253,    -4,    -4,  -284,   -61,  -552,   -67,   -73,
  -540,  -527,  -528,  -232,  -531,   -83,  -552,   -69,  -552,  -190,
  -200,  -201,  -540,  -551,  -333,    -4,  -407,  -551,  -408,  -409,
  -277,  -544,  -552,  -488,  -370,  -515,  -515,  -515,  -487,  -489,
  -490,  -491,  -492,  -493,  -494,  -552,  -497,  -552,  -499,  -505,
  -507,  -508,  -510,  -511,  -512,  -552,  -551,  -328,  -551,  -298,
  -329,  -330,  -301,  -552,  -304,  -552,  -540,  -527,  -528,  -531,
  -279,  -552,   -94,   -95,   -98,  -540,    -4,  -552,  -471,  -310,
  -552,    -4,  -488,  -552,  -552,  -517,  -440,  -443,  -444,  -445,
  -446,    -4,  -424,  -427,  -429,  -432,  -110,  -182,  -263,  -552,
  -184,  -552,  -543,   -25,  -186,   -26,  -187,   -53,   -27,  -188,
   -55,  -189,  -552,  -552,  -552,  -397,  -552,  -515,  -515,  -515,
  -364,  -552,  -370,  -552,  -494,  -503,  -552,  -239,  -257,  -262,
    -4,  -552,  -244,  -252,  -540,  -552,  -552,   -65,  -397,   -77,
  -287,    -2,    -4,  -413,  -334,  -552,  -552,  -411,  -229,  -377,
  -380,  -382,  -370,  -379,  -552,  -480,  -552,  -483,  -485,  -552,
  -552,  -552,  -496,  -337,  -552,  -339,  -341,  -348,  -494,  -540,
  -509,  -513,  -552,  -331,  -552,  -552,    -4,    -4,  -303,  -552,
    -4,  -397,  -552,  -397,  -552,  -470,    -4,  -313,  -552,  -540,
  -473,  -317,  -552,  -264,   -24,  -185,  -552,  -224,  -355,  -357,
  -552,  -360,  -362,  -552,  -367,  -552,  -371,  -372,  -374,  -375,
  -552,  -385,  -258,  -552,  -258,  -243,  -258,  -254,  -399,  -401,
  -412,    -4,  -465,  -552,  -552,  -273,  -410,    -4,    -4,  -540,
  -515,  -515,  -500,  -514,  -515,  -515,  -506,  -515,  -495,  -501,
  -540,  -552,  -346,  -552,  -498,  -295,  -552,  -296,  -552,  -552,
  -261,  -551,  -306,  -309,  -552,  -315,  -472,  -488,  -442,  -515,
  -515,  -515,  -515,  -504,  -515,  -369,  -552,  -502,  -552,  -240,
  -257,   -49,  -242,  -257,  -245,  -406,  -234,  -552,  -552,  -280,
  -552,  -552,  -378,  -552,  -476,  -478,  -552,  -481,  -552,  -484,
  -552,  -486,  -338,  -340,  -344,  -552,  -349,    -4,  -299,  -302,
  -402,  -403,  -404,    -4,  -311,    -4,  -552,  -352,  -354,  -552,
  -358,  -552,  -361,  -363,  -373,  -552,  -280,  -258,  -405,  -540,
  -527,  -528,  -531,  -279,  -381,  -383,  -515,  -515,  -515,  -515,
  -342,  -552,  -347,  -552,  -551,  -552,  -552,  -515,  -515,  -515,
  -515,  -279,  -531,  -246,  -397,  -474,  -552,  -477,  -479,  -482,
  -552,  -345,  -332,  -307,  -318,  -350,  -552,  -353,  -356,  -359,
  -515,  -343,  -515,  -475,  -351 ]

clist = [
'117,117,308,35,390,208,272,276,35,312,315,493,514,561,311,623,201,252',
'252,252,353,10,447,449,105,681,10,283,266,306,122,122,772,35,286,286',
'507,510,719,12,523,310,101,589,12,211,120,120,807,112,194,10,309,718',
'35,296,763,319,319,117,634,319,484,460,896,327,342,342,342,12,638,809',
'10,461,268,275,277,497,500,394,399,504,105,332,836,380,387,320,321,111',
'12,324,893,279,589,534,281,638,659,662,325,769,250,264,265,35,319,319',
'319,319,496,721,539,35,546,549,932,832,586,318,586,863,359,10,293,293',
'592,363,584,594,322,10,340,343,600,776,367,368,369,370,323,12,777,671',
'455,458,720,603,604,12,903,676,951,786,532,293,293,293,384,384,533,832',
'684,753,857,554,722,595,1,372,333,961,193,763,806,632,842,749,506,102',
'775,395,249,827,893,828,365,752,446,465,316,914,466,900,371,252,404',
'638,35,35,663,715,627,745,357,358,407,408,409,410,831,836,834,360,809',
'413,10,10,840,578,361,548,362,35,379,385,388,863,674,686,691,830,405',
'738,12,12,789,355,741,608,314,10,317,505,734,601,638,462,617,602,763',
'805,763,832,860,331,861,527,313,12,354,,,,252,252,,,,859,,,272,252,276',
',,730,,480,610,829,,35,,,,286,35,781,477,394,399,485,,2,,,783,,286,10',
'694,930,763,489,10,473,,,952,,,,,,,,,12,666,589,319,319,12,282,,,,,675',
'517,,382,386,,,,,926,763,531,763,279,,105,469,,279,905,463,475,511,512',
'727,613,537,535,467,763,707,528,937,513,710,,117,613,732,852,,,737,901',
'566,,,293,562,570,,780,628,,,,,,,,293,,451,395,453,613,122,748,586,454',
',815,,613,585,,,,404,,252,,120,,,553,,,,,599,638,,,,,,,,,411,,,580,',
'566,,,566,,,,565,,,,,569,,,,,,,631,384,,395,,,,821,,14,309,,,,14,395',
'485,252,404,,,,665,286,,485,,,629,680,404,,286,,,,377,378,622,14,289',
'289,,395,,468,,,470,591,,395,593,,,,35,252,404,35,14,282,,,404,558,',
'252,,,,330,339,339,10,319,,10,660,660,,35,,,902,,586,,944,586,,,12,',
'117,12,,678,679,10,,,,,,677,,,897,,717,14,562,293,,,,12,,14,,282,293',
',122,918,282,869,,872,587,874,316,35,590,,703,705,,566,120,708,570,696',
'562,,598,,,485,,10,35,35,,,286,743,,,739,747,,,,,,286,,12,10,10,,784',
'35,,626,572,788,,587,,,316,,791,,,12,12,,,10,,,,,382,,,562,,,,14,14',
',,,562,12,,,,,,,319,,,,,,,117,35,919,,596,14,35,,943,816,605,812,606',
',814,,35,698,609,10,785,,293,782,10,,790,,,,,,,293,10,,,12,,630,,,12',
',,,729,,,,794,,12,,,35,,,,854,835,,,837,,14,,35,,289,14,822,,10,,,,613',
',,685,,289,,,10,,,,826,,12,,,,,319,,,,,35,35,12,862,35,,864,,,,35,,',
',,,,,10,10,,,10,656,660,846,658,,10,,,,,,342,,12,12,,,12,,,733,13,35',
'12,877,,13,917,35,35,,,,793,,,,293,,212,10,740,,212,212,212,10,10,,',
',13,287,287,936,395,,,12,,,,,927,12,12,928,,929,252,404,,13,212,,,,726',
'212,212,,,212,328,338,338,938,,,939,,940,,,,839,735,736,35,,,293,,,35',
'562,35,404,,,,,,850,,,10,,744,,,,10,13,10,,960,212,212,212,212,13,,',
'12,289,962,,,,12,,12,,289,,,,,,,,,817,,,,,,,,,,,,,,,14,,,14,,755,757',
'758,,,,,,,,,792,,,,844,,,,,14,,,,,,,,,690,,850,,,587,856,,,,,,,,13,13',
'212,212,212,212,,813,,,212,212,212,212,212,,,,,820,,,,,,13,,,,14,,,882',
',,,,,,799,801,802,,892,,,,,14,14,,,289,848,849,,,851,,,,,,289,,,,,,',
'14,,,,212,212,,,,,,,,212,,13,,,,287,13,,,,,,,,875,,,,287,,880,881,,',
',,,,,,,,,,,,,14,,,,,14,212,212,,,,,,,,14,,,,,,,,,,212,,,,,,884,885,',
',887,889,,891,,212,,,,,,,,,,,,,934,14,,,,,935,907,908,910,912,26,913',
'14,,,26,825,,,,,,,,,,,,26,,,,26,26,26,,,,,,26,,,,,212,14,14,,,14,,,',
',,14,,,,,26,26,,,,,26,26,,,26,,945,947,948,949,,,,339,,,,955,957,958',
'959,,,,14,,,212,,,14,14,,,,,,287,,212,963,,964,,,26,287,,,26,26,26,26',
'26,,212,,,,,,,,,,,,,,,13,,,13,,,,,,212,,,,,,,,,,212,,,212,,,13,,,,,14',
',,,,,14,,14,,,,,,,,,,,,,,,,,,212,212,,,,212,,,,,,,26,26,26,26,26,26',
',,,13,26,26,26,26,26,,,,,,,,,,,26,,,13,13,,,287,,,,,,,,,,,287,,,,,,',
'13,,,,,,,,,,,,,,,,,,,,,,,,26,26,,,,,,,,26,,26,,,,,26,,,,,,212,,,,,13',
',,,,13,,,,,,,,,,13,,,,,,,,,,212,26,26,,,,,,,,,,,,,,,,,,26,,,,,,,,,13',
',,,,,26,,,,,,13,,,,823,,,,,,,,,,,,,,,,,,,,,,,,,,,,212,,13,13,,,13,,',
',,,13,,,,,,,,,26,,,,,,,,,,,,,,,867,,218,,,,251,251,251,,,13,,,,,,13',
'13,,,,303,304,305,,,,,,,,,,26,,,251,251,,,,,,,,26,,,,,,,,,,,,,,,,26',
',,,212,,,,,,,,,,,26,,,26,,,,,,26,13,,,,,,13,,13,26,,,26,,,26,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,26,26,,,,26,,,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,',
',,,26,26,,,,,,,381,251,389,251,,,,,406,,,,,,26,,,,,,,,218,,,420,421',
'422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438',
'439,440,441,442,443,444,445,,,,,,,,,251,26,251,,,,26,251,,,,26,,251',
'251,,,,,,,26,251,,,,,,,,,26,,,,,,,,,,,,,,,,,,,491,,,,,,,,,,26,,,,,,',
',,,,,26,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,26,26,,,26,,,,,,26,,,,,,',
',,,,251,,,,,,,,,,,,,,,,,,,,,,,,26,,,,,,26,26,251,,406,579,389,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,251,,251,,251,,,,,,,,,,26,,597,,,,,,,,,,,,251',
',,,,,,26,,,619,620,621,26,,26,,,251,,,,251,,,251,,,,,,,,,,,,,,251,251',
',,,,,,,,,251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,697,,251,700,,,704,706,,',
',709,,,711,,,,,,,,,,,,,,,,,251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,251,,795,,,,,,,,,,,704,706,709,,797,,,,,,,,,,,,251,,,251,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,251,,,,,,,,,,,,,,,,,,251,,,,,,,,,,,,,,,,,795',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,251,,,251,,,251' ]
        racc_goto_table = arr = ::Array.new(2494, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'50,50,3,46,19,27,62,62,46,61,61,4,85,20,59,5,21,29,29,29,49,14,64,64',
'89,91,14,43,21,27,54,54,83,46,46,46,82,82,115,17,47,58,8,155,17,15,53',
'53,121,11,11,14,25,114,46,44,109,25,25,50,126,25,45,35,111,46,46,46',
'46,17,117,122,14,19,34,34,34,60,60,33,33,60,89,14,151,23,23,13,13,9',
'17,13,108,39,155,93,40,117,84,84,8,110,31,31,31,46,25,25,25,25,94,119',
'145,46,145,145,111,150,65,95,65,152,141,14,56,56,63,141,36,63,96,14',
'48,48,65,97,13,13,13,13,98,17,99,100,33,33,117,36,36,17,101,102,111',
'103,104,56,56,56,59,59,105,150,106,119,107,55,112,37,1,26,16,111,12',
'109,120,123,109,124,125,10,5,62,127,128,108,129,9,126,130,132,24,121',
'133,134,9,29,50,117,46,46,85,20,135,136,139,140,25,25,25,25,115,151',
'115,142,122,21,14,14,110,19,143,144,146,46,15,15,15,152,47,147,148,149',
'15,20,17,17,126,77,6,45,78,14,79,81,70,69,117,67,45,66,109,119,109,150',
'115,86,115,88,57,17,92,,,,29,29,,,,114,,,62,29,62,,,36,,27,19,119,,46',
',,,46,46,20,21,33,33,43,,2,,,20,,46,14,145,109,109,21,14,44,,,83,,,',
',,,,,17,19,155,25,25,17,2,,,,,19,21,,24,24,,,,,115,109,25,109,39,,89',
'40,,39,91,31,40,13,13,64,33,25,21,31,109,35,89,115,8,35,,50,33,64,84',
',,45,5,62,,,56,27,62,,82,23,,,,,,,,56,,24,62,24,33,54,60,65,24,,65,',
'33,61,,,,50,,29,,53,,,11,,,,,61,117,,,,,,,,,41,,,27,,62,,,62,,,,34,',
',,,34,,,,,,,61,59,,62,,,,82,,22,25,,,,22,62,43,29,50,,,,59,46,,43,,',
'58,3,50,,46,,,,2,2,25,22,22,22,,62,,41,,,41,34,,62,34,,,,46,29,50,46',
'22,2,,,50,24,,29,,,,22,22,22,14,25,,14,89,89,,46,,,85,,65,,20,65,,,17',
',50,17,,89,89,14,,,,,,13,,,82,,113,22,27,56,,,,17,,22,,2,56,,54,4,2',
'64,,64,24,64,24,46,24,,15,15,,62,53,15,62,11,27,,24,,,43,,14,46,46,',
',46,58,,,43,58,,,,,,46,,17,14,14,,3,46,,24,41,3,,24,,,24,,49,,,17,17',
',,14,,,,,24,,,27,,,,22,22,,,,27,17,,,,,,,25,,,,,,,50,46,19,,41,22,46',
',64,61,41,59,41,,59,,46,24,41,14,89,,56,13,14,,89,,,,,,,56,14,,,17,',
'41,,,17,,,,24,,,,15,,17,,,46,,,,3,113,,,113,,22,,46,,22,22,46,,14,,',
',33,,,41,,22,,,14,,,,14,,17,,,,,25,,,,,46,46,17,113,46,,113,,,,46,,',
',,,,,14,14,,,14,2,89,13,2,,14,,,,,,46,,17,17,,,17,,,41,18,46,17,21,',
'18,61,46,46,,,,24,,,,56,,18,14,41,,18,18,18,14,14,,,,18,18,18,3,62,',
',17,,,,,113,17,17,113,,113,29,50,,18,18,,,,2,18,18,,,18,18,18,18,113',
',,113,,113,,,,24,2,2,46,,,56,,,46,27,46,50,,,,,,24,,,14,,2,,,,14,18',
'14,,113,18,18,18,18,18,,,17,22,113,,,,17,,17,,22,,,,,,,,,41,,,,,,,,',
',,,,,,22,,,22,,116,116,116,,,,,,,,,2,,,,41,,,,,22,,,,,,,,,22,,24,,,24',
'41,,,,,,,,18,18,18,18,18,18,,2,,,18,18,18,18,18,,,,,2,,,,,,18,,,,22',
',,41,,,,,,,116,116,116,,41,,,,,22,22,,,22,2,2,,,2,,,,,,22,,,,,,,22,',
',,18,18,,,,,,,,18,,18,,,,18,18,,,,,,,,2,,,,18,,2,2,,,,,,,,,,,,,,,,22',
',,,,22,18,18,,,,,,,,22,,,,,,,,,,18,,,,,,116,116,,,116,116,,116,,18,',
',,,,,,,,,,,2,22,,,,,2,116,116,116,116,38,116,22,,,38,22,,,,,,,,,,,,38',
',,,38,38,38,,,,,,38,,,,,18,22,22,,,22,,,,,,22,,,,,38,38,,,,,38,38,,',
'38,,116,116,116,116,,,,22,,,,116,116,116,116,,,,22,,,18,,,22,22,,,,',
',18,,18,116,,116,,,38,18,,,38,38,38,38,38,,18,,,,,,,,,,,,,,,18,,,18',
',,,,,18,,,,,,,,,,18,,,18,,,18,,,,,22,,,,,,22,,22,,,,,,,,,,,,,,,,,,18',
'18,,,,18,,,,,,,38,38,38,38,38,38,,,,18,38,38,38,38,38,,,,,,,,,,,38,',
',18,18,,,18,,,,,,,,,,,18,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,,38,38,,,,,',
',,38,,38,,,,,38,,,,,,18,,,,,18,,,,,18,,,,,,,,,,18,,,,,,,,,,18,38,38',
',,,,,,,,,,,,,,,,,38,,,,,,,,,18,,,,,,38,,,,,,18,,,,18,,,,,,,,,,,,,,,',
',,,,,,,,,,,,18,,18,18,,,18,,,,,,18,,,,,,,,,38,,,,,,,,,,,,,,,18,,28,',
',,28,28,28,,,18,,,,,,18,18,,,,28,28,28,,,,,,,,,,38,,,28,28,,,,,,,,38',
',,,,,,,,,,,,,,,38,,,,18,,,,,,,,,,,38,,,38,,,,,,38,18,,,,,,18,,18,38',
',,38,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,38,,,,38,,,,,,,,,,,,,,,,38',
',,,,,,,,,,,,,,,,,,38,38,,,,,,,28,28,28,28,,,,,28,,,,,,38,,,,,,,,28,',
',28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,,,,,,,,,28,38,28,,,,38,28,,,,38,,28,28,,,,,,,38,28,,,,,,,,',
'38,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,38,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,38,,38,38,,,38,,,,,,38,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,',
',,,,38,,,,,,38,38,28,,28,28,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,,28',
',,,,,,,,,38,,28,,,,,,,,,,,,28,,,,,,,38,,,28,28,28,38,,38,,,28,,,,28',
',,28,,,,,,,,,,,,,,28,28,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28',
',28,28,,,28,28,,,,28,,,28,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,28,,28,,,,,,,,,,,28,28,28,,28,,,,,,,,,,,,28,,,28',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,',
'28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,28,,,28,,,28' ]
        racc_goto_check = arr = ::Array.new(2494, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   168,   295,   -49,  -296,  -478,  -385,   nil,    39,    84,
   176,    43,   165,    30,    21,    27,   108,    39,   823,  -196,
  -377,     3,   463,  -112,   136,     0,    57,   -12,  1617,    -5,
   nil,    80,   nil,  -122,    48,  -205,  -318,  -292,  1203,    63,
    66,   221,   nil,    -4,    23,  -235,     3,  -296,    69,   -45,
    -6,   nil,   nil,    40,    24,  -211,    93,   205,   -12,   -39,
  -234,   -44,   -20,  -329,  -231,  -330,  -215,   -23,   nil,  -219,
  -358,   nil,   nil,   nil,   nil,   nil,   nil,   172,   186,   187,
   nil,   -75,  -284,  -624,  -413,  -313,   193,   nil,   -83,    21,
   nil,  -508,   195,  -259,  -199,    63,    71,  -524,    80,  -520,
  -377,  -702,  -376,  -526,  -189,  -193,  -372,  -627,  -749,  -591,
  -546,  -779,  -416,   -18,  -529,  -544,   340,  -436,   nil,  -471,
  -549,  -675,  -652,  -331,  -455,  -140,  -446,   162,  -567,  -566,
   -60,   nil,   -84,   -82,  -658,  -292,  -424,   nil,   nil,   131,
   130,    44,   134,   140,  -140,  -246,   141,  -312,  -312,  -523,
  -637,  -672,  -679,   nil,   nil,  -407 ]

racc_goto_default = [
   nil,   nil,   307,   nil,   nil,   773,   nil,     3,   nil,     4,
   326,   nil,   nil,   nil,   216,    16,    11,   217,   302,   nil,
   nil,   525,   215,   nil,   257,    15,   nil,   412,    19,    20,
    21,   391,    25,   616,   nil,   nil,   nil,   nil,   292,    29,
   nil,   nil,    31,    34,    33,   nil,   213,   337,   nil,   119,
   397,   118,   121,    71,    72,   nil,    42,   nil,   624,   253,
   nil,   254,   402,   567,   nil,   255,   nil,   nil,   270,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,   nil,   271,
    55,   nil,   nil,   nil,   nil,   nil,   nil,    63,   nil,   508,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   765,   646,
   nil,   766,   nil,   635,   nil,   637,   nil,   833,   581,   nil,
   nil,   nil,   643,   nil,   nil,   nil,   683,   nil,   nil,   nil,
   nil,   401,   nil,   nil,   nil,   nil,   nil,    70,    73,    74,
   nil,   nil,   nil,   nil,   nil,   544,   nil,   nil,   nil,   636,
   648,   649,   725,   652,   655,   262 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 139, :_reduce_none,
  4, 141, :_reduce_2,
  2, 140, :_reduce_3,
  0, 145, :_reduce_4,
  1, 145, :_reduce_5,
  3, 145, :_reduce_6,
  2, 145, :_reduce_7,
  0, 164, :_reduce_8,
  4, 147, :_reduce_9,
  3, 147, :_reduce_10,
  3, 147, :_reduce_11,
  3, 147, :_reduce_12,
  2, 147, :_reduce_13,
  3, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_16,
  3, 147, :_reduce_17,
  3, 147, :_reduce_18,
  4, 147, :_reduce_19,
  4, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  6, 147, :_reduce_24,
  5, 147, :_reduce_25,
  5, 147, :_reduce_26,
  5, 147, :_reduce_27,
  3, 147, :_reduce_28,
  3, 147, :_reduce_29,
  3, 147, :_reduce_30,
  3, 147, :_reduce_31,
  1, 147, :_reduce_none,
  1, 163, :_reduce_none,
  3, 163, :_reduce_34,
  3, 163, :_reduce_35,
  3, 163, :_reduce_36,
  2, 163, :_reduce_37,
  1, 163, :_reduce_none,
  1, 151, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_42,
  2, 153, :_reduce_43,
  2, 153, :_reduce_44,
  1, 168, :_reduce_none,
  4, 168, :_reduce_46,
  4, 168, :_reduce_47,
  0, 175, :_reduce_48,
  5, 173, :_reduce_49,
  2, 167, :_reduce_50,
  3, 167, :_reduce_51,
  4, 167, :_reduce_52,
  5, 167, :_reduce_53,
  4, 167, :_reduce_54,
  5, 167, :_reduce_55,
  2, 167, :_reduce_56,
  2, 167, :_reduce_57,
  1, 154, :_reduce_58,
  3, 154, :_reduce_59,
  1, 178, :_reduce_60,
  3, 178, :_reduce_61,
  1, 177, :_reduce_none,
  2, 177, :_reduce_63,
  3, 177, :_reduce_64,
  5, 177, :_reduce_65,
  2, 177, :_reduce_66,
  4, 177, :_reduce_67,
  2, 177, :_reduce_68,
  4, 177, :_reduce_69,
  1, 177, :_reduce_70,
  3, 177, :_reduce_71,
  1, 181, :_reduce_none,
  3, 181, :_reduce_73,
  2, 180, :_reduce_74,
  3, 180, :_reduce_75,
  1, 183, :_reduce_76,
  3, 183, :_reduce_77,
  1, 182, :_reduce_78,
  4, 182, :_reduce_79,
  3, 182, :_reduce_80,
  3, 182, :_reduce_81,
  3, 182, :_reduce_82,
  3, 182, :_reduce_83,
  2, 182, :_reduce_84,
  1, 182, :_reduce_85,
  1, 152, :_reduce_86,
  4, 152, :_reduce_87,
  3, 152, :_reduce_88,
  3, 152, :_reduce_89,
  3, 152, :_reduce_90,
  3, 152, :_reduce_91,
  2, 152, :_reduce_92,
  1, 152, :_reduce_93,
  1, 185, :_reduce_94,
  1, 185, :_reduce_none,
  2, 186, :_reduce_96,
  1, 186, :_reduce_97,
  3, 186, :_reduce_98,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 190, :_reduce_104,
  1, 190, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 150, :_reduce_108,
  0, 193, :_reduce_109,
  4, 150, :_reduce_110,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  3, 166, :_reduce_181,
  5, 166, :_reduce_182,
  3, 166, :_reduce_183,
  5, 166, :_reduce_184,
  6, 166, :_reduce_185,
  5, 166, :_reduce_186,
  5, 166, :_reduce_187,
  5, 166, :_reduce_188,
  5, 166, :_reduce_189,
  4, 166, :_reduce_190,
  3, 166, :_reduce_191,
  3, 166, :_reduce_192,
  3, 166, :_reduce_193,
  3, 166, :_reduce_194,
  3, 166, :_reduce_195,
  3, 166, :_reduce_196,
  3, 166, :_reduce_197,
  3, 166, :_reduce_198,
  3, 166, :_reduce_199,
  4, 166, :_reduce_200,
  4, 166, :_reduce_201,
  2, 166, :_reduce_202,
  2, 166, :_reduce_203,
  3, 166, :_reduce_204,
  3, 166, :_reduce_205,
  3, 166, :_reduce_206,
  3, 166, :_reduce_207,
  3, 166, :_reduce_208,
  3, 166, :_reduce_209,
  3, 166, :_reduce_210,
  3, 166, :_reduce_211,
  3, 166, :_reduce_212,
  3, 166, :_reduce_213,
  3, 166, :_reduce_214,
  3, 166, :_reduce_215,
  3, 166, :_reduce_216,
  2, 166, :_reduce_217,
  2, 166, :_reduce_218,
  3, 166, :_reduce_219,
  3, 166, :_reduce_220,
  3, 166, :_reduce_221,
  3, 166, :_reduce_222,
  3, 166, :_reduce_223,
  6, 166, :_reduce_224,
  1, 166, :_reduce_none,
  1, 162, :_reduce_none,
  1, 195, :_reduce_none,
  2, 195, :_reduce_none,
  4, 195, :_reduce_229,
  2, 195, :_reduce_230,
  3, 200, :_reduce_231,
  0, 201, :_reduce_232,
  1, 201, :_reduce_none,
  0, 157, :_reduce_234,
  1, 157, :_reduce_none,
  1, 169, :_reduce_236,
  2, 169, :_reduce_237,
  2, 169, :_reduce_238,
  4, 169, :_reduce_239,
  6, 169, :_reduce_240,
  1, 169, :_reduce_241,
  4, 204, :_reduce_242,
  3, 204, :_reduce_243,
  2, 204, :_reduce_244,
  4, 204, :_reduce_245,
  6, 204, :_reduce_246,
  1, 204, :_reduce_247,
  0, 206, :_reduce_248,
  2, 172, :_reduce_249,
  1, 205, :_reduce_250,
  0, 207, :_reduce_251,
  3, 205, :_reduce_252,
  0, 208, :_reduce_253,
  4, 205, :_reduce_254,
  2, 203, :_reduce_255,
  2, 202, :_reduce_256,
  1, 202, :_reduce_257,
  0, 202, :_reduce_258,
  1, 197, :_reduce_259,
  2, 197, :_reduce_260,
  3, 197, :_reduce_261,
  4, 197, :_reduce_262,
  3, 161, :_reduce_263,
  4, 161, :_reduce_264,
  2, 161, :_reduce_265,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_274,
  3, 194, :_reduce_275,
  0, 232, :_reduce_276,
  4, 194, :_reduce_277,
  3, 194, :_reduce_278,
  3, 194, :_reduce_279,
  2, 194, :_reduce_280,
  3, 194, :_reduce_281,
  3, 194, :_reduce_282,
  1, 194, :_reduce_283,
  4, 194, :_reduce_284,
  3, 194, :_reduce_285,
  1, 194, :_reduce_286,
  5, 194, :_reduce_287,
  4, 194, :_reduce_288,
  3, 194, :_reduce_289,
  2, 194, :_reduce_290,
  1, 194, :_reduce_none,
  2, 194, :_reduce_292,
  0, 233, :_reduce_293,
  3, 194, :_reduce_294,
  6, 194, :_reduce_295,
  6, 194, :_reduce_296,
  0, 234, :_reduce_297,
  0, 235, :_reduce_298,
  7, 194, :_reduce_299,
  0, 236, :_reduce_300,
  0, 237, :_reduce_301,
  7, 194, :_reduce_302,
  5, 194, :_reduce_303,
  4, 194, :_reduce_304,
  0, 238, :_reduce_305,
  0, 239, :_reduce_306,
  9, 194, :_reduce_307,
  0, 240, :_reduce_308,
  6, 194, :_reduce_309,
  0, 241, :_reduce_310,
  7, 194, :_reduce_311,
  0, 242, :_reduce_312,
  5, 194, :_reduce_313,
  0, 243, :_reduce_314,
  6, 194, :_reduce_315,
  0, 244, :_reduce_316,
  0, 245, :_reduce_317,
  9, 194, :_reduce_318,
  1, 194, :_reduce_319,
  1, 194, :_reduce_320,
  1, 194, :_reduce_321,
  1, 194, :_reduce_322,
  1, 156, :_reduce_none,
  1, 225, :_reduce_324,
  1, 228, :_reduce_325,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_328,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 221, :_reduce_none,
  5, 221, :_reduce_332,
  1, 143, :_reduce_none,
  2, 143, :_reduce_334,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 246, :_reduce_none,
  3, 246, :_reduce_338,
  1, 249, :_reduce_339,
  3, 249, :_reduce_340,
  1, 248, :_reduce_none,
  4, 248, :_reduce_342,
  6, 248, :_reduce_343,
  3, 248, :_reduce_344,
  5, 248, :_reduce_345,
  2, 248, :_reduce_346,
  4, 248, :_reduce_347,
  1, 248, :_reduce_348,
  3, 248, :_reduce_349,
  6, 250, :_reduce_350,
  8, 250, :_reduce_351,
  4, 250, :_reduce_352,
  6, 250, :_reduce_353,
  4, 250, :_reduce_354,
  2, 250, :_reduce_none,
  6, 250, :_reduce_356,
  2, 250, :_reduce_357,
  4, 250, :_reduce_358,
  6, 250, :_reduce_359,
  2, 250, :_reduce_360,
  4, 250, :_reduce_361,
  2, 250, :_reduce_362,
  4, 250, :_reduce_363,
  1, 250, :_reduce_364,
  0, 174, :_reduce_365,
  1, 174, :_reduce_366,
  3, 256, :_reduce_367,
  1, 256, :_reduce_368,
  4, 256, :_reduce_369,
  0, 257, :_reduce_370,
  2, 257, :_reduce_371,
  1, 258, :_reduce_372,
  3, 258, :_reduce_373,
  1, 259, :_reduce_374,
  1, 259, :_reduce_none,
  0, 263, :_reduce_376,
  3, 219, :_reduce_377,
  4, 261, :_reduce_378,
  2, 261, :_reduce_379,
  0, 266, :_reduce_380,
  4, 262, :_reduce_381,
  0, 267, :_reduce_382,
  4, 262, :_reduce_383,
  0, 268, :_reduce_384,
  5, 265, :_reduce_385,
  2, 170, :_reduce_386,
  4, 170, :_reduce_387,
  4, 170, :_reduce_388,
  2, 218, :_reduce_389,
  4, 218, :_reduce_390,
  4, 218, :_reduce_391,
  3, 218, :_reduce_392,
  3, 218, :_reduce_393,
  3, 218, :_reduce_394,
  2, 218, :_reduce_395,
  1, 218, :_reduce_396,
  4, 218, :_reduce_397,
  0, 270, :_reduce_398,
  5, 217, :_reduce_399,
  0, 271, :_reduce_400,
  5, 217, :_reduce_401,
  5, 223, :_reduce_402,
  1, 272, :_reduce_403,
  1, 272, :_reduce_none,
  6, 142, :_reduce_405,
  0, 142, :_reduce_406,
  1, 273, :_reduce_407,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 274, :_reduce_410,
  1, 274, :_reduce_none,
  2, 144, :_reduce_412,
  1, 144, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_417,
  1, 276, :_reduce_418,
  2, 276, :_reduce_419,
  3, 277, :_reduce_420,
  1, 277, :_reduce_421,
  1, 277, :_reduce_422,
  3, 211, :_reduce_423,
  4, 212, :_reduce_424,
  3, 213, :_reduce_425,
  0, 281, :_reduce_426,
  3, 281, :_reduce_427,
  1, 282, :_reduce_428,
  2, 282, :_reduce_429,
  3, 214, :_reduce_430,
  0, 284, :_reduce_431,
  3, 284, :_reduce_432,
  0, 278, :_reduce_433,
  2, 278, :_reduce_434,
  0, 279, :_reduce_435,
  2, 279, :_reduce_436,
  0, 280, :_reduce_437,
  2, 280, :_reduce_438,
  1, 283, :_reduce_439,
  2, 283, :_reduce_440,
  0, 286, :_reduce_441,
  4, 283, :_reduce_442,
  1, 285, :_reduce_443,
  1, 285, :_reduce_444,
  1, 285, :_reduce_445,
  1, 285, :_reduce_none,
  1, 191, :_reduce_447,
  3, 192, :_reduce_448,
  1, 275, :_reduce_449,
  1, 275, :_reduce_450,
  2, 275, :_reduce_451,
  2, 275, :_reduce_452,
  1, 184, :_reduce_453,
  1, 184, :_reduce_454,
  1, 184, :_reduce_455,
  1, 184, :_reduce_456,
  1, 184, :_reduce_457,
  1, 184, :_reduce_458,
  1, 184, :_reduce_459,
  1, 184, :_reduce_460,
  1, 184, :_reduce_461,
  1, 184, :_reduce_462,
  1, 184, :_reduce_463,
  1, 184, :_reduce_464,
  1, 215, :_reduce_465,
  1, 155, :_reduce_466,
  1, 160, :_reduce_467,
  1, 160, :_reduce_468,
  1, 226, :_reduce_469,
  3, 226, :_reduce_470,
  2, 226, :_reduce_471,
  3, 229, :_reduce_472,
  2, 229, :_reduce_473,
  6, 264, :_reduce_474,
  8, 264, :_reduce_475,
  4, 264, :_reduce_476,
  6, 264, :_reduce_477,
  4, 264, :_reduce_478,
  6, 264, :_reduce_479,
  2, 264, :_reduce_480,
  4, 264, :_reduce_481,
  6, 264, :_reduce_482,
  2, 264, :_reduce_483,
  4, 264, :_reduce_484,
  2, 264, :_reduce_485,
  4, 264, :_reduce_486,
  1, 264, :_reduce_487,
  0, 264, :_reduce_488,
  1, 260, :_reduce_489,
  1, 260, :_reduce_490,
  1, 260, :_reduce_491,
  1, 260, :_reduce_492,
  1, 247, :_reduce_none,
  1, 247, :_reduce_494,
  3, 247, :_reduce_495,
  2, 247, :_reduce_496,
  1, 288, :_reduce_none,
  3, 288, :_reduce_498,
  1, 251, :_reduce_499,
  3, 251, :_reduce_500,
  3, 289, :_reduce_501,
  3, 290, :_reduce_502,
  1, 252, :_reduce_503,
  3, 252, :_reduce_504,
  1, 287, :_reduce_505,
  3, 287, :_reduce_506,
  1, 291, :_reduce_none,
  1, 291, :_reduce_none,
  2, 253, :_reduce_509,
  1, 253, :_reduce_510,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 255, :_reduce_513,
  2, 254, :_reduce_514,
  0, 254, :_reduce_515,
  1, 230, :_reduce_none,
  3, 230, :_reduce_517,
  0, 216, :_reduce_518,
  2, 216, :_reduce_none,
  1, 199, :_reduce_520,
  3, 199, :_reduce_521,
  3, 293, :_reduce_522,
  2, 293, :_reduce_523,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  1, 159, :_reduce_536,
  1, 159, :_reduce_537,
  0, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 165, :_reduce_none,
  1, 165, :_reduce_none,
  2, 179, :_reduce_542,
  2, 158, :_reduce_543,
  0, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 227, :_reduce_547,
  1, 227, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  0, 196, :_reduce_551 ]

racc_reduce_n = 552

racc_shift_n = 965

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tANDDOT => 135,
  :tEQL => 136,
  :tLOWEST => 137 }

racc_nt_base = 138

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "f_args",
  "do_block",
  "@22",
  "@23",
  "@24",
  "operation3",
  "@25",
  "@26",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@27",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_8(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_9(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_12(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_14(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_18(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_19(val, _values, result)
                      if @context.in_def
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_28(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_48(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_49(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
end

def _reduce_51(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_52(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_53(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_55(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
end

def _reduce_57(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_68(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 95 omitted

def _reduce_96(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

def _reduce_104(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_109(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

def _reduce_181(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_182(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_183(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_185(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_189(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_190(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_191(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

def _reduce_229(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_231(val, _values, result)
                      result = val
                    
    result
end

def _reduce_232(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 233 omitted

def _reduce_234(val, _values, result)
                      result = []
                    
    result
end

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_239(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_240(val, _values, result)
                      val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
end

def _reduce_241(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_246(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_249(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_251(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_253(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = []
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_276(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_294(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_295(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_296(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_298(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_300(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_301(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_303(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_304(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_305(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_306(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_308(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_309(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_310(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_311(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_312(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_313(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_314(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_317(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 323 omitted

def _reduce_324(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_325(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 326 omitted

# reduce 327 omitted

def _reduce_328(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

def _reduce_332(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      result = val
                    
    result
end

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

def _reduce_338(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_339(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_340(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
end

def _reduce_343(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_344(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
end

def _reduce_345(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]) ]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_357(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_366(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_367(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = []
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_374(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 375 omitted

def _reduce_376(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_377(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_378(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = @builder.args(nil, val[0].concat(val[1]), nil)
                    
    result
end

def _reduce_380(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_381(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_383(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_384(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_385(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_386(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_387(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_388(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_389(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_390(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_391(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_392(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_393(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_394(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_395(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_398(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_400(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_401(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_403(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = []
                    
    result
end

def _reduce_407(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 408 omitted

# reduce 409 omitted

def _reduce_410(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_423(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_424(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_426(val, _values, result)
                      result = []
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_431(val, _values, result)
                      result = []
                    
    result
end

def _reduce_432(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_433(val, _values, result)
                      result = []
                    
    result
end

def _reduce_434(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_435(val, _values, result)
                      result = []
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = []
                    
    result
end

def _reduce_438(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_442(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_452(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_470(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_471(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = []
                    
    result
end

def _reduce_489(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_490(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_491(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_492(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 493 omitted

def _reduce_494(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_496(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
end

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_499(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_501(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_502(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 511 omitted

# reduce 512 omitted

def _reduce_513(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = []
                    
    result
end

# reduce 516 omitted

def _reduce_517(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = []
                    
    result
end

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_522(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

def _reduce_536(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_537(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

def _reduce_542(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 544 omitted

# reduce 545 omitted

# reduce 546 omitted

def _reduce_547(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 548 omitted

# reduce 549 omitted

# reduce 550 omitted

def _reduce_551(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyMotion
  end   # module Parser
