# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class MacRuby < Parser::Base


  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
  end
##### State transition tables begin ###

clist = [
'-286,-97,205,206,419,-94,-94,-286,-286,-286,257,205,206,-286,-286,-80',
'-286,556,514,468,588,-66,514,208,514,-97,-470,-468,535,486,487,205,206',
'-470,-468,-95,-286,-286,707,-286,-286,-286,-286,-286,897,-95,720,514',
'514,759,719,-96,-93,-100,587,667,504,205,206,506,209,736,897,667,-99',
'491,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,555,-86,-286,-286,-286,-100,573,-94,923,667,-286,-98,105,-286,499',
'-97,256,104,-286,-95,-286,209,-286,-286,-286,-286,-286,-286,-286,-538',
'-286,-86,-286,897,-99,-97,-538,-538,-538,-94,-97,209,-538,-538,-94,-538',
'-286,-286,-534,-90,-89,-286,105,534,-538,-98,105,104,105,786,-87,104',
'257,104,257,-538,-538,209,-538,-538,-538,-538,-538,105,758,105,-535',
'-85,104,-95,104,105,105,105,-95,-96,104,104,104,-91,-96,588,940,-473',
'-96,-538,-538,-538,-538,-538,-538,-538,-538,-538,-538,-538,-538,-538',
'-538,105,-92,-538,-538,-538,104,574,-90,-404,504,-538,-538,503,-538',
'767,803,587,252,-538,252,-538,931,-538,-538,-538,-538,-538,-538,-538',
'76,-538,-538,-538,-93,569,-87,932,105,77,256,-538,256,104,767,545,-463',
'-538,-538,78,-88,-534,-538,-463,-463,-463,-96,200,-463,-463,-463,-404',
'-463,768,-538,-94,504,228,-404,506,-463,-538,-463,-463,-463,526,-534',
'-404,-89,527,-538,199,-463,-463,-97,-463,-463,-463,-463,-463,198,-88',
'817,-538,-89,-404,197,588,-538,225,-538,588,-87,227,226,-534,547,546',
'557,-538,781,631,-463,-463,-463,-463,-463,-463,-463,-463,-463,-463,-463',
'-463,-463,-463,897,-538,-463,-463,-463,587,-463,-463,466,587,-463,-473',
'-87,-463,-463,-87,-463,631,-463,520,-463,-87,-463,-463,-463,-463,-463',
'-463,-463,-465,-463,491,-463,209,-89,732,-465,647,646,645,651,648,205',
'206,-532,-531,-463,-463,-463,-463,-538,-463,204,-463,-85,-463,568,-538',
'-538,-538,-93,-466,-538,-538,-538,113,-538,953,-466,897,-89,897,653',
'-89,-91,-538,-538,-538,-538,-89,-99,657,656,660,659,504,-538,-538,506',
'-538,-538,-538,-538,-538,897,-92,-463,-460,957,-87,540,-100,940,-463',
'-460,-95,105,541,-532,-531,545,104,-463,-460,960,731,-538,-538,-538',
'-538,-538,-538,-538,-538,-538,-538,-538,-538,-538,-538,-532,-531,-538',
'-538,-538,-287,721,-538,-463,961,-538,963,-287,-538,-538,-463,-538,897',
'-538,545,-538,-287,-538,-538,-538,-538,-538,-538,-538,897,-538,-538',
'-538,775,545,647,646,645,651,648,545,547,546,550,545,530,-538,-538,-538',
'-538,-286,-538,922,-538,940,-96,209,-286,-286,-286,105,531,-286,-286',
'-286,104,-286,775,522,647,646,645,651,648,105,523,-286,-286,-286,104',
'547,546,543,105,521,209,-286,-286,104,-286,-286,-286,-286,-286,376,547',
'546,205,206,378,377,547,546,552,699,547,546,548,-467,105,228,850,302',
'303,104,-467,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,-286,-286,228,-472,-286,-286,-286,482,722,-286,-472,228,-286,228',
'483,-286,-286,938,-286,-472,-286,209,-286,481,-286,-286,-286,-286,-286',
'-286,-286,-80,-286,775,-286,647,646,645,651,648,775,613,647,646,645',
'651,648,202,-286,-286,-286,-286,-460,-286,203,-286,209,-98,897,-460',
'-460,-460,-535,201,-460,-460,-460,497,-460,775,653,647,646,645,651,648',
'-460,771,-460,-460,-460,660,659,249,781,631,774,624,-460,-460,250,-460',
'-460,-460,-460,-460,775,-469,647,646,645,651,648,578,-469,-534,771,775',
'101,647,646,645,651,648,631,774,205,206,-460,-460,-460,-460,-460,-460',
'-460,-460,-460,-460,-460,-460,-460,-460,252,771,-460,-460,-460,209,-460',
'-460,228,209,-460,663,771,-460,-460,-266,-460,564,-460,561,-460,901',
'-460,-460,-460,-460,-460,-460,-460,520,-460,775,-460,647,646,645,651',
'648,670,558,225,940,698,-471,227,226,-460,-460,-460,-460,-471,-460,701',
'-460,-267,-460,277,69,70,66,9,52,-460,708,525,58,59,524,653,-460,62',
'453,60,61,63,28,29,67,68,660,659,368,453,520,27,26,25,93,92,94,95,209',
'775,18,647,646,645,651,648,8,42,724,10,97,96,98,87,51,89,88,90,468,91',
'99,100,508,85,86,39,40,38,775,466,647,646,645,651,648,775,771,647,646',
'645,651,648,-280,209,-286,-472,507,37,743,-280,31,-286,-472,53,54,468',
'-535,55,-280,33,-286,-472,624,41,775,771,647,646,645,651,648,19,653',
'209,500,499,84,76,79,80,252,81,82,660,659,228,77,83,5,69,70,66,9,52',
'57,252,78,58,59,624,228,653,62,228,60,61,63,28,29,67,68,493,660,659',
'750,492,27,26,25,93,92,94,95,-266,775,18,647,646,645,651,648,8,42,7',
'10,97,96,98,87,51,89,88,90,754,91,99,100,761,85,86,39,40,38,775,763',
'647,646,645,651,648,775,771,647,646,645,651,648,-287,766,884,-280,769',
'37,777,-287,31,885,-280,53,54,778,631,55,-287,33,883,-280,785,41,775',
'771,647,646,645,651,648,19,653,488,209,252,84,76,79,80,209,81,82,660',
'659,261,77,83,277,69,70,66,9,52,57,484,78,58,59,209,794,653,62,477,60',
'61,63,28,29,67,68,476,660,659,-268,209,27,26,25,93,92,94,95,-65,815',
'18,647,646,645,468,648,8,42,466,10,97,96,98,87,51,89,88,90,464,91,99',
'100,805,85,86,39,40,38,815,494,647,646,645,807,648,775,495,647,646,645',
'651,648,-330,810,530,417,811,37,731,-330,31,529,818,53,54,453,209,55',
'-330,33,531,824,825,41,775,208,647,646,645,651,648,19,653,624,421,420',
'84,76,79,80,418,81,82,660,659,731,77,83,277,69,70,66,9,52,57,845,78',
'58,59,848,767,653,62,209,60,61,63,28,29,67,68,852,660,659,379,854,27',
'26,25,93,92,94,95,693,694,18,366,695,99,100,209,8,42,860,10,97,96,98',
'87,51,89,88,90,301,91,99,100,862,85,86,39,40,38,228,108,109,110,111',
'112,209,775,-286,647,646,645,651,648,-287,-286,865,-269,872,37,-535',
'-287,31,873,-286,53,54,300,876,55,-287,33,225,878,466,41,227,226,223',
'224,881,886,247,19,653,209,890,893,84,76,79,80,895,81,82,660,659,897',
'77,83,277,69,70,66,9,52,57,897,78,58,59,209,902,905,62,906,60,61,63',
'28,29,67,68,108,109,110,111,112,27,26,25,93,92,94,95,911,913,18,916',
'918,228,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
'228,-557,-557,-557,-557,234,236,225,-286,-557,-557,227,226,223,224,-286',
'242,243,,37,-535,,31,,-286,53,54,,,55,,33,225,,231,41,227,226,223,224',
'235,233,229,19,230,,,,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,108,109,110,111,112,27,26,25',
'93,92,94,95,,,18,108,109,110,111,112,8,42,,10,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,228,232,237,238,239,234,236,244,415,240,241',
',,,,416,242,243,,37,,,31,,417,53,54,,,55,,33,225,,231,41,227,226,223',
'224,235,233,229,19,230,,,,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9',
'52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95',
',,18,,,,,562,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,228,232,237,238,239,234,236,244,245,240,241,,221,222,,,242,243,,37',
',,31,,,53,54,,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230',
',,,84,76,79,80,,81,82,,,,77,83,,246,-281,-233,,,57,,78,-281,-281,-281',
',,-281,-281,-281,732,-281,647,646,645,651,648,,,,,-281,-281,-281,,,',
',,,,-281,-281,,-281,-281,-281,-281,-281,,,,,,,,,653,,,,,,,,,657,656',
'660,659,,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,,,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,,-281,,-281',
',-281,-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,,-281,-281',
'-281,-281,,-281,,-281,5,69,70,66,9,52,,,,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,7,10,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,228,,,,,,,,,,,,,,,,242,243,,37,,,31',
',,53,54,,,55,,33,225,,231,41,227,226,223,224,,,229,19,230,,,,84,76,79',
'80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51',
'89,88,90,,91,99,100,,85,86,39,40,38,228,,,,,,,,,,,,,,,,242,243,,37,',
',31,,,53,54,,,55,,33,225,,231,41,227,226,223,224,,,229,19,230,,,,84',
'76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,228,,,,,,,,,,,,,,,,242,243',
',37,,,31,,,53,54,,,55,,33,225,,231,41,227,226,223,224,,,229,19,230,',
',,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,',
'60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97',
'96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,228,232,237,238,239',
'234,236,244,245,240,241,,-557,-557,,,242,243,,37,,,31,,,53,54,,,55,',
'33,225,,231,41,227,226,223,224,235,233,229,19,230,,,,84,76,79,80,,81',
'82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,228,232,237,238,239,234,236,244,245,240',
'241,,-557,-557,,,242,243,,37,,,31,,,53,54,,,55,,33,225,,231,41,227,226',
'223,224,235,233,229,19,230,,,,84,76,79,80,,81,82,,,,77,83,277,69,70',
'66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92',
'94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39',
'40,38,228,-557,-557,-557,-557,234,236,,,-557,-557,,,,,,242,243,,37,',
',279,,,53,54,,,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230',
',,,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97',
'96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,228,,,,,,,,,,,,,,,,242',
'243,,37,,,31,,,53,54,,,55,,33,225,,231,41,227,226,223,224,,,229,19,230',
',,,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97',
'96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,228,-557,-557,-557,-557',
'234,236,,,-557,-557,,,,,,242,243,,37,,,31,,,53,54,,,55,,33,225,,231',
'41,227,226,223,224,235,233,229,19,230,,,,84,76,79,80,,81,82,,,,77,83',
'277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26',
'25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100',
',85,86,39,40,38,228,-557,-557,-557,-557,234,236,,,-557,-557,,,,,,242',
'243,,37,,,31,,,53,54,,,55,,33,225,,231,41,227,226,223,224,235,233,229',
'19,230,,,,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42',
',10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,228,-557,-557',
'-557,-557,234,236,,,-557,-557,,,,,,242,243,,37,,,31,,,53,54,,,55,,33',
'225,,231,41,227,226,223,224,235,233,229,19,230,,,,84,76,79,80,,81,82',
',,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,228,232,237,238,239,234,236,,,240,241,,,',
',,242,243,,37,,,279,,,53,54,,,55,,33,225,,231,41,227,226,223,224,235',
'233,229,19,230,,,,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,',
'78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18',
',,,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,228',
'-557,-557,-557,-557,234,236,,,-557,-557,,,,,,242,243,,37,,,31,,,53,54',
',,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230,,,,84,76,79',
'80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51',
'89,88,90,,91,99,100,,85,86,39,40,38,228,,,,,,,,,,,,,,,,242,243,,37,',
',31,,,53,54,,,55,,33,225,,,41,227,226,223,224,,,,19,,,,,84,76,79,80',
',81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,228,,,,,,,,,,,,,,,,242,243,,37,,,31',
',,53,54,,,55,,33,225,,231,41,227,226,223,224,,,,19,,,,,84,76,79,80,',
'81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,228,,,,,,,,,,,,,,,,242,243,,37,,,31',
',,53,54,,,55,,33,225,,231,41,227,226,223,224,,,,19,,,,,84,76,79,80,',
'81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54',
',,55,,33,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,277,69,70,66',
'9,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94',
'95,,,18,,,,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,84',
'76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,279',
',,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,277',
'69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85',
'86,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,',
',19,,,,,84,76,79,80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42',
',10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,',
',,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82',
',,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,93,92,94,95,,,18,,,,,565,8,42,,10,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,228,232,237,238,239,234,236,244,245,240',
'241,,221,222,,,242,243,,37,,,31,,,53,54,,,55,,33,225,,231,41,227,226',
'223,224,235,233,229,19,230,,,,84,76,79,80,,81,82,,,,77,83,,246,-540',
',,,57,,78,-540,-540,-540,,,-540,-540,-540,732,-540,647,646,645,651,648',
',,,-540,-540,-540,-540,,,,,,,,-540,-540,,-540,-540,-540,-540,-540,,',
',,,,,,653,,,,,,,,,657,656,660,659,,-540,-540,-540,-540,-540,-540,-540',
'-540,-540,-540,-540,-540,-540,-540,,,-540,-540,-540,,,-540,,,-540,,',
'-540,-540,,-540,,-540,,-540,,-540,-540,-540,-540,-540,-540,-540,-539',
'-540,-540,-540,,,,-539,-539,-539,,,-539,-539,-539,,-539,-540,-540,-540',
'-540,,-540,,-540,-539,-539,-539,-539,,,,,,,,-539,-539,,-539,-539,-539',
'-539,-539,,,,,,,,,,,,,,,,,,,,,,,-539,-539,-539,-539,-539,-539,-539,-539',
'-539,-539,-539,-539,-539,-539,,,-539,-539,-539,,,-539,,,-539,,,-539',
'-539,,-539,,-539,,-539,,-539,-539,-539,-539,-539,-539,-539,,-539,-539',
'-539,,,,,,,,,,,,,,-539,-539,-539,-539,,-539,,-539,277,69,70,66,9,52',
',,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18',
',,,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,',
',,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,84,76,79',
'80,,81,82,,,,77,83,277,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51',
'89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53',
'54,,,55,,33,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66',
',52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94',
'95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,',
'84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,,42,,,97,96,98,87',
'51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70',
'66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92',
'94,95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84',
'76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,,42,,,97,96,98,87,51',
'89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53',
'54,,,55,,,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66',
',52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94',
'95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,209,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296',
'93,92,94,95,,,220,,,,,,,291,,,97,96,98,87,51,89,88,90,,91,99,100,,85',
'86,,732,297,647,646,645,651,648,,,,,,,,,,,,,,,831,,,219,,,53,54,,,55',
',,,,,653,,,,,,,,,657,656,660,659,84,76,79,80,,81,82,,,,77,83,,69,70',
'66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93',
'92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86',
'39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218',
',,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60',
'61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97',
'96,98,87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,',
',,213,,,219,,,53,54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81',
'82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68',
',,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55',
',,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84',
'76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296',
'93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85',
'86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,',
',218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62',
',60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,',
',,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55',
',,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84',
'76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296',
'93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85',
'86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,',
',218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62',
',60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,',
',,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55',
',,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84',
'76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296',
'93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85',
'86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,',
',218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62',
',60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,',
',,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55',
',,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84',
'76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296',
'93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85',
'86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,',
',218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62',
',60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,',
',,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55',
',,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84',
'76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296',
'93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85',
'86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,',
',218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62',
',60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,',
',,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55',
',,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,9,52,57',
',78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18',
',,,,,8,42,7,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,',
',,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293',
'294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87',
'51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,272,91,99,100,',
'85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,270,,268,',
'41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,',
',42,,,97,96,98,87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,',
',,,,,,,,,,,213,,,219,,,458,54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89',
'88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53',
'54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,209',
'69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100',
',85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,',
',,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,',
',,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,',
',,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80',
',81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67',
'68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94',
'95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,',
'84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96',
'98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213',
',,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100',
',85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,',
',,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,',
',,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,',
',,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80',
',81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67',
'68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,9,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,',
',18,,,,,,8,42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54',
',,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,',
',18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,',
',,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293',
'294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87',
'51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,',
'69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,272,91,99,100',
',85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,608,,268',
',41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78',
'58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,',
',,,42,,,97,96,98,87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,',
',,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,268,,41,,,,,,,,19,,,,,84,76,79',
'80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88',
'90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54',
',,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70',
'66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93',
'92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86',
'39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,608,,268,,41,,,',
',,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,',
',,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,',
',,42,,,97,96,98,87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,',
',,,,,,,,,,,,213,,,219,,,53,54,,,55,,608,,268,,41,,,,,,,,218,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54',
',,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,',
',220,,,,,,,42,,,97,96,98,87,51,89,88,90,272,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,270,,268,,41,,,,,,,,218,',
',,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213',
',,219,,,53,54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,',
',,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,',
'27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,272,91',
'99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,270',
',268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,291,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,,650,297',
'647,646,645,651,648,,,,,,,,,,,,,,,287,,,284,,,53,54,,,55,,283,,,,653',
'688,,,,,,,,657,656,660,659,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94',
'95,,,220,,,,,562,,291,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,,',
'297,228,232,237,238,239,234,236,244,245,240,241,,221,222,,,242,243,',
'287,,,219,,,53,54,,,55,,,225,,231,,227,226,223,224,235,233,229,,230',
',,,84,76,79,80,,81,82,,,,77,83,,246,,299,,,57,,78,69,70,66,,52,,,,58',
'59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220',
',,,,,,291,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,,650,297,647,646',
'645,651,648,,,,,,,,,,,,,,,875,,,219,,,53,54,,,55,,,,,,653,,,,,,,,,657',
'656,660,659,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,',
',,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,',
',,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,',
',,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,',
'81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67',
'68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94',
'95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,',
'84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96',
'98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213',
',,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'93,92,94,95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86',
'39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19',
',,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60',
'61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97',
'96,98,87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,',
',,213,,,219,,,53,54,,,55,,270,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,',
',,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
'272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,',
',18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,',
',,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,,42,,,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54',
',,55,,,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,',
',18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,228',
'232,237,238,239,234,236,244,245,240,241,,221,222,,,242,243,,213,,-233',
'219,,,53,54,,,55,,,225,,231,41,227,226,223,224,235,233,229,19,230,,',
',84,76,79,80,,81,82,,,,77,83,105,246,,-233,,104,57,,78,69,70,66,,52',
',,,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,291,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,,650,297',
'647,646,645,651,648,,,,,,,,,,,,,,,331,,,31,,,53,54,,,55,,33,,,,653,',
',,,,,,,657,656,660,659,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,291,,,97,96,98,336,51,89,88,337,,91,99,100,,85,86,,650,297',
'647,646,645,651,648,,,,,,,,,,,,343,,,338,,,219,,,53,54,,,55,,,,,,653',
',,,,,,,,657,656,660,659,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,291,,,97,96,98,336,51,89,88,337,,91,99,100,,85,86,,650,297',
'647,646,645,651,648,,,,,,,,,,,,,,,338,,,219,,,53,54,,,55,,,,,,653,688',
',,,,,,,657,656,660,659,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57',
',78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95',
',,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,608,,,,41,,,,,,,,218,,,,',
'84,76,79,80,,81,82,,,,77,83,,69,70,66,9,52,57,,78,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,7,10,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,228,232,237,238,239,234,236',
'244,245,240,241,,221,222,,,242,243,,37,,,31,,,53,54,,,55,,33,225,,231',
'41,227,226,223,224,235,233,229,19,230,,,,84,76,79,80,,81,82,,,,77,83',
',246,,,,368,57,,78,69,70,66,,52,,,,58,59,,,,62,,60,61,63,293,294,67',
'68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,',
',18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,',
',,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,,42,,,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54',
',,55,,,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,',
',18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,',
',,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,9,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8,42,,10,97,96,98,87,51',
'89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53',
'54,,,55,,33,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66',
',52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94',
'95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54',
',,55,,385,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66',
',52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94',
'95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,385,,,,41,,,,,,,,218,',
',,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93',
'92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,272,91,99,100,,85',
'86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,270,,268,,41',
',,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,',
',,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,',
',,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80',
',81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67',
'68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,291,,,97,96,98,87,51,89',
'88,90,,91,99,100,,85,86,,,297,228,232,237,238,239,234,236,244,245,240',
'241,,221,222,,,242,243,,287,,,219,,,53,54,,,55,,,225,,231,,227,226,223',
'224,235,233,229,,230,,,,84,76,79,80,,81,82,,,,77,83,,246,,479,,,57,',
'78,69,70,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93',
'92,94,95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39',
'40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,',
',,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,291,,,97,96',
'98,87,51,89,88,90,,91,99,100,,85,86,,650,297,647,646,645,651,648,,,',
',,,,,,,,,,,287,,,284,,,53,54,,,55,,,,,,653,,,,,,,,,657,656,660,659,84',
'76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63',
'293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,291,,,97,96,98',
'87,51,89,88,90,,91,99,100,,85,86,,650,297,647,646,645,651,648,,,,,,',
',,,,,,,,287,,,284,,,53,54,,,55,,,,,,653,,,,,,,,,657,656,660,659,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293',
'294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87',
'51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
'497,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,',
'69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,291,,,97,96,98,87,51,89,88,90,,91,99,100',
',85,86,,650,297,647,646,645,651,648,,,,,,,,,,,,,,,287,,,284,,,53,54',
',,55,,,,,,653,639,,,,,,,,657,656,660,659,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100',
',85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,',
',,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,',
',27,26,25,93,92,94,95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99',
'100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41',
',,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,',
',27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99',
'100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41',
',,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42',
',,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,',
',,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82',
',,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,',
',27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99',
'100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41',
',,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,',
',,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,',
',,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80',
',81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67',
'68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,705,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66',
',52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94',
'95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38',
',,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76',
'79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293',
'294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87',
'51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69',
'70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93',
'92,94,95,,,18,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39',
'40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,',
',,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87',
'51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,272,91,99,100,',
'85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,270,,268,',
'41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,',
'42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,',
',,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,84,76,79,80,,81',
'82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68',
',,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55',
',270,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94',
'95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,',
'84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96',
'98,87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213',
',,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,272,91,99,100',
',85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,608,,,,41',
',,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,',
',,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,',
',,,,,,,,,,213,,,219,,,53,54,,,55,,385,,,,41,,,,,,,,218,,,,,84,76,79',
'80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,,42,,,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,,,,,41,,,,,,,,19,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94',
'95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,',
'84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87',
'51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219',
',,53,54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100',
',85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,',
',,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59',
',,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,',
',,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,',
',,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80',
',81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67',
'68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96,98,87,51,89,88',
'90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,',
',55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52',
'57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290,296,93,92,94',
'95,,,220,,,,,,,42,,,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40',
'38,,,,,,,,,,,,,,,,,,,,213,,,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,',
'84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61',
'63,293,294,67,68,,,,,,289,290,296,93,92,94,95,,,220,,,,,,,42,,,97,96',
'98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213',
',,219,,,53,54,,,55,,,,,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,,,,77,83',
',69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,,,,289,290',
'296,93,92,94,95,,,220,,,,,,,291,,,97,96,98,87,51,89,88,90,,91,99,100',
',85,86,,,297,,,,,,,,,,,,,,,,,,,,287,,,284,,,53,54,,,55,,,,,,,,,,,,,',
',,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,220,,,,,,,42,,,97,96,98',
'87,51,89,88,90,272,91,99,100,,85,86,39,40,38,,,,,,,,,,,,,,,,,,,,213',
',,219,,,53,54,,,55,,270,,268,,41,,,,,,,,218,,,,,84,76,79,80,,81,82,',
',,77,83,,69,70,66,,52,57,,78,58,59,,,,62,,60,61,63,293,294,67,68,,,',
',,289,290,296,93,92,94,95,,,220,,,,,,,291,,,97,96,98,87,51,89,88,90',
',91,99,100,,85,86,,,297,,,,,,,,,,,,,,,,,,,,287,,,284,,,53,54,,,55,,',
',,,,,,,,,,,,,,,,84,76,79,80,,81,82,,,,77,83,,69,70,66,9,52,57,,78,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,93,92,94,95,,,18,,,,,,8',
'42,,10,97,96,98,87,51,89,88,90,,91,99,100,,85,86,39,40,38,228,232,237',
'238,239,234,236,244,245,240,241,,221,222,,,242,243,,37,,,31,,,53,54',
',,55,,33,225,,231,41,227,226,223,224,235,233,229,19,230,,,,84,76,79',
'80,,81,82,,,,77,83,,246,-239,,,368,57,,78,-239,-239,-239,,,-239,-239',
'-239,,-239,,,,,,,,,,-239,,,,,,,,,,-239,-239,,-239,-239,-239,-239,-239',
',,,,,,,,,,,-239,,,,,,,-239,-239,-239,,,-239,-239,-239,,-239,,,,,,-239',
',,,-239,,,-239,,,,,252,-239,-239,-239,,-239,-239,-239,-239,-239,,,,',
',,,,,,,,,-239,,,,,,,,,-293,,,,,-239,,-293,-293,-293,-239,-239,-293,-293',
'-293,,-293,,-239,,,,,252,-239,,-293,-293,,,,,,,,,-293,-293,,-293,-293',
'-293,-293,-293,,,-239,,,,,,,,,,,,,,-239,,,,,-239,-293,-293,-293,-293',
'-293,-293,-293,-293,-293,-293,-293,-293,-293,-293,,,-293,-293,-293,',
',-293,,261,-293,,,-293,-293,,-293,,-293,,-293,,-293,-293,-293,-293,-293',
'-293,-293,-403,-293,,-293,,,,-403,-403,-403,,,-403,-403,-403,,-403,-293',
'-293,,-293,,-293,,,-403,-403,-403,,,,,,,,,-403,-403,,-403,-403,-403',
'-403,-403,,,,,,,,,,,,,,,,,,,,,,,-403,-403,-403,-403,-403,-403,-403,-403',
'-403,-403,-403,-403,-403,-403,,,-403,-403,-403,,,-403,,252,-403,,,-403',
'-403,,-403,,-403,,-403,,-403,-403,-403,-403,-403,-403,-403,-239,-403',
'-403,-403,,,,-239,-239,-239,,,-239,-239,-239,,-239,-403,-403,,-403,',
'-403,,,-239,-239,-239,,,,,,,,,-239,-239,,-239,-239,-239,-239,-239,,',
',,,,,,,,,,,,,,,,,,,,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239',
'-239,-239,-239,-239,,,-239,-239,-239,,,-239,,252,-239,,,-239,-239,,-239',
',-239,,-239,,-239,-239,-239,-239,-239,-239,-239,,-239,-239,-239,,,,',
',,,,,,,,,-239,-239,,-239,,-239,164,175,165,188,161,181,171,170,191,192',
'186,169,168,163,189,193,194,173,162,176,180,182,174,167,,,,183,190,185',
'184,177,187,172,160,179,178,,,,,,159,166,157,158,154,155,156,116,118',
',,117,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152',
'138,139,,,,,,,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147',
'126,,,153,84,,,,,,,,,,,83,164,175,165,188,161,181,171,170,191,192,186',
'169,168,163,189,193,194,173,162,176,180,182,174,167,,,,183,190,185,184',
'177,187,172,160,179,178,,,,,,159,166,157,158,154,155,156,116,118,,,117',
',,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138',
'139,,,,,,,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
',,153,84,,,,,,,,,,,83,164,175,165,188,161,181,171,170,191,192,186,169',
'168,163,189,193,194,173,162,176,180,182,174,167,,,,183,190,185,184,177',
'187,172,160,179,178,,,,,,159,166,157,158,154,155,156,116,118,,,117,',
',,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138',
'139,,,,,,,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
',,153,84,,,,,,,,,,,83,164,175,165,188,161,181,171,170,191,192,186,169',
'168,163,189,193,194,173,162,176,180,182,174,167,,,,183,190,185,184,177',
'187,172,160,179,178,,,,,,159,166,157,158,154,155,156,116,118,115,,117',
',,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138',
'139,,,,,,,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
',,153,84,,,,,,,,,,,83,164,175,165,188,161,181,171,170,191,192,186,169',
'168,163,189,193,194,173,162,176,180,182,174,167,,,,183,190,185,184,177',
'187,172,160,179,178,,,,,,159,166,157,158,154,155,156,116,118,,,117,',
',,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138',
'139,,,,,,,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
',,153,164,175,165,188,161,181,171,170,191,192,186,169,168,163,189,193',
'194,173,162,176,180,182,174,167,,,,183,190,185,353,352,354,351,160,179',
'178,,,,,,159,166,157,158,348,349,350,346,118,89,88,347,,91,,,,,,149',
'150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,358',
',,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,394,398',
'153,,395,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151',
'152,138,139,,,,,,252,,,,,,,,143,142,,127,148,145,144,140,141,135,133',
'125,147,126,401,405,153,,400,,,,,,,,149,150,,146,128,129,130,137,134',
'136,,,131,132,,,,151,152,138,139,,,,,,252,,,,,,,,143,142,,127,148,145',
'144,140,141,135,133,125,147,126,450,398,153,,451,,,,,,,,149,150,,146',
'128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,,,,,,,,,143',
'142,,127,148,145,144,140,141,135,133,125,147,126,450,398,153,,451,,',
',,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,579',
'398,153,,580,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,',
',,151,152,138,139,,,,,,252,,,,,,,,143,142,,127,148,145,144,140,141,135',
'133,125,147,126,581,405,153,,582,,,,,,,,149,150,,146,128,129,130,137',
'134,136,,,131,132,,,,151,152,138,139,,,,,,252,,,,,,,,143,142,,127,148',
'145,144,140,141,135,133,125,147,126,617,398,153,,618,,,,,,,,149,150',
',146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,252,',
',,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,620,405,153',
',621,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152',
'138,139,,,,,,252,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125',
'147,126,579,398,153,,580,,,,,,,,149,150,,146,128,129,130,137,134,136',
',,131,132,,,,151,152,138,139,,,,,,252,,,,,,,,143,142,,127,148,145,144',
'140,141,135,133,125,147,126,581,405,153,,582,,,,,,,,149,150,,146,128',
'129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,252,,,,,,,,143',
'142,,127,148,145,144,140,141,135,133,125,147,126,673,398,153,,674,,',
',,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139',
',,,,,252,,,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126',
'675,405,153,,676,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132',
',,,151,152,138,139,,,,,,252,,,,,,,,143,142,,127,148,145,144,140,141',
'135,133,125,147,126,678,405,153,,679,,,,,,,,149,150,,146,128,129,130',
'137,134,136,,,131,132,,,,151,152,138,139,,,,,,252,,,,,,,,143,142,,127',
'148,145,144,140,141,135,133,125,147,126,450,398,153,,451,,,,,,,,149',
'150,,146,128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,252',
',,,,,,,143,142,,127,148,145,144,140,141,135,133,125,147,126,927,398',
'153,,928,,,,,,,,149,150,,146,128,129,130,137,134,136,,,131,132,,,,151',
'152,138,139,,,,,,252,,,,,,,,143,142,,127,148,145,144,140,141,135,133',
'125,147,126,929,405,153,,930,,,,,,,,149,150,,146,128,129,130,137,134',
'136,,,131,132,,,,151,152,138,139,,,,,,252,,,,,,,,143,142,,127,148,145',
'144,140,141,135,133,125,147,126,949,405,153,,948,,,,,,,,149,150,,146',
'128,129,130,137,134,136,,,131,132,,,,151,152,138,139,,,,,,252,,,,,,',
',143,142,,127,148,145,144,140,141,135,133,125,147,126,,,153,228,232',
'237,238,239,234,236,244,245,240,241,,221,222,,,242,243,,,,,,,,,,,,,',
',225,,231,,227,226,223,224,235,233,229,,230,,228,232,237,238,239,234',
'236,244,245,240,241,,221,222,,246,242,243,,,,,,,,,,,,,,,225,,231,,227',
'226,223,224,235,233,229,,230,,228,232,237,238,239,234,236,244,245,240',
'241,,221,222,,246,242,243,,,,,,,,,,,,,,,225,,231,,227,226,223,224,235',
'233,229,,230,,228,232,237,238,239,234,236,244,245,240,241,,221,222,',
'246,242,243,,,,,,,,,,,,,,,225,,231,,227,226,223,224,235,233,229,,230',
',228,232,237,238,239,234,236,244,245,240,241,,221,222,,246,242,243,',
',,,,,,,,,,,,,225,,231,,227,226,223,224,235,233,229,,230,,228,232,237',
'238,239,234,236,244,245,240,241,,221,222,,246,242,243,,,,,,,,,,,,,,',
'225,,231,,227,226,223,224,235,233,229,,230,,228,232,237,238,239,234',
'236,244,245,240,241,,221,222,209,246,242,243,,,,,,,,,,,,,,,225,,231',
',227,226,223,224,235,233,229,,230,,228,232,237,238,239,234,236,244,245',
'240,241,,221,222,,246,242,243,,,,,,,,,,,,,,,225,,231,,227,226,223,224',
'235,233,229,,230,,228,232,237,238,239,234,236,244,245,240,241,,221,222',
',246,242,243,,,,,,,,,,,,,,,225,,231,,227,226,223,224,235,233,229,,230',
',228,232,237,238,239,234,236,244,245,240,241,,221,222,,246,242,243,',
',,,,,,,,,,,,,225,,231,,227,226,223,224,235,233,229,,230,,228,232,237',
'238,239,234,236,244,245,240,241,,221,222,,246,242,243,,,,,,,,,,,,,,',
'225,,231,,227,226,223,224,235,233,229,,230,,,,,,,,,,,,,,,,,246' ]
        racc_action_table = arr = ::Array.new(23658, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'400,928,536,536,214,951,788,400,400,400,56,628,628,400,400,612,400,364',
'853,597,459,612,671,18,753,674,348,351,342,297,297,412,412,348,351,673',
'400,400,566,400,400,400,400,400,869,927,580,322,323,638,579,929,329',
'214,459,516,637,542,542,637,18,597,871,789,524,418,400,400,400,400,400',
'400,400,400,400,400,400,400,400,400,364,566,400,400,400,332,400,566',
'875,517,400,676,536,400,882,580,56,536,400,579,400,628,400,400,400,400',
'400,400,400,401,400,788,400,967,418,928,401,401,401,951,928,412,401',
'401,951,401,400,400,929,400,674,400,853,342,401,400,671,853,753,671',
'673,671,24,753,292,401,401,542,401,401,401,401,401,342,638,516,676,329',
'342,927,516,322,323,789,927,929,322,323,789,524,929,460,968,212,675',
'401,401,401,401,401,401,401,401,401,401,401,401,401,401,517,332,401',
'401,401,517,401,676,746,313,401,678,313,401,650,723,460,24,401,292,401',
'887,401,401,401,401,401,401,401,74,401,401,401,212,395,617,888,683,74',
'24,620,292,683,732,365,90,401,401,74,401,675,401,90,90,90,401,13,90',
'90,90,746,90,650,678,723,317,424,746,317,90,678,90,90,90,338,678,746',
'395,338,678,12,90,90,395,90,90,90,90,90,11,675,732,620,618,746,10,448',
'678,424,620,594,617,424,424,620,365,365,365,620,941,941,90,90,90,90',
'90,90,90,90,90,90,90,90,90,90,969,620,90,90,90,448,90,90,924,594,90',
'36,617,90,90,617,90,858,90,858,90,617,90,90,90,90,90,90,90,352,90,301',
'90,926,618,587,352,587,587,587,587,587,321,321,337,336,90,90,90,90,581',
'90,15,90,36,90,394,581,581,581,36,353,581,581,581,7,581,933,353,934',
'618,935,587,618,301,581,581,581,581,618,301,587,587,587,587,314,581',
'581,314,581,581,581,581,581,936,15,337,336,937,394,356,15,939,337,336',
'394,275,356,337,336,362,275,337,336,942,587,581,581,581,581,581,581',
'581,581,581,581,581,581,581,581,337,336,581,581,581,886,581,581,347',
'943,581,944,886,581,581,347,581,945,581,360,581,886,581,581,581,581',
'581,581,581,946,581,581,581,774,553,774,774,774,774,774,363,362,362',
'362,361,874,581,581,581,581,582,581,874,581,903,581,455,582,582,582',
'535,874,582,582,582,535,582,901,330,901,901,901,901,901,326,330,582',
'582,582,326,360,360,360,3,330,461,582,582,3,582,582,582,582,582,115',
'553,553,311,311,115,115,363,363,363,553,361,361,361,354,689,429,774',
'38,38,689,354,582,582,582,582,582,582,582,582,582,582,582,582,582,582',
'428,829,582,582,582,286,582,582,829,427,582,426,286,582,582,901,582',
'829,582,474,582,286,582,582,582,582,582,582,582,475,582,810,582,810',
'810,810,810,810,653,478,653,653,653,653,653,14,582,582,582,582,87,582',
'14,582,480,582,947,87,87,87,948,14,87,87,87,485,87,771,810,771,771,771',
'771,771,87,653,87,87,87,810,810,23,662,662,653,489,87,87,23,87,87,87',
'87,87,957,349,957,957,957,957,957,414,349,949,771,848,1,848,848,848',
'848,848,498,771,16,16,87,87,87,87,87,87,87,87,87,87,87,87,87,87,402',
'957,87,87,87,501,87,87,425,392,87,513,848,87,87,388,87,386,87,380,87',
'848,87,87,87,87,87,87,87,518,87,918,87,918,918,918,918,918,519,374,425',
'958,550,350,425,425,87,87,87,87,350,87,556,87,563,87,515,515,515,515',
'515,515,346,567,333,515,515,331,918,346,515,570,515,515,515,515,515',
'515,515,918,918,328,575,327,515,515,515,515,515,515,515,583,940,515',
'940,940,940,940,940,515,515,585,515,515,515,515,515,515,515,515,515',
'318,515,515,515,316,515,515,515,515,515,902,598,902,902,902,902,902',
'916,940,916,916,916,916,916,288,600,679,285,315,515,605,288,515,679',
'285,515,515,607,679,515,288,515,679,285,614,515,897,902,897,897,897',
'897,897,515,916,616,310,309,515,515,515,515,619,515,515,916,916,306',
'515,515,113,113,113,113,113,113,515,622,515,113,113,623,626,897,113',
'627,113,113,113,113,113,113,113,303,897,897,629,302,113,113,113,113',
'113,113,113,632,938,113,938,938,938,938,938,113,113,113,113,113,113',
'113,113,113,113,113,113,633,113,113,113,641,113,113,113,113,113,850',
'642,850,850,850,850,850,895,938,895,895,895,895,895,484,643,830,832',
'651,113,658,484,113,830,832,113,113,661,664,113,484,113,830,832,669',
'113,893,850,893,893,893,893,893,113,895,298,672,296,113,113,113,113',
'291,113,113,895,895,290,113,113,783,783,783,783,783,783,113,287,113',
'783,783,681,686,893,783,282,783,783,783,783,783,783,783,281,893,893',
'704,280,783,783,783,783,783,783,783,278,731,783,731,731,731,269,731',
'783,783,266,783,783,783,783,783,783,783,783,783,265,783,783,783,725',
'783,783,783,783,783,873,304,873,873,873,726,873,766,304,766,766,766',
'766,766,43,727,340,304,729,783,730,43,783,340,734,783,783,251,739,783',
'43,783,340,740,741,783,953,220,953,953,953,953,953,783,766,745,216,215',
'783,783,783,783,213,783,783,766,766,760,783,783,197,197,197,197,197',
'197,783,767,783,197,197,773,775,953,197,776,197,197,197,197,197,197',
'197,779,953,953,195,782,197,197,197,197,197,197,197,546,546,197,101',
'546,546,546,42,197,197,791,197,197,197,197,197,197,197,197,197,37,197',
'197,197,795,197,197,197,197,197,443,611,611,611,611,611,796,963,930',
'963,963,963,963,963,527,930,799,800,812,197,930,527,197,813,930,197',
'197,35,819,197,527,197,443,820,822,197,443,443,443,443,826,831,21,197',
'963,836,837,838,197,197,197,197,841,197,197,963,963,842,197,197,835',
'835,835,835,835,835,197,844,197,835,835,847,849,855,835,856,835,835',
'835,835,835,835,835,6,6,6,6,6,835,835,835,835,835,835,835,861,866,835',
'867,868,444,,,835,835,,835,835,835,835,835,835,835,835,835,,835,835',
'835,,835,835,835,835,835,441,441,441,441,441,441,441,444,621,441,441',
'444,444,444,444,621,441,441,,835,621,,835,,621,835,835,,,835,,835,441',
',441,835,441,441,441,441,441,441,441,835,441,,,,835,835,835,835,,835',
'835,,,,835,835,602,602,602,602,602,602,835,,835,602,602,,,,602,,602',
'602,602,602,602,602,602,276,276,276,276,276,602,602,602,602,602,602',
'602,,,602,473,473,473,473,473,602,602,,602,602,602,602,602,602,602,602',
'602,,602,602,602,,602,602,602,602,602,446,446,446,446,446,446,446,446',
'211,446,446,,,,,211,446,446,,602,,,602,,211,602,602,,,602,,602,446,',
'446,602,446,446,446,446,446,446,446,602,446,,,,602,602,602,602,,602',
'602,,,,602,602,787,787,787,787,787,787,602,,602,787,787,,,,787,,787',
'787,787,787,787,787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,383',
'787,787,,787,787,787,787,787,787,787,787,787,,787,787,787,,787,787,787',
'787,787,383,383,383,383,383,383,383,383,383,383,383,,383,383,,,383,383',
',787,,,787,,,787,787,,,787,,787,383,,383,787,383,383,383,383,383,383',
'383,787,383,,,,787,787,787,787,,787,787,,,,787,787,,383,51,383,,,787',
',787,51,51,51,,,51,51,51,913,51,913,913,913,913,913,,,,,51,51,51,,,',
',,,,51,51,,51,51,51,51,51,,,,,,,,,913,,,,,,,,,913,913,913,913,,51,51',
'51,51,51,51,51,51,51,51,51,51,51,51,,,51,51,51,,,51,,,51,,,51,51,,51',
',51,,51,,51,51,51,51,51,51,51,,51,,51,,,,,,,,,,,,,,51,51,51,51,,51,',
'51,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,',
',,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,434,,,,,,,,,,,,,,,,434,434',
',0,,,0,,,0,0,,,0,,0,434,,434,0,434,434,434,434,,,434,0,434,,,,0,0,0',
'0,,0,0,,,,0,0,682,682,682,682,682,682,0,,0,682,682,,,,682,,682,682,682',
'682,682,682,682,,,,,,682,682,682,682,682,682,682,,,682,,,,,,682,682',
',682,682,682,682,682,682,682,682,682,,682,682,682,,682,682,682,682,682',
'435,,,,,,,,,,,,,,,,435,435,,682,,,682,,,682,682,,,682,,682,435,,435',
'682,435,435,435,435,,,435,682,435,,,,682,682,682,682,,682,682,,,,682',
'682,52,52,52,52,52,52,682,,682,52,52,,,,52,,52,52,52,52,52,52,52,,,',
',,52,52,52,52,52,52,52,,,52,,,,,,52,52,,52,52,52,52,52,52,52,52,52,',
'52,52,52,,52,52,52,52,52,436,,,,,,,,,,,,,,,,436,436,,52,,,52,,,52,52',
',,52,,52,436,,436,52,436,436,436,436,,,436,52,436,,,,52,52,52,52,,52',
'52,,,,52,52,834,834,834,834,834,834,52,,52,834,834,,,,834,,834,834,834',
'834,834,834,834,,,,,,834,834,834,834,834,834,834,,,834,,,,,,834,834',
',834,834,834,834,834,834,834,834,834,,834,834,834,,834,834,834,834,834',
'422,422,422,422,422,422,422,422,422,422,422,,422,422,,,422,422,,834',
',,834,,,834,834,,,834,,834,422,,422,834,422,422,422,422,422,422,422',
'834,422,,,,834,834,834,834,,834,834,,,,834,834,828,828,828,828,828,828',
'834,,834,828,828,,,,828,,828,828,828,828,828,828,828,,,,,,828,828,828',
'828,828,828,828,,,828,,,,,,828,828,,828,828,828,828,828,828,828,828',
'828,,828,828,828,,828,828,828,828,828,423,423,423,423,423,423,423,423',
'423,423,423,,423,423,,,423,423,,828,,,828,,,828,828,,,828,,828,423,',
'423,828,423,423,423,423,423,423,423,828,423,,,,828,828,828,828,,828',
'828,,,,828,828,279,279,279,279,279,279,828,,828,279,279,,,,279,,279',
'279,279,279,279,279,279,,,,,,279,279,279,279,279,279,279,,,279,,,,,',
'279,279,,279,279,279,279,279,279,279,279,279,,279,279,279,,279,279,279',
'279,279,440,440,440,440,440,440,440,,,440,440,,,,,,440,440,,279,,,279',
',,279,279,,,279,,279,440,,440,279,440,440,440,440,440,440,440,279,440',
',,,279,279,279,279,,279,279,,,,279,279,537,537,537,537,537,537,279,',
'279,537,537,,,,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537',
'537,537,537,,,537,,,,,,537,537,,537,537,537,537,537,537,537,537,537',
',537,537,537,,537,537,537,537,537,437,,,,,,,,,,,,,,,,437,437,,537,,',
'537,,,537,537,,,537,,537,437,,437,537,437,437,437,437,,,437,537,437',
',,,537,537,537,537,,537,537,,,,537,537,603,603,603,603,603,603,537,',
'537,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603,603,603,603',
'603,603,603,,,603,,,,,,603,603,,603,603,603,603,603,603,603,603,603',
',603,603,603,,603,603,603,603,603,433,433,433,433,433,433,433,,,433',
'433,,,,,,433,433,,603,,,603,,,603,603,,,603,,603,433,,433,603,433,433',
'433,433,433,433,433,603,433,,,,603,603,603,603,,603,603,,,,603,603,687',
'687,687,687,687,687,603,,603,687,687,,,,687,,687,687,687,687,687,687',
'687,,,,,,687,687,687,687,687,687,687,,,687,,,,,,687,687,,687,687,687',
'687,687,687,687,687,687,,687,687,687,,687,687,687,687,687,442,442,442',
'442,442,442,442,,,442,442,,,,,,442,442,,687,,,687,,,687,687,,,687,,687',
'442,,442,687,442,442,442,442,442,442,442,687,442,,,,687,687,687,687',
',687,687,,,,687,687,735,735,735,735,735,735,687,,687,735,735,,,,735',
',735,735,735,735,735,735,735,,,,,,735,735,735,735,735,735,735,,,735',
',,,,,735,735,,735,735,735,735,735,735,735,735,735,,735,735,735,,735',
'735,735,735,735,438,438,438,438,438,438,438,,,438,438,,,,,,438,438,',
'735,,,735,,,735,735,,,735,,735,438,,438,735,438,438,438,438,438,438',
'438,735,438,,,,735,735,735,735,,735,735,,,,735,735,284,284,284,284,284',
'284,735,,735,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284',
'284,284,284,284,284,,,284,,,,,,284,284,,284,284,284,284,284,284,284',
'284,284,,284,284,284,,284,284,284,284,284,445,445,445,445,445,445,445',
',,445,445,,,,,,445,445,,284,,,284,,,284,284,,,284,,284,445,,445,284',
'445,445,445,445,445,445,445,284,445,,,,284,284,284,284,,284,284,,,,284',
'284,750,750,750,750,750,750,284,,284,750,750,,,,750,,750,750,750,750',
'750,750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,,750,750,,750',
'750,750,750,750,750,750,750,750,,750,750,750,,750,750,750,750,750,439',
'439,439,439,439,439,439,,,439,439,,,,,,439,439,,750,,,750,,,750,750',
',,750,,750,439,,439,750,439,439,439,439,439,439,439,750,439,,,,750,750',
'750,750,,750,750,,,,750,750,697,697,697,697,697,697,750,,750,697,697',
',,,697,,697,697,697,697,697,697,697,,,,,,697,697,697,697,697,697,697',
',,697,,,,,,697,697,,697,697,697,697,697,697,697,697,697,,697,697,697',
',697,697,697,697,697,432,,,,,,,,,,,,,,,,432,432,,697,,,697,,,697,697',
',,697,,697,432,,,697,432,432,432,432,,,,697,,,,,697,697,697,697,,697',
'697,,,,697,697,912,912,912,912,912,912,697,,697,912,912,,,,912,,912',
'912,912,912,912,912,912,,,,,,912,912,912,912,912,912,912,,,912,,,,,',
'912,912,,912,912,912,912,912,912,912,912,912,,912,912,912,,912,912,912',
'912,912,431,,,,,,,,,,,,,,,,431,431,,912,,,912,,,912,912,,,912,,912,431',
',431,912,431,431,431,431,,,,912,,,,,912,912,912,912,,912,912,,,,912',
'912,219,219,219,219,219,219,912,,912,219,219,,,,219,,219,219,219,219',
'219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,219,219,,219',
'219,219,219,219,219,219,219,219,,219,219,219,,219,219,219,219,219,430',
',,,,,,,,,,,,,,,430,430,,219,,,219,,,219,219,,,219,,219,430,,430,219',
'430,430,430,430,,,,219,,,,,219,219,219,219,,219,219,,,,219,219,910,910',
'910,910,910,910,219,,219,910,910,,,,910,,910,910,910,910,910,910,910',
',,,,,910,910,910,910,910,910,910,,,910,,,,,,910,910,,910,910,910,910',
'910,910,910,910,910,,910,910,910,,910,910,910,910,910,,,,,,,,,,,,,,',
',,,,,910,,,910,,,910,910,,,910,,910,,,,910,,,,,,,,910,,,,,910,910,910',
'910,,910,910,,,,910,910,904,904,904,904,904,904,910,,910,904,904,,,',
'904,,904,904,904,904,904,904,904,,,,,,904,904,904,904,904,904,904,,',
'904,,,,,,904,904,,904,904,904,904,904,904,904,904,904,,904,904,904,',
'904,904,904,904,904,,,,,,,,,,,,,,,,,,,,904,,,904,,,904,904,,,904,,904',
',,,904,,,,,,,,904,,,,,904,904,904,904,,904,904,,,,904,904,31,31,31,31',
'31,31,904,,904,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31',
'31,31,,,31,,,,,,31,31,,31,31,31,31,31,31,31,31,31,,31,31,31,,31,31,31',
'31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,,,31,,,,,,,,31,,',
',,31,31,31,31,,31,31,,,,31,31,631,631,631,631,631,631,31,,31,631,631',
',,,631,,631,631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631',
',,631,,,,,,631,631,,631,631,631,631,631,631,631,631,631,,631,631,631',
',631,631,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,631',
',,,631,,,,,,,,631,,,,,631,631,631,631,,631,631,,,,631,631,512,512,512',
'512,512,512,631,,631,512,512,,,,512,,512,512,512,512,512,512,512,,,',
',,512,512,512,512,512,512,512,,,512,,,,,,512,512,,512,512,512,512,512',
'512,512,512,512,,512,512,512,,512,512,512,512,512,,,,,,,,,,,,,,,,,,',
',512,,,512,,,512,512,,,512,,512,,,,512,,,,,,,,512,,,,,512,512,512,512',
',512,512,,,,512,512,784,784,784,784,784,784,512,,512,784,784,,,,784',
',784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784,784,,,784',
',,,,391,784,784,,784,784,784,784,784,784,784,784,784,,784,784,784,,784',
'784,784,784,784,391,391,391,391,391,391,391,391,391,391,391,,391,391',
',,391,391,,784,,,784,,,784,784,,,784,,784,391,,391,784,391,391,391,391',
'391,391,391,784,391,,,,784,784,784,784,,784,784,,,,784,784,,391,406',
',,,784,,784,406,406,406,,,406,406,406,805,406,805,805,805,805,805,,',
',406,406,406,406,,,,,,,,406,406,,406,406,406,406,406,,,,,,,,,805,,,',
',,,,,805,805,805,805,,406,406,406,406,406,406,406,406,406,406,406,406',
'406,406,,,406,406,406,,,406,,,406,,,406,406,,406,,406,,406,,406,406',
'406,406,406,406,406,405,406,406,406,,,,405,405,405,,,405,405,405,,405',
'406,406,406,406,,406,,406,405,405,405,405,,,,,,,,405,405,,405,405,405',
'405,405,,,,,,,,,,,,,,,,,,,,,,,405,405,405,405,405,405,405,405,405,405',
'405,405,405,405,,,405,405,405,,,405,,,405,,,405,405,,405,,405,,405,',
'405,405,405,405,405,405,405,,405,405,405,,,,,,,,,,,,,,405,405,405,405',
',405,,405,793,793,793,793,793,793,,,,793,793,,,,793,,793,793,793,793',
'793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,793,793,,793',
'793,793,793,793,793,793,793,793,,793,793,793,,793,793,793,793,793,,',
',,,,,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,793,,,,793,,,,,,,,793,,',
',,793,793,793,793,,793,793,,,,793,793,589,589,589,589,589,589,793,,793',
'589,589,,,,589,,589,589,589,589,589,589,589,,,,,,589,589,589,589,589',
'589,589,,,589,,,,,,589,589,,589,589,589,589,589,589,589,589,589,,589',
'589,589,,589,589,589,589,589,,,,,,,,,,,,,,,,,,,,589,,,589,,,589,589',
',,589,,589,,,,589,,,,,,,,589,,,,,589,589,589,589,,589,589,,,,589,589',
',204,204,204,,204,589,,589,204,204,,,,204,,204,204,204,204,204,204,204',
',,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204,204,204,204,204',
'204,204,204,,204,204,204,,204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204',
',,204,,,204,204,,,204,,,,,,204,,,,,,,,204,,,,,204,204,204,204,,204,204',
',,,204,204,,205,205,205,,205,204,,204,205,205,,,,205,,205,205,205,205',
'205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205,205',
'205,205,205,205,205,205,,205,205,205,,205,205,205,205,205,,,,,,,,,,',
',,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205',
'205,,205,205,,,,205,205,,206,206,206,,206,205,,205,206,206,,,,206,,206',
'206,206,206,206,206,206,,,,,,206,206,206,206,206,206,206,,,206,,,,,',
',206,,,206,206,206,206,206,206,206,206,,206,206,206,,206,206,206,206',
'206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,206,,,206,,,,,,206,,,,,,,,206',
',,,,206,206,206,206,,206,206,,,,206,206,,207,207,207,,207,206,,206,207',
'207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207,207,207,207,207',
'207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207,,207,207,207,',
'207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207,207,,,207,,,',
',,207,,,,,,,,207,,,,,207,207,207,207,,207,207,,,,207,207,,208,208,208',
',208,207,,207,208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208',
'208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208',
',208,208,208,,208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208',
'208,,,208,,,,,,208,,,,,,,,208,,,,,208,208,208,208,,208,208,,,,208,208',
'208,768,768,768,,768,208,,208,768,768,,,,768,,768,768,768,768,768,768',
'768,,,,,,768,768,768,768,768,768,768,,,768,,,,,,,768,,,768,768,768,768',
'768,768,768,768,,768,768,768,,768,768,768,768,768,,,,,,,,,,,,,,,,,,',
',768,,,768,,,768,768,,,768,,,,,,768,,,,,,,,768,,,,,768,768,768,768,',
'768,768,,,,768,768,,754,754,754,,754,768,,768,754,754,,,,754,,754,754',
'754,754,754,754,754,,,,,,754,754,754,754,754,754,754,,,754,,,,,,,754',
',,754,754,754,754,754,754,754,754,,754,754,754,,754,754,,807,754,807',
'807,807,807,807,,,,,,,,,,,,,,,754,,,754,,,754,754,,,754,,,,,,807,,,',
',,,,,807,807,807,807,754,754,754,754,,754,754,,,,754,754,,218,218,218',
',218,754,,754,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218',
'218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218',
',218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218',
'218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,,218,218,,,,218,218',
',743,743,743,,743,218,,218,743,743,,,,743,,743,743,743,743,743,743,743',
',,,,,743,743,743,743,743,743,743,,,743,,,,,,,743,,,743,743,743,743,743',
'743,743,743,743,743,743,743,,743,743,743,743,743,,,,,,,,,,,,,,,,,,,',
'743,,,743,,,743,743,,,743,,743,,743,,743,,,,,,,,743,,,,,743,743,743',
'743,,743,743,,,,743,743,,221,221,221,,221,743,,743,221,221,,,,221,,221',
'221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,',
',221,,,221,221,221,221,221,221,221,221,,221,221,221,,221,221,221,221',
'221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221',
',,,,221,221,221,221,,221,221,,,,221,221,,222,222,222,,222,221,,221,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,',
',,222,,,,,,,,222,,,,,222,222,222,222,,222,222,,,,222,222,,223,223,223',
',223,222,,222,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,,223,223,,,,223,223',
',224,224,224,,224,223,,223,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224',
',,,224,224,,225,225,225,,225,224,,224,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225',
'225,,225,225,,,,225,225,,226,226,226,,226,225,,225,226,226,,,,226,,226',
'226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,',
',226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226,226,226',
'226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226',
',,,,226,226,226,226,,226,226,,,,226,226,,227,227,227,,227,226,,226,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,',
',,227,,,,,,,,227,,,,,227,227,227,227,,227,227,,,,227,227,,228,228,228',
',228,227,,227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228',
'228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228',
',228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228',
'228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,,228,228,,,,228,228',
',229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,,229,229',
',,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230,230,230,230',
'230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230',
'230,230,230,230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,',
',,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230',
'230,,230,230,,,,230,230,,231,231,231,,231,230,,230,231,231,,,,231,,231',
'231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,',
',231,,,231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231',
'231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231',
',,,,231,231,231,231,,231,231,,,,231,231,,232,232,232,,232,231,,231,232',
'232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232',
'232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,',
'232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,',
',,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232,,233,233,233',
',233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233',
'233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,,233,233,,,,233,233',
',234,234,234,,234,233,,233,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,,234,234',
',,,234,234,,235,235,235,,235,234,,234,235,235,,,,235,,235,235,235,235',
'235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235',
'235,235,235,235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,',
',,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,,235,235,,,,235,235,,236,236,236,,236,235,,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236',
',,,,236,236,236,236,,236,236,,,,236,236,,237,237,237,,237,236,,236,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,',
',,237,,,,,,,,237,,,,,237,237,237,237,,237,237,,,,237,237,,238,238,238',
',238,237,,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238',
',238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238',
'238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,,238,238,,,,238,238',
',239,239,239,,239,238,,238,239,239,,,,239,,239,239,239,239,239,239,239',
',,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239',
'239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,,239,239',
',,,239,239,,240,240,240,,240,239,,239,240,240,,,,240,,240,240,240,240',
'240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240',
'240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,',
',,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,,240,240,,,,240,240,,241,241,241,,241,240,,240,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,,241,241,,,,241,241,,242,242,242,,242,241,,241,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,',
',,242,,,,,,,,242,,,,,242,242,242,242,,242,242,,,,242,242,,243,243,243',
',243,242,,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,,243,243,,,,243,243',
',244,244,244,,244,243,,243,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,,244,244',
',,,244,244,,245,245,245,,245,244,,244,245,245,,,,245,,245,245,245,245',
'245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245',
'245,245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,',
',,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245',
'245,,245,245,,,,245,245,,246,246,246,,246,245,,245,246,246,,,,246,,246',
'246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,',
',246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,246,246',
'246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246',
',,,,246,246,246,246,,246,246,,,,246,246,,5,5,5,5,5,246,,246,5,5,,,,5',
',5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,',
'5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5',
',,,,5,5,5,5,,5,5,,,,5,5,,736,736,736,,736,5,,5,736,736,,,,736,,736,736',
'736,736,736,736,736,,,,,,736,736,736,736,736,736,736,,,736,,,,,,,736',
',,736,736,736,736,736,736,736,736,736,736,736,736,,736,736,736,736,736',
',,,,,,,,,,,,,,,,,,,736,,,736,,,736,736,,,736,,736,,736,,736,,,,,,,,736',
',,,,736,736,736,736,,736,736,,,,736,736,,252,252,252,,252,736,,736,252',
'252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252',
'252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,252,252,252,252',
',252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,252',
',252,,252,,,,,,,,252,,,,,252,252,252,252,,252,252,,,,252,252,,253,253',
'253,,253,252,,252,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,253,253,253,253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,253,,253,,253,,,,,,,,253,,,,,253,253,253,253,,253,253',
',,,253,253,,261,261,261,,261,253,,253,261,261,,,,261,,261,261,261,261',
'261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261',
'261,261,261,261,261,261,261,261,261,261,,261,261,261,261,261,,,,,,,',
',,,,,,,,,,,,261,,,261,,,261,261,,,261,,261,,261,,261,,,,,,,,261,,,,',
'261,261,261,261,,261,261,,,,261,261,261,724,724,724,,724,261,,261,724',
'724,,,,724,,724,724,724,724,724,724,724,,,,,,724,724,724,724,724,724',
'724,,,724,,,,,,,724,,,724,724,724,724,724,724,724,724,,724,724,724,',
'724,724,724,724,724,,,,,,,,,,,,,,,,,,,,724,,,724,,,724,724,,,724,,,',
',,724,,,,,,,,724,,,,,724,724,724,724,,724,724,,,,724,724,,722,722,722',
',722,724,,724,722,722,,,,722,,722,722,722,722,722,722,722,,,,,,722,722',
'722,722,722,722,722,,,722,,,,,,,722,,,722,722,722,722,722,722,722,722',
',722,722,722,,722,722,722,722,722,,,,,,,,,,,,,,,,,,,,722,,,722,,,722',
'722,,,722,,,,,,722,,,,,,,,722,,,,,722,722,722,722,,722,722,,,,722,722',
',268,268,268,,268,722,,722,268,268,,,,268,,268,268,268,268,268,268,268',
',,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268',
'268,268,268,,268,268,268,,268,268,268,268,268,,,,,,,,,,,,,,,,,,,,268',
',,268,,,268,268,,,268,,,,,,268,,,,,,,,268,,,,,268,268,268,268,,268,268',
',,,268,268,,721,721,721,,721,268,,268,721,721,,,,721,,721,721,721,721',
'721,721,721,,,,,,721,721,721,721,721,721,721,,,721,,,,,,,721,,,721,721',
'721,721,721,721,721,721,,721,721,721,,721,721,721,721,721,,,,,,,,,,',
',,,,,,,,,721,,,721,,,721,721,,,721,,,,,,721,,,,,,,,721,,,,,721,721,721',
'721,,721,721,,,,721,721,,270,270,270,,270,721,,721,270,270,,,,270,,270',
'270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270,,,,,',
',270,,,270,270,270,270,270,270,270,270,,270,270,270,,270,270,270,270',
'270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270,,,,,,,,270',
',,,,270,270,270,270,,270,270,,,,270,270,,272,272,272,,272,270,,270,272',
'272,,,,272,,272,272,272,272,272,272,272,,,,,,272,272,272,272,272,272',
'272,,,272,,,,,,,272,,,272,272,272,272,272,272,272,272,,272,272,272,',
'272,272,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,,272,,,',
',,272,,,,,,,,272,,,,,272,272,272,272,,272,272,,,,272,272,,720,720,720',
',720,272,,272,720,720,,,,720,,720,720,720,720,720,720,720,,,,,,720,720',
'720,720,720,720,720,,,720,,,,,,,720,,,720,720,720,720,720,720,720,720',
',720,720,720,,720,720,720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720',
'720,,,720,,,,,,720,,,,,,,,720,,,,,720,720,720,720,,720,720,,,,720,720',
',719,719,719,,719,720,,720,719,719,,,,719,,719,719,719,719,719,719,719',
',,,,,719,719,719,719,719,719,719,,,719,,,,,,,719,,,719,719,719,719,719',
'719,719,719,,719,719,719,,719,719,719,719,719,,,,,,,,,,,,,,,,,,,,719',
',,719,,,719,719,,,719,,,,,,719,,,,,,,,719,,,,,719,719,719,719,,719,719',
',,,719,719,,277,277,277,277,277,719,,719,277,277,,,,277,,277,277,277',
'277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,277,277',
',277,277,277,277,277,277,277,277,277,,277,277,277,,277,277,277,277,277',
',,,,,,,,,,,,,,,,,,,277,,,277,,,277,277,,,277,,277,,,,277,,,,,,,,277',
',,,,277,277,277,277,,277,277,,,,277,277,,707,707,707,,707,277,,277,707',
'707,,,,707,,707,707,707,707,707,707,707,,,,,,707,707,707,707,707,707',
'707,,,707,,,,,,,707,,,707,707,707,707,707,707,707,707,,707,707,707,',
'707,707,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,,707,,,',
',,707,,,,,,,,707,,,,,707,707,707,707,,707,707,,,,707,707,,108,108,108',
',108,707,,707,108,108,,,,108,,108,108,108,108,108,108,108,,,,,,108,108',
'108,108,108,108,108,,,108,,,,,,,108,,,108,108,108,108,108,108,108,108',
',108,108,108,,108,108,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108',
'108,,,108,,,,,,108,,,,,,,,108,,,,,108,108,108,108,,108,108,,,,108,108',
',466,466,466,,466,108,,108,466,466,,,,466,,466,466,466,466,466,466,466',
',,,,,466,466,466,466,466,466,466,,,466,,,,,,,466,,,466,466,466,466,466',
'466,466,466,466,466,466,466,,466,466,466,466,466,,,,,,,,,,,,,,,,,,,',
'466,,,466,,,466,466,,,466,,,,466,,466,,,,,,,,466,,,,,466,466,466,466',
',466,466,,,,466,466,,464,464,464,,464,466,,466,464,464,,,,464,,464,464',
'464,464,464,464,464,,,,,,464,464,464,464,464,464,464,,,464,,,,,,,464',
',,464,464,464,464,464,464,464,464,464,464,464,464,,464,464,464,464,464',
',,,,,,,,,,,,,,,,,,,464,,,464,,,464,464,,,464,,464,,464,,464,,,,,,,,464',
',,,,464,464,464,464,,464,464,,,,464,464,,458,458,458,,458,464,,464,458',
'458,,,,458,,458,458,458,458,458,458,458,,,,,,458,458,458,458,458,458',
'458,,,458,,,,,,,458,,,458,458,458,458,458,458,458,458,458,458,458,458',
',458,458,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,',
',458,,458,,,,,,,,458,,,,,458,458,458,458,,458,458,,,,458,458,,883,883',
'883,,883,458,,458,883,883,,,,883,,883,883,883,883,883,883,883,,,,,,883',
'883,883,883,883,883,883,,,883,,,,,,,883,,,883,883,883,883,883,883,883',
'883,883,883,883,883,,883,883,883,883,883,,,,,,,,,,,,,,,,,,,,883,,,883',
',,883,883,,,883,,883,,883,,883,,,,,,,,883,,,,,883,883,883,883,,883,883',
',,,883,883,,881,881,881,,881,883,,883,881,881,,,,881,,881,881,881,881',
'881,881,881,,,,,,881,881,881,881,881,881,881,,,881,,,,,,,881,,,881,881',
'881,881,881,881,881,881,,881,881,881,,881,881,881,881,881,,,,,,,,,,',
',,,,,,,,,881,,,881,,,881,881,,,881,,881,,881,,881,,,,,,,,881,,,,,881',
'881,881,881,,881,881,,,,881,881,,878,878,878,,878,881,,881,878,878,',
',,878,,878,878,878,878,878,878,878,,,,,,878,878,878,878,878,878,878',
',,878,,,,,,,878,,,878,878,878,878,878,878,878,878,878,878,878,878,,878',
'878,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878,878,,,878,,878,,878',
',878,,,,,,,,878,,,,,878,878,878,878,,878,878,,,,878,878,,19,19,19,,19',
'878,,878,19,19,,,,19,,19,19,19,19,19,19,19,,,,,,19,19,19,19,19,19,19',
',,19,,,,,,,19,,,19,19,19,19,19,19,19,19,,19,19,19,,19,19,19,19,19,,',
',,,,,,,,,,,,,,,,,19,,,19,,,19,19,,,19,,,,,,19,,,,,,,,19,,,,,19,19,19',
'19,,19,19,,,,19,19,,27,27,27,,27,19,,19,27,27,,,,27,,27,27,27,27,27',
'27,27,,,,,,27,27,27,27,27,27,27,,,27,,,,,,,27,,,27,27,27,27,27,27,27',
'27,27,27,27,27,,27,27,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,,',
'27,,27,,27,,27,,,,,,,,27,,,,,27,27,27,27,,27,27,,,,27,27,,28,28,28,',
'28,27,,27,28,28,,,,28,,28,28,28,28,28,28,28,,,,,,28,28,28,28,28,28,28',
',,28,,,,,,,28,,,28,28,28,28,28,28,28,28,28,28,28,28,,28,28,28,28,28',
',,,,,,,,,,,,,,,,,,,28,,,28,,,28,28,,,28,,28,,28,,28,,,,,,,,28,,,,,28',
'28,28,28,,28,28,,,,28,28,,29,29,29,,29,28,,28,29,29,,,,29,,29,29,29',
'29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29',
'29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29',
'29,,,29,,29,,29,,29,,,,,,,,29,,,,,29,29,29,29,,29,29,,,,29,29,,32,32',
'32,,32,29,,29,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32',
'32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,,32,32,32,,32,32,,538',
'32,538,538,538,538,538,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,,,538',
'538,,,,,,,,538,538,538,538,32,32,32,32,,32,32,,,,32,32,,33,33,33,,33',
'32,,32,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,',
',33,,,,,584,,33,,,33,33,33,33,33,33,33,33,,33,33,33,,33,33,,,33,584',
'584,584,584,584,584,584,584,584,584,584,,584,584,,,584,584,,33,,,33',
',,33,33,,,33,,,584,,584,,584,584,584,584,584,584,584,,584,,,,33,33,33',
'33,,33,33,,,,33,33,,584,,33,,,33,,33,817,817,817,,817,,,,817,817,,,',
'817,,817,817,817,817,817,817,817,,,,,,817,817,817,817,817,817,817,,',
'817,,,,,,,817,,,817,817,817,817,817,817,817,817,,817,817,817,,817,817',
',639,817,639,639,639,639,639,,,,,,,,,,,,,,,817,,,817,,,817,817,,,817',
',,,,,639,,,,,,,,,639,639,639,639,817,817,817,817,,817,817,,,,817,817',
',803,803,803,,803,817,,817,803,803,,,,803,,803,803,803,803,803,803,803',
',,,,,803,803,803,803,803,803,803,,,803,,,,,,,803,,,803,803,803,803,803',
'803,803,803,,803,803,803,,803,803,803,803,803,,,,,,,,,,,,,,,,,,,,803',
',,803,,,803,803,,,803,,,,,,803,,,,,,,,803,,,,,803,803,803,803,,803,803',
',,,803,803,,39,39,39,,39,803,,803,39,39,,,,39,,39,39,39,39,39,39,39',
',,,,,39,39,39,39,39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39',
'39,39,,39,39,39,39,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39',
',,,,,,,39,,,,,39,39,39,39,,39,39,,,,39,39,,40,40,40,,40,39,,39,40,40',
',,,40,,40,40,40,40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40',
',,40,40,40,40,40,40,40,40,,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,',
',,,40,,,40,,,40,40,,,40,,,,,,40,,,,,,,,40,,,,,40,40,40,40,,40,40,,,',
'40,40,,41,41,41,,41,40,,40,41,41,,,,41,,41,41,41,41,41,41,41,,,,,,41',
'41,41,41,41,41,41,,,41,,,,,,,41,,,41,41,41,41,41,41,41,41,,41,41,41',
',41,41,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41,41,,,41,,,,,,41,,,,',
',,,41,,,,,41,41,41,41,,41,41,,,,41,41,,53,53,53,,53,41,,41,53,53,,,',
'53,,53,53,53,53,53,53,53,,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53',
'53,53,53,53,53,53,53,,53,53,53,,53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53',
',,53,,,53,53,,,53,,,,,,53,,,,,,,,53,,,,,53,53,53,53,,53,53,,,,53,53',
',54,54,54,,54,53,,53,54,54,,,,54,,54,54,54,54,54,54,54,,,,,,54,54,54',
'54,54,54,54,,,54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,54,,54',
'54,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,54,,,,54,,,,,,',
',54,,,,,54,54,54,54,,54,54,,,,54,54,,55,55,55,,55,54,,54,55,55,,,,55',
',55,55,55,55,55,55,55,,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55',
'55,55,55,55,55,55,55,55,55,55,,55,55,55,55,55,,,,,,,,,,,,,,,,,,,,55',
',,55,,,55,55,,,55,,,,,,55,,,,,,,,55,,,,,55,55,55,55,,55,55,,,,55,55',
',58,58,58,,58,55,,55,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58',
'58,58,58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58',
'58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,',
',,,58,58,58,58,,58,58,,,,58,58,,59,59,59,,59,58,,58,59,59,,,,59,,59',
'59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59',
'59,59,59,59,59,,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59',
',,59,59,,,59,,,,,,59,,,,,,,,59,,,,,59,59,59,59,,59,59,,,,59,59,,62,62',
'62,,62,59,,59,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62',
'62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,,62,62,62,,62,62,62,62',
'62,596,596,596,596,596,596,596,596,596,596,596,,596,596,,,596,596,,62',
',596,62,,,62,62,,,62,,,596,,596,62,596,596,596,596,596,596,596,62,596',
',,,62,62,62,62,,62,62,,,,62,62,62,596,,596,,62,62,,62,63,63,63,,63,',
',,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,',
',,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,890,63,890,890,890',
'890,890,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,890,,,,,,,,,890,890',
'890,890,63,63,63,63,,63,63,,,,63,63,,64,64,64,,64,63,,63,64,64,,,,64',
',64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64',
'64,64,64,64,64,64,,64,64,64,,64,64,,688,64,688,688,688,688,688,,,,,',
',,,,,,64,,,64,,,64,,,64,64,,,64,,,,,,688,,,,,,,,,688,688,688,688,64',
'64,64,64,,64,64,,,,64,64,,65,65,65,,65,64,,64,65,65,,,,65,,65,65,65',
'65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65,65,65',
'65,65,65,,65,65,65,,65,65,,864,65,864,864,864,864,864,,,,,,,,,,,,,,',
'65,,,65,,,65,65,,,65,,,,,,864,864,,,,,,,,864,864,864,864,65,65,65,65',
',65,65,,,,65,65,,786,786,786,,786,65,,65,786,786,,,,786,,786,786,786',
'786,786,786,786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,,786,,,786',
'786,786,786,786,786,786,786,,786,786,786,,786,786,786,786,786,,,,,,',
',,,,,,,,,,,,,786,,,786,,,786,786,,,786,,786,,,,786,,,,,,,,786,,,,,786',
'786,786,786,,786,786,,,,786,786,,103,103,103,103,103,786,,786,103,103',
',,,103,,103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103',
',,103,,,,,,103,103,103,103,103,103,103,103,103,103,103,103,,103,103',
'103,,103,103,103,103,103,712,712,712,712,712,712,712,712,712,712,712',
',712,712,,,712,712,,103,,,103,,,103,103,,,103,,103,712,,712,103,712',
'712,712,712,712,712,712,103,712,,,,103,103,103,103,,103,103,,,,103,103',
',712,,,,103,103,,103,468,468,468,,468,,,,468,468,,,,468,,468,468,468',
'468,468,468,468,,,,,,468,468,468,468,468,468,468,,,468,,,,,,,468,,,468',
'468,468,468,468,468,468,468,,468,468,468,,468,468,468,468,468,,,,,,',
',,,,,,,,,,,,,468,,,468,,,468,468,,,468,,,,,,468,,,,,,,,468,,,,,468,468',
'468,468,,468,468,,,,468,468,,109,109,109,,109,468,,468,109,109,,,,109',
',109,109,109,109,109,109,109,,,,,,109,109,109,109,109,109,109,,,109',
',,,,,,109,,,109,109,109,109,109,109,109,109,,109,109,109,,109,109,109',
'109,109,,,,,,,,,,,,,,,,,,,,109,,,109,,,109,109,,,109,,,,,,109,,,,,,',
',109,,,,,109,109,109,109,,109,109,,,,109,109,,110,110,110,,110,109,',
'109,110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110,110,110,110',
'110,110,110,,,110,,,,,,,110,,,110,110,110,110,110,110,110,110,,110,110',
'110,,110,110,110,110,110,,,,,,,,,,,,,,,,,,,,110,,,110,,,110,110,,,110',
',,,,,110,,,,,,,,110,,,,,110,110,110,110,,110,110,,,,110,110,,111,111',
'111,,111,110,,110,111,111,,,,111,,111,111,111,111,111,111,111,,,,,,111',
'111,111,111,111,111,111,,,111,,,,,,,111,,,111,111,111,111,111,111,111',
'111,,111,111,111,,111,111,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,',
',111,111,,,111,,,,,,111,,,,,,,,111,,,,,111,111,111,111,,111,111,,,,111',
'111,,112,112,112,112,112,111,,111,112,112,,,,112,,112,112,112,112,112',
'112,112,,,,,,112,112,112,112,112,112,112,,,112,,,,,,112,112,,112,112',
'112,112,112,112,112,112,112,,112,112,112,,112,112,112,112,112,,,,,,',
',,,,,,,,,,,,,112,,,112,,,112,112,,,112,,112,,,,112,,,,,,,,112,,,,,112',
'112,112,112,,112,112,,,,112,112,,781,781,781,,781,112,,112,781,781,',
',,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781,781,781,781',
',,781,,,,,,,781,,,781,781,781,781,781,781,781,781,,781,781,781,,781',
'781,781,781,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781,,,781,,,,,,781',
',,,,,,,781,,,,,781,781,781,781,,781,781,,,,781,781,,198,198,198,,198',
'781,,781,198,198,,,,198,,198,198,198,198,198,198,198,,,,,,198,198,198',
'198,198,198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,,198',
'198,198,,198,198,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,198',
',,198,,198,,,,198,,,,,,,,198,,,,,198,198,198,198,,198,198,,,,198,198',
',199,199,199,,199,198,,198,199,199,,,,199,,199,199,199,199,199,199,199',
',,,,,199,199,199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199',
'199,199,199,,199,199,199,,199,199,199,199,199,,,,,,,,,,,,,,,,,,,,199',
',,199,,,199,199,,,199,,199,,,,199,,,,,,,,199,,,,,199,199,199,199,,199',
'199,,,,199,199,,200,200,200,,200,199,,199,200,200,,,,200,,200,200,200',
'200,200,200,200,,,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200',
'200,200,200,200,200,200,200,,200,200,200,,200,200,200,200,200,,,,,,',
',,,,,,,,,,,,,200,,,200,,,200,200,,,200,,,,,,200,,,,,,,,200,,,,,200,200',
'200,200,,200,200,,,,200,200,,201,201,201,,201,200,,200,201,201,,,,201',
',201,201,201,201,201,201,201,,,,,,201,201,201,201,201,201,201,,,201',
',,,,,,201,,,201,201,201,201,201,201,201,201,201,201,201,201,,201,201',
'201,201,201,,,,,,,,,,,,,,,,,,,,201,,,201,,,201,201,,,201,,201,,201,',
'201,,,,,,,,201,,,,,201,201,201,201,,201,201,,,,201,201,,705,705,705',
',705,201,,201,705,705,,,,705,,705,705,705,705,705,705,705,,,,,,705,705',
'705,705,705,705,705,,,705,,,,,,,705,,,705,705,705,705,705,705,705,705',
',705,705,705,,705,705,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705,,,705',
'705,,,705,,,,,,705,,,,,,,,705,,,,,705,705,705,705,,705,705,,,,705,705',
',283,283,283,,283,705,,705,283,283,,,,283,,283,283,283,283,283,283,283',
',,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283',
'283,283,283,,283,283,283,,283,283,,,283,717,717,717,717,717,717,717',
'717,717,717,717,,717,717,,,717,717,,283,,,283,,,283,283,,,283,,,717',
',717,,717,717,717,717,717,717,717,,717,,,,283,283,283,283,,283,283,',
',,283,283,,717,,283,,,283,,283,677,677,677,,677,,,,677,677,,,,677,,677',
'677,677,677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,',
',677,,,677,677,677,677,677,677,677,677,,677,677,677,,677,677,677,677',
'677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,677,,,,,,,,677',
',,,,677,677,677,677,,677,677,,,,677,677,,299,299,299,,299,677,,677,299',
'299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299,299,299,299,299',
'299,,,299,,,,,,,299,,,299,299,299,299,299,299,299,299,,299,299,299,',
'299,299,,761,299,761,761,761,761,761,,,,,,,,,,,,,,,299,,,299,,,299,299',
',,299,,,,,,761,,,,,,,,,761,761,761,761,299,299,299,299,,299,299,,,,299',
'299,,624,624,624,,624,299,,299,624,624,,,,624,,624,624,624,624,624,624',
'624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,,624,,,624,624,624,624',
'624,624,624,624,,624,624,624,,624,624,,763,624,763,763,763,763,763,',
',,,,,,,,,,,,,624,,,624,,,624,624,,,624,,,,,,763,,,,,,,,,763,763,763',
'763,624,624,624,624,,624,624,,,,624,624,,308,308,308,,308,624,,624,308',
'308,,,,308,,308,308,308,308,308,308,308,,,,,,308,308,308,308,308,308',
'308,,,308,,,,,,,308,,,308,308,308,308,308,308,308,308,,308,308,308,',
'308,308,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308,308,,308,308,,,308',
',,,,,308,,,,,,,,308,,,,,308,308,308,308,,308,308,,,,308,308,,613,613',
'613,,613,308,,308,613,613,,,,613,,613,613,613,613,613,613,613,,,,,,613',
'613,613,613,613,613,613,,,613,,,,,,,613,,,613,613,613,613,613,613,613',
'613,,613,613,613,,613,613,,511,613,511,511,511,511,511,,,,,,,,,,,,,',
',613,,,613,,,613,613,,,613,,,,,,511,511,,,,,,,,511,511,511,511,613,613',
'613,613,,613,613,,,,613,613,,608,608,608,,608,613,,613,608,608,,,,608',
',608,608,608,608,608,608,608,,,,,,608,608,608,608,608,608,608,,,608',
',,,,,,608,,,608,608,608,608,608,608,608,608,,608,608,608,,608,608,608',
'608,608,,,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,,608,,,,,,608,,,,,,',
',608,,,,,608,608,608,608,,608,608,,,,608,608,,324,324,324,,324,608,',
'608,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324',
'324,324,324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324',
'324,,324,324,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324',
',,,,,324,,,,,,,,324,,,,,324,324,324,324,,324,324,,,,324,324,,325,325',
'325,,325,324,,324,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325',
'325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325',
'325,,325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,',
',325,325,,,325,,,,,,325,,,,,,,,325,,,,,325,325,325,325,,325,325,,,,325',
'325,,574,574,574,,574,325,,325,574,574,,,,574,,574,574,574,574,574,574',
'574,,,,,,574,574,574,574,574,574,574,,,574,,,,,,,574,,,574,574,574,574',
'574,574,574,574,,574,574,574,,574,574,574,574,574,,,,,,,,,,,,,,,,,,',
',574,,,574,,,574,574,,,574,,,,,,574,,,,,,,,574,,,,,574,574,574,574,',
'574,574,,,,574,574,,573,573,573,,573,574,,574,573,573,,,,573,,573,573',
'573,573,573,573,573,,,,,,573,573,573,573,573,573,573,,,573,,,,,,,573',
',,573,573,573,573,573,573,573,573,,573,573,573,,573,573,573,573,573',
',,,,,,,,,,,,,,,,,,,573,,,573,,,573,573,,,573,,,,,,573,,,,,,,,573,,,',
',573,573,573,573,,573,573,,,,573,573,,569,569,569,,569,573,,573,569',
'569,,,,569,,569,569,569,569,569,569,569,,,,,,569,569,569,569,569,569',
'569,,,569,,,,,,,569,,,569,569,569,569,569,569,569,569,,569,569,569,',
'569,569,569,569,569,,,,,,,,,,,,,,,,,,,,569,,,569,,,569,569,,,569,,,',
',,569,,,,,,,,569,,,,,569,569,569,569,,569,569,,,,569,569,,568,568,568',
',568,569,,569,568,568,,,,568,,568,568,568,568,568,568,568,,,,,,568,568',
'568,568,568,568,568,,,568,,,,,,,568,,,568,568,568,568,568,568,568,568',
',568,568,568,,568,568,568,568,568,,,,,,,,,,,,,,,,,,,,568,,,568,,,568',
'568,,,568,,,,,,568,,,,,,,,568,,,,,568,568,568,568,,568,568,,,,568,568',
',565,565,565,,565,568,,568,565,565,,,,565,,565,565,565,565,565,565,565',
',,,,,565,565,565,565,565,565,565,,,565,,,,,,,565,,,565,565,565,565,565',
'565,565,565,,565,565,565,,565,565,565,565,565,,,,,,,,,,,,,,,,,,,,565',
',,565,,,565,565,,,565,,,,,,565,,,,,,,,565,,,,,565,565,565,565,,565,565',
',,,565,565,,564,564,564,,564,565,,565,564,564,,,,564,,564,564,564,564',
'564,564,564,,,,,,564,564,564,564,564,564,564,,,564,,,,,,,564,,,564,564',
'564,564,564,564,564,564,,564,564,564,,564,564,564,564,564,,,,,,,,,,',
',,,,,,,,,564,,,564,,,564,564,,,564,,564,,,,564,,,,,,,,564,,,,,564,564',
'564,564,,564,564,,,,564,564,,343,343,343,,343,564,,564,343,343,,,,343',
',343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,,343',
',,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,,343,343,343',
'343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,',
',343,,,,,343,343,343,343,,343,343,,,,343,343,,562,562,562,,562,343,',
'343,562,562,,,,562,,562,562,562,562,562,562,562,,,,,,562,562,562,562',
'562,562,562,,,562,,,,,,,562,,,562,562,562,562,562,562,562,562,,562,562',
'562,,562,562,562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,562,,,562',
',,,,,562,,,,,,,,562,,,,,562,562,562,562,,562,562,,,,562,562,,534,534',
'534,,534,562,,562,534,534,,,,534,,534,534,534,534,534,534,534,,,,,,534',
'534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534,534,534,534,534',
'534,,534,534,534,,534,534,534,534,534,,,,,,,,,,,,,,,,,,,,534,,,534,',
',534,534,,,534,,,,,,534,,,,,,,,534,,,,,534,534,534,534,,534,534,,,,534',
'534,,531,531,531,,531,534,,534,531,531,,,,531,,531,531,531,531,531,531',
'531,,,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531',
'531,531,531,531,531,531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,,',
',,,,531,,,531,,,531,531,,,531,,531,,531,,531,,,,,,,,531,,,,,531,531',
'531,531,,531,531,,,,531,531,,521,521,521,,521,531,,531,521,521,,,,521',
',521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521,,,521',
',,,,,,521,,,521,521,521,521,521,521,521,521,521,521,521,521,,521,521',
'521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,521,,521,',
'521,,,,,,,,521,,,,,521,521,521,521,,521,521,,,,521,521,,358,358,358',
',358,521,,521,358,358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358',
'358,358,358,358,358,,,358,,,,,,,358,,,358,358,358,358,358,358,358,358',
',358,358,358,,358,358,358,358,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358',
'358,,,358,,,,,,358,,,,,,,,358,,,,,358,358,358,358,,358,358,,,,358,358',
',520,520,520,,520,358,,358,520,520,,,,520,,520,520,520,520,520,520,520',
',,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520',
'520,520,520,,520,520,520,,520,520,520,520,520,,,,,,,,,,,,,,,,,,,,520',
',,520,,,520,520,,,520,,520,,,,520,,,,,,,,520,,,,,520,520,520,520,,520',
'520,,,,520,520,,385,385,385,,385,520,,520,385,385,,,,385,,385,385,385',
'385,385,385,385,,,,,,385,385,385,385,385,385,385,,,385,,,,,,,385,,,385',
'385,385,385,385,385,385,385,,385,385,385,,385,385,385,385,385,,,,,,',
',,,,,,,,,,,,,385,,,385,,,385,385,,,385,,,,,,385,,,,,,,,385,,,,,385,385',
'385,385,,385,385,,,,385,385,,506,506,506,,506,385,,385,506,506,,,,506',
',506,506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506,,,506',
',,,,,,506,,,506,506,506,506,506,506,506,506,506,506,506,506,,506,506',
'506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,,,506,,',
',,,,,506,,,,,506,506,506,506,,506,506,,,,506,506,,503,503,503,,503,506',
',506,503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503,503,503,503',
'503,503,503,,,503,,,,,,,503,,,503,503,503,503,503,503,503,503,503,503',
'503,503,,503,503,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503',
',,503,,503,,,,503,,,,,,,,503,,,,,503,503,503,503,,503,503,,,,503,503',
',499,499,499,,499,503,,503,499,499,,,,499,,499,499,499,499,499,499,499',
',,,,,499,499,499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499,499',
'499,499,499,,499,499,499,,499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499',
',,499,,,499,499,,,499,,499,,,,499,,,,,,,,499,,,,,499,499,499,499,,499',
'499,,,,499,499,,497,497,497,,497,499,,499,497,497,,,,497,,497,497,497',
'497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,,,497,,,497',
'497,497,497,497,497,497,497,,497,497,497,,497,497,497,497,497,,,,,,',
',,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,,,,497,,,,,,,,497,,,,,497,497',
'497,497,,497,497,,,,497,497,,493,493,493,,493,497,,497,493,493,,,,493',
',493,493,493,493,493,493,493,,,,,,493,493,493,493,493,493,493,,,493',
',,,,,,493,,,493,493,493,493,493,493,493,493,,493,493,493,,493,493,493',
'493,493,,,,,,,,,,,,,,,,,,,,493,,,493,,,493,493,,,493,,,,,,493,,,,,,',
',493,,,,,493,493,493,493,,493,493,,,,493,493,,417,417,417,,417,493,',
'493,417,417,,,,417,,417,417,417,417,417,417,417,,,,,,417,417,417,417',
'417,417,417,,,417,,,,,,,417,,,417,417,417,417,417,417,417,417,417,417',
'417,417,,417,417,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417',
',,417,,417,,417,,417,,,,,,,,417,,,,,417,417,417,417,,417,417,,,,417',
'417,,492,492,492,,492,417,,417,492,492,,,,492,,492,492,492,492,492,492',
'492,,,,,,492,492,492,492,492,492,492,,,492,,,,,,,492,,,492,492,492,492',
'492,492,492,492,,492,492,492,,492,492,492,492,492,,,,,,,,,,,,,,,,,,',
',492,,,492,,,492,492,,,492,,,,,,492,,,,,,,,492,,,,,492,492,492,492,',
'492,492,,,,492,492,,419,419,419,,419,492,,492,419,419,,,,419,,419,419',
'419,419,419,419,419,,,,,,419,419,419,419,419,419,419,,,419,,,,,,,419',
',,419,419,419,419,419,419,419,419,,419,419,419,,419,419,419,419,419',
',,,,,,,,,,,,,,,,,,,419,,,419,,,419,419,,,419,,,,,,419,,,,,,,,419,,,',
',419,419,419,419,,419,419,,,,419,419,,420,420,420,,420,419,,419,420',
'420,,,,420,,420,420,420,420,420,420,420,,,,,,420,420,420,420,420,420',
'420,,,420,,,,,,,420,,,420,420,420,420,420,420,420,420,,420,420,420,',
'420,420,420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420,420,,,420,,,',
',,420,,,,,,,,420,,,,,420,420,420,420,,420,420,,,,420,420,,421,421,421',
',421,420,,420,421,421,,,,421,,421,421,421,421,421,421,421,,,,,,421,421',
'421,421,421,421,421,,,421,,,,,,,421,,,421,421,421,421,421,421,421,421',
',421,421,421,,421,421,421,421,421,,,,,,,,,,,,,,,,,,,,421,,,421,,,421',
'421,,,421,,,,,,421,,,,,,,,421,,,,,421,421,421,421,,421,421,,,,421,421',
',491,491,491,,491,421,,421,491,491,,,,491,,491,491,491,491,491,491,491',
',,,,,491,491,491,491,491,491,491,,,491,,,,,,,491,,,491,491,491,491,491',
'491,491,491,,491,491,491,,491,491,491,491,491,,,,,,,,,,,,,,,,,,,,491',
',,491,,,491,491,,,491,,,,,,491,,,,,,,,491,,,,,491,491,491,491,,491,491',
',,,491,491,,488,488,488,,488,491,,491,488,488,,,,488,,488,488,488,488',
'488,488,488,,,,,,488,488,488,488,488,488,488,,,488,,,,,,,488,,,488,488',
'488,488,488,488,488,488,,488,488,488,,488,488,,,488,,,,,,,,,,,,,,,,',
',,,488,,,488,,,488,488,,,488,,,,,,,,,,,,,,,,,,,488,488,488,488,,488',
'488,,,,488,488,,481,481,481,,481,488,,488,481,481,,,,481,,481,481,481',
'481,481,481,481,,,,,,481,481,481,481,481,481,481,,,481,,,,,,,481,,,481',
'481,481,481,481,481,481,481,481,481,481,481,,481,481,481,481,481,,,',
',,,,,,,,,,,,,,,,481,,,481,,,481,481,,,481,,481,,481,,481,,,,,,,,481',
',,,,481,481,481,481,,481,481,,,,481,481,,479,479,479,,479,481,,481,479',
'479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479,479,479,479,479',
'479,,,479,,,,,,,479,,,479,479,479,479,479,479,479,479,,479,479,479,',
'479,479,,,479,,,,,,,,,,,,,,,,,,,,479,,,479,,,479,479,,,479,,,,,,,,,',
',,,,,,,,,479,479,479,479,,479,479,,,,479,479,,472,472,472,472,472,479',
',479,472,472,,,,472,,472,472,472,472,472,472,472,,,,,,472,472,472,472',
'472,472,472,,,472,,,,,,472,472,,472,472,472,472,472,472,472,472,472',
',472,472,472,,472,472,472,472,472,20,20,20,20,20,20,20,20,20,20,20,',
'20,20,,,20,20,,472,,,472,,,472,472,,,472,,472,20,,20,472,20,20,20,20',
'20,20,20,472,20,,,,472,472,472,472,,472,472,,,,472,472,,20,449,,,472',
'472,,472,449,449,449,,,449,449,449,,449,,,,,,,,,,449,,,,,,,,,,449,449',
',449,449,449,449,449,,,,,,,,,,,,452,,,,,,,452,452,452,,,452,452,452',
',452,,,,,,449,,,,452,,,449,,,,,449,449,452,452,,452,452,452,452,452',
',,,,,,,,,,,,,449,,,,,,,,,26,,,,,449,,26,26,26,449,452,26,26,26,,26,',
'452,,,,,452,452,,26,26,,,,,,,,,26,26,,26,26,26,26,26,,,452,,,,,,,,,',
',,,,452,,,,,452,26,26,26,26,26,26,26,26,26,26,26,26,26,26,,,26,26,26',
',,26,,26,26,,,26,26,,26,,26,,26,,26,26,26,26,26,26,26,25,26,,26,,,,25',
'25,25,,,25,25,25,,25,26,26,,26,,26,,,25,25,25,,,,,,,,,25,25,,25,25,25',
'25,25,,,,,,,,,,,,,,,,,,,,,,,25,25,25,25,25,25,25,25,25,25,25,25,25,25',
',,25,25,25,,,25,,25,25,,,25,25,,25,,25,,25,,25,25,25,25,25,25,25,396',
'25,25,25,,,,396,396,396,,,396,396,396,,396,25,25,,25,,25,,,396,396,396',
',,,,,,,,396,396,,396,396,396,396,396,,,,,,,,,,,,,,,,,,,,,,,396,396,396',
'396,396,396,396,396,396,396,396,396,396,396,,,396,396,396,,,396,,396',
'396,,,396,396,,396,,396,,396,,396,396,396,396,396,396,396,,396,396,396',
',,,,,,,,,,,,,396,396,,396,,396,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9',
'9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9',
'9,9,9,,,9,9,,,,,,,,,,,9,375,375,375,375,375,375,375,375,375,375,375',
'375,375,375,375,375,375,375,375,375,375,375,375,375,,,,375,375,375,375',
'375,375,375,375,375,375,,,,,,375,375,375,375,375,375,375,375,375,,,375',
',,,,,,,375,375,,375,375,375,375,375,375,375,,,375,375,,,,375,375,375',
'375,,,,,,,,,,,,,,375,375,,375,375,375,375,375,375,375,375,375,375,375',
',,375,375,,,,,,,,,,,375,560,560,560,560,560,560,560,560,560,560,560',
'560,560,560,560,560,560,560,560,560,560,560,560,560,,,,560,560,560,560',
'560,560,560,560,560,560,,,,,,560,560,560,560,560,560,560,560,560,,,560',
',,,,,,,560,560,,560,560,560,560,560,560,560,,,560,560,,,,560,560,560',
'560,,,,,,,,,,,,,,560,560,,560,560,560,560,560,560,560,560,560,560,560',
',,560,560,,,,,,,,,,,560,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8',
'8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8',
',,8,8,,,,,,,,,,,8,690,690,690,690,690,690,690,690,690,690,690,690,690',
'690,690,690,690,690,690,690,690,690,690,690,,,,690,690,690,690,690,690',
'690,690,690,690,,,,,,690,690,690,690,690,690,690,690,690,,,690,,,,,',
',,690,690,,690,690,690,690,690,690,690,,,690,690,,,,690,690,690,690',
',,,,,,,,,,,,,690,690,,690,690,690,690,690,690,690,690,690,690,690,,',
'690,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66',
'66,66,,,,66,66,66,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,66',
'66,66,66,66,,66,,,,,,66,66,,66,66,66,66,66,66,66,,,66,66,,,,66,66,66',
'66,,,,,,66,,,,,,,,66,66,,66,66,66,66,66,66,66,66,66,66,66,202,202,66',
',202,,,,,,,,202,202,,202,202,202,202,202,202,202,,,202,202,,,,202,202',
'202,202,,,,,,202,,,,,,,,202,202,,202,202,202,202,202,202,202,202,202',
'202,202,203,203,202,,203,,,,,,,,203,203,,203,203,203,203,203,203,203',
',,203,203,,,,203,203,203,203,,,,,,203,,,,,,,,203,203,,203,203,203,203',
'203,203,203,203,203,203,203,249,249,203,,249,,,,,,,,249,249,,249,249',
'249,249,249,249,249,,,249,249,,,,249,249,249,249,,,,,,,,,,,,,,249,249',
',249,249,249,249,249,249,249,249,249,249,249,250,250,249,,250,,,,,,',
',250,250,,250,250,250,250,250,250,250,,,250,250,,,,250,250,250,250,',
',,,,,,,,,,,,250,250,,250,250,250,250,250,250,250,250,250,250,250,415',
'415,250,,415,,,,,,,,415,415,,415,415,415,415,415,415,415,,,415,415,',
',,415,415,415,415,,,,,,415,,,,,,,,415,415,,415,415,415,415,415,415,415',
'415,415,415,415,416,416,415,,416,,,,,,,,416,416,,416,416,416,416,416',
'416,416,,,416,416,,,,416,416,416,416,,,,,,416,,,,,,,,416,416,,416,416',
'416,416,416,416,416,416,416,416,416,482,482,416,,482,,,,,,,,482,482',
',482,482,482,482,482,482,482,,,482,482,,,,482,482,482,482,,,,,,482,',
',,,,,,482,482,,482,482,482,482,482,482,482,482,482,482,482,483,483,482',
',483,,,,,,,,483,483,,483,483,483,483,483,483,483,,,483,483,,,,483,483',
'483,483,,,,,,483,,,,,,,,483,483,,483,483,483,483,483,483,483,483,483',
'483,483,494,494,483,,494,,,,,,,,494,494,,494,494,494,494,494,494,494',
',,494,494,,,,494,494,494,494,,,,,,494,,,,,,,,494,494,,494,494,494,494',
'494,494,494,494,494,494,494,495,495,494,,495,,,,,,,,495,495,,495,495',
'495,495,495,495,495,,,495,495,,,,495,495,495,495,,,,,,495,,,,,,,,495',
'495,,495,495,495,495,495,495,495,495,495,495,495,522,522,495,,522,,',
',,,,,522,522,,522,522,522,522,522,522,522,,,522,522,,,,522,522,522,522',
',,,,,522,,,,,,,,522,522,,522,522,522,522,522,522,522,522,522,522,522',
'523,523,522,,523,,,,,,,,523,523,,523,523,523,523,523,523,523,,,523,523',
',,,523,523,523,523,,,,,,523,,,,,,,,523,523,,523,523,523,523,523,523',
'523,523,523,523,523,529,529,523,,529,,,,,,,,529,529,,529,529,529,529',
'529,529,529,,,529,529,,,,529,529,529,529,,,,,,529,,,,,,,,529,529,,529',
'529,529,529,529,529,529,529,529,529,529,530,530,529,,530,,,,,,,,530',
'530,,530,530,530,530,530,530,530,,,530,530,,,,530,530,530,530,,,,,,530',
',,,,,,,530,530,,530,530,530,530,530,530,530,530,530,530,530,884,884',
'530,,884,,,,,,,,884,884,,884,884,884,884,884,884,884,,,884,884,,,,884',
'884,884,884,,,,,,884,,,,,,,,884,884,,884,884,884,884,884,884,884,884',
'884,884,884,885,885,884,,885,,,,,,,,885,885,,885,885,885,885,885,885',
'885,,,885,885,,,,885,885,885,885,,,,,,885,,,,,,,,885,885,,885,885,885',
'885,885,885,885,885,885,885,885,922,922,885,,922,,,,,,,,922,922,,922',
'922,922,922,922,922,922,,,922,922,,,,922,922,922,922,,,,,,922,,,,,,',
',922,922,,922,922,922,922,922,922,922,922,922,922,922,,,922,496,496',
'496,496,496,496,496,496,496,496,496,,496,496,,,496,496,,,,,,,,,,,,,',
',496,,496,,496,496,496,496,496,496,496,,496,,408,408,408,408,408,408',
'408,408,408,408,408,,408,408,,496,408,408,,,,,,,,,,,,,,,408,,408,,408',
'408,408,408,408,408,408,,408,,804,804,804,804,804,804,804,804,804,804',
'804,,804,804,,408,804,804,,,,,,,,,,,,,,,804,,804,,804,804,804,804,804',
'804,804,,804,,802,802,802,802,802,802,802,802,802,802,802,,802,802,',
'804,802,802,,,,,,,,,,,,,,,802,,802,,802,802,802,802,802,802,802,,802',
',263,263,263,263,263,263,263,263,263,263,263,,263,263,,802,263,263,',
',,,,,,,,,,,,,263,,263,,263,263,263,263,263,263,263,,263,,447,447,447',
'447,447,447,447,447,447,447,447,,447,447,,263,447,447,,,,,,,,,,,,,,',
'447,,447,,447,447,447,447,447,447,447,,447,,703,703,703,703,703,703',
'703,703,703,703,703,,703,703,447,447,703,703,,,,,,,,,,,,,,,703,,703',
',703,703,703,703,703,703,703,,703,,625,625,625,625,625,625,625,625,625',
'625,625,,625,625,,703,625,625,,,,,,,,,,,,,,,625,,625,,625,625,625,625',
'625,625,625,,625,,706,706,706,706,706,706,706,706,706,706,706,,706,706',
',625,706,706,,,,,,,,,,,,,,,706,,706,,706,706,706,706,706,706,706,,706',
',710,710,710,710,710,710,710,710,710,710,710,,710,710,,706,710,710,',
',,,,,,,,,,,,,710,,710,,710,710,710,710,710,710,710,,710,,715,715,715',
'715,715,715,715,715,715,715,715,,715,715,,710,715,715,,,,,,,,,,,,,,',
'715,,715,,715,715,715,715,715,715,715,,715,,,,,,,,,,,,,,,,,715' ]
        racc_action_check = arr = ::Array.new(23658, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1770,   680,   nil,   401,   nil,  9265,  1244,   268, 21766, 21394,
   173,   143,   134,   159,   542,   280,   652,   nil,   -66, 12015,
 20797,  1215,   nil,   578,   117, 21155, 21046, 12140, 12265, 12390,
   nil,  3895, 12515, 12640,   nil,  1098,   239,  1135,   495, 13023,
 13148, 13273,  1051,  1012,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1637,  2020, 13398, 13523, 13648,   -15,   nil, 13773, 13898,
   nil,   nil, 14023, 14156, 14281, 14406, 22002,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   103,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   624,   nil,   nil,
   234,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1173,   nil, 14656,   nil,   nil,   nil,   nil, 11140, 14914,
 15039, 15164, 15289,   884,   nil,   485,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1032,   nil,  1134, 15539, 15664,
 15789, 15914, 22062, 22122,  4890,  5015,  5140,  5265,  5390,   nil,
   nil,  1381,    87,  1072,   -82,   987,  1035,   nil,  5765,  3520,
  1023,  6015,  6140,  6265,  6390,  6515,  6640,  6765,  6890,  7015,
  7140,  7265,  7390,  7515,  7640,  7765,  7890,  8015,  8140,  8265,
  8390,  8515,  8640,  8765,  8890,  9015,  9140,   nil,   nil, 22182,
 22242,  1006,  9515,  9640,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  9765,   nil, 23254,   nil,   936,   926,   nil, 10140,   964,
 10390,   nil, 10515,   nil,   nil,   294,  1369, 10890,   910,  2395,
   911,   943,   896, 16164,  3020,   765,   502,   962,   762,   nil,
   918,   876,   119,   nil,   nil,   nil,   908,   -32,   866, 16422,
   nil,   259,   846,   842,   999,   nil,   816,   nil, 16672,   865,
   862,   505,   nil,    72,   273,   749,   707,   128,   728,   nil,
   nil,   320,    35,    36, 17047, 17172,   392,   771,   654,    28,
   435,   716,    61,   744,   nil,   nil,   334,   333,   212,   nil,
  1014,   nil,    27, 18047,   nil,   nil,   689,   375,   -51,   592,
   670,   -50,   266,   298,   475,   nil,   337,   nil, 18672,   nil,
   403,   428,   364,   424,   -43,   173,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   631, 21518,   nil,   nil,   nil,   nil,
   611,   nil,   nil,  1509,   nil, 18922,   592,   nil,   590,   nil,
   nil,  4270,   587,   nil,   284,   137, 21264,   nil,   nil,   nil,
     0,   109,   615,   nil,   nil,  4507,  4398,   nil, 23116,   nil,
   nil,   nil,    -5,   nil,   585, 22302, 22362, 19672,   -21, 19922,
 20047, 20172,  2145,  2270,   189,   646,   519,   517,   508,   488,
  3520,  3395,  3270,  2645,  1770,  1895,  2020,  2520,  2895,  3145,
  2395,  1259,  2770,  1134,  1234,  3020,  1384, 23300,   211, 20925,
   nil,   nil, 20980,   nil,   nil,   374,   nil,   nil, 11515,   -54,
    97,   403,   nil,   nil, 11390,   nil, 11265,   nil, 14789,   nil,
   nil,   nil, 20797,  1384,   467,   474,   nil,   nil,   484, 20672,
   502, 20547, 22422, 22482,   887,   550,   nil,   nil, 20422,   530,
   nil, 20297, 19797, 19547, 22542, 22602, 23070, 19422,   672, 19297,
   nil,   583,   nil, 19172,   nil,   nil, 19047,   nil,   nil,   nil,
   nil, 16810,  4145,   703,   nil,   759,    29,    63,   717,   733,
 18797, 18547, 22662, 22722,    40,   nil,   nil,  1137,   nil, 22782,
 22842, 18422,   nil,   nil, 18297,   378,   -34,  2520, 12528,   nil,
   nil,   nil,    21,   nil,   nil,   nil,  1117,   nil,   nil,   nil,
   628,   nil,   nil,   418,   nil,   nil,   626,   nil,   nil,   nil,
 21642,   nil, 18172,   629, 17922, 17797,   -48,   673, 17672, 17547,
   679,   nil,   nil, 17422, 17297,   690,   nil,   nil,   nil,   -36,
   -40,   364,   494,   669, 12640,   677,   nil,   298,   nil,  4765,
   nil,   nil,   nil,   nil,   215,   nil, 14023,   -68,   697,   nil,
   714,   nil,  1384,  2645,   nil,   716,   nil,   765, 16922,   nil,
   nil,  1162,  -114, 16797,   730,   nil,   744,   200,   258,   788,
   204,  1256,   803,   767, 16547, 23392,   831,   834,   -25,   903,
   nil,  4020,   791,   853,   nil,   nil,   nil,   -70,    21, 12786,
   nil,   815,   822,   836,   nil,   nil,   nil,   nil,   nil,   nil,
   116,   917,   nil,   561,   nil,   nil,   nil,   nil,   919,   nil,
   nil,   926,   643,   nil,   964,   nil,   nil,   nil,   nil,   975,
   nil,    10,   870,    11,     1,   150,    67, 16297,   175,   764,
   nil,   895,  1895,   100,   nil,   nil,  1013,  2770, 14294,   427,
 21890,   nil,   nil,   nil,   nil,   nil,   nil,  3270,   nil,   nil,
   nil,   nil,   nil, 23346,   907, 16039, 23438, 11015,   nil,   nil,
 23484,   nil, 14656,   nil,   nil, 23530,   nil, 16164,   nil, 10765,
 10640, 10265, 10015,   118,  9890,   940,   951,   961,   nil,   985,
   964,   995,   145,   nil,  1090,  2895,  9390,   nil,   nil,   977,
   996,  1100,   nil,  5890,   nil,   991,   172,   nil,   nil,   nil,
  3145,   nil,   nil,    12,  5640,   nil,   nil,   nil,   nil,   nil,
  1001, 16435,   nil, 16560,   nil,   nil,  1031,  1091,  5515,   nil,
   nil,   590,   nil,  1017,   426,  1060,  1024,   nil,   nil,  1149,
   nil, 15414,  1153,  1009,  4270,   nil, 14531,  1509,   -18,    37,
   nil,  1171,   nil,  4640,   nil,  1185,  1080,   nil,   nil,  1104,
  1088,   nil, 23208, 12898, 23162,  4362,   nil,  5653,   nil,   nil,
   554,   nil,  1110,  1094,   nil,   nil,   nil, 12773,   nil,  1116,
  1104,   nil,  1105,   nil,   nil,   nil,  1111,   nil,  2270,   498,
   889,  1186,   890,   nil,  2145,  1259,  1119,  1117,  1118,   nil,
   nil,  1123,  1128,   nil,  1138,   nil,   nil,  1145,   628,  1143,
   899,   nil,   nil,     6,   nil,  1264,  1266,   nil,   317,   nil,
   nil,  1286,   nil,   nil, 14419,   nil,  1167,  1169,  1170,   -85,
   nil,   -67,   nil,  1024,   412,    33,   nil,   nil, 11890,   nil,
   nil, 11765,    87, 11640, 22902, 22962,   372,    98,   216,   nil,
 14169,   nil,   nil,   935,   nil,   906,   nil,   810,   nil,   nil,
   nil,   460,   774,   369,  3770,   nil,   nil,   nil,   nil,   nil,
  3645,   nil,  3395,  1601,   nil,   nil,   781,   nil,   684,   nil,
   nil,   nil, 23022,   nil,   193,   nil,   221,    33,   -11,    39,
  1131,   nil,   nil,   252,   254,   256,   279,   283,   870,   287,
   745,   285,   419,   444,   326,   332,   344,   501,   545,   588,
   nil,    -7,   nil,  1060,   nil,   nil,   nil,   617,   616,   nil,
   nil,   nil,   nil,  1156,   nil,   nil,   nil,   -16,    43,   185,
   nil,   nil ]

racc_action_default = [
    -3,  -557,    -1,  -543,    -4,  -557,    -7,  -557,  -557,  -557,
  -557,  -557,  -557,  -557,  -557,  -280,   -39,   -40,  -545,  -557,
   -45,   -47,   -48,   -49,  -255,  -255,  -255,  -290,  -326,  -327,
   -65,   -11,   -69,   -77,   -79,  -557,  -472,  -557,  -557,  -557,
  -557,  -557,  -545,  -232,  -273,  -274,  -275,  -276,  -277,  -278,
  -279,  -533,   -11,  -557,  -556,  -525,  -298,  -300,  -557,  -557,
  -304,  -307,  -543,  -557,  -557,  -557,  -557,  -328,  -329,  -331,
  -332,  -421,  -422,  -423,  -424,  -425,  -440,  -428,  -429,  -442,
  -444,  -433,  -438,  -454,  -442,  -456,  -457,  -531,  -461,  -462,
  -532,  -464,  -465,  -466,  -467,  -468,  -469,  -470,  -471,  -474,
  -475,  -557,    -2,  -544,  -552,  -553,  -554,    -6,  -557,  -557,
  -557,  -557,  -557,    -3,   -15,  -557,  -106,  -107,  -108,  -109,
  -110,  -111,  -112,  -113,  -114,  -118,  -119,  -120,  -121,  -122,
  -123,  -124,  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,
  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,
  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,
  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,
  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,
  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,
  -183,  -184,  -185,  -186,  -187,   -20,  -115,   -11,  -557,  -557,
  -557,  -241,  -557,  -557,  -557,  -557,  -557,  -557,  -545,  -546,
   -44,  -557,  -472,  -557,  -280,  -557,  -557,  -224,  -557,   -11,
  -557,  -557,  -557,  -557,  -557,  -557,  -557,  -557,  -557,  -557,
  -557,  -557,  -557,  -557,  -557,  -557,  -557,  -557,  -557,  -557,
  -557,  -557,  -557,  -557,  -557,  -557,  -557,  -391,  -393,  -557,
  -557,   -54,  -241,  -557,  -297,  -396,  -405,  -407,   -60,  -402,
   -61,  -545,   -62,  -233,  -243,  -265,  -265,  -248,  -557,  -266,
  -557,  -527,  -557,   -63,   -64,  -543,   -12,  -557,   -67,   -11,
  -545,  -557,   -70,   -73,   -11,   -85,  -557,  -557,   -92,  -290,
  -293,  -545,  -557,  -326,  -327,  -330,  -403,  -557,   -75,  -557,
   -81,  -287,  -458,  -459,  -557,  -209,  -210,  -225,  -557,  -413,
  -557,  -283,  -234,  -549,  -549,  -557,  -557,  -549,  -557,  -299,
  -383,   -46,  -557,  -557,  -557,  -557,  -543,  -557,  -544,  -472,
  -557,  -557,  -280,  -557,  -342,  -343,  -101,  -102,  -557,  -104,
  -557,  -280,  -557,  -557,  -472,  -319,  -106,  -107,  -147,  -148,
  -149,  -165,  -170,  -177,  -180,  -321,  -557,  -523,  -557,  -426,
  -557,  -557,  -557,  -557,  -557,  -557,   972,    -5,  -555,   -21,
   -22,   -23,   -24,   -25,  -557,  -557,   -17,   -18,   -19,  -116,
  -557,   -27,   -36,  -188,  -266,  -557,  -557,   -28,   -37,   -38,
   -29,  -190,  -545,  -242,  -534,  -535,  -255,  -400,  -536,  -537,
  -535,  -534,  -255,  -399,  -401,  -536,  -537,   -35,  -198,   -41,
   -42,   -43,  -545,  -296,  -557,  -557,  -557,  -241,  -287,  -557,
  -557,  -557,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,
  -211,  -212,  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -220,
  -221,  -222,  -223,  -226,  -227,  -228,  -229,  -545,  -372,  -255,
  -534,  -535,  -255,   -52,   -55,  -545,  -256,  -257,  -258,  -372,
  -372,  -545,  -292,  -244,  -264,  -245,  -264,  -262,  -557,  -267,
  -530,   -10,  -544,   -14,  -545,   -66,  -285,   -82,   -71,  -557,
  -545,  -241,  -557,  -557,   -91,  -557,  -458,  -459,  -557,   -78,
   -83,  -557,  -557,  -557,  -557,  -557,  -230,  -557,  -556,  -556,
  -282,  -545,  -235,  -551,  -550,  -237,  -551,  -288,  -289,  -526,
  -301,  -495,   -11,  -333,  -334,   -11,  -557,  -557,  -557,  -557,
  -557,  -241,  -557,  -557,  -287,  -312,  -101,  -102,  -103,  -557,
  -557,  -241,  -315,  -476,  -557,  -557,  -557,   -11,  -495,  -323,
  -541,  -542,  -545,  -427,  -441,  -446,  -557,  -448,  -430,  -443,
  -557,  -445,  -432,  -557,  -435,  -437,  -557,  -455,    -8,   -16,
  -557,   -26,  -557,  -272,  -557,  -557,  -404,  -557,  -557,  -557,
   -56,  -240,  -397,  -557,  -557,   -58,  -398,  -295,  -547,  -534,
  -535,  -534,  -535,  -545,  -188,  -557,  -373,  -377,  -375,   -11,
   -50,  -394,   -51,  -395,  -372,  -238,   -45,  -557,  -265,  -254,
  -545,  -260,   -11,   -11,  -291,  -265,  -263,  -268,  -557,  -528,
  -529,   -13,   -68,  -557,   -74,   -80,  -545,  -534,  -535,  -239,
   -88,   -90,  -557,   -76,  -557,  -197,  -207,  -208,  -545,  -556,
  -340,   -11,  -414,  -556,  -415,  -416,  -284,  -549,  -557,  -495,
  -386,  -522,  -522,  -522,  -494,  -496,  -497,  -498,  -499,  -500,
  -501,  -557,  -504,  -557,  -506,  -512,  -514,  -515,  -517,  -518,
  -519,  -557,  -556,  -335,  -556,  -305,  -336,  -337,  -308,  -557,
  -311,  -557,  -545,  -534,  -535,  -538,  -286,  -557,  -101,  -102,
  -105,  -545,   -11,  -557,  -478,  -317,  -557,   -11,  -495,  -557,
  -557,  -524,  -447,  -450,  -451,  -452,  -453,   -11,  -431,  -434,
  -436,  -439,  -117,  -189,  -270,  -557,  -191,  -557,  -548,   -31,
  -193,   -32,  -194,   -57,   -33,  -196,   -34,  -195,   -59,  -557,
  -557,  -557,  -557,  -404,  -557,  -522,  -522,  -522,  -371,  -557,
  -377,  -557,  -501,  -510,  -557,   -11,  -557,  -251,  -259,  -545,
  -557,  -557,  -246,  -264,  -269,   -72,   -86,   -84,  -294,    -9,
   -11,  -420,  -341,  -557,  -557,  -418,  -236,  -384,  -387,  -389,
  -377,  -557,  -487,  -557,  -490,  -492,  -557,  -557,  -557,  -503,
  -344,  -557,  -346,  -348,  -355,  -501,  -545,  -516,  -520,  -557,
  -338,  -557,  -557,   -11,   -11,  -310,  -557,   -11,  -404,  -557,
  -404,  -557,  -477,   -11,  -320,  -557,  -545,  -480,  -324,  -557,
  -271,   -30,  -192,  -557,  -231,  -362,  -364,  -557,  -367,  -369,
  -557,  -374,  -557,  -378,  -379,  -381,  -382,  -557,  -392,  -557,
  -265,  -250,  -265,  -261,  -406,  -408,  -265,  -419,   -11,   -93,
  -557,  -557,  -100,  -417,   -11,   -11,  -545,  -522,  -522,  -507,
  -521,  -522,  -522,  -513,  -522,  -502,  -508,  -545,  -557,  -353,
  -557,  -505,  -302,  -557,  -303,  -557,  -557,  -268,  -556,  -313,
  -316,  -557,  -322,  -479,  -495,  -449,  -522,  -522,  -522,  -522,
  -511,  -522,  -376,  -557,  -509,  -557,   -53,  -249,  -264,  -252,
  -247,  -264,  -413,  -241,  -557,  -557,   -99,  -557,  -557,  -385,
  -557,  -483,  -485,  -557,  -488,  -557,  -491,  -557,  -493,  -345,
  -347,  -351,  -557,  -356,   -11,  -306,  -309,  -409,  -410,  -411,
   -11,  -318,   -11,  -557,  -359,  -361,  -557,  -365,  -557,  -368,
  -370,  -380,  -557,  -287,  -265,  -412,  -545,  -534,  -535,  -538,
   -98,  -388,  -390,  -522,  -522,  -522,  -522,  -349,  -557,  -354,
  -557,  -556,  -557,  -557,  -522,  -522,  -522,  -522,  -286,  -538,
  -253,  -404,  -481,  -557,  -484,  -486,  -489,  -557,  -352,  -339,
  -314,  -325,  -357,  -557,  -360,  -363,  -366,  -522,  -350,  -522,
  -482,  -358 ]

clist = [
'119,119,313,207,355,36,282,310,314,317,36,295,295,392,312,264,264,264',
'498,519,114,196,629,106,489,454,210,308,15,566,396,402,278,15,124,124',
'36,285,285,512,515,779,295,295,295,463,465,687,322,323,280,102,326,255',
'259,609,644,36,119,15,288,288,6,727,455,103,298,6,329,344,344,344,726',
'122,122,382,389,449,452,528,15,640,106,644,665,668,502,505,816,843,509',
'332,341,341,544,609,551,554,369,370,371,372,251,258,260,599,814,900',
'36,839,327,606,903,606,589,2,776,36,36,262,273,274,361,729,107,602,603',
'365,784,870,591,15,728,593,342,345,749,195,335,375,15,15,594,560,315',
'601,386,386,456,600,739,357,316,839,319,510,333,532,356,539,501,320',
'13,324,939,6,783,13,325,1,677,910,682,793,373,6,537,538,690,864,730',
'813,638,757,644,511,248,834,782,264,835,448,459,13,460,406,907,633,753',
'900,958,359,36,360,614,381,387,390,362,760,669,407,363,623,13,553,843',
'364,692,968,723,697,367,837,36,15,,,374,583,816,397,,644,847,870,,838',
',841,264,264,,396,402,839,,15,921,264,,,,746,,281,,,796,,735,,295,,',
'13,812,,,,680,,,490,13,13,485,,295,,278,867,36,868,36,278,,700,285,36',
'866,,,616,,106,836,,474,,,,,480,285,15,,15,,788,619,288,15,,516,517',
'478,,790,,959,255,619,471,,259,,288,,,,,609,672,,,,472,745,473,,,311',
'681,713,457,106,321,321,718,619,321,,461,,,,859,619,13,,,533,,,,933',
'119,,,,,,912,518,,634,567,737,,,13,908,821,,742,11,559,787,944,606,11',
',,,,,321,321,321,321,124,,,,264,,,406,644,756,,598,,,,,11,605,,,380',
',,,571,,,,,,576,585,,,,,,11,13,122,13,,281,397,,13,386,,334,,,,490,',
',,637,295,635,,,490,,,,,295,671,264,828,,,,570,406,,36,571,,575,571',
',,285,,,406,,11,,,686,285,409,410,411,412,11,11,15,,,281,,,,288,281',
'264,,397,,,,406,288,36,,264,36,406,,397,683,606,,590,606,,592,,,,611',
',666,666,,,15,,36,15,,,,,,,909,397,119,,,684,685,,,397,,,,951,,15,,',
'567,,904,,702,,696,709,711,,,,714,716,,11,,,124,490,,751,,925,295,755',
'36,,,,747,,877,567,879,295,,11,880,36,36,,,,,321,321,,,15,285,,,,,,',
'122,,,798,285,15,15,536,,13,,36,791,,,,288,795,,,,,542,571,,,576,288',
',,,,567,,15,,,,11,,11,567,789,,,11,,,,13,,318,13,,,,,119,,820,,,36,',
',822,826,36,,,926,,,,13,,,36,792,950,,,,,797,15,,619,,801,15,,,,,,,',
',,15,,,,,,,,295,,,662,,,664,36,,,,,,,311,861,,,13,,,,36,,,,829,,,,15',
'13,13,,,,,,853,14,,,,,14,15,,,,832,,,,628,,36,36,,211,36,13,,,295,,36',
'211,211,211,,14,286,286,,,,666,,15,15,734,,15,413,,,384,388,15,344,321',
'14,211,740,741,,,211,211,924,36,211,330,340,340,,36,36,,,,13,341,,,',
'13,,,,,,752,15,,11,13,,,15,15,,,,943,,462,,264,,,,14,,406,,,211,211',
'211,211,14,14,,,475,467,,469,,470,,770,,13,11,,,11,,,,,,,,36,,567,13',
'397,406,36,,36,,,,799,,11,,,,,,,,,15,,,,,,15,,15,,,,,13,13,,,13,,,,',
',13,,,,819,,,,,,,321,,,14,211,211,211,211,827,11,211,211,211,211,211',
',,,,,725,,11,11,13,14,,,,,13,13,,,,,,,,,563,855,856,,,858,,770,,,849',
'11,,,577,,,,211,211,,,,,,,,211,,,,,,,,,,,,,,,,14,,14,882,,,286,14,,887',
'888,,,,595,,,13,,11,604,321,286,13,11,13,,,,,597,,,612,11,,607,,318',
'615,610,770,,770,,,,211,211,,,,,,,,,,,,636,,,,,,211,,,,,632,11,,,607',
',,318,941,,211,,,,942,,11,,,,833,384,,937,770,,,,,,691,,,,,,,,,,,,842',
',,844,,,,11,11,,,11,,,,,,11,770,,770,,,704,,,,211,,,,,,,,,,770,,,,,',
',869,,738,871,,,,,11,,,,,24,11,11,,,24,,,,,744,211,,,,,,748,,24,,,,',
',14,,24,24,24,,24,286,,211,,,,,,,286,,,,,,,,,211,,24,24,,,,,24,24,,',
'24,,,14,,,14,,934,11,,935,211,936,,11,,11,,,,,211,,,211,,,14,,,945,',
',946,,947,,,,,24,,,,800,24,24,24,24,24,24,,,,,,,,211,211,,,,211,211',
'823,,,,,967,,,,,,,,,14,969,,,,,762,764,765,,,,,14,14,,,,,,,,,851,286',
',,,846,,,,,,,286,,,,,,,14,863,,,857,,,,,,,,,24,24,24,24,24,,,24,24,24',
'24,24,,,,,,,,,,,24,,,,,,889,,,,,211,,806,808,809,14,899,,,,14,,,,,,',
',,,14,,24,24,,,,,,,211,24,,,,,,,,,,,,,,,,24,,24,607,,,857,24,,,,14,',
',,,,,,,,,,,,,14,,,,830,,,,,,,,,,,,,,,,,24,24,,,,,,,,,211,,14,14,,,14',
',,24,891,892,14,,894,896,,898,,,,,,,24,,,,,,,,,,,,874,,,914,915,917',
'919,,920,,,14,,,,,,14,14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,',
',,,,,,211,,,,952,954,955,956,,,,,,,,962,964,965,966,,,14,24,,,,,14,',
'14,,,,,,,24,,970,,971,,,,,24,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,24,,,24',
',,,,,24,,,,,,,,,,24,,,24,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24,24,,',
',24,24,,,,,,,,,,,,,,,24,,,,,,,,217,,,,,24,24,,263,263,263,,,,,,,,,,305',
'306,307,,,,,,,,,,,,24,263,263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,24,,,,,24,,,,,24,,,,,,,,,,24,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,,',
',,,,,24,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,383,263,391,263,,24',
'408,24,24,,,24,,,,,,24,,,217,,,422,423,424,425,426,427,428,429,430,431',
'432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,,,,24',
',263,263,,,24,24,,,,263,,,,,,,263,,263,,263,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,24,,,496,,,,,,,,,,,,,,,,,,24,,,,,,24,,24,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,263',
',408,584,391,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,596,,,,,,263,,263,',
'263,,,,,,,,,,,,,263,,,,,,,,,,625,626,627,,,,,,263,,,,263,,,263,,,,,',
',,,,,,,,263,263,,,,,,,,,,263,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,703,,263',
'706,,,710,712,,,,715,717,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,263,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,263,,802,,,,,,,,,,,,710,712,717,715,,804,,,,,',
',,,,,,263,,,,,,,263,,,,,,,,,,,,,,,,,,,,,,,,,263,,,,,,,,,,,,,,,,,,263',
',,,,,,,,,,,,,,,,802,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,263,,,263,,263' ]
        racc_goto_table = arr = ::Array.new(2681, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'52,52,61,29,51,48,45,8,63,63,48,58,58,22,60,31,31,31,10,87,14,14,11',
'91,47,36,18,29,24,23,34,34,41,24,56,56,48,48,48,84,84,85,58,58,58,66',
'66,93,16,16,42,4,16,64,64,157,119,48,52,24,24,24,7,117,22,6,46,7,48',
'48,48,48,116,55,55,25,25,34,34,49,24,128,91,119,86,86,62,62,124,153',
'62,24,24,24,147,157,147,147,16,16,16,16,35,35,35,67,123,110,48,152,4',
'67,113,67,37,2,112,48,48,40,40,40,143,121,5,37,37,143,101,154,65,24',
'119,65,50,50,12,15,19,28,24,24,38,57,59,68,61,61,69,71,72,79,80,152',
'81,83,88,90,94,95,96,97,20,98,113,7,99,20,100,1,102,103,104,105,7,7',
'106,107,108,109,114,122,125,126,119,127,129,130,11,31,131,132,134,20',
'135,52,136,137,138,110,113,141,48,142,47,18,18,18,144,128,87,18,145',
'47,20,146,153,148,149,113,23,150,5,151,48,24,,,2,22,124,64,,119,112',
'154,,117,,117,31,31,,34,34,152,,24,123,31,,,,23,,9,,,128,,37,,58,,,20',
'121,,,,49,,,45,20,20,29,,58,,41,117,48,117,48,41,,147,48,48,116,,,22',
',91,121,,42,,,,,42,48,24,,24,,23,34,24,24,,16,16,46,,23,,85,64,34,4',
',64,,24,,,,,157,22,,,,6,47,7,,,27,22,36,40,91,27,27,36,34,27,,40,,,',
'86,34,20,,,91,,,,117,52,,,,,,93,4,,25,29,66,,,20,11,67,,66,17,14,84',
'117,67,17,,,,,,27,27,27,27,56,,,,31,,,52,119,62,,63,,,,,17,63,,,9,,',
',64,,,,,,64,29,,,,,,17,20,55,20,,9,64,,20,61,,17,,,,45,,,,63,58,60,',
',45,,,,,58,61,31,84,,,,35,52,,48,64,,35,64,,,48,,,52,,17,,,8,48,27,27',
'27,27,17,17,24,,,9,,,,24,9,31,,64,,,,52,24,48,,31,48,52,,64,16,67,,35',
'67,,35,,,,7,,91,91,,,24,,48,24,,,,,,,87,64,52,,,91,91,,,64,,,,23,,24',
',,29,,84,,14,,24,18,18,,,,18,18,,17,,,56,45,,60,,10,58,60,48,,,,45,',
'66,29,66,58,,17,66,48,48,,,,,27,27,,,24,48,,,,,,,55,,,51,48,24,24,27',
',20,,48,8,,,,24,8,,,,,27,64,,,64,24,,,,,29,,24,,,,17,,17,29,16,,,17',
',,,20,,26,20,,,,,52,,61,,,48,,,63,61,48,,,22,,,,20,,,48,91,66,,,,,91',
'24,,34,,18,24,,,,,,,,,,24,,,,,,,,58,,,9,,,9,48,,,,,,,27,8,,,20,,,,48',
',,,48,,,,24,20,20,,,,,,16,21,,,,,21,24,,,,24,,,,27,,48,48,,21,48,20',
',,58,,48,21,21,21,,21,21,21,,,,91,,24,24,9,,24,43,,,26,26,24,48,27,21',
'21,9,9,,,21,21,63,48,21,21,21,21,,48,48,,,,20,24,,,,20,,,,,,9,24,,17',
'20,,,24,24,,,,8,,43,,31,,,,21,,52,,,21,21,21,21,21,21,,,43,26,,26,,26',
',111,,20,17,,,17,,,,,,,,48,,29,20,64,52,48,,48,,,,9,,17,,,,,,,,,24,',
',,,,24,,24,,,,,20,20,,,20,,,,,,20,,,,9,,,,,,,27,,,21,21,21,21,21,9,17',
'21,21,21,21,21,,,,,,115,,17,17,20,21,,,,,20,20,,,,,,,,,26,9,9,,,9,,111',
',,111,17,,,43,,,,21,21,,,,,,,,21,,,,,,,,,,,,,,,,21,,21,9,,,21,21,,9',
'9,,,,43,,,20,,17,43,27,21,20,17,20,,,,,26,,,43,17,,26,,26,43,26,111',
',111,,,,21,21,,,,,,,,,,,,43,,,,,,21,,,,,26,17,,,26,,,26,9,,21,,,,9,',
'17,,,,17,26,,111,111,,,,,,43,,,,,,,,,,,,115,,,115,,,,17,17,,,17,,,,',
',17,111,,111,,,26,,,,21,,,,,,,,,,111,,,,,,,115,,43,115,,,,,17,,,,,39',
'17,17,,,39,,,,,26,21,,,,,,43,,39,,,,,,21,,39,39,39,,39,21,,21,,,,,,',
'21,,,,,,,,,21,,39,39,,,,,39,39,,,39,,,21,,,21,,115,17,,115,21,115,,17',
',17,,,,,21,,,21,,,21,,,115,,,115,,115,,,,,39,,,,26,39,39,39,39,39,39',
',,,,,,,21,21,,,,21,21,43,,,,,115,,,,,,,,,21,115,,,,,118,118,118,,,,',
'21,21,,,,,,,,,43,21,,,,26,,,,,,,21,,,,,,,21,43,,,26,,,,,,,,,39,39,39',
'39,39,,,39,39,39,39,39,,,,,,,,,,,39,,,,,,43,,,,,21,,118,118,118,21,43',
',,,21,,,,,,,,,,21,,39,39,,,,,,,21,39,,,,,,,,,,,,,,,,39,,39,26,,,26,39',
',,,21,,,,,,,,,,,,,,,21,,,,21,,,,,,,,,,,,,,,,,39,39,,,,,,,,,21,,21,21',
',,21,,,39,118,118,21,,118,118,,118,,,,,,,39,,,,,,,,,,,,21,,,118,118',
'118,118,,118,,,21,,,,,,21,21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,',
',,,,,,,,,,21,,,,118,118,118,118,,,,,,,,118,118,118,118,,,21,39,,,,,21',
',21,,,,,,,39,,118,,118,,,,,39,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,39,,,39',
',,,,,39,,,,,,,,,,39,,,39,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,39,,',
',39,39,,,,,,,,,,,,,,,39,,,,,,,,30,,,,,39,39,,30,30,30,,,,,,,,,,30,30',
'30,,,,,,,,,,,,39,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39',
',,,,39,,,,,39,,,,,,,,,,39,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,39',
',,,,,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,30,30,30,30,,39,30,39,39,',
',39,,,,,,39,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,30,30,30,30,30,30,30,30,,,,39,,30,30,,,39,39,,,,30,,,,,,,30,,30,',
'30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,30,,,,,,,,,,,,,,,,,,39,,,,,',
'39,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,30,,30,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,30,,,,,,30,,30,,30,,,,,,,,,,,,,30,,,,,,,,,,30,30,30,,,,,,30,,,,30',
',,30,,,,,,,,,,,,,,30,30,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30',
',30,30,,,30,30,,,,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,30,,30,,,,,,,,,,,,30,30,30,30,,30,,,,,,,,,,,,30',
',,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,',
',,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,30,,,30,,30' ]
        racc_goto_check = arr = ::Array.new(2681, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   169,   115,   nil,    48,   119,    62,    62,   -45,   224,
  -291,  -476,  -493,   nil,    12,   128,   -10,   386,     7,    75,
   162,   772,  -188,  -363,    28,  -123,   621,   289,    25,   -15,
  1797,   -12,   nil,   nil,  -172,    78,  -226,  -334,  -311,  1219,
    92,     1,    19,   608,   nil,   -26,    33,  -275,     5,  -259,
    70,   -62,    -8,   nil,   nil,    65,    26,  -236,   -21,    90,
   -40,   -52,  -227,   -46,    29,  -319,  -220,  -353,  -313,  -105,
   nil,  -309,  -451,   nil,   nil,   nil,   nil,   nil,   nil,    85,
    97,    98,   nil,  -165,  -283,  -621,  -432,  -308,    93,   nil,
  -185,    20,   nil,  -491,    92,  -197,  -151,   104,   103,  -499,
   107,  -540,  -355,  -688,  -360,  -512,  -169,  -178,  -361,  -619,
  -741,   242,  -537,  -738,  -407,   399,  -515,  -524,   726,  -455,
   nil,  -464,  -550,  -625,  -643,  -329,  -455,  -135,  -430,   165,
  -571,  -569,   -56,   nil,   -64,   -63,  -662,  -302,  -435,   nil,
   nil,   127,   127,    43,   128,   131,  -148,  -266,   135,  -328,
  -326,  -538,  -652,  -674,  -678,   nil,   nil,  -411 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   328,   276,   nil,   309,
   nil,   780,   nil,   275,   nil,   nil,   nil,   215,    17,    12,
   216,   304,   nil,   nil,   214,   nil,   269,    16,   nil,   414,
    20,    21,    22,    23,   622,   nil,   nil,   nil,   nil,   292,
   393,    30,   nil,   nil,    32,    35,    34,   nil,   212,   339,
   nil,   121,   399,   120,   123,    72,    73,   nil,    43,   nil,
   630,   265,   nil,   266,   404,   572,   nil,   267,   nil,   nil,
   253,   nil,   nil,    44,    45,    46,    47,    48,    49,    50,
   nil,   254,    56,   nil,   nil,   nil,   nil,   nil,   nil,    64,
   nil,   513,    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   772,   652,   nil,   773,   nil,   641,   nil,   643,   nil,   840,
   586,   nil,   nil,   nil,   649,   nil,   nil,   nil,   689,   nil,
   nil,   nil,   nil,   403,   nil,   nil,   nil,   nil,   nil,    71,
    74,    75,   nil,   nil,   nil,   nil,   nil,   549,   nil,   nil,
   nil,   642,   654,   655,   733,   658,   661,   271 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 138, :_reduce_none,
  2, 139, :_reduce_2,
  0, 140, :_reduce_3,
  1, 140, :_reduce_4,
  3, 140, :_reduce_5,
  2, 140, :_reduce_6,
  1, 142, :_reduce_none,
  4, 142, :_reduce_8,
  4, 145, :_reduce_9,
  2, 146, :_reduce_10,
  0, 150, :_reduce_11,
  1, 150, :_reduce_12,
  3, 150, :_reduce_13,
  2, 150, :_reduce_14,
  0, 165, :_reduce_15,
  4, 144, :_reduce_16,
  3, 144, :_reduce_17,
  3, 144, :_reduce_18,
  3, 144, :_reduce_19,
  2, 144, :_reduce_20,
  3, 144, :_reduce_21,
  3, 144, :_reduce_22,
  3, 144, :_reduce_23,
  3, 144, :_reduce_24,
  3, 144, :_reduce_25,
  4, 144, :_reduce_26,
  3, 144, :_reduce_27,
  3, 144, :_reduce_28,
  3, 144, :_reduce_29,
  6, 144, :_reduce_30,
  5, 144, :_reduce_31,
  5, 144, :_reduce_32,
  5, 144, :_reduce_33,
  5, 144, :_reduce_34,
  3, 144, :_reduce_35,
  3, 144, :_reduce_36,
  3, 144, :_reduce_37,
  3, 144, :_reduce_38,
  1, 144, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  3, 164, :_reduce_43,
  2, 164, :_reduce_44,
  1, 164, :_reduce_none,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_50,
  4, 169, :_reduce_51,
  0, 175, :_reduce_52,
  5, 173, :_reduce_53,
  2, 168, :_reduce_54,
  3, 168, :_reduce_55,
  4, 168, :_reduce_56,
  5, 168, :_reduce_57,
  4, 168, :_reduce_58,
  5, 168, :_reduce_59,
  2, 168, :_reduce_60,
  2, 168, :_reduce_61,
  2, 168, :_reduce_62,
  2, 168, :_reduce_63,
  2, 168, :_reduce_64,
  1, 156, :_reduce_65,
  3, 156, :_reduce_66,
  1, 179, :_reduce_67,
  3, 179, :_reduce_68,
  1, 178, :_reduce_none,
  2, 178, :_reduce_70,
  3, 178, :_reduce_71,
  5, 178, :_reduce_72,
  2, 178, :_reduce_73,
  4, 178, :_reduce_74,
  2, 178, :_reduce_75,
  4, 178, :_reduce_76,
  1, 178, :_reduce_77,
  3, 178, :_reduce_78,
  1, 182, :_reduce_none,
  3, 182, :_reduce_80,
  2, 181, :_reduce_81,
  3, 181, :_reduce_82,
  1, 184, :_reduce_83,
  3, 184, :_reduce_84,
  1, 183, :_reduce_85,
  4, 183, :_reduce_86,
  3, 183, :_reduce_87,
  3, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_90,
  2, 183, :_reduce_91,
  1, 183, :_reduce_92,
  1, 154, :_reduce_93,
  4, 154, :_reduce_94,
  3, 154, :_reduce_95,
  3, 154, :_reduce_96,
  3, 154, :_reduce_97,
  3, 154, :_reduce_98,
  2, 154, :_reduce_99,
  1, 154, :_reduce_100,
  1, 186, :_reduce_101,
  1, 186, :_reduce_none,
  2, 187, :_reduce_103,
  1, 187, :_reduce_104,
  3, 187, :_reduce_105,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 191, :_reduce_111,
  1, 191, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_115,
  0, 194, :_reduce_116,
  4, 152, :_reduce_117,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 167, :_reduce_188,
  5, 167, :_reduce_189,
  3, 167, :_reduce_190,
  5, 167, :_reduce_191,
  6, 167, :_reduce_192,
  5, 167, :_reduce_193,
  5, 167, :_reduce_194,
  5, 167, :_reduce_195,
  5, 167, :_reduce_196,
  4, 167, :_reduce_197,
  3, 167, :_reduce_198,
  3, 167, :_reduce_199,
  3, 167, :_reduce_200,
  3, 167, :_reduce_201,
  3, 167, :_reduce_202,
  3, 167, :_reduce_203,
  3, 167, :_reduce_204,
  3, 167, :_reduce_205,
  3, 167, :_reduce_206,
  4, 167, :_reduce_207,
  4, 167, :_reduce_208,
  2, 167, :_reduce_209,
  2, 167, :_reduce_210,
  3, 167, :_reduce_211,
  3, 167, :_reduce_212,
  3, 167, :_reduce_213,
  3, 167, :_reduce_214,
  3, 167, :_reduce_215,
  3, 167, :_reduce_216,
  3, 167, :_reduce_217,
  3, 167, :_reduce_218,
  3, 167, :_reduce_219,
  3, 167, :_reduce_220,
  3, 167, :_reduce_221,
  3, 167, :_reduce_222,
  3, 167, :_reduce_223,
  2, 167, :_reduce_224,
  2, 167, :_reduce_225,
  3, 167, :_reduce_226,
  3, 167, :_reduce_227,
  3, 167, :_reduce_228,
  3, 167, :_reduce_229,
  3, 167, :_reduce_230,
  6, 167, :_reduce_231,
  1, 167, :_reduce_none,
  1, 163, :_reduce_none,
  1, 196, :_reduce_none,
  2, 196, :_reduce_none,
  4, 196, :_reduce_236,
  2, 196, :_reduce_237,
  3, 201, :_reduce_238,
  0, 202, :_reduce_239,
  1, 202, :_reduce_none,
  0, 159, :_reduce_241,
  1, 159, :_reduce_none,
  1, 177, :_reduce_243,
  2, 177, :_reduce_244,
  2, 177, :_reduce_245,
  4, 177, :_reduce_246,
  6, 177, :_reduce_247,
  1, 177, :_reduce_248,
  4, 205, :_reduce_249,
  3, 205, :_reduce_250,
  2, 205, :_reduce_251,
  4, 205, :_reduce_252,
  6, 205, :_reduce_253,
  1, 205, :_reduce_254,
  0, 207, :_reduce_255,
  2, 172, :_reduce_256,
  1, 206, :_reduce_257,
  0, 208, :_reduce_258,
  3, 206, :_reduce_259,
  0, 209, :_reduce_260,
  4, 206, :_reduce_261,
  2, 204, :_reduce_262,
  2, 203, :_reduce_263,
  1, 203, :_reduce_264,
  0, 203, :_reduce_265,
  1, 198, :_reduce_266,
  2, 198, :_reduce_267,
  3, 198, :_reduce_268,
  4, 198, :_reduce_269,
  3, 162, :_reduce_270,
  4, 162, :_reduce_271,
  2, 162, :_reduce_272,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_281,
  3, 195, :_reduce_282,
  0, 233, :_reduce_283,
  4, 195, :_reduce_284,
  3, 195, :_reduce_285,
  3, 195, :_reduce_286,
  2, 195, :_reduce_287,
  3, 195, :_reduce_288,
  3, 195, :_reduce_289,
  1, 195, :_reduce_290,
  4, 195, :_reduce_291,
  3, 195, :_reduce_292,
  1, 195, :_reduce_293,
  5, 195, :_reduce_294,
  4, 195, :_reduce_295,
  3, 195, :_reduce_296,
  2, 195, :_reduce_297,
  1, 195, :_reduce_none,
  2, 195, :_reduce_299,
  0, 234, :_reduce_300,
  3, 195, :_reduce_301,
  6, 195, :_reduce_302,
  6, 195, :_reduce_303,
  0, 235, :_reduce_304,
  0, 236, :_reduce_305,
  7, 195, :_reduce_306,
  0, 237, :_reduce_307,
  0, 238, :_reduce_308,
  7, 195, :_reduce_309,
  5, 195, :_reduce_310,
  4, 195, :_reduce_311,
  0, 239, :_reduce_312,
  0, 240, :_reduce_313,
  9, 195, :_reduce_314,
  0, 241, :_reduce_315,
  6, 195, :_reduce_316,
  0, 242, :_reduce_317,
  7, 195, :_reduce_318,
  0, 243, :_reduce_319,
  5, 195, :_reduce_320,
  0, 244, :_reduce_321,
  6, 195, :_reduce_322,
  0, 245, :_reduce_323,
  0, 246, :_reduce_324,
  9, 195, :_reduce_325,
  1, 195, :_reduce_326,
  1, 195, :_reduce_327,
  1, 195, :_reduce_328,
  1, 195, :_reduce_329,
  1, 158, :_reduce_none,
  1, 226, :_reduce_331,
  1, 229, :_reduce_332,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  2, 221, :_reduce_335,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 222, :_reduce_none,
  5, 222, :_reduce_339,
  1, 148, :_reduce_none,
  2, 148, :_reduce_341,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 247, :_reduce_none,
  3, 247, :_reduce_345,
  1, 250, :_reduce_346,
  3, 250, :_reduce_347,
  1, 249, :_reduce_none,
  4, 249, :_reduce_349,
  6, 249, :_reduce_350,
  3, 249, :_reduce_351,
  5, 249, :_reduce_352,
  2, 249, :_reduce_353,
  4, 249, :_reduce_354,
  1, 249, :_reduce_355,
  3, 249, :_reduce_356,
  6, 251, :_reduce_357,
  8, 251, :_reduce_358,
  4, 251, :_reduce_359,
  6, 251, :_reduce_360,
  4, 251, :_reduce_361,
  2, 251, :_reduce_none,
  6, 251, :_reduce_363,
  2, 251, :_reduce_364,
  4, 251, :_reduce_365,
  6, 251, :_reduce_366,
  2, 251, :_reduce_367,
  4, 251, :_reduce_368,
  2, 251, :_reduce_369,
  4, 251, :_reduce_370,
  1, 251, :_reduce_371,
  0, 174, :_reduce_372,
  1, 174, :_reduce_373,
  3, 257, :_reduce_374,
  1, 257, :_reduce_375,
  4, 257, :_reduce_376,
  0, 258, :_reduce_377,
  2, 258, :_reduce_378,
  1, 259, :_reduce_379,
  3, 259, :_reduce_380,
  1, 260, :_reduce_381,
  1, 260, :_reduce_none,
  0, 264, :_reduce_383,
  3, 220, :_reduce_384,
  4, 262, :_reduce_385,
  1, 262, :_reduce_386,
  0, 267, :_reduce_387,
  4, 263, :_reduce_388,
  0, 268, :_reduce_389,
  4, 263, :_reduce_390,
  0, 269, :_reduce_391,
  5, 266, :_reduce_392,
  2, 170, :_reduce_393,
  4, 170, :_reduce_394,
  4, 170, :_reduce_395,
  2, 219, :_reduce_396,
  4, 219, :_reduce_397,
  4, 219, :_reduce_398,
  3, 219, :_reduce_399,
  3, 219, :_reduce_400,
  3, 219, :_reduce_401,
  2, 219, :_reduce_402,
  1, 219, :_reduce_403,
  4, 219, :_reduce_404,
  0, 271, :_reduce_405,
  5, 218, :_reduce_406,
  0, 272, :_reduce_407,
  5, 218, :_reduce_408,
  5, 224, :_reduce_409,
  1, 273, :_reduce_410,
  1, 273, :_reduce_none,
  6, 147, :_reduce_412,
  0, 147, :_reduce_413,
  1, 274, :_reduce_414,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  2, 275, :_reduce_417,
  1, 275, :_reduce_none,
  2, 149, :_reduce_419,
  1, 149, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 211, :_reduce_424,
  1, 277, :_reduce_425,
  2, 277, :_reduce_426,
  3, 278, :_reduce_427,
  1, 278, :_reduce_428,
  1, 278, :_reduce_429,
  3, 212, :_reduce_430,
  4, 213, :_reduce_431,
  3, 214, :_reduce_432,
  0, 282, :_reduce_433,
  3, 282, :_reduce_434,
  1, 283, :_reduce_435,
  2, 283, :_reduce_436,
  3, 215, :_reduce_437,
  0, 285, :_reduce_438,
  3, 285, :_reduce_439,
  0, 279, :_reduce_440,
  2, 279, :_reduce_441,
  0, 280, :_reduce_442,
  2, 280, :_reduce_443,
  0, 281, :_reduce_444,
  2, 281, :_reduce_445,
  1, 284, :_reduce_446,
  2, 284, :_reduce_447,
  0, 287, :_reduce_448,
  4, 284, :_reduce_449,
  1, 286, :_reduce_450,
  1, 286, :_reduce_451,
  1, 286, :_reduce_452,
  1, 286, :_reduce_none,
  1, 192, :_reduce_454,
  3, 193, :_reduce_455,
  1, 276, :_reduce_456,
  1, 276, :_reduce_457,
  2, 276, :_reduce_458,
  2, 276, :_reduce_459,
  1, 185, :_reduce_460,
  1, 185, :_reduce_461,
  1, 185, :_reduce_462,
  1, 185, :_reduce_463,
  1, 185, :_reduce_464,
  1, 185, :_reduce_465,
  1, 185, :_reduce_466,
  1, 185, :_reduce_467,
  1, 185, :_reduce_468,
  1, 185, :_reduce_469,
  1, 185, :_reduce_470,
  1, 185, :_reduce_471,
  1, 216, :_reduce_472,
  1, 157, :_reduce_473,
  1, 161, :_reduce_474,
  1, 161, :_reduce_475,
  1, 227, :_reduce_476,
  3, 227, :_reduce_477,
  2, 227, :_reduce_478,
  3, 230, :_reduce_479,
  2, 230, :_reduce_480,
  6, 265, :_reduce_481,
  8, 265, :_reduce_482,
  4, 265, :_reduce_483,
  6, 265, :_reduce_484,
  4, 265, :_reduce_485,
  6, 265, :_reduce_486,
  2, 265, :_reduce_487,
  4, 265, :_reduce_488,
  6, 265, :_reduce_489,
  2, 265, :_reduce_490,
  4, 265, :_reduce_491,
  2, 265, :_reduce_492,
  4, 265, :_reduce_493,
  1, 265, :_reduce_494,
  0, 265, :_reduce_495,
  1, 261, :_reduce_496,
  1, 261, :_reduce_497,
  1, 261, :_reduce_498,
  1, 261, :_reduce_499,
  1, 248, :_reduce_none,
  1, 248, :_reduce_501,
  3, 248, :_reduce_502,
  2, 248, :_reduce_503,
  1, 289, :_reduce_none,
  3, 289, :_reduce_505,
  1, 252, :_reduce_506,
  3, 252, :_reduce_507,
  3, 290, :_reduce_508,
  3, 291, :_reduce_509,
  1, 253, :_reduce_510,
  3, 253, :_reduce_511,
  1, 288, :_reduce_512,
  3, 288, :_reduce_513,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 254, :_reduce_516,
  1, 254, :_reduce_517,
  1, 293, :_reduce_none,
  1, 293, :_reduce_none,
  2, 256, :_reduce_520,
  2, 255, :_reduce_521,
  0, 255, :_reduce_522,
  1, 231, :_reduce_none,
  3, 231, :_reduce_524,
  0, 217, :_reduce_525,
  2, 217, :_reduce_none,
  1, 200, :_reduce_527,
  3, 200, :_reduce_528,
  3, 294, :_reduce_529,
  2, 294, :_reduce_530,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 166, :_reduce_none,
  1, 166, :_reduce_none,
  2, 180, :_reduce_547,
  2, 160, :_reduce_548,
  0, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 228, :_reduce_552,
  1, 228, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_none,
  0, 197, :_reduce_556 ]

racc_reduce_n = 557

racc_shift_n = 972

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "f_args",
  "do_block",
  "@22",
  "@23",
  "@24",
  "operation3",
  "@25",
  "@26",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@27",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_19(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_33(val, _values, result)
                      diagnostic :error, :const_reassignment, nil, val[3]
                    
    result
end

def _reduce_34(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_35(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 39 omitted

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_42(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_52(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_53(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
end

def _reduce_55(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_57(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_71(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_72(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_73(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 79 omitted

def _reduce_80(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_101(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 102 omitted

def _reduce_103(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

def _reduce_111(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_116(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_117(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

def _reduce_188(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_190(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_196(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_197(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_237(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = val
                    
    result
end

def _reduce_239(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = []
                    
    result
end

# reduce 242 omitted

def _reduce_243(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_246(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_247(val, _values, result)
                      val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
end

def _reduce_248(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_251(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_253(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_256(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_258(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_261(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = []
                    
    result
end

def _reduce_265(val, _values, result)
                      result = []
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_270(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_272(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_283(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 298 omitted

def _reduce_299(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_301(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)

                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_302(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_303(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_304(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_305(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_311(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_312(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_313(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_315(val, _values, result)
                      local_push
                      @context.in_class = true
                    
    result
end

def _reduce_316(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_317(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_318(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_319(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_320(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end

                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_321(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      local_pop
                      @context.in_def = val[2].in_def
                    
    result
end

def _reduce_323(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_324(val, _values, result)
                      local_push
                      result = context.dup
                      @context.in_def = true
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      local_pop
                      @context.in_def = val[5].in_def
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 330 omitted

def _reduce_331(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_332(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = val
                    
    result
end

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 348 omitted

def _reduce_349(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]) ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 362 omitted

def _reduce_363(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_364(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_373(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_374(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = []
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_379(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_381(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 382 omitted

def _reduce_383(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_384(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_387(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_388(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_389(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_390(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.in_lambda = val[1].in_lambda
                    
    result
end

def _reduce_391(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_392(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_393(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_394(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_395(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_396(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_397(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_398(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_400(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_401(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_405(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_406(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_407(val, _values, result)
                      @static_env.extend_dynamic
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_408(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                      @context.in_block = val[1].in_block
                    
    result
end

def _reduce_409(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = []
                    
    result
end

def _reduce_414(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 415 omitted

# reduce 416 omitted

def _reduce_417(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 420 omitted

# reduce 421 omitted

# reduce 422 omitted

# reduce 423 omitted

def _reduce_424(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_429(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_430(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_431(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_432(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_433(val, _values, result)
                      result = []
                    
    result
end

def _reduce_434(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = []
                    
    result
end

def _reduce_439(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = []
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = []
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = []
                    
    result
end

def _reduce_445(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_448(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_449(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_459(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_478(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = []
                    
    result
end

def _reduce_496(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_497(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_498(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_499(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 500 omitted

def _reduce_501(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_502(val, _values, result)
                      @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_503(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
end

# reduce 504 omitted

def _reduce_505(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_508(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_509(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_512(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 518 omitted

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_522(val, _values, result)
                      result = []
                    
    result
end

# reduce 523 omitted

def _reduce_524(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_525(val, _values, result)
                      result = []
                    
    result
end

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_528(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_529(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

# reduce 542 omitted

# reduce 543 omitted

# reduce 544 omitted

# reduce 545 omitted

# reduce 546 omitted

def _reduce_547(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_548(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 549 omitted

# reduce 550 omitted

# reduce 551 omitted

def _reduce_552(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 553 omitted

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class MacRuby
  end   # module Parser
