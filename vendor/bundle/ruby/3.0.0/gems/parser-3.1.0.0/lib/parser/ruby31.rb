# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby31 < Parser::Base


  def version
    31
  end

  def default_encoding
    Encoding::UTF_8
  end

  def endless_method_name(name_t)
    if !%w[=== == != <= >=].include?(name_t[0]) && name_t[0].end_with?('=')
      diagnostic :error, :endless_setter, nil, name_t
    end
  end

  def local_push
    @static_env.extend_static
    @lexer.cmdarg.push(false)
    @lexer.cond.push(false)
    @max_numparam_stack.push(static: true)
  end

  def local_pop
    @static_env.unextend
    @lexer.cmdarg.pop
    @lexer.cond.pop
    @max_numparam_stack.pop
  end

  def try_declare_numparam(node)
    name = node.children[0]

    if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && @context.in_dynamic_block?
      # definitely an implicit param
      location = node.loc.expression

      if max_numparam_stack.has_ordinary_params?
        diagnostic :error, :ordinary_param_defined, nil, [nil, location]
      end

      raw_max_numparam_stack = max_numparam_stack.stack.dup
      # ignore current block scope
      raw_max_numparam_stack.pop

      raw_max_numparam_stack.reverse_each do |outer_scope|
        if outer_scope[:static]
          # found an outer scope that can't have numparams
          # like def/class/etc
          break
        else
          outer_scope_has_numparams = outer_scope[:value] > 0

          if outer_scope_has_numparams
            diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
          else
            # for now it's ok, but an outer scope can also be a block
            # like proc { _1; proc { proc { proc { _2 }} }}
            # with numparams, so we need to continue
          end
        end
      end

      static_env.declare(name)
      max_numparam_stack.register(name[1].to_i)

      true
    else
      false
    end
  end
##### State transition tables begin ###

clist = [
'-320,600,620,-119,1214,-121,-118,-320,-320,-320,221,222,1124,-320,-320',
'-624,-320,239,620,-123,620,925,-624,-110,-320,-732,237,428,-124,311',
'122,-122,430,429,717,311,-320,-320,620,-320,-320,-320,-320,-320,-116',
'-117,-124,620,620,-116,1001,828,718,627,892,925,627,126,240,-732,-123',
'833,125,-117,240,240,-320,-320,-320,-320,-320,-320,-320,-320,-320,-320',
'-320,-320,-320,-320,-624,-123,-320,-320,-320,-124,687,-320,-119,-110',
'-320,-121,-120,-320,1125,240,-720,135,-320,306,-320,-511,-320,-320,240',
'-320,-320,-320,-320,-320,-320,-320,-110,-320,-112,-109,310,-320,-320',
'-320,126,-120,310,-320,-320,125,-320,-320,-114,-110,-320,-320,-110,-113',
'-320,-320,126,-115,126,990,-113,125,-320,125,-110,-122,-320,-320,-122',
'-320,-320,-320,-320,-320,-118,126,126,-719,-107,1000,125,125,-116,-117',
'-124,126,126,-116,-117,-124,125,125,-108,221,222,218,-320,-320,-320',
'-320,-320,-320,-320,-320,-320,-320,-320,-320,-320,-320,221,222,-320',
'-320,-320,311,687,-320,-719,-123,-320,-111,661,-320,-123,648,-119,925',
'-320,-121,-320,-119,-320,-320,-121,-320,-320,-320,-320,-320,233,-320',
'-723,-320,-628,-720,-629,221,222,-723,-723,-723,104,105,-723,-723,-723',
'-320,-723,-120,-320,-320,-102,-320,-120,-320,-723,-723,-723,-723,-723',
'663,-320,924,-88,-122,219,-112,-723,-723,522,-723,-723,-723,-723,-723',
'-122,240,660,650,649,-122,-118,-111,-109,220,-744,-118,311,648,233,223',
'310,-116,240,-117,1063,300,-723,-723,-723,-723,-723,-723,-723,-723,-723',
'-723,-723,-723,-723,-723,233,682,-723,-723,-723,648,921,-723,106,107',
'-723,104,105,-723,-723,662,-723,-124,-723,126,-723,-112,-723,-723,125',
'-723,-723,-723,-723,-723,361,-723,-723,-723,-744,683,-719,-111,-109',
'648,306,650,649,646,648,362,648,-723,-110,648,-723,-723,-723,-723,240',
'-723,-744,-723,800,-320,-119,-112,-723,310,-112,-120,-320,-320,-320',
'650,649,-320,-320,-320,892,-320,-112,-111,-109,859,-111,-109,-112,-320',
'833,-320,-320,-320,875,106,107,919,-111,-109,-121,-320,-320,431,-320',
'-320,-320,-320,-320,650,649,646,949,471,650,649,650,649,655,650,649',
'653,920,1035,861,633,1063,233,-732,634,948,-320,-320,-320,-320,-320',
'-320,-320,-320,-320,-320,-320,-320,-320,-320,240,-629,-320,-320,-320',
'648,922,-320,-118,-635,-320,-119,-625,-320,-320,648,-320,-617,-320,-625',
'-320,510,-320,-320,-617,-320,-320,-320,-320,-320,683,-320,682,-320,507',
'506,-121,-118,-744,491,648,488,487,486,496,489,521,-320,-108,-623,-320',
'-320,-320,-320,499,-320,-623,-320,126,-723,-117,612,-320,125,614,-122',
'-723,-723,-723,650,649,651,-723,-723,633,-723,494,-625,960,650,649,664',
'-617,-723,-723,504,503,507,506,-121,633,-119,500,523,960,-723,-723,524',
'-723,-723,-723,-723,-723,239,650,649,659,491,-321,488,487,486,496,489',
'-623,-321,600,491,240,488,487,486,499,489,-321,-723,-723,-723,-723,-723',
'-723,-723,-723,-723,-723,-723,-723,-723,-723,558,-628,-723,-723,-723',
'494,688,-723,570,126,-723,648,572,-723,125,710,507,506,-723,574,-723',
'500,-723,-723,-114,-723,-723,-723,-723,-723,-614,-723,-723,-723,-321',
'126,-123,-614,-614,-614,125,135,-614,-614,-614,-614,-614,-723,-107,-87',
'-723,-723,-614,-723,-614,-723,-614,-614,-614,931,-116,485,-723,240,927',
'-120,-614,-614,928,-614,-614,-614,-614,-614,585,650,649,646,586,-311',
'227,-620,-621,227,950,951,-311,304,-620,-621,304,612,593,237,611,-311',
'-614,-614,-614,-614,-614,-614,-614,-614,-614,-614,-614,-614,-614,-614',
'-614,227,-614,-614,-614,227,-614,-614,592,315,-614,240,1188,-614,-614',
'233,-614,590,-614,126,-614,638,-614,-614,125,-614,-614,-614,-614,-614',
'-115,-614,-617,-614,-311,228,-620,-621,228,-617,-617,-617,-124,233,-617',
'-617,-617,-614,-617,306,-614,-614,-614,-614,597,-614,-617,-614,-617',
'-617,-617,612,-614,603,614,-614,228,264,-617,-617,228,-617,-617,-617',
'-617,-617,606,227,240,227,615,-356,-619,-622,675,616,636,574,-356,-619',
'-622,612,627,673,614,638,420,-356,-617,-617,-617,-617,-617,-617,-617',
'-617,-617,-617,-617,-617,-617,-617,631,754,-617,-617,-617,227,-617,-617',
'1149,1150,-617,499,630,-617,-617,632,-617,875,-617,640,-617,628,-617',
'-617,665,-617,-617,-617,-617,-617,228,-617,228,-617,-356,-619,-622,668',
'227,669,954,240,958,957,1197,1188,959,-617,-293,500,-617,-617,-617,-617',
'638,-617,671,-617,672,-723,676,1056,-617,240,-109,-617,-723,-723,-723',
'496,228,680,-723,-723,-320,-723,-118,956,264,499,681,-320,306,-723,-723',
'694,-720,985,892,695,-320,114,113,115,116,-723,-723,240,-723,-723,-723',
'-723,-723,228,221,222,697,118,117,119,261,700,507,506,263,262,701,500',
'703,264,104,105,221,222,358,-723,-723,-723,-723,-723,-723,-723,-723',
'-723,-723,-723,-723,-723,-723,-320,705,-723,-723,-723,-385,688,-723',
'227,719,-723,720,261,-723,227,1164,263,262,-723,724,-723,226,-723,-723',
'1162,-723,-723,-723,-723,-723,224,-723,-723,-723,726,102,90,93,94,732',
'95,97,96,98,754,985,892,-723,91,101,-723,-723,90,-111,499,-723,85,733',
'92,106,107,264,-723,264,91,-120,333,81,82,83,11,65,264,228,92,71,72',
'264,240,228,75,-723,73,74,76,35,36,79,80,788,240,240,500,240,84,33,32',
'114,113,115,116,-102,803,23,1056,240,606,281,282,10,53,335,12,118,117',
'119,108,64,110,109,111,814,112,120,121,-320,104,105,49,50,48,-321,-320',
'-723,819,-626,240,-720,-321,821,-723,-320,-626,280,279,-719,824,-321',
'829,-723,45,-626,830,38,834,858,66,67,227,862,68,863,40,-294,876,602',
'52,491,-723,488,487,486,558,489,520,24,558,888,892,910,102,90,93,94',
'913,95,97,96,98,914,-320,240,917,91,101,240,-321,926,-723,943,-626,85',
'944,92,106,107,945,962,46,47,333,81,82,83,11,65,964,300,970,71,72,972',
'974,228,75,-716,73,74,76,35,36,79,80,572,574,496,814,240,84,33,32,114',
'113,115,116,499,1159,23,488,487,486,306,489,10,53,335,12,118,117,119',
'108,64,110,109,111,306,112,120,121,227,104,105,49,50,48,-627,519,-614',
'507,506,814,264,-627,500,-614,520,892,987,988,-716,240,-627,240,-614',
'45,998,240,38,-295,240,66,67,1009,1013,68,1159,40,488,487,486,52,489',
'-716,-293,491,1017,488,487,486,24,489,700,718,1020,102,90,93,94,1022',
'95,97,96,98,1024,228,1026,1026,91,101,240,-627,774,-614,240,240,85,1054',
'92,106,107,1057,710,46,47,333,81,82,83,11,65,714,853,854,71,72,855,120',
'121,75,-717,73,74,76,35,36,79,80,129,130,131,132,133,84,33,32,114,113',
'115,116,925,491,23,488,487,486,972,489,10,53,335,12,118,117,119,108',
'64,110,109,111,1069,112,120,121,240,104,105,49,50,48,814,491,-617,488',
'487,486,1086,489,710,-617,1088,1093,1094,1099,-717,1100,1101,714,-617',
'45,-296,1114,38,1115,1116,66,67,240,240,68,240,40,240,240,240,52,925',
'-717,710,491,1123,488,487,486,24,489,240,714,1129,102,90,93,94,1130',
'95,97,96,98,1132,700,1135,1138,91,101,1140,1142,240,-617,-385,1154,85',
'1165,92,106,107,1166,710,46,47,333,81,82,83,11,65,1026,1026,1026,71',
'72,1173,1186,1189,75,1194,73,74,76,35,36,79,80,256,1195,694,1115,1205',
'84,33,32,114,113,115,116,1205,700,23,129,130,131,132,133,10,53,335,12',
'118,117,119,108,64,110,109,111,1208,112,120,121,1210,104,105,49,50,48',
'264,268,269,270,271,281,282,276,277,272,273,1212,257,258,1214,1214,274',
'275,240,45,1026,255,38,1205,-720,66,67,-719,1231,68,1214,40,261,1214',
'267,52,263,262,1214,259,260,280,279,265,24,266,3,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,129,130,131,132,133,84,33,32',
'114,113,115,116,,,23,,,,,677,10,53,335,12,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277',
'272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263',
'262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,278,,-265,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72',
',,,75,,73,74,76,35,36,79,80,129,130,131,132,133,84,33,32,114,113,115',
'116,,,23,,,,,889,10,53,335,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,257',
'258,,,274,275,,45,,,337,,,66,67,,,68,,40,261,,267,52,263,262,,259,260',
'280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,',
'85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,677,10,53,335,12,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269',
'270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,,,337,,,66,67',
',,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47,333,81,82',
'83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,918,10,53,335,12,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273',
',257,258,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259',
'260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,278',
',,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12',
'118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268',
'269,270,271,281,282,276,277,272,273,,257,258,,,274,275,,45,,,38,,,66',
'67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47,333,81',
'82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,257',
'258,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260',
'280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,',
'85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269,270',
'271,281,282,276,277,272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68',
',40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47,7,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,10,53,9,12,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,257,258,,',
'274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279',
'265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,240,278,,,,,85,,92',
'106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79',
'80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269,270,271',
'281,282,276,277,272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40',
'261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,',
'104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,257,258',
',,274,275,,45,,,337,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280',
'279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,',
'92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269,270,271',
'281,282,276,277,272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40',
'261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,',
'104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,257,258',
',,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280',
'279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,278,,,,,85,',
'92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269,270,271',
'281,282,276,277,272,273,,257,258,,,274,275,,45,,,38,,,66,67,,,68,,40',
'261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,278,,,,,85,,92,106,107,,,46,47,333,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,',
'104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,-745,-745',
',,274,275,,45,,,38,,,66,67,,264,68,,40,261,,267,52,263,262,,259,260',
'280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,261,,91,101,263,262',
',259,260,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,',
'73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,264,491,23,488,487',
'486,,489,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,264,,261,,,,263,262,710,259,260,,,,,,274,275,,45,,,38,',
',66,67,,,68,,40,261,,267,52,263,262,,259,260,,,265,24,266,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82',
'83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,-745',
'-745,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260',
'280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85',
',92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,268,269,270,271',
'281,282,276,277,272,273,,-745,-745,,,274,275,,45,,,38,,,66,67,,,68,',
'40,261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,',
'95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,',
'104,105,49,50,48,264,,,,,,,,,,,,,,,,274,275,,45,,,38,,,66,67,,,68,,40',
'261,,267,52,263,262,,259,260,,,265,24,266,,,,102,90,93,94,,95,97,96',
'98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,',
',,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,264,268,269,270,271,281,282,276,,272,273,,,,,,274,275,,45,',
',38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47',
'7,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,23,,,,,,10,53,9,12,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,264,268,269,270,271,281,282,,,272,273',
',,,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260',
'280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85',
',92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,-745,-745,-745',
'-745,281,282,,,-745,-745,,,,,,274,275,,45,,,38,,,66,67,,,68,,40,261',
',267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95,97,96',
'98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71',
'72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,',
',,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,264,-745,-745,-745,-745,281,282,,,-745,-745,,,,,,274,275,,45',
',,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24,266',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47',
'333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,264,-745,-745,-745,-745,281,282,,,-745',
'-745,,,,,,274,275,,45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259',
'260,280,279,265,24,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,',
',85,,92,106,107,,,46,47,333,81,82,83,11,65,,,,71,72,,,,75,,73,74,76',
'35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,264,-745,-745',
'-745,-745,281,282,,,-745,-745,,,,,,274,275,,45,,,38,,,66,67,,,68,,40',
'261,,267,52,263,262,,259,260,280,279,265,24,266,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,333,81,82,83,11,65',
',,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,',
',23,,,,,,10,53,335,12,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,264,-745,-745,-745,-745,281,282,,,-745,-745,,,,,,274,275',
',45,,,38,,,66,67,,,68,,40,261,,267,52,263,262,,259,260,280,279,265,24',
'266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106',
'107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113',
'115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,264,-745,-745,-745,-745,281,282,,,-745,-745,,,,,,274',
'275,,245,,,253,,,66,67,,,68,,,261,,267,52,263,262,,259,260,280,279,265',
'250,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,264,268,269,270,271,281,282,276,277,272,273,,-745',
'-745,,,274,275,,245,,,253,,,66,67,,,68,,,261,,267,52,263,262,,259,260',
'280,279,265,250,266,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,,,,,,,,,,,,,,,,274,275,,245,',
',253,,,66,67,,,68,,,261,,267,52,263,262,,259,260,,,,250,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47',
',75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,',
',,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,264,,,,,,,,,,,,,,,,274,275,,245,,,253,,,66,67,,,68,,,261,,,52,263',
'262,,259,260,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,264,,,,,,,,,,,,,,,,274,275,,245,',
',253,,,66,67,,,68,,,261,,267,52,263,262,,259,260,,,,250,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,10,53,,12,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,',
',,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79',
'80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,',
'254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,436,,,,52,,,,,,',
',,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79',
'80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,,,,85,,92,106,107,-441,,46,47,,,,-441,-441,-441',
',,-441,-441,-441,,-441,,,,,,,,-441,-441,-441,-441,,,,,,,,,-441,-441',
',-441,-441,-441,-441,-441,,,,,,,,,,,,,,,,,,,,,,,-441,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,-441,-441,-441,-441,,,-441,-441,-441,',
',-441,,306,-441,,,-441,-441,,-441,,-441,,-441,,-441,-441,,-441,-441',
'-441,-441,-441,,-441,-441,-441,,,,,,,,,,,,,,-441,,,-441,-441,,-441,',
'-441,81,82,83,,65,,-441,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,',
'81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,',
',84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,',
',,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,',
',,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,-327,,46,47,,,,-327',
'-327,-327,,,-327,-327,-327,,-327,,,,,,,,-327,,-327,-327,,,,,,,,,-327',
'-327,,-327,-327,-327,-327,-327,,,,,,,,,,,,,,,,,,,,,,,-327,-327,-327',
'-327,-327,-327,-327,-327,-327,-327,-327,-327,-327,-327,,,-327,-327,-327',
',,-327,,315,-327,,,-327,-327,,-327,,-327,,-327,,-327,-327,,-327,-327',
'-327,-327,-327,,-327,,-327,,,,,,,,,,,,,,-327,,,-327,-327,,-327,,-327',
'81,82,83,,65,,-327,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,',
'91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355',
'79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,',
'245,,,253,,,66,67,,,68,,797,,322,,52,,,328,,,,,,250,,,,,102,325,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82',
'83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,10,53,,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,',
',52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,',
'91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36',
'79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,797,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,',
',,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,867,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82',
'83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,10,53,,12,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,',
',52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,',
'91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355',
'79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35',
'36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,',
',,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,',
',,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328,,,',
',,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,',
',,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96',
'98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76',
'354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,',
',,,,,245,,,253,,,66,67,,,68,,324,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,',
'118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,',
',,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47',
',75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,',
',,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49',
'50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,328,,,,,,250',
',,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,797,,,',
'52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,240,,,81',
'82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,',
'84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,',
'118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,',
',,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47',
',75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49',
'50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328',
',,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106',
'107,,,46,47,81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,',
',84,33,32,114,113,115,116,,,23,,,,,,10,53,335,12,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38',
',,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,',
'91,101,,,,,,420,85,,92,106,107,,,46,47,81,82,83,,65,,,,71,72,,,,75,',
'73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53',
',,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,',
',,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,322,',
'52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,',
',66,67,,,68,,797,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96',
'98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76',
'354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,',
',,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,',
',,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,-275,,46',
'47,,,,-275,-275,-275,,,-275,-275,-275,491,-275,488,487,486,496,489,',
',-275,-275,-275,,,,499,,,,,,-275,-275,,-275,-275,-275,-275,-275,,491',
',488,487,486,496,489,494,,,,,,,,499,504,503,507,506,,,,500,,491,,488',
'487,486,496,489,-275,,,,,494,,-275,499,,,,306,-275,504,503,507,506,',
',,500,,,,,,,,,494,485,,,,-275,-275,,,,,507,506,,,,500,,,,-275,,,-275',
',81,82,83,-275,65,,485,,71,72,-275,,,75,,73,74,76,354,355,79,80,,,,',
',84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79',
'80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,',
',,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52',
',,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,',
',,,,245,,,253,,,66,67,,,68,,324,,,,52,,,328,,,,,,250,,,,,102,325,93',
'94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47,81,82,83,11',
'65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,10,53,,12,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,',
',,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113',
'115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52',
',,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65',
'92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,',
',,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,',
',,,,245,,,253,,,66,67,,,68,,797,,322,,52,,,328,,,,,,250,,,,,102,325',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'560,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104,105,49',
'50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328',
',,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65',
'92,106,107,71,72,46,560,,75,,73,74,76,354,355,79,80,,,,,,84,349,357',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84',
'349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109',
'111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66',
'67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,',
',,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96',
'98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76',
'35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,',
',,,,245,,,253,,,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325',
'93,94,,95,97,96,98,,,,,91,101,240,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,',
'254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,',
',,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79',
'80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108',
'64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245',
',,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98',
',,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,',
'53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,',
',,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,',
'254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,',
',,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92',
'106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,,,,,,,85,,92,106,107,,,46,47,81,82,83,11,65,,,,71,72,,,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,10,53,,12,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,45,,,38,,,66,67,,,68,,40,,,,52,,,,,,,,,24,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75',
',73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,',
'118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,',
',,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47',
',75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53',
',,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,',
',,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,',
',,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48',
',,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
'46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,',
',,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,',
'102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,46,47',
'81,82,83,11,65,,,,71,72,,,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114',
'113,115,116,,,23,,,,,,10,53,9,12,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,45,,,38,,,66,67,,,68,,40',
',,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,420,85',
',92,106,107,,,46,47,81,82,83,,65,,,,71,72,,,,75,,73,74,76,35,36,79,80',
',,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110',
'109,111,327,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253',
',,66,67,,,68,,324,,322,,52,,,328,,,,,,250,,,,,102,325,93,94,,95,97,96',
'98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76',
'35,36,79,80,,,,,,84,33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118',
'117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,',
',,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94',
',95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,-725,,46,47,,,,-725,-725',
'-725,,,-725,-725,-725,,-725,,,,,,,,-725,-725,-725,-725,-725,,,,,,,,-725',
'-725,,-725,-725,-725,-725,-725,,,,,,,,,,,,,,,,,,,,,,,-725,-725,-725',
'-725,-725,-725,-725,-725,-725,-725,-725,-725,-725,-725,,,-725,-725,-725',
',,-725,,,-725,,,-725,-725,,-725,,-725,,-725,,-725,-725,,-725,-725,-725',
'-725,-725,,-725,-725,-725,,,,,,,,,,,,,,-725,,,-725,-725,-725,-725,,-725',
'-724,-725,,,,,-725,-724,-724,-724,,,-724,-724,-724,,-724,,,,,,,,-724',
'-724,-724,-724,-724,,,,114,113,115,116,-724,-724,,-724,-724,-724,-724',
'-724,,,,,118,117,119,,,,,,,,,,,104,105,,,358,-724,-724,-724,-724,-724',
'-724,-724,-724,-724,-724,-724,-724,-724,-724,,,-724,-724,-724,,,-724',
',,-724,,,-724,-724,,-724,,-724,,-724,,-724,-724,,-724,-724,-724,-724',
'-724,,-724,-724,-724,,102,90,93,94,,95,97,96,98,,,,-724,91,101,-724',
'-724,-724,-724,,-724,85,-724,92,106,107,-275,-724,81,82,83,11,65,-275',
'-275,-275,71,72,-275,-275,-275,75,-275,73,74,76,35,36,79,80,-275,-275',
'-275,-275,,84,33,32,114,113,115,116,-275,-275,23,-275,-275,-275,-275',
'-275,10,53,9,12,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275',
'-275,-275,,,-275,-275,-275,45,,-275,38,306,-275,66,67,-275,-275,68,-275',
'40,-275,,-275,52,-275,-275,,-275,-275,-275,-275,-275,24,-275,-275,-275',
',102,90,93,94,,95,97,96,98,,,,-275,91,101,-275,-275,,-275,,-275,85,',
'92,106,107,,-275,46,47,81,82,83,,65,,,,71,72,,,,75,,73,74,76,35,36,79',
'80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,',
',,91,101,126,,,,,125,85,,92,106,107,-312,,46,47,,,,-312,-312,-312,,',
'-312,-312,-312,,-312,,,,,,,,-312,,-312,-312,-312,,,,,,,,-312,-312,,-312',
'-312,-312,-312,-312,,,,,,,,,,,,,,,,,,,,,,,-312,-312,-312,-312,-312,-312',
'-312,-312,-312,-312,-312,-312,-312,-312,,,-312,-312,-312,,,-312,,,-312',
',,-312,-312,,-312,,-312,,-312,,-312,-312,,-312,-312,-312,-312,-312,',
'-312,,-312,,,,,,,,,,,,,,-312,,,-312,-312,-312,-312,,-312,,-312,,81,82',
'83,-312,65,,,,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,',
',52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,23,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33',
'32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,',
'112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,',
',68,,436,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,',
'253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,',
',,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354',
'355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,,,118,117,119',
'108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,',
',245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74',
'76,35,36,79,80,,,,,,84,33,32,114,113,115,116,,,23,,,,,,,53,,,118,117',
'119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,',
',,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,24,,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46,47,,75,,73',
'74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254,,,,,,,53,',
',118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50,48,,,,,',
',,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72,46',
'47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,49,50',
'48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250,,,',
',102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71',
'72,46,47,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
'49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,,,,,52,,,,,,,,,250',
',,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107',
'71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32,114,113,115,116',
',,254,,,,,,,53,,,118,117,119,108,64,110,109,111,327,112,120,121,,104',
'105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68,,324,,322,,52',
',,328,,,,,,250,,,,,102,325,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84,33,32',
'114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67,,,68',
',436,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81',
'82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,35,36,79,80,,,,,,84',
'33,32,114,113,115,116,,,254,,,,,,,53,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,49,50,48,,,,,,,,,,,,,,,,,,,,245,,,253,,,66,67',
',,68,,,,,,52,,,,,,,,,250,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,',
',81,82,83,85,65,92,106,107,71,72,46,47,,75,,73,74,76,354,355,79,80,',
',,,,84,349,357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,1107,,,253',
',,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,',
',,84,349,357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,1146,,,253,,',
'66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,',
',,81,82,83,85,65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,,',
',84,349,357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,346,,,253,,,66',
'67,,,68,,,491,,488,487,486,496,489,,,,,,,,,499,,102,90,93,94,,95,97',
'96,98,,,,,91,101,,,,588,,494,85,,92,106,107,81,82,83,,65,507,506,,71',
'72,500,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116',
',,254,,,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105',
',,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,,,,,,,,,,,,,,,,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106,107,71,72',
',,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115,116,,,254',
',,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,346,,,253,,,66,67,,,68,,,491,,488,487,486,496,489',
',,,,,,,,499,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,360,,494,85,,92',
'106,107,81,82,83,,65,507,506,,71,72,500,,,75,,73,74,76,354,355,79,80',
',,,,,84,349,357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64',
'110,109,111,,112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,346,,,342',
',,66,67,,,68,,,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
',,,81,82,83,85,65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,',
',,84,349,357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64,110',
'109,111,,112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,66',
'67,,,68,,,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81',
'82,83,85,65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,1146,,,253,,,66,67,,',
'68,,,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,400,64,110,109,401',
',112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,407,,,402,,,253,,,66,67',
',,68,,,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82',
'83,85,65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349',
'357,114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64,110,109,111',
',112,120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68',
',,,,,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83',
'85,65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357',
'114,113,115,116,,,254,,,,,,,350,,,118,117,119,108,64,110,109,111,,112',
'120,121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,,',
',,,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85',
'65,92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114',
'113,115,116,,,254,,,,,,,350,,,118,117,119,108,64,110,109,111,,112,120',
'121,,104,105,,,358,,,,,,,,,,,,,,,,,,,,346,,,342,,,66,67,,,68,,341,,',
',,,,,,,,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65',
'92,106,107,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113',
'115,116,,,254,,,,,,,350,,,118,117,119,108,64,110,109,111,,112,120,121',
',104,105,,,358,,,,,,,,,,,,,,,,,,,,395,,,38,,,66,67,,,68,,40,,,,,,,,',
',,,,,,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,81,82,83,85,65,92,106',
'107,71,72,,,,75,,73,74,76,354,355,79,80,,,,,,84,349,357,114,113,115',
'116,,,254,,,,,,,350,,,118,117,119,400,64,110,109,401,,112,120,121,,104',
'105,,,358,,,,,,,,,,,,,,,,,,,,402,,,253,,,66,67,,,68,,,,,,,,,,,,,,,,',
',,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107,185,196',
'186,209,182,202,192,191,212,213,207,190,189,184,210,214,215,194,183',
'197,201,203,195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,',
'180,187,178,179,175,176,177,138,140,137,,139,,,,,,,,169,170,,166,148',
'149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163,162',
',147,168,165,164,173,160,161,155,153,145,167,146,,,174,102,,,,,,,,,',
',,,,101,185,196,186,209,182,202,192,191,212,213,207,190,189,184,210',
'214,215,194,183,197,201,203,195,188,,,,204,211,206,205,198,208,193,181',
'200,199,,,,,,180,187,178,179,175,176,177,138,140,,,139,,,,,,,,169,170',
',166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,,,,,',
',,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,,,174,102',
',,,,,,,,,,,,,101,185,196,186,209,182,202,192,191,212,213,207,190,189',
'184,210,214,215,194,183,197,201,203,195,188,,,,204,211,206,205,198,208',
'193,181,200,199,,,,,,180,187,178,179,175,176,177,138,140,,,139,,,,,',
',,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159',
',,,,,,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146',
',,174,102,,,,,,,,,,,,,,101,185,196,186,209,182,202,192,191,212,213,207',
'190,189,184,210,214,215,194,183,197,201,203,195,188,,,,204,211,206,205',
'198,208,193,181,200,199,,,,,,180,187,178,179,175,176,177,138,140,,,139',
',,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158',
'159,,,,,,,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167',
'146,,,174,102,,,,,,,,,,,,,,101,185,196,186,209,182,202,192,191,212,213',
'207,190,189,184,210,214,215,194,183,197,201,203,195,188,,,,204,211,206',
'294,293,295,292,181,200,199,,,,,,180,187,178,179,289,290,291,287,140',
'110,109,288,,112,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152',
',,,171,172,158,159,,,,,,299,,,,,,,,163,162,,147,168,165,164,173,160',
'161,155,153,145,167,146,,,174,114,113,115,116,,,,,,491,,488,487,486',
'496,489,118,117,119,774,,,,777,499,,,,,104,105,,,358,,,,,,,,,,,,,494',
',,,,,,776,,,747,507,506,,745,,500,746,,,,,,,,,,,,,,,,775,,,,102,90,93',
'94,,95,97,96,98,,,,,91,101,114,113,115,116,485,,85,,92,106,107,,,762',
'763,,118,117,119,774,,,491,777,488,487,486,496,489,104,105,,,358,,,',
'499,,,,,,,,,,,,,,,,776,,,747,,,494,745,,,746,,,,,504,503,507,506,,,',
'500,,,,775,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,',
',85,,92,106,107,,,762,763,,118,117,119,774,,,491,777,488,487,486,496',
'489,104,105,,,358,,,,499,,,,,,,,,,,,,,,,776,,,747,,,494,745,,,746,,749',
',,504,503,507,506,,,,500,,,,775,,,,102,90,93,94,,95,97,96,98,,,,,91',
'101,114,113,115,116,,,85,,92,106,107,,,762,763,,118,117,119,774,,,,777',
'754,,,,,104,105,,,358,499,,,,,,,,,,,,,,,,,,,776,,,747,,,,745,,,746,',
'749,,,,,,,500,,,,,,,775,,,,102,755,93,94,,95,97,96,98,,,,,91,101,114',
'113,115,116,,,85,,92,106,107,,,762,763,,118,117,119,774,,,491,777,488',
'487,486,496,489,104,105,,,358,,,,499,,,,,,,,,,,,,,,,776,,,747,,,494',
'745,,,746,,,,,504,503,507,506,,,,500,,,,775,,,,102,90,93,94,,95,97,96',
'98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,762,763,,118,117,119',
'774,,,491,777,488,487,486,496,489,104,105,,,358,,,,499,,,,,,,,,,,,,',
',,776,,,747,,,494,745,,,746,,749,,,,,507,506,,,,500,,,,775,,,,102,90',
'93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,762',
'763,,118,117,119,774,,,,777,,,,,,104,105,,,358,,,,,,,,,,,,,,,,,,,,776',
',,747,,,,745,,,746,,749,,,,,,,491,,488,487,486,496,489,775,,,,102,90',
'93,94,499,95,97,96,98,,,,,91,101,240,114,113,115,116,,85,,92,106,107',
'494,,762,763,,,118,117,119,774,,507,506,777,,,500,,,104,105,,,358,,',
',,,,,,,,,,,,,,,,,776,,,747,,,,745,,,746,,,485,,,,,,,,,,,,,775,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,',
'762,763,,118,117,119,774,,,,777,754,,,,,104,105,,,358,499,,,,,,,,,,',
',,,,,,,,776,,,747,,,,745,,,746,,749,,,,,,,500,,,,,,,775,,,,102,755,93',
'94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,762,763',
',118,117,119,774,,,,777,754,,,,,104,105,,,358,499,,,,,,,,,,,,,,,,,,',
'776,,,747,,,,745,,,746,,749,,,,,,,500,,,,,,,775,,,,102,755,93,94,,95',
'97,96,98,,,,,91,101,,,,,,,85,,92,106,107,,,762,763,185,196,186,209,182',
'202,192,191,212,213,207,190,189,184,210,214,215,194,183,197,201,203',
'195,188,,,,204,211,206,205,198,208,193,181,200,199,,,,,,180,187,178',
'179,175,176,177,138,140,,,139,,,,,,,,169,170,,166,148,149,150,157,154',
'156,,,151,152,,,,171,172,158,159,,,,,,,,,,,,,,163,162,,147,168,165,164',
'173,160,161,155,153,145,167,146,,,174,114,113,115,116,,,491,,488,487',
'486,496,489,,,,118,117,119,774,,499,,777,754,,,,,104,105,,,358,499,',
',,,,,,,494,,,,,,,,,,776,507,506,747,,,500,745,,,746,,749,,,,,,,500,',
',,,,,775,,,,102,755,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,',
'85,,92,106,107,,,762,763,,118,117,119,774,,,,777,754,,,,,104,105,,,358',
'499,,,,,,,,,,,,,,,,,,,776,,,747,,,,745,,,746,,749,,,,,,,500,,,,,,,775',
',,,102,755,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106',
'107,,,762,763,,118,117,119,774,,,,777,,,,,,104,105,,,358,,,,,,,,,,,',
',,,,,,,,776,,,747,,,,745,,,746,,,,,,,,,,,,,,,,775,,,,102,90,93,94,,95',
'97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,,762,763,,118',
'117,119,774,,,,777,,,,,,104,105,,,358,,,,,,,,,,,,,,,,,,,,776,,,747,',
',,745,,,746,,,,,,,,,,,,,,,,775,,,,102,90,93,94,,95,97,96,98,,,,,91,101',
'114,113,115,116,,,85,,92,106,107,,,762,763,,118,117,119,774,,,,777,',
',,,,104,105,,,358,,,,,,,,,,,,,,,,,,,,776,,,747,,,,745,,,746,,,,,,,,',
',,,,,,,775,,,,102,90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,',
',85,,92,106,107,,,762,763,,118,117,119,774,,,,777,,,,,,104,105,,,358',
',,,,,,,,,,,,,,,,,,,776,,,747,,,,745,,,746,,,,,,,,,,,,,,,,775,,,,102',
'90,93,94,,95,97,96,98,,,,,91,101,114,113,115,116,,,85,,92,106,107,,',
'762,763,,118,117,119,774,,,,777,,,,,,104,105,,,358,,,,,,,,114,113,115',
'116,,,,,,,,,776,,,747,118,117,119,745,,,746,,1053,,,,,104,105,,,358',
',,,,775,,,,102,90,93,94,,95,97,96,98,,,,,91,101,,,,,,,85,,92,106,107',
',,762,763,491,,488,487,486,496,489,,,,,102,90,93,94,499,95,97,96,98',
',,,,91,101,114,113,115,116,,,85,,92,106,107,494,,,,,118,117,119,,504',
'503,507,506,,,,500,,104,105,,,358,,,,,,,,,,,,491,,488,487,486,496,489',
',,,,,,,,499,,,,,,491,485,488,487,486,496,489,,,,,,,,,499,494,102,90',
'93,94,,95,97,96,98,,507,506,,91,101,500,,,,,494,85,,92,106,107,,,,504',
'503,507,506,,,491,500,488,487,486,496,489,,491,,488,487,486,496,489',
'499,,,,,485,,,499,,491,,488,487,486,496,489,,,,,,494,644,,499,485,,',
',494,504,503,507,506,,,,500,504,503,507,506,,,,500,494,,,,,,,,,504,503',
'507,506,,,491,500,488,487,486,496,489,,,,,,,,,499,485,,,,,,,,485,,,',
',,,,,,,,,494,,,,485,,,,,,,507,506,872,469,,500,871,,,,,,,,169,170,,166',
'148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,485',
',,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,842,469,174',
',843,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172',
'158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153',
'145,167,146,837,462,174,,838,,,,,,,,169,170,,166,148,149,150,157,154',
'156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165',
'164,173,160,161,155,153,145,167,146,465,469,174,,464,,,,,,,,169,170',
',166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,',
',,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,729,469',
'174,,730,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171',
'172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155',
'153,145,167,146,556,462,174,,557,,,,,,,,169,170,,166,148,149,150,157',
'154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168',
'165,164,173,160,161,155,153,145,167,146,458,462,174,,459,,,,,,,,169',
'170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306',
',,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,556',
'462,174,,557,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,',
',,171,172,158,159,,,,,,,,,,,,,,163,162,,147,168,165,164,173,160,161',
'155,153,145,167,146,729,469,174,,730,,,,,,,,169,170,,166,148,149,150',
'157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147',
'168,165,164,173,160,161,155,153,145,167,146,727,462,174,,728,,,,,,,',
'169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,',
',,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146',
'807,462,174,,808,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152',
',,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160',
'161,155,153,145,167,146,810,469,174,,811,,,,,,,,169,170,,166,148,149',
'150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162',
',147,168,165,164,173,160,161,155,153,145,167,146,1200,462,174,,1201',
',,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172,158',
'159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153,145',
'167,146,869,462,174,,870,,,,,,,,169,170,,166,148,149,150,157,154,156',
',,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164',
'173,160,161,155,153,145,167,146,1202,469,174,,1203,,,,,,,,169,170,,166',
'148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,',
',163,162,,147,168,165,164,173,160,161,155,153,145,167,146,839,469,174',
',840,,,,,,,,169,170,,166,148,149,150,157,154,156,,,151,152,,,,171,172',
'158,159,,,,,,306,,,,,,,,163,162,,147,168,165,164,173,160,161,155,153',
'145,167,146,1218,469,174,,1217,,,,,,,,169,170,,166,148,149,150,157,154',
'156,,,151,152,,,,171,172,158,159,,,,,,306,,,,,,,,163,162,,147,168,165',
'164,173,160,161,155,153,145,167,146,727,462,174,,728,,,,,,,,169,170',
',166,148,149,150,157,154,156,,,151,152,,,,171,172,158,159,,,,,,306,',
',,,,,,163,162,,147,168,165,164,173,160,161,155,153,145,167,146,,,174' ]
        racc_action_table = arr = ::Array.new(28717, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'464,521,1016,837,1236,838,992,464,464,464,515,515,1053,464,464,289,464',
'23,835,631,1087,1058,289,807,464,927,443,137,396,785,3,840,137,137,501',
'31,464,464,1089,464,464,464,464,464,1104,1105,1108,384,385,392,850,622',
'501,625,1092,932,1092,331,23,928,521,625,331,393,1058,927,464,464,464',
'464,464,464,464,464,464,464,464,464,464,464,289,1165,464,464,464,443',
'464,464,1200,807,464,1201,839,464,1053,928,840,9,464,31,464,932,464',
'464,515,464,464,464,464,464,871,464,837,464,838,992,785,871,871,871',
'1016,1202,31,871,871,1016,871,464,631,807,464,464,807,464,871,464,835',
'396,1087,835,840,835,464,1087,807,464,871,871,1203,871,871,871,871,871',
'1222,622,1089,839,392,850,622,1089,1104,1105,1108,384,385,1104,1105',
'1108,384,385,393,981,981,12,871,871,871,871,871,871,871,871,871,871',
'871,871,871,871,553,553,871,871,871,69,871,871,1202,1165,871,839,416',
'871,1165,1127,1200,735,871,1201,871,1200,871,871,1201,871,871,871,871',
'871,251,871,729,871,243,1203,244,641,641,729,729,729,358,358,729,729',
'729,871,729,1202,871,871,802,871,1202,871,729,729,729,729,729,417,871',
'735,802,871,14,808,729,729,246,729,729,729,729,729,1203,981,416,1127',
'1127,1203,1222,810,979,15,251,1222,351,576,252,17,69,243,553,244,1127',
'27,729,729,729,729,729,729,729,729,729,729,729,729,729,729,20,458,729',
'729,729,656,729,729,358,358,729,48,48,729,729,417,729,246,729,641,729',
'808,729,729,641,729,729,729,729,729,42,729,729,729,252,459,810,810,979',
'947,351,576,576,576,658,45,414,729,458,413,729,729,729,729,53,729,20',
'729,576,730,458,808,729,351,808,729,730,730,730,656,656,730,730,730',
'1220,730,808,810,979,656,810,979,459,730,1220,730,730,730,1006,48,48',
'727,810,979,459,730,730,216,730,730,730,730,730,947,947,947,756,229',
'658,658,414,414,414,413,413,413,728,923,658,402,947,19,746,402,756,730',
'730,730,730,730,730,730,730,730,730,730,730,730,730,746,44,730,730,730',
'412,730,730,1006,231,730,727,291,730,730,418,730,288,730,291,730,235',
'730,730,288,730,730,730,730,730,870,730,869,730,700,700,728,923,19,972',
'415,972,972,972,972,972,245,730,44,290,730,730,730,730,972,730,290,730',
'996,872,44,822,730,996,822,730,872,872,872,412,412,412,872,872,776,872',
'972,291,776,418,418,418,288,872,872,972,972,972,972,870,931,869,972',
'247,931,872,872,248,872,872,872,872,872,254,415,415,415,1022,634,1022',
'1022,1022,1022,1022,290,634,362,914,972,914,914,914,1022,914,634,872',
'872,872,872,872,872,872,872,872,872,872,872,872,872,305,43,872,872,872',
'1022,872,872,319,389,872,411,320,872,389,914,1022,1022,872,323,872,1022',
'872,872,362,872,872,872,872,872,108,872,872,872,634,5,362,108,108,108',
'5,335,108,108,108,287,108,872,43,336,872,872,287,872,108,872,108,108',
'108,744,43,1022,872,338,744,872,108,108,744,108,108,108,108,108,339',
'411,411,411,340,347,286,294,295,29,759,759,347,286,294,295,29,376,346',
'21,376,347,108,108,108,108,108,108,108,108,108,108,108,108,108,108,287',
'345,108,108,108,1187,108,108,345,349,108,350,1187,108,108,352,108,345',
'108,509,108,1187,108,108,509,108,108,108,108,108,21,108,111,108,347',
'286,294,295,29,111,111,111,21,353,111,111,111,108,111,357,108,108,108',
'108,359,108,111,108,111,111,111,377,108,366,377,108,345,368,111,111',
'1187,111,111,111,111,111,371,442,374,404,378,54,293,292,442,379,404',
'381,54,293,292,380,390,442,380,404,391,54,111,111,111,111,111,111,111',
'111,111,111,111,111,111,111,395,939,111,111,111,394,111,111,1090,1090',
'111,939,394,111,111,397,111,678,111,406,111,394,111,111,426,111,111',
'111,111,111,442,111,404,111,54,293,292,432,1145,434,775,1157,775,775',
'1157,1145,775,111,435,939,111,111,111,111,1145,111,437,111,440,465,444',
'939,111,454,678,111,465,465,465,1132,394,456,465,465,811,465,678,775',
'531,1132,457,811,466,465,465,472,811,823,823,473,811,762,762,762,762',
'465,465,476,465,465,465,465,465,1145,383,383,477,762,762,762,531,478',
'1132,1132,531,531,481,1132,482,532,762,762,16,16,762,465,465,465,465',
'465,465,465,465,465,465,465,465,465,465,811,483,465,465,465,493,465',
'465,1106,505,465,508,532,465,18,1106,532,532,465,511,465,18,465,465',
'1106,465,465,465,465,465,18,465,465,465,517,762,762,762,762,525,762',
'762,762,762,945,1190,1190,465,762,762,465,465,88,465,945,465,762,526',
'762,762,762,533,465,534,88,465,387,387,387,387,387,387,535,1106,88,387',
'387,536,561,18,387,842,387,387,387,387,387,387,387,562,563,567,945,583',
'387,387,387,387,387,387,387,584,587,387,945,589,594,51,51,387,387,387',
'387,387,387,387,387,387,387,387,387,598,387,387,387,843,387,387,387',
'387,387,593,843,842,607,343,608,843,593,609,842,843,343,51,51,842,619',
'593,623,842,387,343,624,387,626,653,387,387,363,661,387,663,387,670',
'679,363,387,714,842,714,714,714,684,714,363,387,689,691,693,707,387',
'387,387,387,712,387,387,387,387,713,843,715,722,387,387,731,593,740',
'842,748,343,387,749,387,387,387,750,779,387,387,841,841,841,841,841',
'841,782,784,790,841,841,791,792,363,841,400,841,841,841,841,841,841',
'841,794,796,697,804,806,841,841,841,841,841,841,841,697,1099,841,1099',
'1099,1099,809,1099,841,841,841,841,841,841,841,841,841,841,841,841,812',
'841,841,841,242,841,841,841,841,841,344,242,400,697,697,813,816,344',
'697,400,242,825,831,832,400,836,344,845,400,841,849,851,841,866,868',
'841,841,877,890,841,1197,841,1197,1197,1197,841,1197,400,893,913,894',
'913,913,913,841,913,897,899,902,841,841,841,841,903,841,841,841,841',
'905,242,906,908,841,841,912,344,925,400,933,934,841,938,841,841,841',
'941,913,841,841,236,236,236,236,236,236,913,649,649,236,236,649,649',
'649,236,401,236,236,236,236,236,236,236,8,8,8,8,8,236,236,236,236,236',
'236,236,946,494,236,494,494,494,965,494,236,236,236,236,236,236,236',
'236,236,236,236,236,968,236,236,236,969,236,236,236,236,236,978,710',
'401,710,710,710,983,710,494,401,986,993,995,1002,401,1003,1004,494,401',
'236,1005,1031,236,1032,1037,236,236,1042,1043,236,1044,236,1045,1046',
'1047,236,1051,401,710,1114,1052,1114,1114,1114,236,1114,1055,710,1059',
'236,236,236,236,1066,236,236,236,236,1071,1072,1074,1075,236,236,1076',
'1078,1079,401,1080,1096,236,1107,236,236,236,1110,1114,236,236,1103',
'1103,1103,1103,1103,1103,1111,1112,1113,1103,1103,1124,1143,1146,1103',
'1155,1103,1103,1103,1103,1103,1103,1103,25,1156,1161,1171,1172,1103',
'1103,1103,1103,1103,1103,1103,1174,1177,1103,581,581,581,581,581,1103',
'1103,1103,1103,1103,1103,1103,1103,1103,1103,1103,1103,1180,1103,1103',
'1103,1181,1103,1103,1103,1103,1103,25,25,25,25,25,25,25,25,25,25,25',
'1182,25,25,1183,1185,25,25,1199,1103,1204,25,1103,1206,1217,1103,1103',
'1218,1224,1103,1225,1103,25,1226,25,1103,25,25,1227,25,25,25,25,25,1103',
'25,1,,,1103,1103,1103,1103,,1103,1103,1103,1103,,,,,1103,1103,,25,,',
',,1103,,1103,1103,1103,,,1103,1103,997,997,997,997,997,997,,,,997,997',
',,,997,,997,997,997,997,997,997,997,373,373,373,373,373,997,997,997',
'997,997,997,997,,,997,,,,,447,997,997,997,997,997,997,997,997,997,997',
'997,997,,997,997,997,,997,997,997,997,997,447,447,447,447,447,447,447',
'447,447,447,447,,447,447,,,447,447,,997,,,997,,,997,997,,,997,,997,447',
',447,997,447,447,,447,447,447,447,447,997,447,,,,997,997,997,997,,997',
'997,997,997,,,,,997,997,,447,,447,,,997,,997,997,997,,,997,997,337,337',
'337,337,337,337,,,,337,337,,,,337,,337,337,337,337,337,337,337,334,334',
'334,334,334,337,337,337,337,337,337,337,,,337,,,,,692,337,337,337,337',
'337,337,337,337,337,337,337,337,,337,337,337,,337,337,337,337,337,692',
'692,692,692,692,692,692,692,692,692,692,,692,692,,,692,692,,337,,,337',
',,337,337,,,337,,337,692,,692,337,692,692,,692,692,692,692,692,337,692',
',,,337,337,337,337,,337,337,337,337,,,,,337,337,,692,,,,,337,,337,337',
'337,,,337,337,38,38,38,38,38,38,,,,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,453,38,38,38,38,38,38,38,38,38,38',
'38,38,,38,38,38,,38,38,38,38,38,453,453,453,453,453,453,453,453,453',
'453,453,,453,453,,,453,453,,38,,,38,,,38,38,,,38,,38,453,,453,38,453',
'453,,453,453,453,453,453,38,453,,,,38,38,38,38,,38,38,38,38,,,,,38,38',
',453,,,,,38,,38,38,38,,,38,38,642,642,642,642,642,642,,,,642,642,,,',
'642,,642,642,642,642,642,642,642,,,,,,642,642,642,642,642,642,642,,',
'642,,,,,723,642,642,642,642,642,642,642,642,642,642,642,642,,642,642',
'642,,642,642,642,642,642,723,723,723,723,723,723,723,723,723,723,723',
',723,723,,,723,723,,642,,,642,,,642,642,,,642,,642,723,,723,642,723',
'723,,723,723,723,723,723,642,723,,,,642,642,642,642,,642,642,642,642',
',,,,642,642,,723,,,,,642,,642,642,642,,,642,642,1068,1068,1068,1068',
'1068,1068,,,,1068,1068,,,,1068,,1068,1068,1068,1068,1068,1068,1068,',
',,,,1068,1068,1068,1068,1068,1068,1068,,,1068,,,,,,1068,1068,1068,1068',
'1068,1068,1068,1068,1068,1068,1068,1068,,1068,1068,1068,,1068,1068,1068',
'1068,1068,817,817,817,817,817,817,817,817,817,817,817,,817,817,,,817',
'817,,1068,,,1068,,,1068,1068,,,1068,,1068,817,,817,1068,817,817,,817',
'817,817,817,817,1068,817,,,,1068,1068,1068,1068,,1068,1068,1068,1068',
',,,,1068,1068,,817,,,,,1068,,1068,1068,1068,,,1068,1068,372,372,372',
'372,372,372,,,,372,372,,,,372,,372,372,372,372,372,372,372,,,,,,372',
'372,372,372,372,372,372,,,372,,,,,,372,372,372,372,372,372,372,372,372',
'372,372,372,,372,372,372,,372,372,372,372,372,874,874,874,874,874,874',
'874,874,874,874,874,,874,874,,,874,874,,372,,,372,,,372,372,,,372,,372',
'874,,874,372,874,874,,874,874,874,874,874,372,874,,,,372,372,372,372',
',372,372,372,372,,,,,372,372,,874,,,,,372,,372,372,372,,,372,372,973',
'973,973,973,973,973,,,,973,973,,,,973,,973,973,973,973,973,973,973,',
',,,,973,973,973,973,973,973,973,,,973,,,,,,973,973,973,973,973,973,973',
'973,973,973,973,973,,973,973,973,,973,973,973,973,973,317,317,317,317',
'317,317,317,317,317,317,317,,317,317,,,317,317,,973,,,973,,,973,973',
',,973,,973,317,,317,973,317,317,,317,317,317,317,317,973,317,,,,973',
'973,973,973,,973,973,973,973,,,,,973,973,,317,,,,,973,,973,973,973,',
',973,973,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,',
',2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,2,2,2,550,550,550,550,550',
'550,550,550,550,550,550,,550,550,,,550,550,,2,,,2,,,2,2,,,2,,2,550,',
'550,2,550,550,,550,550,550,550,550,2,550,,,,2,2,2,2,,2,2,2,2,,,,,2,2',
'550,550,,,,,2,,2,2,2,,,2,2,230,230,230,230,230,230,,,,230,230,,,,230',
',230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230',
',,,,,230,230,230,230,230,230,230,230,230,230,230,230,,230,230,230,,230',
'230,230,230,230,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067',
',1067,1067,,,1067,1067,,230,,,230,,,230,230,,,230,,230,1067,,1067,230',
'1067,1067,,1067,1067,1067,1067,1067,230,1067,,,,230,230,230,230,,230',
'230,230,230,,,,,230,230,,1067,,,,,230,,230,230,230,,,230,230,342,342',
'342,342,342,342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,',
'342,342,342,342,342,342,342,,,342,,,,,,342,342,342,342,342,342,342,342',
'342,342,342,342,,342,342,342,,342,342,342,342,342,1034,1034,1034,1034',
'1034,1034,1034,1034,1034,1034,1034,,1034,1034,,,1034,1034,,342,,,342',
',,342,342,,,342,,342,1034,,1034,342,1034,1034,,1034,1034,1034,1034,1034',
'342,1034,,,,342,342,342,342,,342,342,342,342,,,,,342,342,,1034,,,,,342',
',342,342,342,,,342,342,253,253,253,253,253,253,,,,253,253,,,,253,,253',
'253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,',
'253,253,253,253,253,253,253,253,253,253,253,253,,253,253,253,,253,253',
'253,253,253,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,1033,',
'1033,1033,,,1033,1033,,253,,,253,,,253,253,,,253,,253,1033,,1033,253',
'1033,1033,,1033,1033,1033,1033,1033,253,1033,,,,253,253,253,253,,253',
'253,253,253,,,,,253,253,,1033,,,,,253,,253,253,253,,,253,253,1013,1013',
'1013,1013,1013,1013,,,,1013,1013,,,,1013,,1013,1013,1013,1013,1013,1013',
'1013,,,,,,1013,1013,1013,1013,1013,1013,1013,,,1013,,,,,,1013,1013,1013',
'1013,1013,1013,1013,1013,1013,1013,1013,1013,,1013,1013,1013,,1013,1013',
'1013,1013,1013,1011,1011,1011,1011,1011,1011,1011,1011,1011,1011,1011',
',1011,1011,,,1011,1011,,1013,,,1013,,,1013,1013,,,1013,,1013,1011,,1011',
'1013,1011,1011,,1011,1011,1011,1011,1011,1013,1011,,,,1013,1013,1013',
'1013,,1013,1013,1013,1013,,,,,1013,1013,,1011,,,,,1013,,1013,1013,1013',
',,1013,1013,1098,1098,1098,1098,1098,1098,,,,1098,1098,,,,1098,,1098',
'1098,1098,1098,1098,1098,1098,,,,,,1098,1098,1098,1098,1098,1098,1098',
',,1098,,,,,,1098,1098,1098,1098,1098,1098,1098,1098,1098,1098,1098,1098',
',1098,1098,1098,,1098,1098,1098,1098,1098,1010,1010,1010,1010,1010,1010',
'1010,1010,1010,1010,1010,,1010,1010,,,1010,1010,,1098,,,1098,,,1098',
'1098,,,1098,,1098,1010,,1010,1098,1010,1010,,1010,1010,1010,1010,1010',
'1098,1010,,,,1098,1098,1098,1098,,1098,1098,1098,1098,,,,,1098,1098',
',1010,,,,,1098,,1098,1098,1098,,,1098,1098,1097,1097,1097,1097,1097',
'1097,,,,1097,1097,,,,1097,,1097,1097,1097,1097,1097,1097,1097,,,,,,1097',
'1097,1097,1097,1097,1097,1097,,,1097,,,,,,1097,1097,1097,1097,1097,1097',
'1097,1097,1097,1097,1097,1097,,1097,1097,1097,,1097,1097,1097,1097,1097',
'529,529,529,529,529,529,529,529,529,529,529,,529,529,,,529,529,,1097',
',,1097,,,1097,1097,,546,1097,,1097,529,,529,1097,529,529,,529,529,529',
'529,529,1097,529,,,,1097,1097,1097,1097,,1097,1097,1097,1097,,,546,',
'1097,1097,546,546,,546,546,,1097,,1097,1097,1097,,,1097,1097,1147,1147',
'1147,1147,1147,1147,,,,1147,1147,,,,1147,,1147,1147,1147,1147,1147,1147',
'1147,,,,,,1147,1147,1147,1147,1147,1147,1147,547,1115,1147,1115,1115',
'1115,,1115,1147,1147,1147,1147,1147,1147,1147,1147,1147,1147,1147,1147',
',1147,1147,1147,,1147,1147,1147,1147,1147,604,,547,,,,547,547,1115,547',
'547,,,,,,604,604,,1147,,,1147,,,1147,1147,,,1147,,1147,604,,604,1147',
'604,604,,604,604,,,604,1147,604,,,,1147,1147,1147,1147,,1147,1147,1147',
'1147,,,,,1147,1147,,,,,,,1147,,1147,1147,1147,,,1147,1147,621,621,621',
'621,621,621,,,,621,621,,,,621,,621,621,621,621,621,621,621,,,,,,621',
'621,621,621,621,621,621,,,621,,,,,,621,621,621,621,621,621,621,621,621',
'621,621,621,,621,621,621,,621,621,621,621,621,364,364,364,364,364,364',
'364,364,364,364,364,,364,364,,,364,364,,621,,,621,,,621,621,,,621,,621',
'364,,364,621,364,364,,364,364,364,364,364,621,364,,,,621,621,621,621',
',621,621,621,621,,,,,621,621,,,,,,,621,,621,621,621,,,621,621,892,892',
'892,892,892,892,,,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,',
'892,892,892,892,892,892,892,,,892,,,,,,892,892,892,892,892,892,892,892',
'892,892,892,892,,892,892,892,,892,892,892,892,892,365,365,365,365,365',
'365,365,365,365,365,365,,365,365,,,365,365,,892,,,892,,,892,892,,,892',
',892,365,,365,892,365,365,,365,365,365,365,365,892,365,,,,892,892,892',
'892,,892,892,892,892,,,,,892,892,,,,,,,892,,892,892,892,,,892,892,618',
'618,618,618,618,618,,,,618,618,,,,618,,618,618,618,618,618,618,618,',
',,,,618,618,618,618,618,618,618,,,618,,,,,,618,618,618,618,618,618,618',
'618,618,618,618,618,,618,618,618,,618,618,618,618,618,551,,,,,,,,,,',
',,,,,551,551,,618,,,618,,,618,618,,,618,,618,551,,551,618,551,551,,551',
'551,,,551,618,551,,,,618,618,618,618,,618,618,618,618,,,,,618,618,,',
',,,,618,,618,618,618,,,618,618,1191,1191,1191,1191,1191,1191,,,,1191',
'1191,,,,1191,,1191,1191,1191,1191,1191,1191,1191,,,,,,1191,1191,1191',
'1191,1191,1191,1191,,,1191,,,,,,1191,1191,1191,1191,1191,1191,1191,1191',
'1191,1191,1191,1191,,1191,1191,1191,,1191,1191,1191,1191,1191,549,549',
'549,549,549,549,549,549,,549,549,,,,,,549,549,,1191,,,1191,,,1191,1191',
',,1191,,1191,549,,549,1191,549,549,,549,549,549,549,549,1191,549,,,',
'1191,1191,1191,1191,,1191,1191,1191,1191,,,,,1191,1191,,,,,,,1191,,1191',
'1191,1191,,,1191,1191,135,135,135,135,135,135,,,,135,135,,,,135,,135',
'135,135,135,135,135,135,,,,,,135,135,135,135,135,135,135,,,135,,,,,',
'135,135,135,135,135,135,135,135,135,135,135,135,,135,135,135,,135,135',
'135,135,135,548,548,548,548,548,548,548,,,548,548,,,,,,548,548,,135',
',,135,,,135,135,,,135,,135,548,,548,135,548,548,,548,548,548,548,548',
'135,548,,,,135,135,135,135,,135,135,135,135,,,,,135,135,,,,,,,135,,135',
'135,135,,,135,135,218,218,218,218,218,218,,,,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,218',
'218,218,218,218,218,218,218,218,218,218,218,,218,218,218,,218,218,218',
'218,218,545,545,545,545,545,545,545,,,545,545,,,,,,545,545,,218,,,218',
',,218,218,,,218,,218,545,,545,218,545,545,,545,545,545,545,545,218,545',
',,,218,218,218,218,,218,218,218,218,,,,,218,218,,,,,,,218,,218,218,218',
',,218,218,846,846,846,846,846,846,,,,846,846,,,,846,,846,846,846,846',
'846,846,846,,,,,,846,846,846,846,846,846,846,,,846,,,,,,846,846,846',
'846,846,846,846,846,846,846,846,846,,846,846,846,,846,846,846,846,846',
'544,544,544,544,544,544,544,,,544,544,,,,,,544,544,,846,,,846,,,846',
'846,,,846,,846,544,,544,846,544,544,,544,544,544,544,544,846,544,,,',
'846,846,846,846,,846,846,846,846,,,,,846,846,,,,,,,846,,846,846,846',
',,846,846,857,857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857',
'857,857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,,857,857,857',
'857,857,857,857,857,857,857,857,857,,857,857,857,,857,857,857,857,857',
'543,543,543,543,543,543,543,,,543,543,,,,,,543,543,,857,,,857,,,857',
'857,,,857,,857,543,,543,857,543,543,,543,543,543,543,543,857,543,,,',
'857,857,857,857,,857,857,857,857,,,,,857,857,,,,,,,857,,857,857,857',
',,857,857,388,388,388,388,388,388,,,,388,388,,,,388,,388,388,388,388',
'388,388,388,,,,,,388,388,388,388,388,388,388,,,388,,,,,,388,388,388',
'388,388,388,388,388,388,388,388,388,,388,388,388,,388,388,388,388,388',
'542,542,542,542,542,542,542,,,542,542,,,,,,542,542,,388,,,388,,,388',
'388,,,388,,388,542,,542,388,542,542,,542,542,542,542,542,388,542,,,',
'388,388,388,388,,388,388,388,388,,,,,388,388,,,,,,,388,,388,388,388',
',,388,388,991,991,991,991,991,991,,,,991,991,,,,991,,991,991,991,991',
'991,991,991,,,,,,991,991,991,991,991,991,991,,,991,,,,,,991,991,991',
'991,991,991,991,991,991,991,991,991,,991,991,991,,991,991,991,991,991',
'541,541,541,541,541,541,541,,,541,541,,,,,,541,541,,991,,,991,,,991',
'991,,,991,,991,541,,541,991,541,541,,541,541,541,541,541,991,541,,,',
'991,991,991,991,,991,991,991,991,,,,,991,991,,,,920,920,920,991,920',
'991,991,991,920,920,991,991,,920,,920,920,920,920,920,920,920,,,,,,920',
'920,920,920,920,920,920,,,920,,,,,,,920,,,920,920,920,920,920,920,920',
'920,,920,920,920,,920,920,920,920,920,540,540,540,540,540,540,540,,',
'540,540,,,,,,540,540,,920,,,920,,,920,920,,,920,,,540,,540,920,540,540',
',540,540,540,540,540,920,540,,,,920,920,920,920,,920,920,920,920,,,',
',920,920,,,,921,921,921,920,921,920,920,920,921,921,920,920,,921,,921',
'921,921,921,921,921,921,,,,,,921,921,921,921,921,921,921,,,921,,,,,',
',921,,,921,921,921,921,921,921,921,921,,921,921,921,,921,921,921,921',
'921,530,530,530,530,530,530,530,530,530,530,530,,530,530,,,530,530,',
'921,,,921,,,921,921,,,921,,,530,,530,921,530,530,,530,530,530,530,530',
'921,530,,,,921,921,921,921,,921,921,921,921,,,,,921,921,,,,922,922,922',
'921,922,921,921,921,922,922,921,921,,922,,922,922,922,922,922,922,922',
',,,,,922,922,922,922,922,922,922,,,922,,,,,,,922,,,922,922,922,922,922',
'922,922,922,,922,922,922,,922,922,922,922,922,538,,,,,,,,,,,,,,,,538',
'538,,922,,,922,,,922,922,,,922,,,538,,538,922,538,538,,538,538,,,,922',
',,,,922,922,922,922,,922,922,922,922,,,,,922,922,,,,733,733,733,922',
'733,922,922,922,733,733,922,922,,733,,733,733,733,733,733,733,733,,',
',,,733,733,733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733',
'733,733,733,,733,733,733,,733,733,733,733,733,539,,,,,,,,,,,,,,,,539',
'539,,733,,,733,,,733,733,,,733,,,539,,,733,539,539,,539,539,,,,733,',
',,,733,733,733,733,,733,733,733,733,,,,,733,733,,,,732,732,732,733,732',
'733,733,733,732,732,733,733,,732,,732,732,732,732,732,732,732,,,,,,732',
'732,732,732,732,732,732,,,732,,,,,,,732,,,732,732,732,732,732,732,732',
'732,,732,732,732,,732,732,732,732,732,537,,,,,,,,,,,,,,,,537,537,,732',
',,732,,,732,732,,,732,,,537,,537,732,537,537,,537,537,,,,732,,,,,732',
'732,732,732,,732,732,732,732,,,,,732,732,,,,,,,732,,732,732,732,,,732',
'732,333,333,333,333,333,,,,333,333,,,,333,,333,333,333,333,333,333,333',
',,,,,333,333,333,333,333,333,333,,,333,,,,,,333,333,,333,333,333,333',
'333,333,333,333,333,,333,333,333,,333,333,333,333,333,,,,,,,,,,,,,,',
',,,,,333,,,333,,,333,333,,,333,,333,,,,333,,,,,,,,,333,,,,,333,333,333',
'333,,333,333,333,333,,,,,333,333,,,,265,265,265,333,265,333,333,333',
'265,265,333,333,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265',
'265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,,265,265',
'265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265',
',,,,,265,,,,,,,,,265,,,,,265,265,265,265,,265,265,265,265,,,,,265,265',
',,,264,264,264,265,264,265,265,265,264,264,265,265,,264,,264,264,264',
'264,264,264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264',
'264,264,264,264,264,264,264,,264,264,264,,264,264,264,264,264,,,,,,',
',,,,,,,,,,,,,264,,,264,,,264,264,,,264,,,,,,264,,,,,,,,,264,,,,,264',
'264,264,264,,264,264,264,264,,,,,264,264,,,,263,263,263,264,263,264',
'264,264,263,263,264,264,,263,,263,263,263,263,263,263,263,,,,,,263,263',
'263,263,263,263,263,,,263,,,,,,,263,,,263,263,263,263,263,263,263,263',
',263,263,263,,263,263,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263',
'263,,,263,,,,,,263,,,,,,,,,263,,,,,263,263,263,263,,263,263,263,263',
',,,,263,263,,,,262,262,262,263,262,263,263,263,262,262,263,263,,262',
',262,262,262,262,262,262,262,,,,,,262,262,262,262,262,262,262,,,262',
',,,,,,262,,,262,262,262,262,262,262,262,262,,262,262,262,,262,262,262',
'262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,,262,,,,,,262,,,,,,',
',,262,,,,,262,262,262,262,,262,262,262,262,,,,,262,262,,,,261,261,261',
'262,261,262,262,262,261,261,262,262,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,,261,,,,,261,261,261,261,,261',
'261,261,261,,,,,261,261,,,,708,708,708,261,708,261,261,261,708,708,261',
'261,,708,,708,708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708',
',,708,,,,,,,708,,,708,708,708,708,708,708,708,708,,708,708,708,,708',
'708,708,708,708,,,,,,,,,,,,,,,,,,,,708,,,708,,,708,708,,,708,,,,,,708',
',,,,,,,,708,,,,,708,708,708,708,,708,708,708,708,,,,,708,708,,,,260',
'260,260,708,260,708,708,708,260,260,708,708,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,',
',,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260',
'260,,260,260,260,260,,,,,260,260,,,,694,694,694,260,694,260,260,260',
'694,694,260,260,,694,,694,694,694,694,694,694,694,,,,,,694,694,694,694',
'694,694,694,,,694,,,,,,,694,,,694,694,694,694,694,694,694,694,,694,694',
'694,,694,694,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694',
',694,,,,694,,,,,,,,,694,,,,,694,694,694,694,,694,694,694,694,,,,,694',
'694,,,,259,259,259,694,259,694,694,694,259,259,694,694,,259,,259,259',
'259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259',
',,259,259,259,259,259,259,259,259,,259,259,259,,259,259,259,259,259',
',,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,',
',,259,259,259,259,,259,259,259,259,,,,,259,259,,,,258,258,258,259,258',
'259,259,259,258,258,259,259,,258,,258,258,258,258,258,258,258,,,,,,258',
'258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258',
'258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,',
',258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258,258,,258,258,258',
'258,,,,,258,258,,,,257,257,257,258,257,258,258,258,257,257,258,258,',
'257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,',
'257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257',
'257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,',
',,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257,,,,688,688',
'688,257,688,257,257,257,688,688,257,257,,688,,688,688,688,688,688,688',
'688,,,,,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688',
'688,688,688,688,,688,688,688,,688,688,688,688,688,,,,,,,,,,,,,,,,,,',
',688,,,688,,,688,688,,,688,,,,,,688,,,,,,,,,688,,,,,688,688,688,688',
',688,688,688,688,,,,,688,688,,,,687,687,687,688,687,688,688,688,687',
'687,688,688,,687,,687,687,687,687,687,687,687,,,,,,687,687,687,687,687',
'687,687,,,687,,,,,,,687,,,687,687,687,687,687,687,687,687,,687,687,687',
',687,687,687,687,687,,,,,,,,,,,,,,,,,,,,687,,,687,,,687,687,,,687,,',
',,,687,,,,,,,,,687,,,,,687,687,687,687,,687,687,687,687,,,,,687,687',
',,,,,,687,,687,687,687,32,,687,687,,,,32,32,32,,,32,32,32,,32,,,,,,',
',32,32,32,32,,,,,,,,,32,32,,32,32,32,32,32,,,,,,,,,,,,,,,,,,,,,,,32',
'32,32,32,32,32,32,32,32,32,32,32,32,32,,,32,32,32,,,32,,32,32,,,32,32',
',32,,32,,32,,32,32,,32,32,32,32,32,,32,32,32,,,,,,,,,,,,,,32,,,32,32',
',32,,32,683,683,683,,683,,32,,683,683,,,,683,,683,683,683,683,683,683',
'683,,,,,,683,683,683,683,683,683,683,,,683,,,,,,,683,,,683,683,683,683',
'683,683,683,683,,683,683,683,,683,683,683,683,683,,,,,,,,,,,,,,,,,,',
',683,,,683,,,683,683,,,683,,,,,,683,,,,,,,,,683,,,,,683,683,683,683',
',683,683,683,683,,,,,683,683,,,,682,682,682,683,682,683,683,683,682',
'682,683,683,,682,,682,682,682,682,682,682,682,,,,,,682,682,682,682,682',
'682,682,,,682,,,,,,,682,,,682,682,682,682,682,682,682,682,,682,682,682',
',682,682,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682,,,682,,',
',,,682,,,,,,,,,682,,,,,682,682,682,682,,682,682,682,682,,,,,682,682',
',,,681,681,681,682,681,682,682,682,681,681,682,682,,681,,681,681,681',
'681,681,681,681,,,,,,681,681,681,681,681,681,681,,,681,,,,,,,681,,,681',
'681,681,681,681,681,681,681,681,681,681,681,,681,681,681,681,681,,,',
',,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,,,681,,681,,,681,,,,,,681',
',,,,681,681,681,681,,681,681,681,681,,,,,681,681,,,,956,956,956,681',
'956,681,681,681,956,956,681,681,,956,,956,956,956,956,956,956,956,,',
',,,956,956,956,956,956,956,956,,,956,,,,,,,956,,,956,956,956,956,956',
'956,956,956,,956,956,956,,956,956,956,956,956,,,,,,,,,,,,,,,,,,,,956',
',,956,,,956,956,,,956,,,,,,956,,,,,,,,,956,,,,,956,956,956,956,,956',
'956,956,956,,,,,956,956,,,,962,962,962,956,962,956,956,956,962,962,956',
'956,,962,,962,962,962,962,962,962,962,,,,,,962,962,962,962,962,962,962',
',,962,,,,,,,962,,,962,962,962,962,962,962,962,962,,962,962,962,,962',
'962,962,962,962,,,,,,,,,,,,,,,,,,,,962,,,962,,,962,962,,,962,,,,,,962',
',,,,,,,,962,,,,,962,962,962,962,,962,962,962,962,,,,,962,962,,,,,,,962',
',962,962,962,33,,962,962,,,,33,33,33,,,33,33,33,,33,,,,,,,,33,,33,33',
',,,,,,,,33,33,,33,33,33,33,33,,,,,,,,,,,,,,,,,,,,,,,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,,,33,33,33,,,33,,33,33,,,33,33,,33,,33,,33,',
'33,33,,33,33,33,33,33,,33,,33,,,,,,,,,,,,,,33,,,33,33,,33,,33,34,34',
'34,,34,,33,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,34,,,,,,34',
',,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,680,680,680,34,680,34,34,34',
'680,680,34,34,,680,,680,680,680,680,680,680,680,,,,,,680,680,680,680',
'680,680,680,,,680,,,,,,,680,,,680,680,680,680,680,680,680,680,680,680',
'680,680,,680,680,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680,,,680,680',
',,680,,680,,680,,680,,,680,,,,,,680,,,,,680,680,680,680,,680,680,680',
'680,,,,,680,680,,,,677,677,677,680,677,680,680,680,677,677,680,680,',
'677,,677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677,677,,',
'677,,,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,,677,677',
'677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,677,,',
',,,,,,677,,,,,677,677,677,677,,677,677,677,677,,,,,677,677,,,,,,,677',
',677,677,677,,,677,677,676,676,676,676,676,,,,676,676,,,,676,,676,676',
'676,676,676,676,676,,,,,,676,676,676,676,676,676,676,,,676,,,,,,676',
'676,,676,676,676,676,676,676,676,676,676,,676,676,676,,676,676,676,676',
'676,,,,,,,,,,,,,,,,,,,,676,,,676,,,676,676,,,676,,676,,,,676,,,,,,,',
',676,,,,,676,676,676,676,,676,676,676,676,,,,,676,676,,,,985,985,985',
'676,985,676,676,676,985,985,676,676,,985,,985,985,985,985,985,985,985',
',,,,,985,985,985,985,985,985,985,,,985,,,,,,,985,,,985,985,985,985,985',
'985,985,985,,985,985,985,,985,985,985,985,985,,,,,,,,,,,,,,,,,,,,985',
',,985,,,985,985,,,985,,,,,,985,,,,,,,,,985,,,,,985,985,985,985,,985',
'985,985,985,,,,,985,985,,,,673,673,673,985,673,985,985,985,673,673,985',
'985,,673,,673,673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673',
',,673,,,,,,,673,,,673,673,673,673,673,673,673,673,673,673,673,673,,673',
'673,673,673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,673,,673',
',673,,,673,,,,,,673,,,,,673,673,673,673,,673,673,673,673,,,,,673,673',
',,,672,672,672,673,672,673,673,673,672,672,673,673,,672,,672,672,672',
'672,672,672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672',
'672,672,672,672,672,672,672,,672,672,672,,672,672,672,672,672,,,,,,',
',,,,,,,,,,,,,672,,,672,,,672,672,,,672,,,,,,672,,,,,,,,,672,,,,,672',
'672,672,672,,672,672,672,672,,,,,672,672,,,,990,990,990,672,990,672',
'672,672,990,990,672,672,,990,,990,990,990,990,990,990,990,,,,,,990,990',
'990,990,990,990,990,,,990,,,,,,,990,,,990,990,990,990,990,990,990,990',
',990,990,990,,990,990,990,990,990,,,,,,,,,,,,,,,,,,,,990,,,990,,,990',
'990,,,990,,990,,,,990,,,,,,,,,990,,,,,990,990,990,990,,990,990,990,990',
',,,,990,990,,,,671,671,671,990,671,990,990,990,671,671,990,990,,671',
',671,671,671,671,671,671,671,,,,,,671,671,671,671,671,671,671,,,671',
',,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671,,671,671,671',
'671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,671,,,,671,,,',
',,,,,671,,,,,671,671,671,671,,671,671,671,671,,,,,671,671,,,,,,,671',
',671,671,671,,,671,671,669,669,669,669,669,,,,669,669,,,,669,,669,669',
'669,669,669,669,669,,,,,,669,669,669,669,669,669,669,,,669,,,,,,669',
'669,,669,669,669,669,669,669,669,669,669,,669,669,669,,669,669,669,669',
'669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,,669,,669,,,,669,,,,,,,',
',669,,,,,669,669,669,669,,669,669,669,669,,,,,669,669,,,,35,35,35,669',
'35,669,669,669,35,35,669,669,,35,,35,35,35,35,35,35,35,,,,,,35,35,35',
'35,35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,,35',
'35,35,35,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,35,,35,,35,,,35',
',,,,,35,,,,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,250,250,250,35,250',
'35,35,35,250,250,35,35,,250,,250,250,250,250,250,250,250,,,,,,250,250',
'250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250',
',250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250',
'250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250',
',,,,250,250,,,,36,36,36,250,36,250,250,250,36,36,250,250,,36,,36,36',
'36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36',
'36,36,36,36,36,36,36,36,,36,36,36,36,36,,,,,,,,,,,,,,,,,,,,36,,,36,',
',36,36,,,36,,36,,36,,36,,,36,,,,,,36,,,,,36,36,36,36,,36,36,36,36,,',
',,36,36,,,,638,638,638,36,638,36,36,36,638,638,36,36,,638,,638,638,638',
'638,638,638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638',
'638,638,638,638,638,638,638,638,638,638,638,,638,638,638,638,638,,,',
',,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,638,,638,,638,,,638,,,,,',
'638,,,,,638,638,638,638,,638,638,638,638,,,,,638,638,,,,1009,1009,1009',
'638,1009,638,638,638,1009,1009,638,638,,1009,,1009,1009,1009,1009,1009',
'1009,1009,,,,,,1009,1009,1009,1009,1009,1009,1009,,,1009,,,,,,,1009',
',,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,1009,,1009',
'1009,1009,1009,1009,,,,,,,,,,,,,,,,,,,,1009,,,1009,,,1009,1009,,,1009',
',,,1009,,1009,,,1009,,,,,,1009,,,,,1009,1009,1009,1009,,1009,1009,1009',
'1009,,,,,1009,1009,,,,628,628,628,1009,628,1009,1009,1009,628,628,1009',
'1009,,628,,628,628,628,628,628,628,628,,,,,,628,628,628,628,628,628',
'628,,,628,,,,,,,628,,,628,628,628,628,628,628,628,628,628,628,628,628',
',628,628,628,628,628,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,628,,,628,,628',
',628,,628,,,628,,,,,,628,,,,,628,628,628,628,,628,628,628,628,,,,,628',
'628,,,,627,627,627,628,627,628,628,628,627,627,628,628,,627,,627,627',
'627,627,627,627,627,,,,,,627,627,627,627,627,627,627,,,627,,,,,,,627',
',,627,627,627,627,627,627,627,627,,627,627,627,,627,627,627,627,627',
',,,,,,,,,,,,,,,,,,,627,,,627,,,627,627,,,627,,627,,,,627,,,,,,,,,627',
',,,,627,627,627,627,,627,627,627,627,,,,,627,627,,,,818,818,818,627',
'818,627,627,627,818,818,627,627,,818,,818,818,818,818,818,818,818,,',
',,,818,818,818,818,818,818,818,,,818,,,,,,,818,,,818,818,818,818,818',
'818,818,818,,818,818,818,,818,818,818,818,818,,,,,,,,,,,,,,,,,,,,818',
',,818,,,818,818,,,818,,,,,,818,,,,,,,,,818,,,,,818,818,818,818,,818',
'818,818,818,,,,,818,818,,,,614,614,614,818,614,818,818,818,614,614,818',
'818,,614,,614,614,614,614,614,614,614,,,,,,614,614,614,614,614,614,614',
',,614,,,,,,,614,,,614,614,614,614,614,614,614,614,614,614,614,614,,614',
'614,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614,,,,,,614',
',,614,,,,,,614,,,,,614,614,614,614,,614,614,614,614,,,,,614,614,,,,611',
'611,611,614,611,614,614,614,611,611,614,614,,611,,611,611,611,611,611',
'611,611,,,,,,611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611',
'611,611,611,611,611,611,611,611,611,,611,611,611,611,611,,,,,,,,,,,',
',,,,,,,,611,,,611,,,611,611,,,611,,611,,,,611,,,611,,,,,,611,,,,,611',
'611,611,611,,611,611,611,611,,,,,611,611,,,,239,239,239,611,239,611',
'611,611,239,239,611,611,,239,,239,239,239,239,239,239,239,,,,,,239,239',
'239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239',
',239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239',
'239,,,239,,,,,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239',
',,,,239,239,239,,,605,605,605,239,605,239,239,239,605,605,239,239,,605',
',605,605,605,605,605,605,605,,,,,,605,605,605,605,605,605,605,,,605',
',,,,,,605,,,605,605,605,605,605,605,605,605,,605,605,605,,605,605,605',
'605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605,,,,,,605,,,,,,',
',,605,,,,,605,605,605,605,,605,605,605,605,,,,,605,605,,,,1035,1035',
'1035,605,1035,605,605,605,1035,1035,605,605,,1035,,1035,1035,1035,1035',
'1035,1035,1035,,,,,,1035,1035,1035,1035,1035,1035,1035,,,1035,,,,,,',
'1035,,,1035,1035,1035,1035,1035,1035,1035,1035,,1035,1035,1035,,1035',
'1035,1035,1035,1035,,,,,,,,,,,,,,,,,,,,1035,,,1035,,,1035,1035,,,1035',
',,,,,1035,,,,,,,,,1035,,,,,1035,1035,1035,1035,,1035,1035,1035,1035',
',,,,1035,1035,,,,603,603,603,1035,603,1035,1035,1035,603,603,1035,1035',
',603,,603,603,603,603,603,603,603,,,,,,603,603,603,603,603,603,603,',
',603,,,,,,,603,,,603,603,603,603,603,603,603,603,,603,603,603,,603,603',
'603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603,,,603,,,,,,603,,',
',,,,,,603,,,,,603,603,603,603,,603,603,603,603,,,,,603,603,,,,600,600',
'600,603,600,603,603,603,600,600,603,603,,600,,600,600,600,600,600,600',
'600,,,,,,600,600,600,600,600,600,600,,,600,,,,,,,600,,,600,600,600,600',
'600,600,600,600,,600,600,600,,600,600,600,600,600,,,,,,,,,,,,,,,,,,',
',600,,,600,,,600,600,,,600,,,,,,600,,,,,,,,,600,,,,,600,600,600,600',
',600,600,600,600,,,,,600,600,,,,238,238,238,600,238,600,600,600,238',
'238,600,600,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238',
'238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238',
',238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238,238,,,,,238,238',
',,,237,237,237,238,237,238,238,238,237,237,238,238,,237,,237,237,237',
'237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237',
'237,237,237,237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,',
',,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237,,,,,237',
'237,237,237,,237,237,237,237,,,,,237,237,,,,590,590,590,237,590,237',
'237,237,590,590,237,237,,590,,590,590,590,590,590,590,590,,,,,,590,590',
'590,590,590,590,590,,,590,,,,,,,590,,,590,590,590,590,590,590,590,590',
'590,590,590,590,,590,590,590,590,590,,,,,,,,,,,,,,,,,,,,590,,,590,,',
'590,590,,,590,,590,,590,,590,,,590,,,,,,590,,,,,590,590,590,590,,590',
'590,590,590,,,,,590,590,,,,,,,590,,590,590,590,,,590,590,580,580,580',
'580,580,,,,580,580,,,,580,,580,580,580,580,580,580,580,,,,,,580,580',
'580,580,580,580,580,,,580,,,,,,580,580,580,580,580,580,580,580,580,580',
'580,580,,580,580,580,,580,580,580,580,580,,,,,,,,,,,,,,,,,,,,580,,,580',
',,580,580,,,580,,580,,,,580,,,,,,,,,580,,,,,580,580,580,580,,580,580',
'580,580,,,,,580,580,,,,,,580,580,,580,580,580,,,580,580,574,574,574',
',574,,,,574,574,,,,574,,574,574,574,574,574,574,574,,,,,,574,574,574',
'574,574,574,574,,,574,,,,,,,574,,,574,574,574,574,574,574,574,574,,574',
'574,574,,574,574,574,574,574,,,,,,,,,,,,,,,,,,,,574,,,574,,,574,574',
',,574,,,,,,574,,,,,,,,,574,,,,,574,574,574,574,,574,574,574,574,,,,',
'574,574,,,,369,369,369,574,369,574,574,574,369,369,574,574,,369,,369',
'369,369,369,369,369,369,,,,,,369,369,369,369,369,369,369,,,369,,,,,',
',369,,,369,369,369,369,369,369,369,369,,369,369,369,,369,369,369,369',
'369,,,,,,,,,,,,,,,,,,,,369,,,369,,,369,369,,,369,,,,,,369,,,,,,,,,369',
',,,,369,369,369,369,,369,369,369,369,,,,,369,369,,,,46,46,46,369,46',
'369,369,369,46,46,369,369,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46',
'46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,46',
'46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,,46,,,',
',46,46,46,46,,46,46,46,46,,,,,46,46,,,,572,572,572,46,572,46,46,46,572',
'572,46,46,,572,,572,572,572,572,572,572,572,,,,,,572,572,572,572,572',
'572,572,,,572,,,,,,,572,,,572,572,572,572,572,572,572,572,572,572,572',
'572,,572,572,572,572,572,,,,,,,,,,,,,,,,,,,,572,,,572,,,572,572,,,572',
',,,572,,572,,,572,,,,,,572,,,,,572,572,572,572,,572,572,572,572,,,,',
'572,572,,,,570,570,570,572,570,572,572,572,570,570,572,572,,570,,570',
'570,570,570,570,570,570,,,,,,570,570,570,570,570,570,570,,,570,,,,,',
',570,,,570,570,570,570,570,570,570,570,570,570,570,570,,570,570,570',
'570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,570,,570,,570',
',,570,,,,,,570,,,,,570,570,570,570,,570,570,570,570,,,,,570,570,,,,47',
'47,47,570,47,570,570,570,47,47,570,570,,47,,47,47,47,47,47,47,47,,,',
',,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47',
'47,,47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,',
',,,,,,,47,,,,,47,47,47,47,,47,47,47,47,,,,,47,47,,,,560,560,560,47,560',
'47,47,47,560,560,47,47,,560,,560,560,560,560,560,560,560,,,,,,560,560',
'560,560,560,560,560,,,560,,,,,,,560,,,560,560,560,560,560,560,560,560',
',560,560,560,,560,560,560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560,,,560',
'560,,,560,,,,,,560,,,,,,,,,560,,,,,560,560,560,560,,560,560,560,560',
',,,,560,560,,,,49,49,49,560,49,560,560,560,49,49,560,560,,49,,49,49',
'49,49,49,49,49,,,,,,49,49,49,49,49,49,49,,,49,,,,,,,49,,,49,49,49,49',
'49,49,49,49,,49,49,49,,49,49,49,49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49',
'49,,,49,,,,,,49,,,,,,,,,49,,,,,49,49,49,49,,49,49,49,49,,,,,49,49,,',
',,,,49,,49,49,49,555,,49,49,,,,555,555,555,,,555,555,555,703,555,703',
'703,703,703,703,,,555,555,555,,,,703,,,,,,555,555,,555,555,555,555,555',
',701,,701,701,701,701,701,703,,,,,,,,701,703,703,703,703,,,,703,,1140',
',1140,1140,1140,1140,1140,555,,,,,701,,555,1140,,,,555,555,701,701,701',
'701,,,,701,,,,,,,,,1140,703,,,,555,555,,,,,1140,1140,,,,1140,,,,555',
',,555,,283,283,283,555,283,,701,,283,283,555,,,283,,283,283,283,283',
'283,283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283',
'283,283,283,283,283,283,,283,283,283,,283,283,283,283,283,,,,,,,,,,',
',,,,,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,,,,283,283',
'283,283,,283,283,283,283,,,,,283,283,,,,224,224,224,283,224,283,283',
'283,224,224,283,283,,224,,224,224,224,224,224,224,224,,,,,,224,224,224',
'224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,224',
'224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224',
'224,,,224,,224,,224,,224,,,224,,,,,,224,,,,,224,224,224,224,,224,224',
'224,224,,,,,224,224,,,,223,223,223,224,223,224,224,224,223,223,224,224',
',223,,223,223,223,223,223,223,223,,,,,,223,223,223,223,223,223,223,',
',223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223,223,223,,223,223',
'223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,',
',,,,,,223,,,,,223,223,223,223,,223,223,223,223,,,,,223,223,,,,50,50',
'50,223,50,223,223,223,50,50,223,223,,50,,50,50,50,50,50,50,50,,,,,,50',
'50,50,50,50,50,50,,,50,,,,,,,50,,,50,50,50,50,50,50,50,50,,50,50,50',
',50,50,50,50,50,,,,,,,,,,,,,,,,,,,,50,,,50,,,50,50,,,50,,,,,,50,,,,',
',,,,50,,,,,50,50,50,50,,50,50,50,50,,,,,50,50,,,,222,222,222,50,222',
'50,50,50,222,222,50,50,,222,,222,222,222,222,222,222,222,,,,,,222,222',
'222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222',
',222,222,222,,222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222',
'222,,,222,,,,,,222,,,,,,,,,222,,,,,222,222,222,222,,222,222,222,222',
',,,,222,222,,,,72,72,72,222,72,222,222,222,72,72,222,222,,72,,72,72',
'72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,,,72,72,72,72',
'72,72,72,72,,72,72,72,,72,72,72,72,72,,,,,,,,,,,,,,,,,,,,72,,,72,,,72',
'72,,,72,,,,,,72,,,,,,,,,72,,,,,72,72,72,72,,72,72,72,72,,,,,72,72,,',
',71,71,71,72,71,72,72,72,71,71,72,72,,71,,71,71,71,71,71,71,71,,,,,',
'71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71',
'71,,71,71,71,71,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,71,',
',,,,,,,71,,,,,71,71,71,71,,71,71,71,71,,,,,71,71,,,,436,436,436,71,436',
'71,71,71,436,436,71,71,,436,,436,436,436,436,436,436,436,,,,,,436,436',
'436,436,436,436,436,,,436,,,,,,,436,,,436,436,436,436,436,436,436,436',
',436,436,436,,436,436,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436',
'436,,,436,,,,,,436,,,,,,,,,436,,,,,436,436,436,436,,436,436,436,436',
',,,,436,436,,,,68,68,68,436,68,436,436,436,68,68,436,436,,68,,68,68',
'68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68',
'68,68,68,68,68,68,68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,',
',68,68,,,68,,,,,,68,,,68,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68',
'68,,,,407,407,407,68,407,68,68,68,407,407,68,68,,407,,407,407,407,407',
'407,407,407,,,,,,407,407,407,407,407,407,407,,,407,,,,,,,407,,,407,407',
'407,407,407,407,407,407,,407,407,407,,407,407,407,407,407,,,,,,,,,,',
',,,,,,,,,407,,,407,,,407,407,,,407,,,,,,407,,,,,,,,,407,,,,,407,407',
'407,407,,407,407,407,407,,,,,407,407,,,,847,847,847,407,847,407,407',
'407,847,847,407,407,,847,,847,847,847,847,847,847,847,,,,,,847,847,847',
'847,847,847,847,,,847,,,,,,,847,,,847,847,847,847,847,847,847,847,,847',
'847,847,,847,847,847,847,847,,,,,,,,,,,,,,,,,,,,847,,,847,,,847,847',
',,847,,,,,,847,,,,,,,,,847,,,,,847,847,847,847,,847,847,847,847,,,,',
'847,847,,,,276,276,276,847,276,847,847,847,276,276,847,847,,276,,276',
'276,276,276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,',
',276,,,276,276,276,276,276,276,276,276,,276,276,276,,276,276,276,276',
'276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,,,,,276,,,,,,,,,276',
',,,,276,276,276,276,,276,276,276,276,,,,,276,276,,,,275,275,275,276',
'275,276,276,276,275,275,276,276,,275,,275,275,275,275,275,275,275,,',
',,,275,275,275,275,275,275,275,,,275,,,,,,,275,,,275,275,275,275,275',
'275,275,275,,275,275,275,,275,275,275,275,275,,,,,,,,,,,,,,,,,,,,275',
',,275,,,275,275,,,275,,,,,,275,,,,,,,,,275,,,,,275,275,275,275,,275',
'275,275,275,,,,,275,275,,,,67,67,67,275,67,275,275,275,67,67,275,275',
',67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,',
'67,67,67,67,67,67,67,67,67,67,67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,',
',,,67,,,67,,,67,67,,,67,,67,,,,67,,,67,,,,,,67,,,,,67,67,67,67,,67,67',
'67,67,,,,,67,67,,,,,,,67,,67,67,67,,,67,67,66,66,66,66,66,,,,66,66,',
',,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,66,66',
',66,66,66,66,66,66,66,66,66,,66,66,66,,66,66,66,66,66,,,,,,,,,,,,,,',
',,,,,66,,,66,,,66,66,,,66,,66,,,,66,,,,,,,,,66,,,,,66,66,66,66,,66,66',
'66,66,,,,,66,66,,,,299,299,299,66,299,66,66,66,299,299,66,66,,299,,299',
'299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,',
',299,,,299,299,299,299,299,299,299,299,,299,299,299,,299,299,299,299',
'299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,299,,,,,,,,,299',
',,,,299,299,299,299,,299,299,299,299,,,,,299,299,,,,274,274,274,299',
'274,299,299,299,274,274,299,299,,274,,274,274,274,274,274,274,274,,',
',,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274,274',
'274,274,274,,274,274,274,,274,274,274,274,274,,,,,,,,,,,,,,,,,,,,274',
',,274,,,274,274,,,274,,,,,,274,,,,,,,,,274,,,,,274,274,274,274,,274',
'274,274,274,,,,,274,274,,,,867,867,867,274,867,274,274,274,867,867,274',
'274,,867,,867,867,867,867,867,867,867,,,,,,867,867,867,867,867,867,867',
',,867,,,,,,,867,,,867,867,867,867,867,867,867,867,,867,867,867,,867',
'867,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,,867,,,,,,867',
',,,,,,,,867,,,,,867,867,867,867,,867,867,867,867,,,,,867,867,,,,24,24',
'24,867,24,867,867,867,24,24,867,867,,24,,24,24,24,24,24,24,24,,,,,,24',
'24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,24,24,24,24,24,24,,24,24,24',
',24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24,24,,,24,,,,,,24,,,,',
',,,,24,,,,,24,24,24,24,,24,24,24,24,,,,,24,24,,,,273,273,273,24,273',
'24,24,24,273,273,24,24,,273,,273,273,273,273,273,273,273,,,,,,273,273',
'273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273',
',273,273,273,,273,273,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273',
'273,,,273,,,,,,273,,,,,,,,,273,,,,,273,273,273,273,,273,273,273,273',
',,,,273,273,,,,788,788,788,273,788,273,273,273,788,788,273,273,,788',
',788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788,788,,,788',
',,,,,,788,,,788,788,788,788,788,788,788,788,788,788,788,788,,788,788',
'788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,788,,788,',
'788,,,788,,,,,,788,,,,,788,788,788,788,,788,788,788,788,,,,,788,788',
',,,272,272,272,788,272,788,788,788,272,272,788,788,,272,,272,272,272',
'272,272,272,272,,,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272',
'272,272,272,272,272,272,272,,272,272,272,,272,272,272,272,272,,,,,,',
',,,,,,,,,,,,,272,,,272,,,272,272,,,272,,,,,,272,,,,,,,,,272,,,,,272',
'272,272,272,,272,272,272,272,,,,,272,272,,,,875,875,875,272,875,272',
'272,272,875,875,272,272,,875,,875,875,875,875,875,875,875,,,,,,875,875',
'875,875,875,875,875,,,875,,,,,,,875,,,875,875,875,875,875,875,875,875',
',875,875,875,,875,875,875,875,875,,,,,,,,,,,,,,,,,,,,875,,,875,,,875',
'875,,,875,,,,,,875,,,,,,,,,875,,,,,875,875,875,875,,875,875,875,875',
',,,,875,875,,,,306,306,306,875,306,875,875,875,306,306,875,875,,306',
',306,306,306,306,306,306,306,,,,,,306,306,306,306,306,306,306,,,306',
',,,,,,306,,,306,306,306,306,306,306,306,306,306,306,306,306,,306,306',
'306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,,,306,306,,,306,,306,,306,',
'306,,,306,,,,,,306,,,,,306,306,306,306,,306,306,306,306,,,,,306,306',
',,,888,888,888,306,888,306,306,306,888,888,306,306,,888,,888,888,888',
'888,888,888,888,,,,,,888,888,888,888,888,888,888,,,888,,,,,,,888,,,888',
'888,888,888,888,888,888,888,,888,888,888,,888,888,888,888,888,,,,,,',
',,,,,,,,,,,,,888,,,888,,,888,888,,,888,,,,,,888,,,,,,,,,888,,,,,888',
'888,888,888,,888,888,888,888,,,,,888,888,,,,889,889,889,888,889,888',
'888,888,889,889,888,888,,889,,889,889,889,889,889,889,889,,,,,,889,889',
'889,889,889,889,889,,,889,,,,,,,889,,,889,889,889,889,889,889,889,889',
',889,889,889,,889,889,889,889,889,,,,,,,,,,,,,,,,,,,,889,,,889,,,889',
'889,,,889,,,,,,889,,,,,,,,,889,,,,,889,889,889,889,,889,889,889,889',
',,,,889,889,,,,307,307,307,889,307,889,889,889,307,307,889,889,,307',
',307,307,307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,,307',
',,,,,,307,,,307,307,307,307,307,307,307,307,307,307,307,307,,307,307',
'307,307,307,,,,,,,,,,,,,,,,,,,,307,,,307,,,307,307,,,307,,307,,307,',
'307,,,307,,,,,,307,,,,,307,307,307,307,,307,307,307,307,,,,,307,307',
',,,315,315,315,307,315,307,307,307,315,315,307,307,,315,,315,315,315',
'315,315,315,315,,,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315',
'315,315,315,315,315,315,315,315,315,315,315,,315,315,315,315,315,,,',
',,,,,,,,,,,,,,,,315,,,315,,,315,315,,,315,,315,,315,,315,,,315,,,,,',
'315,,,,,315,315,315,315,,315,315,315,315,,,,,315,315,315,,,271,271,271',
'315,271,315,315,315,271,271,315,315,,271,,271,271,271,271,271,271,271',
',,,,,271,271,271,271,271,271,271,,,271,,,,,,,271,,,271,271,271,271,271',
'271,271,271,,271,271,271,,271,271,271,271,271,,,,,,,,,,,,,,,,,,,,271',
',,271,,,271,271,,,271,,,,,,271,,,,,,,,,271,,,,,271,271,271,271,,271',
'271,271,271,,,,,271,271,,,,270,270,270,271,270,271,271,271,270,270,271',
'271,,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270',
',,270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270,270,270,,270',
'270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270,,,,,,270',
',,,,,,,,270,,,,,270,270,270,270,,270,270,270,270,,,,,270,270,,,,269',
'269,269,270,269,270,270,270,269,269,270,270,,269,,269,269,269,269,269',
'269,269,,,,,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269',
'269,269,269,269,269,,269,269,269,,269,269,269,269,269,,,,,,,,,,,,,,',
',,,,,269,,,269,,,269,269,,,269,,,,,,269,,,,,,,,,269,,,,,269,269,269',
'269,,269,269,269,269,,,,,269,269,,,,322,322,322,269,322,269,269,269',
'322,322,269,269,,322,,322,322,322,322,322,322,322,,,,,,322,322,322,322',
'322,322,322,,,322,,,,,,,322,,,322,322,322,322,322,322,322,322,,322,322',
'322,,322,322,322,322,322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322,,,322',
',,,,,322,,,,,,,,,322,,,,,322,322,322,322,,322,322,322,322,,,,,322,322',
',,,324,324,324,322,324,322,322,322,324,324,322,322,,324,,324,324,324',
'324,324,324,324,,,,,,324,324,324,324,324,324,324,,,324,,,,,,,324,,,324',
'324,324,324,324,324,324,324,,324,324,324,,324,324,324,324,324,,,,,,',
',,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,,,,324,,,,,,,,,324,,,,,324',
'324,324,324,,324,324,324,324,,,,,324,324,,,,327,327,327,324,327,324',
'324,324,327,327,324,324,,327,,327,327,327,327,327,327,327,,,,,,327,327',
'327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327',
',327,327,327,,327,327,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327',
'327,,,327,,,,,,327,,,,,,,,,327,,,,,327,327,327,327,,327,327,327,327',
',,,,327,327,,,,328,328,328,327,328,327,327,327,328,328,327,327,,328',
',328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328',
',,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,,328,328,328',
'328,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,',
',,328,,,,,328,328,328,328,,328,328,328,328,,,,,328,328,,,,268,268,268',
'328,268,328,328,328,268,268,328,328,,268,,268,268,268,268,268,268,268',
',,,,,268,268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268',
'268,268,268,,268,268,268,,268,268,268,268,268,,,,,,,,,,,,,,,,,,,,268',
',,268,,,268,268,,,268,,,,,,268,,,,,,,,,268,,,,,268,268,268,268,,268',
'268,268,268,,,,,268,268,,,,267,267,267,268,267,268,268,268,267,267,268',
'268,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267',
',,267,,,,,,,267,,,267,267,267,267,267,267,267,267,,267,267,267,,267',
'267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,,,,,267',
',,,,,,,,267,,,,,267,267,267,267,,267,267,267,267,,,,,267,267,,,,266',
'266,266,267,266,267,267,267,266,266,267,267,,266,,266,266,266,266,266',
'266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266',
'266,266,266,266,266,,266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,',
',,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,,266,,,,,266,266,266',
'266,,266,266,266,266,,,,,266,266,,,,917,917,917,266,917,266,266,266',
'917,917,266,266,,917,,917,917,917,917,917,917,917,,,,,,917,917,917,917',
'917,917,917,,,917,,,,,,,917,,,917,917,917,917,917,917,917,917,,917,917',
'917,,917,917,917,917,917,,,,,,,,,,,,,,,,,,,,917,,,917,,,917,917,,,917',
',,,,,917,,,,,,,,,917,,,,,917,917,917,917,,917,917,917,917,,,,,917,917',
',,,918,918,918,917,918,917,917,917,918,918,917,917,,918,,918,918,918',
'918,918,918,918,,,,,,918,918,918,918,918,918,918,,,918,,,,,,,918,,,918',
'918,918,918,918,918,918,918,,918,918,918,,918,918,918,918,918,,,,,,',
',,,,,,,,,,,,,918,,,918,,,918,918,,,918,,,,,,918,,,,,,,,,918,,,,,918',
'918,918,918,,918,918,918,918,,,,,918,918,,,,919,919,919,918,919,918',
'918,918,919,919,918,918,,919,,919,919,919,919,919,919,919,,,,,,919,919',
'919,919,919,919,919,,,919,,,,,,,919,,,919,919,919,919,919,919,919,919',
',919,919,919,,919,919,919,919,919,,,,,,,,,,,,,,,,,,,,919,,,919,,,919',
'919,,,919,,,,,,919,,,,,,,,,919,,,,,919,919,919,919,,919,919,919,919',
',,,,919,919,,,,497,497,497,919,497,919,919,919,497,497,919,919,,497',
',497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497',
',,,,,,497,,,497,497,497,497,497,497,497,497,,497,497,497,,497,497,497',
'497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,,,,497,,,,,,',
',,497,,,,,497,497,497,497,,497,497,497,497,,,,,497,497,,,,,,,497,,497',
'497,497,,,497,497,133,133,133,133,133,,,,133,133,,,,133,,133,133,133',
'133,133,133,133,,,,,,133,133,133,133,133,133,133,,,133,,,,,,133,133',
',133,133,133,133,133,133,133,133,133,,133,133,133,,133,133,133,133,133',
',,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,,133,,133,,,,133,,,,,,,,,133',
',,,,133,133,133,133,,133,133,133,133,,,,,133,133,,,,132,132,132,133',
'132,133,133,133,132,132,133,133,,132,,132,132,132,132,132,132,132,,',
',,,132,132,132,132,132,132,132,,,132,,,,,,,132,,,132,132,132,132,132',
'132,132,132,,132,132,132,,132,132,132,132,132,,,,,,,,,,,,,,,,,,,,132',
',,132,,,132,132,,,132,,,,,,132,,,,,,,,,132,,,,,132,132,132,132,,132',
'132,132,132,,,,,132,132,,,,131,131,131,132,131,132,132,132,131,131,132',
'132,,131,,131,131,131,131,131,131,131,,,,,,131,131,131,131,131,131,131',
',,131,,,,,,,131,,,131,131,131,131,131,131,131,131,,131,131,131,,131',
'131,131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,,131,,,,,,131',
',,,,,,,,131,,,,,131,131,131,131,,131,131,131,131,,,,,131,131,,,,130',
'130,130,131,130,131,131,131,130,130,131,131,,130,,130,130,130,130,130',
'130,130,,,,,,130,130,130,130,130,130,130,,,130,,,,,,,130,,,130,130,130',
'130,130,130,130,130,,130,130,130,,130,130,130,130,130,,,,,,,,,,,,,,',
',,,,,130,,,130,,,130,130,,,130,,,,,,130,,,,,,,,,130,,,,,130,130,130',
'130,,130,130,130,130,,,,,130,130,,,,1149,1149,1149,130,1149,130,130',
'130,1149,1149,130,130,,1149,,1149,1149,1149,1149,1149,1149,1149,,,,',
',1149,1149,1149,1149,1149,1149,1149,,,1149,,,,,,,1149,,,1149,1149,1149',
'1149,1149,1149,1149,1149,,1149,1149,1149,,1149,1149,1149,1149,1149,',
',,,,,,,,,,,,,,,,,,1149,,,1149,,,1149,1149,,,1149,,,,,,1149,,,,,,,,,1149',
',,,,1149,1149,1149,1149,,1149,1149,1149,1149,,,,,1149,1149,,,,1150,1150',
'1150,1149,1150,1149,1149,1149,1150,1150,1149,1149,,1150,,1150,1150,1150',
'1150,1150,1150,1150,,,,,,1150,1150,1150,1150,1150,1150,1150,,,1150,',
',,,,,1150,,,1150,1150,1150,1150,1150,1150,1150,1150,,1150,1150,1150',
',1150,1150,1150,1150,1150,,,,,,,,,,,,,,,,,,,,1150,,,1150,,,1150,1150',
',,1150,,,,,,1150,,,,,,,,,1150,,,,,1150,1150,1150,1150,,1150,1150,1150',
'1150,,,,,1150,1150,,,,52,52,52,1150,52,1150,1150,1150,52,52,1150,1150',
',52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52,,',
'52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52,,,,,,,,,,,,,,,,,,',
',52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,,52,,,,,52,52,52,52,,52,52,52,52',
',,,,52,52,,,,129,129,129,52,129,52,52,52,129,129,52,52,,129,,129,129',
'129,129,129,129,129,,,,,,129,129,129,129,129,129,129,,,129,,,,,,,129',
',,129,129,129,129,129,129,129,129,,129,129,129,,129,129,129,129,129',
',,,,,,,,,,,,,,,,,,,129,,,129,,,129,129,,,129,,,,,,129,,,,,,,,,129,,',
',,129,129,129,129,,129,129,129,129,,,,,129,129,,,,,,,129,,129,129,129',
',,129,129,124,124,124,124,124,,,,124,124,,,,124,,124,124,124,124,124',
'124,124,,,,,,124,124,124,124,124,124,124,,,124,,,,,,124,124,124,124',
'124,124,124,124,124,124,124,124,,124,124,124,,124,124,124,124,124,,',
',,,,,,,,,,,,,,,,,124,,,124,,,124,124,,,124,,124,,,,124,,,,,,,,,124,',
',,,124,124,124,124,,124,124,124,124,,,,,124,124,,,,,,124,124,,124,124',
'124,,,124,124,1162,1162,1162,,1162,,,,1162,1162,,,,1162,,1162,1162,1162',
'1162,1162,1162,1162,,,,,,1162,1162,1162,1162,1162,1162,1162,,,1162,',
',,,,,1162,,,1162,1162,1162,1162,1162,1162,1162,1162,1162,1162,1162,1162',
',1162,1162,1162,1162,1162,,,,,,,,,,,,,,,,,,,,1162,,,1162,,,1162,1162',
',,1162,,1162,,1162,,1162,,,1162,,,,,,1162,,,,,1162,1162,1162,1162,,1162',
'1162,1162,1162,,,,,1162,1162,,,,471,471,471,1162,471,1162,1162,1162',
'471,471,1162,1162,,471,,471,471,471,471,471,471,471,,,,,,471,471,471',
'471,471,471,471,,,471,,,,,,,471,,,471,471,471,471,471,471,471,471,,471',
'471,471,,471,471,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471,,,471,471',
',,471,,,,,,471,,,,,,,,,471,,,,,471,471,471,471,,471,471,471,471,,,,',
'471,471,,,,277,277,277,471,277,471,471,471,277,277,471,471,,277,,277',
'277,277,277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,',
',277,,,277,277,277,277,277,277,277,277,,277,277,277,,277,277,277,277',
'277,,,,,,,,,,,,,,,,,,,,277,,,277,,,277,277,,,277,,,,,,277,,,,,,,,,277',
',,,,277,277,277,277,,277,277,277,277,,,,,277,277,,,,,,,277,,277,277',
'277,470,,277,277,,,,470,470,470,,,470,470,470,,470,,,,,,,,470,470,470',
'470,470,,,,,,,,470,470,,470,470,470,470,470,,,,,,,,,,,,,,,,,,,,,,,470',
'470,470,470,470,470,470,470,470,470,470,470,470,470,,,470,470,470,,',
'470,,,470,,,470,470,,470,,470,,470,,470,470,,470,470,470,470,470,,470',
'470,470,,,,,,,,,,,,,,470,,,470,470,470,470,,470,469,470,,,,,470,469',
'469,469,,,469,469,469,,469,,,,,,,,469,469,469,469,469,,,,951,951,951',
'951,469,469,,469,469,469,469,469,,,,,951,951,951,,,,,,,,,,,951,951,',
',951,469,469,469,469,469,469,469,469,469,469,469,469,469,469,,,469,469',
'469,,,469,,,469,,,469,469,,469,,469,,469,,469,469,,469,469,469,469,469',
',469,469,469,,951,951,951,951,,951,951,951,951,,,,469,951,951,469,469',
'469,469,,469,951,469,951,951,951,460,469,7,7,7,7,7,460,460,460,7,7,460',
'460,460,7,460,7,7,7,7,7,7,7,460,460,460,460,,7,7,7,7,7,7,7,460,460,7',
'460,460,460,460,460,7,7,7,7,7,7,7,7,7,7,7,7,,7,7,7,,7,7,7,7,7,460,460',
'460,460,460,460,460,460,460,460,460,460,460,460,,,460,460,460,7,,460',
'7,460,460,7,7,460,460,7,460,7,460,,460,7,460,460,,460,460,460,460,460',
'7,460,460,460,,7,7,7,7,,7,7,7,7,,,,460,7,7,460,460,,460,,460,7,,7,7',
'7,,460,7,7,75,75,75,,75,,,,75,75,,,,75,,75,75,75,75,75,75,75,,,,,,75',
'75,75,75,75,75,75,,,75,,,,,,,75,,,75,75,75,75,75,75,75,75,,75,75,75',
',75,75,75,75,75,,,,,,,,,,,,,,,,,,,,75,,,75,,,75,75,,,75,,,,,,75,,,,',
',,,,75,,,,,75,75,75,75,,75,75,75,75,,,,,75,75,75,,,,,75,75,,75,75,75',
'64,,75,75,,,,64,64,64,,,64,64,64,,64,,,,,,,,64,,64,64,64,,,,,,,,64,64',
',64,64,64,64,64,,,,,,,,,,,,,,,,,,,,,,,64,64,64,64,64,64,64,64,64,64',
'64,64,64,64,,,64,64,64,,,64,,,64,,,64,64,,64,,64,,64,,64,64,,64,64,64',
'64,64,,64,,64,,,,,,,,,,,,,,64,,,64,64,64,64,,64,,64,,278,278,278,64',
'278,,,,278,278,,,,278,,278,278,278,278,278,278,278,,,,,,278,278,278',
'278,278,278,278,,,278,,,,,,,278,,,278,278,278,278,278,278,278,278,,278',
'278,278,,278,278,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278,278',
',,278,,,,,,278,,,,,,,,,278,,,,,278,278,278,278,,278,278,278,278,,,,',
'278,278,,,,221,221,221,278,221,278,278,278,221,221,278,278,,221,,221',
'221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,',
',221,,,221,221,221,221,221,221,221,221,,221,221,221,,221,221,221,221',
'221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,,221',
',,,,221,221,221,221,,221,221,221,221,,,,,221,221,,,,220,220,220,221',
'220,221,221,221,220,220,221,221,,220,,220,220,220,220,220,220,220,,',
',,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220',
'220,220,220,,220,220,220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220',
',,220,,,220,220,,,220,,220,,,,220,,,,,,,,,220,,,,,220,220,220,220,,220',
'220,220,220,,,,,220,220,,,,800,800,800,220,800,220,220,220,800,800,220',
'220,,800,,800,800,800,800,800,800,800,,,,,,800,800,800,800,800,800,800',
',,800,,,,,,,800,,,800,800,800,800,800,800,800,800,,800,800,800,,800',
'800,800,800,800,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,800,,,800,,,,,,800',
',,,,,,,,800,,,,,800,800,800,800,,800,800,800,800,,,,,800,800,,,,797',
'797,797,800,797,800,800,800,797,797,800,800,,797,,797,797,797,797,797',
'797,797,,,,,,797,797,797,797,797,797,797,,,797,,,,,,,797,,,797,797,797',
'797,797,797,797,797,,797,797,797,,797,797,797,797,797,,,,,,,,,,,,,,',
',,,,,797,,,797,,,797,797,,,797,,,,,,797,,,,,,,,,797,,,,,797,797,797',
'797,,797,797,797,797,,,,,797,797,,,,386,386,386,797,386,797,797,797',
'386,386,797,797,,386,,386,386,386,386,386,386,386,,,,,,386,386,386,386',
'386,386,386,,,386,,,,,,,386,,,386,386,386,386,386,386,386,386,,386,386',
'386,,386,386,386,386,386,,,,,,,,,,,,,,,,,,,,386,,,386,,,386,386,,,386',
',,,,,386,,,,,,,,,386,,,,,386,386,386,386,,386,386,386,386,,,,,386,386',
',,,524,524,524,386,524,386,386,386,524,524,386,386,,524,,524,524,524',
'524,524,524,524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524',
'524,524,524,524,524,524,524,,524,524,524,,524,524,524,524,524,,,,,,',
',,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,,,,524,,,,,,,,,524,,,,,524',
'524,524,524,,524,524,524,524,,,,,524,524,,,,523,523,523,524,523,524',
'524,524,523,523,524,524,,523,,523,523,523,523,523,523,523,,,,,,523,523',
'523,523,523,523,523,,,523,,,,,,,523,,,523,523,523,523,523,523,523,523',
',523,523,523,,523,523,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523',
'523,,,523,,,,,,523,,,,,,,,,523,,,,,523,523,523,523,,523,523,523,523',
',,,,523,523,,,,522,522,522,523,522,523,523,523,522,522,523,523,,522',
',522,522,522,522,522,522,522,,,,,,522,522,522,522,522,522,522,,,522',
',,,,,,522,,,522,522,522,522,522,522,522,522,,522,522,522,,522,522,522',
'522,522,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,522,,,522,,,,,,522,,,,,,',
',,522,,,,,522,522,522,522,,522,522,522,522,,,,,522,522,,,,520,520,520',
'522,520,522,522,522,520,520,522,522,,520,,520,520,520,520,520,520,520',
',,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520',
'520,520,520,520,520,520,520,,520,520,520,520,520,,,,,,,,,,,,,,,,,,,',
'520,,,520,,,520,520,,,520,,520,,520,,520,,,520,,,,,,520,,,,,520,520',
'520,520,,520,520,520,520,,,,,520,520,,,,219,219,219,520,219,520,520',
'520,219,219,520,520,,219,,219,219,219,219,219,219,219,,,,,,219,219,219',
'219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219',
'219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219',
',,219,,219,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219,',
',,,219,219,,,,510,510,510,219,510,219,219,219,510,510,219,219,,510,',
'510,510,510,510,510,510,510,,,,,,510,510,510,510,510,510,510,,,510,',
',,,,,510,,,510,510,510,510,510,510,510,510,,510,510,510,,510,510,510',
'510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510,510,,,510,,,,,,510,,,,,,',
',,510,,,,,510,510,510,510,,510,510,510,510,,,,,510,510,,,,1017,1017',
'1017,510,1017,510,510,510,1017,1017,510,510,,1017,,1017,1017,1017,1017',
'1017,1017,1017,,,,,,1017,1017,1017,1017,1017,1017,1017,,,1017,,,,,,',
'1017,,,1017,1017,1017,1017,1017,1017,1017,1017,,1017,1017,1017,,1017',
'1017,,,1017,,,,,,,,,,,,,,,,,,,,1017,,,1017,,,1017,1017,,,1017,,,,,,',
',,,,,,,,,,,,,1017,1017,1017,1017,,1017,1017,1017,1017,,,,,1017,1017',
',,,1081,1081,1081,1017,1081,1017,1017,1017,1081,1081,,,,1081,,1081,1081',
'1081,1081,1081,1081,1081,,,,,,1081,1081,1081,1081,1081,1081,1081,,,1081',
',,,,,,1081,,,1081,1081,1081,1081,1081,1081,1081,1081,,1081,1081,1081',
',1081,1081,,,1081,,,,,,,,,,,,,,,,,,,,1081,,,1081,,,1081,1081,,,1081',
',,,,,,,,,,,,,,,,,,,1081,1081,1081,1081,,1081,1081,1081,1081,,,,,1081',
'1081,,,,341,341,341,1081,341,1081,1081,1081,341,341,,,,341,,341,341',
'341,341,341,341,341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341',
',,341,341,341,341,341,341,341,341,,341,341,341,,341,341,,,341,,,,,,',
',,,,,,,,,,,,,341,,,341,,,341,341,,,341,,,1214,,1214,1214,1214,1214,1214',
',,,,,,,,1214,,341,341,341,341,,341,341,341,341,,,,,341,341,,,,341,,1214',
'341,,341,341,341,588,588,588,,588,1214,1214,,588,588,1214,,,588,,588',
'588,588,588,588,588,588,,,,,,588,588,588,588,588,588,588,,,588,,,,,',
',588,,,588,588,588,588,588,588,588,588,,588,588,588,,588,588,,,588,',
',,,,,,,,,,,,,,,,,,588,,,588,,,588,588,,,588,,,,,,,,,,,,,,,,,,,,588,588',
'588,588,,588,588,588,588,,,,,588,588,,,,40,40,40,588,40,588,588,588',
'40,40,,,,40,,40,40,40,40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,',
',,,40,,,40,40,40,40,40,40,40,40,,40,40,40,,40,40,,,40,,,,,,,,,,,,,,',
',,,,,40,,,40,,,40,40,,,40,,,1210,,1210,1210,1210,1210,1210,,,,,,,,,1210',
',40,40,40,40,,40,40,40,40,,,,,40,40,,,,40,,1210,40,,40,40,40,803,803',
'803,,803,1210,1210,,803,803,1210,,,803,,803,803,803,803,803,803,803',
',,,,,803,803,803,803,803,803,803,,,803,,,,,,,803,,,803,803,803,803,803',
'803,803,803,,803,803,803,,803,803,,,803,,,,,,,,,,,,,,,,,,,,803,,,803',
',,803,803,,,803,,,,,,,,,,,,,,,,,,,,803,803,803,803,,803,803,803,803',
',,,,803,803,,,,360,360,360,803,360,803,803,803,360,360,,,,360,,360,360',
'360,360,360,360,360,,,,,,360,360,360,360,360,360,360,,,360,,,,,,,360',
',,360,360,360,360,360,360,360,360,,360,360,360,,360,360,,,360,,,,,,',
',,,,,,,,,,,,,360,,,360,,,360,360,,,360,,,,,,,,,,,,,,,,,,,,360,360,360',
'360,,360,360,360,360,,,,,360,360,,,,1144,1144,1144,360,1144,360,360',
'360,1144,1144,,,,1144,,1144,1144,1144,1144,1144,1144,1144,,,,,,1144',
'1144,1144,1144,1144,1144,1144,,,1144,,,,,,,1144,,,1144,1144,1144,1144',
'1144,1144,1144,1144,,1144,1144,1144,,1144,1144,,,1144,,,,,,,,,,,,,,',
',,,,,1144,,,1144,,,1144,1144,,,1144,,,,,,,,,,,,,,,,,,,,1144,1144,1144',
'1144,,1144,1144,1144,1144,,,,,1144,1144,,,,77,77,77,1144,77,1144,1144',
'1144,77,77,,,,77,,77,77,77,77,77,77,77,,,,,,77,77,77,77,77,77,77,,,77',
',,,,,,77,,,77,77,77,77,77,77,77,77,,77,77,77,,77,77,,,77,,,,,,,,,,,',
',,,,,77,,,77,,,77,,,77,77,,,77,,,,,,,,,,,,,,,,,,,,77,77,77,77,,77,77',
'77,77,,,,,77,77,,,,814,814,814,77,814,77,77,77,814,814,,,,814,,814,814',
'814,814,814,814,814,,,,,,814,814,814,814,814,814,814,,,814,,,,,,,814',
',,814,814,814,814,814,814,814,814,,814,814,814,,814,814,,,814,,,,,,',
',,,,,,,,,,,,,814,,,814,,,814,814,,,814,,,,,,,,,,,,,,,,,,,,814,814,814',
'814,,814,814,814,814,,,,,814,814,,,,597,597,597,814,597,814,814,814',
'597,597,,,,597,,597,597,597,597,597,597,597,,,,,,597,597,597,597,597',
'597,597,,,597,,,,,,,597,,,597,597,597,597,597,597,597,597,,597,597,597',
',597,597,,,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,,,,,,,',
',,,,,,,,,,,597,597,597,597,,597,597,597,597,,,,,597,597,,,,39,39,39',
'597,39,597,597,597,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39',
'39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,,',
'39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,39,,,,,,,,,,,,,,,,,,39,39',
'39,39,,39,39,39,39,,,,,39,39,,,,76,76,76,39,76,39,39,39,76,76,,,,76',
',76,76,76,76,76,76,76,,,,,,76,76,76,76,76,76,76,,,76,,,,,,,76,,,76,76',
'76,76,76,76,76,76,,76,76,76,,76,76,,,76,,,,,,,,,,,,,,,,,,,,76,,,76,',
',76,76,,,76,,76,,,,,,,,,,,,,,,,,,76,76,76,76,,76,76,76,76,,,,,76,76',
',,,78,78,78,76,78,76,76,76,78,78,,,,78,,78,78,78,78,78,78,78,,,,,,78',
'78,78,78,78,78,78,,,78,,,,,,,78,,,78,78,78,78,78,78,78,78,,78,78,78',
',78,78,,,78,,,,,,,,,,,,,,,,,,,,78,,,78,,,78,78,,,78,,,,,,,,,,,,,,,,',
',,,78,78,78,78,,78,78,78,78,,,,,78,78,,,,,,,78,,78,78,78,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,,,,10,10',
'10,10,10,10,10,10,10,10,,,,,,10,10,10,10,10,10,10,10,10,10,,10,,,,,',
',,10,10,,10,10,10,10,10,10,10,,,10,10,,,,10,10,10,10,,,,,,,,,,,,,,10',
'10,,10,10,10,10,10,10,10,10,10,10,10,10,,,10,10,,,,,,,,,,,,,,10,427',
'427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,,,,427,427,427,427,427,427,427,427,427,427,',
',,,,427,427,427,427,427,427,427,427,427,,,427,,,,,,,,427,427,,427,427',
'427,427,427,427,427,,,427,427,,,,427,427,427,427,,,,,,,,,,,,,,427,427',
',427,427,427,427,427,427,427,427,427,427,427,427,,,427,427,,,,,,,,,',
',,,,427,667,667,667,667,667,667,667,667,667,667,667,667,667,667,667',
'667,667,667,667,667,667,667,667,667,,,,667,667,667,667,667,667,667,667',
'667,667,,,,,,667,667,667,667,667,667,667,667,667,,,667,,,,,,,,667,667',
',667,667,667,667,667,667,667,,,667,667,,,,667,667,667,667,,,,,,,,,,',
',,,667,667,,667,667,667,667,667,667,667,667,667,667,667,667,,,667,667',
',,,,,,,,,,,,,667,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11',
'11,11,11,11,11,11,,,11,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,',
',11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,11',
',,11,11,,,,,,,,,,,,,,11,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,,,,,,26',
'26,26,26,26,26,26,26,26,26,26,26,,26,,,,,,26,26,,26,26,26,26,26,26,26',
',,26,26,,,,26,26,26,26,,,,,,26,,,,,,,,26,26,,26,26,26,26,26,26,26,26',
'26,26,26,26,,,26,753,753,753,753,,,,,,1026,,1026,1026,1026,1026,1026',
'753,753,753,753,,,,753,1026,,,,,753,753,,,753,,,,,,,,,,,,,1026,,,,,',
',753,,,753,1026,1026,,753,,1026,753,,,,,,,,,,,,,,,,753,,,,753,753,753',
'753,,753,753,753,753,,,,,753,753,1205,1205,1205,1205,1026,,753,,753',
'753,753,,,753,753,,1205,1205,1205,1205,,,1208,1205,1208,1208,1208,1208',
'1208,1205,1205,,,1205,,,,1208,,,,,,,,,,,,,,,,1205,,,1205,,,1208,1205',
',,1205,,,,,1208,1208,1208,1208,,,,1208,,,,1205,,,,1205,1205,1205,1205',
',1205,1205,1205,1205,,,,,1205,1205,1129,1129,1129,1129,,,1205,,1205',
'1205,1205,,,1205,1205,,1129,1129,1129,1129,,,1138,1129,1138,1138,1138',
'1138,1138,1129,1129,,,1129,,,,1138,,,,,,,,,,,,,,,,1129,,,1129,,,1138',
'1129,,,1129,,1129,,,1138,1138,1138,1138,,,,1138,,,,1129,,,,1129,1129',
'1129,1129,,1129,1129,1129,1129,,,,,1129,1129,989,989,989,989,,,1129',
',1129,1129,1129,,,1129,1129,,989,989,989,989,,,,989,989,,,,,989,989',
',,989,989,,,,,,,,,,,,,,,,,,,989,,,989,,,,989,,,989,,989,,,,,,,989,,',
',,,,989,,,,989,989,989,989,,989,989,989,989,,,,,989,989,942,942,942',
'942,,,989,,989,989,989,,,989,989,,942,942,942,942,,,1135,942,1135,1135',
'1135,1135,1135,942,942,,,942,,,,1135,,,,,,,,,,,,,,,,942,,,942,,,1135',
'942,,,942,,,,,1135,1135,1135,1135,,,,1135,,,,942,,,,942,942,942,942',
',942,942,942,942,,,,,942,942,924,924,924,924,,,942,,942,942,942,,,942',
'942,,924,924,924,924,,,1231,924,1231,1231,1231,1231,1231,924,924,,,924',
',,,1231,,,,,,,,,,,,,,,,924,,,924,,,1231,924,,,924,,924,,,,,1231,1231',
',,,1231,,,,924,,,,924,924,924,924,,924,924,924,924,,,,,924,924,745,745',
'745,745,,,924,,924,924,924,,,924,924,,745,745,745,745,,,,745,,,,,,745',
'745,,,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,,745,,,745,,745,,,,,,,1166',
',1166,1166,1166,1166,1166,745,,,,745,745,745,745,1166,745,745,745,745',
',,,,745,745,745,943,943,943,943,,745,,745,745,745,1166,,745,745,,,943',
'943,943,943,,1166,1166,943,,,1166,,,943,943,,,943,,,,,,,,,,,,,,,,,,',
',943,,,943,,,,943,,,943,,,1166,,,,,,,,,,,,,943,,,,943,943,943,943,,943',
'943,943,943,,,,,943,943,930,930,930,930,,,943,,943,943,943,,,943,943',
',930,930,930,930,,,,930,930,,,,,930,930,,,930,930,,,,,,,,,,,,,,,,,,',
'930,,,930,,,,930,,,930,,930,,,,,,,930,,,,,,,930,,,,930,930,930,930,',
'930,930,930,930,,,,,930,930,929,929,929,929,,,930,,930,930,930,,,930',
'930,,929,929,929,929,,,,929,929,,,,,929,929,,,929,929,,,,,,,,,,,,,,',
',,,,929,,,929,,,,929,,,929,,929,,,,,,,929,,,,,,,929,,,,929,929,929,929',
',929,929,929,929,,,,,929,929,,,,,,,929,,929,929,929,,,929,929,780,780',
'780,780,780,780,780,780,780,780,780,780,780,780,780,780,780,780,780',
'780,780,780,780,780,,,,780,780,780,780,780,780,780,780,780,780,,,,,',
'780,780,780,780,780,780,780,780,780,,,780,,,,,,,,780,780,,780,780,780',
'780,780,780,780,,,780,780,,,,780,780,780,780,,,,,,,,,,,,,,780,780,,780',
'780,780,780,780,780,780,780,780,780,780,780,,,780,528,528,528,528,,',
'1212,,1212,1212,1212,1212,1212,,,,528,528,528,528,,1212,,528,528,,,',
',528,528,,,528,528,,,,,,,,,1212,,,,,,,,,,528,1212,1212,528,,,1212,528',
',,528,,528,,,,,,,528,,,,,,,528,,,,528,528,528,528,,528,528,528,528,',
',,,528,528,527,527,527,527,,,528,,528,528,528,,,528,528,,527,527,527',
'527,,,,527,527,,,,,527,527,,,527,527,,,,,,,,,,,,,,,,,,,527,,,527,,,',
'527,,,527,,527,,,,,,,527,,,,,,,527,,,,527,527,527,527,,527,527,527,527',
',,,,527,527,1173,1173,1173,1173,,,527,,527,527,527,,,527,527,,1173,1173',
'1173,1173,,,,1173,,,,,,1173,1173,,,1173,,,,,,,,,,,,,,,,,,,,1173,,,1173',
',,,1173,,,1173,,,,,,,,,,,,,,,,1173,,,,1173,1173,1173,1173,,1173,1173',
'1173,1173,,,,,1173,1173,1116,1116,1116,1116,,,1173,,1173,1173,1173,',
',1173,1173,,1116,1116,1116,1116,,,,1116,,,,,,1116,1116,,,1116,,,,,,',
',,,,,,,,,,,,,1116,,,1116,,,,1116,,,1116,,,,,,,,,,,,,,,,1116,,,,1116',
'1116,1116,1116,,1116,1116,1116,1116,,,,,1116,1116,926,926,926,926,,',
'1116,,1116,1116,1116,,,1116,1116,,926,926,926,926,,,,926,,,,,,926,926',
',,926,,,,,,,,,,,,,,,,,,,,926,,,926,,,,926,,,926,,,,,,,,,,,,,,,,926,',
',,926,926,926,926,,926,926,926,926,,,,,926,926,1125,1125,1125,1125,',
',926,,926,926,926,,,926,926,,1125,1125,1125,1125,,,,1125,,,,,,1125,1125',
',,1125,,,,,,,,,,,,,,,,,,,,1125,,,1125,,,,1125,,,1125,,,,,,,,,,,,,,,',
'1125,,,,1125,1125,1125,1125,,1125,1125,1125,1125,,,,,1125,1125,936,936',
'936,936,,,1125,,1125,1125,1125,,,1125,1125,,936,936,936,936,,,,936,',
',,,,936,936,,,936,,,,,,,,763,763,763,763,,,,,,,,,936,,,936,763,763,763',
'936,,,936,,936,,,,,763,763,,,763,,,,,936,,,,936,936,936,936,,936,936',
'936,936,,,,,936,936,,,,,,,936,,936,936,936,,,936,936,233,,233,233,233',
'233,233,,,,,763,763,763,763,233,763,763,763,763,,,,,763,763,950,950',
'950,950,,,763,,763,763,763,233,,,,,950,950,950,,233,233,233,233,,,,233',
',950,950,,,950,,,,,,,,,,,,705,,705,705,705,705,705,,,,,,,,,705,,,,,',
'234,233,234,234,234,234,234,,,,,,,,,234,705,950,950,950,950,,950,950',
'950,950,,705,705,,950,950,705,,,,,234,950,,950,950,950,,,,234,234,234',
'234,,,409,234,409,409,409,409,409,,1020,,1020,1020,1020,1020,1020,409',
',,,,705,,,1020,,644,,644,644,644,644,644,,,,,,409,409,,644,234,,,,1020',
'409,409,409,409,,,,409,1020,1020,1020,1020,,,,1020,644,,,,,,,,,644,644',
'644,644,,,1024,644,1024,1024,1024,1024,1024,,,,,,,,,1024,409,,,,,,,',
'1020,,,,,,,,,,,,,1024,,,,644,,,,,,,1024,1024,675,675,,1024,675,,,,,',
',,675,675,,675,675,675,675,675,675,675,,,675,675,,,,675,675,675,675',
',,,,,675,,,,,1024,,,675,675,,675,675,675,675,675,675,675,675,675,675',
'675,675,636,636,675,,636,,,,,,,,636,636,,636,636,636,636,636,636,636',
',,636,636,,,,636,636,636,636,,,,,,636,,,,,,,,636,636,,636,636,636,636',
'636,636,636,636,636,636,636,636,629,629,636,,629,,,,,,,,629,629,,629',
'629,629,629,629,629,629,,,629,629,,,,629,629,629,629,,,,,,629,,,,,,',
',629,629,,629,629,629,629,629,629,629,629,629,629,629,629,226,226,629',
',226,,,,,,,,226,226,,226,226,226,226,226,226,226,,,226,226,,,,226,226',
'226,226,,,,,,226,,,,,,,,226,226,,226,226,226,226,226,226,226,226,226',
'226,226,226,602,602,226,,602,,,,,,,,602,602,,602,602,602,602,602,602',
'602,,,602,602,,,,602,602,602,602,,,,,,602,,,,,,,,602,602,,602,602,602',
'602,602,602,602,602,602,602,602,602,637,637,602,,637,,,,,,,,637,637',
',637,637,637,637,637,637,637,,,637,637,,,,637,637,637,637,,,,,,637,',
',,,,,,637,637,,637,637,637,637,637,637,637,637,637,637,637,637,225,225',
'637,,225,,,,,,,,225,225,,225,225,225,225,225,225,225,,,225,225,,,,225',
'225,225,225,,,,,,225,,,,,,,,225,225,,225,225,225,225,225,225,225,225',
'225,225,225,225,302,302,225,,302,,,,,,,,302,302,,302,302,302,302,302',
'302,302,,,302,302,,,,302,302,302,302,,,,,,,,,,,,,,302,302,,302,302,302',
'302,302,302,302,302,302,302,302,302,519,519,302,,519,,,,,,,,519,519',
',519,519,519,519,519,519,519,,,519,519,,,,519,519,519,519,,,,,,519,',
',,,,,,519,519,,519,519,519,519,519,519,519,519,519,519,519,519,518,518',
'519,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,,,518,518,,,,518',
'518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518,518,518,518,518,518',
'518,518,518,518,591,591,518,,591,,,,,,,,591,591,,591,591,591,591,591',
'591,591,,,591,591,,,,591,591,591,591,,,,,,591,,,,,,,,591,591,,591,591',
'591,591,591,591,591,591,591,591,591,591,592,592,591,,592,,,,,,,,592',
'592,,592,592,592,592,592,592,592,,,592,592,,,,592,592,592,592,,,,,,592',
',,,,,,,592,592,,592,592,592,592,592,592,592,592,592,592,592,592,1163',
'1163,592,,1163,,,,,,,,1163,1163,,1163,1163,1163,1163,1163,1163,1163',
',,1163,1163,,,,1163,1163,1163,1163,,,,,,1163,,,,,,,,1163,1163,,1163',
'1163,1163,1163,1163,1163,1163,1163,1163,1163,1163,1163,674,674,1163',
',674,,,,,,,,674,674,,674,674,674,674,674,674,674,,,674,674,,,,674,674',
'674,674,,,,,,674,,,,,,,,674,674,,674,674,674,674,674,674,674,674,674',
'674,674,674,1164,1164,674,,1164,,,,,,,,1164,1164,,1164,1164,1164,1164',
'1164,1164,1164,,,1164,1164,,,,1164,1164,1164,1164,,,,,,1164,,,,,,,,1164',
'1164,,1164,1164,1164,1164,1164,1164,1164,1164,1164,1164,1164,1164,630',
'630,1164,,630,,,,,,,,630,630,,630,630,630,630,630,630,630,,,630,630',
',,,630,630,630,630,,,,,,630,,,,,,,,630,630,,630,630,630,630,630,630',
'630,630,630,630,630,630,1188,1188,630,,1188,,,,,,,,1188,1188,,1188,1188',
'1188,1188,1188,1188,1188,,,1188,1188,,,,1188,1188,1188,1188,,,,,,1188',
',,,,,,,1188,1188,,1188,1188,1188,1188,1188,1188,1188,1188,1188,1188',
'1188,1188,601,601,1188,,601,,,,,,,,601,601,,601,601,601,601,601,601',
'601,,,601,601,,,,601,601,601,601,,,,,,601,,,,,,,,601,601,,601,601,601',
'601,601,601,601,601,601,601,601,601,,,601' ]
        racc_action_check = arr = ::Array.new(28717, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1550,  2590,    30,   nil,   485,   nil, 21057,  1279,   -15,
 24908, 25292,    63,   nil,   111,   130,   888,   195,   878,   334,
   213,   587,   nil,   -72, 16018,  1438, 25420,   260,   nil,   586,
   nil,    10,  7680,  8479,  8613,  9947, 10209,   nil,  1870, 24507,
 23582,   nil,   199,   495,   356,   292, 12722, 13115,   252, 13377,
 14041,   977, 19960,   226,   694,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 21341,   nil, 15494, 15351, 14696,   170,
   nil, 14434, 14303,   nil,   nil, 21200, 24638, 24114, 24769,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   877,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   610,   nil,
   nil,   722,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 20234,   nil,   nil,   nil,   nil, 20091,
 19567, 19436, 19305, 19174,   nil,  4318,   nil,   -26,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   266,   nil,  4462, 22788,
 21740, 21609, 14172, 13910, 13779, 27931, 27748,   nil,   nil,   264,
  2734,   305,   nil, 27294, 27386,   317,  1294, 12043, 11912, 11257,
   nil,   nil,  1133,   138,   140,   432,   174,   389,   452,   nil,
 10078,   131,   191,  3022,   455,   nil,   nil,  7277,  7146,  7015,
  6753,  6491,  6360,  6229,  6098,  5967, 18507, 18376, 18245, 17590,
 17459, 17328, 16411, 16149, 15756, 15220, 15089, 20639, 21478,   nil,
   nil,   nil,   nil, 13648,   nil,   nil,   583,   548,   381,   -62,
   413,   376,   696,   695,   584,   585,   nil,   nil,   nil, 15625,
   nil,   nil, 27992,   nil,   nil,   484, 16673, 17066,   nil,   nil,
   nil,   nil,   nil,   nil,   nil, 17197,   nil,  2446,   nil,   455,
   459,   nil, 17721,   512, 17852,   nil,   nil, 17983, 18114,   nil,
   nil,   -73,   nil,  5836,  1711,   509,   484,  1726,   513,   564,
   525, 23312,  2878,   999,  1139,   614,   617,   582,   nil,   610,
   571,   253,   616,   644,   nil,   nil,   nil,   650,   171,   611,
 23852,   nil,   471,  1022,  3742,  3886,   687,   nil,   691, 12591,
   nil,   677,  2302,  1567,   638,   nil,   541,   621,   676,   662,
   651,   690,   nil,   870,    35,    36, 22133,  1006,  4894,   459,
   766,   651,    25,    39,   730,   747,     4,   793,   nil,   nil,
  1141,  1285,   370,   nil,   692,   nil,   714, 14827,   nil, 27438,
   nil,   531,   386,   291,   288,   421,   142,   191,   396,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   713, 25036,   nil,   nil,
   nil,   nil,   726,   nil,   798,   717, 14565,   725,   nil,   nil,
   715,   nil,   690,   -60,   819,   nil,   nil,  1582,   nil,   nil,
   nil,   nil,   nil,  1870,   735,   nil,   740,   749,   217,   251,
 21057,   nil,   nil,   nil,     0,   861,   795,   nil,   nil, 20916,
 20780, 20508,   880,   882,   nil,   nil,   769,   775,   780,   nil,
   nil,   785,   787,   809,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   801,  1280,   nil,   nil, 19031,   nil,   nil,
   nil,     1,   nil,   nil,   nil,   899,   nil,   nil,   901,   579,
 22919,   951,   nil,   nil,   nil,   -26,   nil,   885, 28114, 28053,
 22657,   -85, 22526, 22395, 22264,   835,   853, 26710, 26612,  3454,
  5300,   814,   855,   936,   938,   947,   952,  5693,  5431,  5562,
  5169,  5038,  4894,  4750,  4606,  4462,  3482,  3568,  4318,  4174,
  2590,  4030,   nil,   154,   nil, 13518,   nil,   nil,   nil,   nil,
 13246,   889,   897,   901,   nil,   nil,   nil,   902,   nil,   nil,
 12984,   nil, 12853,   nil, 12460,   nil,   219,   nil,   nil,   nil,
 12317,  1438,   nil,   904,   909,   nil,   nil,   910, 23451,   916,
 12174, 28175, 28236,   995,   958,   nil,   nil, 24376,   929,   nil,
 11781, 28602, 27809, 11650,  3598, 11388,   nil,  1066,   947,   990,
   nil, 11126,   nil,   nil, 10995,   nil,   nil,   nil,  4030,  1075,
   nil,  3742,    25,  1080,  1084,    37,  1086, 10733, 10602, 27687,
 28480,    -5,   nil,   nil,   472,   nil, 27626, 27870, 10340,   nil,
   nil,   191,  2014,   nil, 27463,   nil,   nil,   nil,   nil,  1249,
   nil,   nil,   nil,   977,   nil,   nil,   247,   nil,   286,   nil,
   nil,   966,   nil,   968,   nil,   nil,   nil, 25164,   nil,  9816,
   971,  9673,  9411,  9280, 28358, 27565,  9018,  8875,   733,  1011,
  8744,  8076,  7945,  7814,  1017,   nil,   nil,  7539,  7408,  1021,
   nil,  1075,  1726,  1105,  6884,   nil,   nil,  1120,   nil,   nil,
   376, 13512,   nil, 13482,   nil, 27365,   nil,   975,  6622,   nil,
  1310,   nil,   992,   997,  1057,  1002,   nil,   nil,   nil,   nil,
   nil,   nil,  1090,  2014,   nil,   nil,   nil,   307,   332,   222,
   361,  1006,  5693,  5562,   nil,   120,   nil,   nil,   nil,   nil,
  1029,   nil,   nil,   nil,   555, 26091,   311,   nil,  1007,  1092,
  1014,   nil,   nil, 25503,   nil,   nil,   375,   nil,   nil,   586,
   nil,   nil,   861, 27241,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   791,   464,   nil,   nil,  1016,
 26529,   nil,  1148,   nil,  1131,     4,   nil,   nil, 16280,   nil,
  1046,  1053,  1154,   nil,  1041,   nil,  1088, 22002,   nil,   nil,
 21871,   nil,   109, 23721,  1044,   nil,  1048,    -1,   233,  1103,
   249,   799,  1117,  1088, 24245,   nil,  1156,  2158, 10864,   nil,
   nil,   nil,   372,   876,   nil,  1213,   nil,   nil,   nil,   nil,
   nil,  1219,  1220,   nil,   nil,     6,  1101,   -21,   -19,    68,
     7,  1150,   997,   989,   nil,  1103,  4606, 14958,   nil,  1227,
    22,  1107,   nil,   nil,   nil,   nil,   nil,  4750,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1106, 15887,  1110,   387,
   385,   110,   500,   nil,  2302, 16542,   nil,  1110,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 16804, 16935,
  1236,   nil,  3886,  1121,  1169,   nil,   nil,  1129,   nil,  1212,
   nil,   nil,  1131,  1136,   nil,  1141,  1143,   nil,  1144,   nil,
   nil,   nil,  1150,  1204,   507,   nil,   nil, 18638, 18769, 18900,
  5169,  5300,  5431,   333, 25993,  1231, 27004,   -65,   -35, 26386,
 26288,   480,   -32,  1154,  1155,   nil, 27200,   nil,  1154,   747,
   nil,  1178, 25895, 26190,   nil,   929,  1243,   281,   nil,   nil,
 27339, 20916,   nil,   nil,   nil,   nil,  8207,   nil,   nil,   nil,
   nil,   nil,  8338,   nil,   nil,  1227,   nil,   nil,  1237,  1224,
   nil,   nil,   429,  2446,   nil,   nil,   nil,   nil,  1227,   250,
   nil,   137,   nil,  1357,   nil,  9149,  1361,   nil,   nil, 25797,
  9542,  5038,   -18,  1362,   nil,  1363,   369,  1582,   nil,   nil,
   nil,   nil,  1238,  1285,  1249,  1247,   304,   nil,   nil, 10471,
  3310,  3166,   nil,  3166,   nil,   nil,   -10, 23050,   nil,   nil,
 27446,   nil,   497,   nil, 27515,   nil, 25493,   nil,   nil,   nil,
   nil,  1248,  1250,  3022,  2878, 11519,   nil,  1251,   nil,   nil,
   nil,   nil,  1257,  1258,  1260,  1262,  1263,  1264,   nil,   nil,
   nil,  1309,  1267,   -39,   nil,  1276,   nil,   nil,   -66,  1275,
   nil,   nil,   nil,   nil,   nil,   nil,  1323,  2734,  2158,   nil,
   nil,  1285,  1286,   nil,  1287,  1288,  1291,   nil,  1316,  1296,
  1283, 23181,   nil,   nil,   nil,   nil,   nil,     8,   nil,    26,
   771,   nil,    40,   nil,   nil,   nil,  1420,  3454,  3310,  1136,
   nil,   nil,   nil,  1438,    32,    33,   872,  1376,    34,   nil,
  1302,  1312,  1313,  1314,  1348,  3584, 26906,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1317, 27102,   nil,   145,   nil, 25699,
   nil,   nil,   815,   nil,   nil, 25898,   nil,   nil, 25702,   nil,
 13537,   nil,   nil,  1342, 23983,   763,  1397,  3598,   nil, 19698,
 19829,   nil,   nil,   nil,   nil,  1341,  1454,   713,   nil,   nil,
   nil,  1457, 20377, 28297, 28419,    69, 26144,   nil,   nil,   nil,
   nil,  1332,  1333, 26808,  1341,   nil,   nil,  1342,   nil,   nil,
  1361,  1365,  1382,  1385,   nil,  1386,   nil,   618, 28541,   nil,
   973,  4174,   nil,   nil,   nil,   nil,   nil,  1195,   nil,  1392,
    76,    79,   109,   136,  1391, 25601,  1394,   nil, 25604,   nil,
 23629,   nil, 26599,   nil, 23359,   nil,   nil,  1439,  1442,   nil,
   362,   nil,   142,   nil,  1399,  1401,  1404,  1409,   nil,   nil,
   nil, 25996,   nil,   nil,   nil,   nil,  -129,   nil ]

racc_action_default = [
    -1,  -745,    -4,  -745,    -2,  -730,    -5,  -745,    -8,  -745,
  -745,  -745,  -745,   -31,  -745,  -745,   -36,  -745,  -745,  -639,
  -639,  -311,   -52,  -732,  -745,   -61,  -745,   -69,   -70,   -71,
   -75,  -287,  -287,  -287,  -324,  -352,  -353,   -87,   -13,   -91,
   -99,  -101,  -745,  -626,  -627,  -745,  -745,  -745,  -745,  -745,
  -745,  -239,  -745,  -732,  -258,  -302,  -303,  -304,  -305,  -306,
  -307,  -308,  -309,  -310,  -718,  -313,  -317,  -744,  -707,  -333,
  -335,  -745,  -745,   -63,   -63,  -730,  -745,  -745,  -745,  -354,
  -355,  -357,  -358,  -359,  -360,  -419,  -563,  -564,  -565,  -566,
  -587,  -569,  -570,  -589,  -591,  -574,  -579,  -583,  -585,  -601,
  -602,  -603,  -587,  -605,  -607,  -608,  -609,  -610,  -716,  -615,
  -616,  -717,  -618,  -619,  -620,  -621,  -622,  -623,  -624,  -625,
  -630,  -631,  1238,    -3,  -731,  -740,  -741,  -742,    -7,  -745,
  -745,  -745,  -745,  -745,    -9,    -4,   -19,  -745,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,
  -205,  -206,  -207,  -208,  -209,  -210,   -24,  -137,   -13,  -745,
  -745,  -745,  -745,  -745,  -277,  -745,  -745,  -728,  -729,  -745,
   -13,  -638,  -636,  -662,  -662,  -745,   -13,  -745,  -745,  -732,
  -733,   -56,  -745,  -626,  -627,  -745,  -311,  -745,  -745,  -245,
  -745,  -639,  -639,   -13,  -745,   -57,   -59,  -222,  -223,  -745,
  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -745,
  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -259,
  -260,  -261,  -262,  -745,   -65,   -66,  -745,  -130,  -131,  -170,
  -171,  -172,  -188,  -193,  -200,  -203,  -626,  -627,  -705,  -745,
  -428,  -430,  -745,  -726,  -727,   -76,  -277,  -745,  -332,  -434,
  -443,  -445,   -82,  -440,   -83,  -732,   -84,  -265,  -282,  -292,
  -292,  -286,  -290,  -293,  -745,  -587,  -709,  -713,  -745,   -85,
   -86,  -730,   -14,  -745,   -17,  -745,   -89,   -13,  -732,  -745,
   -92,   -95,   -13,  -107,  -108,  -745,  -745,  -115,  -324,  -327,
  -732,  -745,  -639,  -639,  -352,  -353,  -356,  -441,  -745,   -97,
  -745,  -103,  -321,  -745,  -224,  -225,  -606,  -233,  -234,  -745,
  -246,  -251,   -13,  -315,  -732,  -266,  -737,  -737,  -745,  -745,
  -737,  -745,  -334,   -62,  -745,  -745,  -745,   -13,   -13,  -730,
  -745,  -731,  -626,  -627,  -745,  -745,  -311,  -745,  -370,  -371,
  -125,  -126,  -745,  -128,  -745,  -311,  -634,  -745,  -348,  -662,
  -567,  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -745,    -6,
  -743,   -25,   -26,   -27,   -28,   -29,  -745,  -745,   -21,   -22,
   -23,  -138,  -745,   -32,   -35,  -298,  -745,  -745,  -297,   -33,
  -745,   -37,  -745,  -311,   -49,   -51,  -211,  -270,  -293,   -53,
   -54,   -38,  -212,  -270,  -732,  -278,  -292,  -292,  -719,  -720,
  -287,  -438,  -721,  -722,  -720,  -719,  -287,  -437,  -439,  -721,
  -722,  -745,  -555,  -745,  -383,  -384,  -732,  -704,  -704,  -644,
  -645,  -647,  -647,  -647,  -661,  -663,  -664,  -665,  -666,  -667,
  -668,  -669,  -670,  -671,  -745,  -673,  -675,  -677,  -682,  -684,
  -685,  -688,  -693,  -695,  -696,  -698,  -699,  -700,  -702,  -745,
  -745,  -745,   -48,  -219,   -55,  -732,  -331,  -745,  -745,  -745,
  -277,  -321,  -745,  -745,  -745,  -745,  -745,  -745,  -745,  -220,
  -221,  -226,  -227,  -228,  -229,  -230,  -231,  -235,  -236,  -237,
  -238,  -240,  -241,  -242,  -243,  -244,  -247,  -248,  -249,  -250,
  -732,  -263,   -67,  -732,  -449,  -287,  -719,  -720,   -73,   -77,
  -663,  -732,  -292,  -732,  -288,  -447,  -449,  -732,  -326,  -283,
  -745,  -284,  -745,  -289,  -745,  -294,  -745,  -712,  -715,   -12,
  -731,   -16,   -18,  -732,   -88,  -319,  -104,   -93,  -745,  -732,
  -277,  -745,  -745,  -114,  -745,  -638,  -606,  -745,  -100,  -105,
  -745,  -745,  -745,  -745,  -264,  -745,  -328,  -745,  -732,  -745,
  -267,  -739,  -738,  -269,  -739,  -322,  -323,  -708,   -13,  -361,
  -362,   -13,  -745,  -745,  -745,  -745,  -745,  -745,  -277,  -745,
  -745,  -321,   -63,  -125,  -126,  -127,  -745,  -745,  -277,  -344,
  -632,  -745,   -13,  -420,  -662,  -423,  -568,  -588,  -593,  -745,
  -595,  -571,  -590,  -745,  -592,  -573,  -745,  -576,  -745,  -578,
  -581,  -745,  -582,  -745,  -604,   -10,   -20,  -745,   -30,  -745,
  -301,  -745,  -745,  -277,  -745,  -745,  -745,  -745,  -442,  -745,
  -279,  -281,  -745,  -745,   -78,  -276,  -435,  -745,  -745,   -80,
  -436,   -44,  -254,  -744,  -744,  -350,  -637,  -745,  -642,  -643,
  -745,  -745,  -654,  -745,  -657,  -745,  -659,  -745,  -745,  -372,
  -745,  -374,  -376,  -379,  -382,  -732,  -676,  -686,  -687,  -697,
  -701,  -640,   -46,  -256,  -351,  -330,  -734,  -719,  -720,  -719,
  -720,  -732,  -745,  -745,   -58,  -463,  -466,  -467,  -468,  -469,
  -471,  -473,  -476,  -477,  -534,  -732,  -489,  -492,  -504,  -508,
  -513,  -515,  -516,  -519,  -520,  -587,  -523,  -525,  -526,  -527,
  -532,  -533,  -745,  -745,  -537,  -538,  -539,  -540,  -541,  -542,
  -543,  -544,  -545,  -546,  -547,  -745,  -745,  -553,   -60,  -745,
  -745,  -706,  -745,  -450,   -72,  -431,  -447,  -272,  -279,  -274,
  -745,  -409,  -745,  -325,  -292,  -291,  -295,  -745,  -710,  -711,
  -745,   -15,   -90,  -745,   -96,  -102,  -732,  -719,  -720,  -275,
  -723,  -113,  -745,   -98,  -745,  -218,  -232,  -252,  -745,  -314,
  -316,  -318,  -737,  -744,  -363,  -744,   -64,  -364,  -365,  -338,
  -339,  -745,  -745,  -455,  -341,  -745,  -732,  -719,  -720,  -723,
  -320,   -13,  -125,  -126,  -129,  -732,   -13,  -745,  -346,  -745,
  -745,  -732,  -594,  -597,  -598,  -599,  -600,   -13,  -572,  -575,
  -577,  -580,  -584,  -586,  -139,   -34,  -299,  -745,  -732,  -719,
  -720,  -720,  -719,   -50,  -271,  -745,  -735,  -292,   -40,  -214,
   -41,  -215,   -79,   -42,  -217,   -43,  -216,   -81,  -745,  -745,
  -744,  -368,   -13,  -556,  -744,  -557,  -558,  -704,  -683,  -688,
  -703,  -646,  -647,  -647,  -674,  -647,  -647,  -694,  -647,  -671,
  -386,  -689,  -732,  -745,  -745,  -381,  -672,  -745,  -745,  -745,
  -745,  -745,  -745,  -442,  -464,  -745,  -745,  -474,  -475,  -745,
  -745,  -745,  -494,  -732,  -732,  -488,  -495,  -501,  -745,  -745,
  -491,  -745,  -745,  -745,  -507,  -514,  -518,  -745,  -522,  -524,
  -530,  -531,  -535,  -536,  -548,  -549,  -745,  -611,  -612,  -613,
  -126,  -551,  -745,   -68,  -429,  -409,  -433,  -432,  -745,  -732,
  -444,  -410,  -732,   -13,  -446,  -285,  -296,  -714,   -94,  -442,
  -106,  -732,  -268,  -745,  -366,  -745,  -745,  -340,  -342,  -745,
  -745,   -13,  -442,  -745,  -442,  -745,  -745,   -13,  -349,  -421,
  -424,  -426,  -413,  -745,  -745,  -300,  -442,   -39,  -213,  -280,
   -45,  -255,   -11,   -13,  -562,  -369,  -745,  -745,  -560,  -641,
  -745,  -650,  -745,  -652,  -745,  -655,  -745,  -658,  -660,  -373,
  -375,  -377,  -380,   -47,  -257,  -745,  -465,  -504,  -470,  -472,
  -481,  -485,  -732,  -732,  -732,  -732,  -732,  -732,  -552,  -486,
  -487,  -511,  -496,  -499,  -502,  -732,  -587,  -736,  -732,  -505,
  -509,  -512,  -517,  -521,  -528,  -529,  -745,  -253,   -13,   -74,
  -273,  -704,  -704,  -390,  -392,  -392,  -392,  -408,  -745,  -732,
  -671,  -679,  -680,  -691,  -448,  -329,  -336,  -745,  -337,  -745,
  -460,  -295,  -744,  -343,  -345,  -633,  -745,   -13,   -13,  -745,
  -422,  -596,  -561,   -13,  -626,  -627,  -745,  -745,  -311,  -559,
  -647,  -647,  -647,  -647,  -745,  -745,  -745,  -478,  -479,  -480,
  -482,  -483,  -484,  -503,  -497,  -745,  -490,  -745,  -493,  -745,
  -550,  -451,  -745,  -388,  -389,  -393,  -399,  -401,  -745,  -404,
  -745,  -406,  -411,  -745,  -745,  -678,  -745,   -13,  -456,  -745,
  -745,  -452,  -453,  -454,  -347,  -745,  -745,  -732,  -415,  -417,
  -418,  -555,  -277,  -745,  -745,  -321,  -745,  -648,  -651,  -653,
  -656,  -378,  -505,  -745,  -500,  -506,  -510,  -704,  -681,  -391,
  -392,  -392,  -392,  -392,  -692,  -392,  -412,  -690,  -745,  -321,
  -744,   -13,  -461,  -462,  -425,  -427,  -414,  -745,  -554,  -732,
  -719,  -720,  -723,  -320,  -647,  -745,  -498,  -387,  -745,  -396,
  -745,  -398,  -745,  -402,  -745,  -405,  -407,  -320,  -723,  -367,
  -744,  -416,  -442,  -649,  -392,  -392,  -392,  -392,  -457,  -458,
  -459,  -745,  -394,  -397,  -400,  -403,  -392,  -395 ]

clist = [
'44,411,301,309,313,44,141,141,318,318,318,340,285,418,454,493,493,284',
'382,384,385,473,141,389,297,19,626,511,709,832,19,693,460,466,356,356',
'44,344,344,635,127,698,699,571,225,618,621,339,563,702,704,706,144,144',
'890,303,708,598,897,241,983,19,352,352,44,134,387,388,366,136,217,356',
'356,356,393,297,297,421,422,423,424,798,232,232,305,312,314,907,8,19',
'795,445,795,8,445,302,561,678,940,352,352,352,359,734,778,737,737,790',
'445,555,127,124,438,439,1003,451,383,383,236,559,383,715,44,798,610',
'613,1160,1059,617,512,375,44,904,44,1158,484,484,756,756,123,229,235',
'336,1037,4,476,509,19,320,320,320,1030,373,973,1032,1184,19,1075,19',
'1016,782,128,2,607,656,658,17,1012,338,1044,1047,17,792,801,383,383',
'383,383,216,1055,571,377,380,933,595,595,986,399,516,434,798,493,934',
'406,408,427,527,461,318,528,795,795,17,826,952,953,286,780,786,390,8',
'667,652,654,657,657,44,369,605,425,378,8,470,785,1160,1184,298,432,44',
'379,17,397,1221,639,44,1078,576,372,608,374,818,19,846,19,709,997,19',
'642,915,1031,1077,44,1136,19,433,444,1079,1157,444,19,19,831,339,903',
'568,905,449,450,518,319,319,319,444,844,643,999,19,426,419,409,318,318',
'850,514,515,804,1097,584,17,318,1098,554,565,566,813,965,1151,17,1089',
'17,1172,1228,376,989,1191,1038,1039,899,795,1174,731,484,303,929,232',
'232,316,329,330,930,1180,645,939,309,942,460,466,1068,968,313,1061,44',
'599,1062,622,44,356,912,955,344,44,894,1143,1,553,410,339,412,1175,413',
'236,339,552,1030,1171,356,19,1206,344,414,19,415,1036,416,352,19,127',
'1042,1045,417,44,591,525,526,923,852,1043,1046,596,857,806,847,17,352',
'17,44,44,17,935,601,902,582,1064,1065,17,19,623,624,809,898,17,17,1178',
'587,907,,,1126,809,,19,19,,961,,,,17,836,581,629,320,,141,127,696,493',
'1219,845,320,,383,685,849,,,809,580,690,,,336,,,809,691,336,709,709',
'979,,236,641,1152,437,437,860,904,860,,,1019,,868,725,579,,583,674,144',
'1021,1023,589,1025,1027,,1028,,,992,,460,466,493,722,493,666,,994,,461',
',,1177,318,,991,17,882,,978,17,781,887,,,17,238,,,787,1006,789,684,452',
'470,793,975,798,689,,,,625,,772,772,685,513,795,969,,802,,1076,,17,371',
'805,756,756,562,319,445,721,,484,,,756,319,17,17,445,445,756,851,820',
'445,445,599,735,735,461,318,1090,904,737,1048,599,982,1041,,461,878',
'880,1049,1050,44,883,885,1229,1110,356,1052,,344,895,470,564,,1060,356',
',,344,,567,470,756,975,461,318,19,,,,,784,461,,352,318,,,,44,,,44,352',
',,,1230,841,470,823,,,825,,470,,,1133,1134,995,,,44,19,,1144,19,904',
'461,318,709,709,,,,,,,,827,,,,,,141,916,19,947,44,,,900,470,,900,44',
',848,1103,1167,1168,1169,1170,,,794,,,,1120,1121,1122,,19,,,19,,1181',
',19,1182,,,,,19,19,444,,144,19,19,,,,,,444,444,,1198,,444,444,,822,864',
',1153,,,,,,967,,,,,,,1207,899,772,17,,445,,1147,,1148,772,,,1080,865',
',896,,966,772,772,873,,1060,,963,1007,,,1224,284,1223,1060,,599,141',
'1176,,932,,685,17,,690,17,980,946,1096,,,,,,877,996,,,356,,,344,493',
',,,17,,,356,,,344,513,,452,,,,,,1060,,,,,352,,,,,1072,,17,594,,17,352',
',44,17,,1222,,44,,17,17,,,993,17,17,1176,,44,,,609,1131,,1029,835,981',
'19,,1004,,,19,,,,,,,1040,,,,19,,,,,,,,,1156,44,815,383,,,,,,19,,,1015',
'877,,1066,,,,,,444,,,,,19,,1080,1070,,1080,,772,,772,,,772,772,437,1085',
',,1087,772,,,,679,,772,772,,,,1073,,,772,772,,,1199,1014,,,,1018,932',
',,,,932,932,,,1127,,,809,44,,879,881,,1058,,884,886,,,1084,,,,,772,',
'44,1080,1117,1118,1119,1072,44,19,1072,,1072,1092,383,,,,17,,1128,,',
'17,44,356,,19,1105,,,,31,19,17,1102,735,31,,,,,,383,1095,,,779,,19,',
',17,352,31,,,,,,,,,,31,31,31,,31,17,,,,,,,,,,44,1072,,1072,,1072,,1072',
',,356,,,297,,,,31,,,,,31,31,1072,19,31,,,44,44,1192,1193,,,44,,,352',
'900,1155,,1073,,,1073,1161,1073,772,,906,,908,,19,19,,772,,,19,772,',
',,,1163,,,461,318,17,,356,,31,297,765,765,44,31,31,31,31,31,,31,,,17',
'1190,,,,470,17,,,,,1008,352,,,19,772,,,,,,17,,,,1073,,1073,470,1073',
',1073,,44,,,,,383,383,,,,,1220,,1081,772,1073,,,,,,879,881,886,884,19',
'679,,,,,,,,,,,,,,679,941,,17,,,31,31,31,31,31,31,31,,,,,,31,,,,,,31',
'31,31,31,,,,,17,17,381,18,,,17,,18,31,,,,,,,,,,,,,,,,242,,,,679,,,,',
',242,242,242,,18,345,345,,,,,,,,,17,,,,,31,,,,679,,,31,31,,1008,,18',
'679,,,31,242,242,1002,,242,394,404,404,,,1137,1139,1141,,,,,31,,679',
',31,17,,,,31,,765,1081,,,1081,,,1081,765,1081,,,,,,764,764,765,765,',
',,,,1074,18,,,31,,242,242,242,242,18,,18,,,,,,31,31,31,,,,,,,679,,435',
'448,,679,679,,,,,,31,,,,,,,,,1111,,1112,,1113,1081,,1081,,1081,,1081',
',,,,1209,1211,1213,1215,,1216,,1002,,,,,1081,,,,,,,,,,,,,,,,,,,18,242',
'442,242,242,442,242,,31,,,,18,1232,1233,1234,1235,,18,442,242,242,,',
',1237,,,,,,,,,,18,,573,,575,,,577,578,,,,31,,679,679,679,,,,,,31,,941',
'765,,765,,,765,765,,,,,1183,765,1185,,,,,765,765,,242,,1002,,,765,765',
'242,242,,,,,,,,242,,1204,,,,,,,,,,,,,,,764,18,,31,,18,,,764,345,18,765',
',31,,,,764,764,,,,,,,,,1225,345,1226,,1227,,20,,,,670,20,,18,31,,,31',
',,1196,,,1236,31,,,242,18,18,,,,,31,,,,31,,,,20,353,353,,,,242,,,,,',
',,,,,,,,679,,,31,,,31,31,20,716,31,,,,,,31,31,353,353,353,31,31,,,,',
',,,,,,,,,,,,,,,,,,,,,,765,242,,,,,,,,765,,,,765,,,,20,,,,,,,,,20,,20',
',,,,796,,381,,799,,,242,764,,764,,,764,764,,,242,,,764,,,,765,,764,764',
',,,,,,764,764,,,,,,796,,,381,,,,,,,,,,,,765,448,,,,,,,,,,,,,31,,,764',
',,,18,20,,20,,,20,,345,,242,,,20,,,31,345,,20,20,31,31,,866,,,,,,,,31',
'796,381,,20,,18,,,18,,,,,,893,242,,31,,,,,,,,242,,,911,18,,,,,31,,,',
',,,,,,,,,,,,,,,,,,18,,,442,242,,,18,,,,,,442,442,,,,442,442,,,,,,,,20',
',,,20,,,764,353,20,,,,,,31,764,,,,764,,,,,796,,353,,,,,31,,976,,,977',
',20,,,,,31,,,,,,31,,,,20,20,31,,,,,,,,764,,,,,,,,31,,,,,,,,,,,,,,,,',
',,,,,,,764,,,,,,,,1005,,,345,,,,,15,,,,,15,345,,,,242,,,,,31,,,,,,,',
',,,,,,,,,,18,,,15,,18,242,,,,,31,31,,,,18,31,,,21,,,,,21,,,,,,15,,,442',
',,,,,,398,773,773,,,,,,,,18,,,,,21,347,347,,,31,,31,31,,,,,,,,,,,,31',
',,,,,1091,,21,,,,,15,,,,,396,405,405,,15,,15,381,20,,,31,,,,,353,,,',
',242,,,,353,,,,,,,,,,,,,18,,,,,,,,20,,21,20,242,,,771,771,,18,21,,21',
',,18,,,,,,,,20,,,,,,,,18,,,,1106,,,,,,,15,,440,,,440,,,20,,,20,15,,',
'20,,,15,440,,20,20,,,,20,20,,,,,,,,15,,,,,,,,,18,,,,,,,,,21,,443,,1145',
'443,,,,,,,21,,,,,,21,443,18,18,,,773,,18,,,,,,773,,,21,,,,,,773,773',
',770,770,,,,,,,,,,,,,,,,,15,,,,15,1187,,,18,15,242,242,,,,,,,,,,,,242',
',,,353,,,,,,,,,,,353,15,,,,,,,,,,,,,18,21,15,15,,21,,,,347,21,,,20,',
'771,,,20,,,,,771,,,,,347,20,,,771,771,,,,,,,21,,,,,,,20,43,,,,,43,,21',
'21,,,,,,,,20,,,,,,,,296,,,,,,,,,,,,43,343,343,,,773,,773,,,773,773,',
',,,,773,,,,,,773,773,,,,43,,,773,773,,,,,,392,296,296,,,,,,,,,,,,,,',
',,,769,769,,20,,,770,,,,,,773,,770,,,,,,,20,,770,770,,,20,43,,,,,,,',
',43,,43,,,,20,,768,768,353,,,,,771,15,771,,,771,771,,,,,,771,,,,,,771',
'771,,,,,,,771,771,,,,,,,,,,,,15,,,15,,,,20,,,,,,,,21,,,,,353,,,347,15',
',771,,,,,43,347,,,,20,20,,,,,20,43,767,767,,,773,43,,15,,21,440,,21',
'773,15,,,773,,,440,440,43,,,440,440,,,,,,,21,,,,,,353,856,,20,,,,,,',
',770,,770,,,770,770,,,,21,773,770,443,,,,21,770,770,,,,443,443,,770',
'770,443,443,,,,769,,,20,,,,,769,,773,,,,,,,769,769,43,,,,43,,,771,343',
'43,,,,770,,,771,,,,771,,,,,,768,343,,,,,,,768,,,,,43,,,,768,768,,,,',
',,,,,43,43,,,,,,,,,771,,,,,,,,,,,,,15,,,,,15,,,,,,,,,,347,15,,,771,',
',,,,,347,,,,,,,,440,,,,,767,,,,,,,,767,,,,15,,21,,,767,767,21,,,,,770',
',,,,,21,,,770,,,,770,,,,,,,769,,769,,443,769,769,,,,,,769,,,,,,769,769',
',21,,,,,769,769,,,,,,,,,,770,,766,766,,,,,768,,768,,15,768,768,,,,,',
'768,,,,,,768,768,769,,15,,770,,768,768,15,,,,,,,,,,,,,,43,,15,,,,1109',
',343,,,,,,,21,,343,,,,,,768,,,,,,,,,,21,,,,,43,21,,43,,,,,,,767,,767',
',,767,767,21,,15,,1108,767,,43,,,,767,767,34,,,,,34,767,767,,,,,,,,',
',,15,15,,43,34,,15,,,,43,,,,34,34,34,,34,769,,,,,21,,,767,769,,,,769',
',,,,405,,,,,,,,,34,,,,15,34,34,21,21,34,,,,21,,,,,768,,,,,,,,,768,,',
'769,768,,,,,,,766,,,,,,,,766,,15,,,,,,405,766,766,21,34,,,,769,34,34',
'34,34,34,,34,,,,,,768,,,,,,,,,,,,,,,,343,,,,,,,,,,21,343,,,,,768,767',
',,,,,,,,767,,,,767,,,,,,,,43,,,,,43,,,,,,,,,,,43,,,,,,,34,34,34,34,34',
'34,34,,,,,,34,767,,,,,34,34,34,34,,,,,,,43,,,,,,,34,,,,,,,,,,767,,,',
',,,,,,,,,,,,,,,,766,,766,,,766,766,,,,,,766,,,,34,,766,766,,,,34,34',
',766,766,,,,,34,,,,,,,,,,,,43,,,,,,34,,,,34,,,,,34,,,43,,,766,,,43,',
',,,,,,,,,,,,,,43,,,,1104,34,,,,,,,,,,,,,,34,34,34,,,,,,,,,,,,,,,,,,',
'34,,,,,,,,,,,,,,,43,,,,,,,,,,,,,296,,,,,,,,,,,,,,,,43,43,,,,,43,,,,',
',,,,,,249,,,34,,,,766,,,317,317,317,,,,766,,,,766,,364,365,,367,368',
',370,,296,,,43,,,,,,,,,34,317,317,,,,,,,,34,,,,,,,,,,,,766,,,,,,,,,',
',,,43,,,,,,,,,,,,,,,,,,,766,,,,,,,,,,,,,,,,34,,,,,,,,,,34,,,,,,,,,,',
',,,,,,,,,,,,,,,,,34,,,34,,,,,,,34,,,,,,,,,,34,,,,34,,,,,,,,,,,,,,,,',
',,,,317,447,,,453,317,34,,,34,34,,,34,,,,,453,34,34,,,,34,34,,,,,,249',
',,,,,,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544',
'545,546,547,548,549,550,,,,,551,,,,,,,,,,,,,,,,,,,,,,,317,317,,,,,,',
',317,,,,,,,317,,317,,,317,317,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,604,,,,,34,,,,,,,,,,,,,,,,,,,,,,,34,,,,,34,34,,,,,,,,,,34,,,,,,,,',
',,,,,,,,,34,,,,,317,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,692,,,,,,,,',
',,,,,,,,,,,,,,,,,317,,,,,,,,,,,,,723,,34,,,,,,,,317,,453,453,453,,,',
',34,,,,,,,,,,,,34,,,,,,34,,,,,,34,,,,,,,365,,,,,,,,,34,317,,317,,317',
',,,,,,,,,,,,,,,317,,,,,,,,,,453,,,816,,817,,,,,,317,,,317,,,,,,,,,,34',
',,317,317,,,,,,,,,,317,,,,,,,,,,,,,,,34,34,,,,,34,,,,,,,,,,,,317,453',
'317,,,,874,,,317,317,453,453,,,,453,453,,,,,,317,,,,,,,,,34,,34,34,',
'317,,,,,,,,,,34,,,,,,,,,,,,,,692,723,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,317,,,,,,,,,317,,,317,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,317,,,,,,,,453,,,,,,,,',
',,,,1010,1011,,,,,,,,,,,,,,,,,,,,,,,,,,,,1033,1034,453,453,453,453,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1067,,,,,,,,,,,,,,,,,,,,,,,,,',
',,317,,,,,,,,,,,,,,,,,,,317,,,,,,,,,,,,,,,,,,,,,,,,,,453,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,317' ]
        racc_goto_table = arr = ::Array.new(4752, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'72,198,158,91,91,72,75,75,36,36,36,68,46,198,31,230,230,48,107,19,19',
'10,75,19,72,34,112,10,128,113,34,12,55,55,82,82,72,72,72,73,117,139',
'139,94,33,110,110,11,92,228,228,228,77,77,13,33,135,70,133,22,111,34',
'34,34,72,9,44,44,80,17,17,82,82,82,72,72,72,19,19,19,19,239,87,87,56',
'56,56,235,8,34,95,20,95,8,20,51,31,32,187,34,34,34,69,41,41,177,177',
'58,20,55,117,7,24,24,149,28,26,26,119,57,26,129,72,239,89,89,152,192',
'89,28,87,72,231,72,151,225,225,200,200,5,35,35,64,193,2,157,157,34,90',
'90,90,127,8,147,130,236,34,145,34,207,161,6,3,10,214,214,29,14,65,178',
'178,29,161,16,26,26,26,26,18,178,94,90,90,175,224,224,13,21,66,25,239',
'230,176,74,74,27,42,91,36,43,95,95,29,45,202,202,50,52,60,5,8,78,215',
'215,215,215,72,83,84,8,86,8,75,93,152,236,105,11,72,106,29,114,151,116',
'72,149,198,120,121,122,123,34,124,34,128,125,34,126,128,131,136,72,142',
'34,22,22,143,150,22,34,34,112,11,146,66,146,26,26,33,88,88,88,22,73',
'153,154,34,2,6,155,36,36,156,26,26,70,159,66,29,36,160,162,164,165,70',
'168,169,29,170,29,192,171,88,172,173,180,182,200,95,192,31,225,33,183',
'87,87,63,63,63,184,145,157,188,91,189,55,55,147,58,91,195,72,68,196',
'19,72,82,129,205,72,72,206,149,1,26,210,11,211,193,212,119,11,51,127',
'130,82,34,192,72,213,34,216,175,217,34,34,117,175,175,218,72,33,35,35',
'32,219,176,176,80,220,31,223,29,34,29,72,72,29,32,33,229,9,202,202,29',
'34,11,11,55,233,29,29,234,69,235,,,187,55,,34,34,,73,,,,29,31,8,33,90',
',75,117,66,230,111,31,90,,26,91,10,,,55,7,91,,,64,,,55,36,64,128,128',
'32,,119,26,13,88,88,215,231,215,,,139,,31,66,5,,65,33,77,228,228,65',
'228,228,,228,,,32,,55,55,230,36,230,17,,32,,91,,,133,36,,110,29,57,',
'70,29,66,57,,,29,40,,,66,32,66,56,79,75,66,94,239,56,,,,5,,72,72,91',
'79,95,92,,66,,146,,29,40,66,200,200,88,88,20,117,,225,,,200,88,29,29',
'20,20,200,157,66,20,20,68,174,174,91,36,41,231,177,73,68,89,32,,91,28',
'28,32,32,72,28,28,13,146,82,191,,72,24,75,63,,191,82,,,72,,63,75,200',
'94,91,36,34,,,,,56,91,,34,36,,,,72,,,72,34,,,,113,44,75,11,,,11,,75',
',,139,139,10,,,72,34,,135,34,231,91,36,128,128,,,,,,,,117,,,,,,75,66',
'34,198,72,,,140,75,,140,72,,117,110,228,228,228,228,,,90,,,,32,32,32',
',34,,,34,,146,,34,146,,,,,34,34,22,,77,34,34,,,,,,22,22,,12,,22,22,',
'90,17,,112,,,,,,107,,,,,,,139,200,72,29,,20,,110,,110,72,,,230,8,,87',
',158,72,72,8,,191,,46,28,,,146,48,228,191,,68,75,191,,174,,91,29,,91',
'29,68,174,10,,,,,,90,19,,,82,,,72,230,,,,29,,,82,,,72,79,,79,,,,,,191',
',,,,34,,,,,132,,29,40,,29,34,,72,29,,32,,72,,29,29,,,11,29,29,191,,72',
',,40,10,,66,88,26,34,,11,,,34,,,,,,,66,,,,34,,,,,,,,,10,72,79,26,,,',
',,34,,,11,90,,19,,,,,,22,,,,,34,,230,66,,230,,72,,72,,,72,72,88,66,',
',19,72,,,,40,,72,72,,,,140,,,72,72,,,31,87,,,,87,174,,,,,174,174,,,198',
',,55,72,,79,79,,174,,79,79,,,11,,,,,72,,72,230,66,66,66,132,72,34,132',
',132,11,26,,,,29,,66,,,29,72,82,,34,72,,,,59,34,29,11,174,59,,,,,,26',
'117,,,40,,34,,,29,34,59,,,,,,,,,,59,59,59,,59,29,,,,,,,,,,72,132,,132',
',132,,132,,,82,,,72,,,,59,,,,,59,59,132,34,59,,,72,72,19,19,,,72,,,34',
'140,11,,140,,,140,11,140,72,,144,,144,,34,34,,72,,,34,72,,,,,33,,,91',
'36,29,,82,,59,72,98,98,72,59,59,59,59,59,,59,,,29,11,,,,75,29,,,,,79',
'34,,,34,72,,,,,,29,,,,140,,140,75,140,,140,,72,,,,,26,26,,,,,11,,232',
'72,140,,,,,,79,79,79,79,34,40,,,,,,,,,,,,,,40,40,,29,,,59,59,59,59,59',
'59,59,,,,,,59,,,,,,59,59,59,59,,,,,29,29,85,30,,,29,,30,59,,,,,,,,,',
',,,,,,30,,,,40,,,,,,30,30,30,,30,30,30,,,,,,,,,29,,,,,59,,,,40,,,59',
'59,,79,,30,40,,,59,30,30,40,,30,30,30,30,,,141,141,141,,,,,59,,40,,59',
'29,,,,59,,98,232,,,232,,,232,98,232,,,,,,97,97,98,98,,,,,,144,30,,,59',
',30,30,30,30,30,,30,,,,,,59,59,59,,,,,,,40,,85,85,,40,40,,,,,,59,,,',
',,,,,144,,144,,144,232,,232,,232,,232,,,,,141,141,141,141,,141,,40,',
',,,232,,,,,,,,,,,,,,,,,,,30,30,30,30,30,30,30,,59,,,,30,141,141,141',
'141,,30,30,30,30,,,,141,,,,,,,,,,30,,85,,85,,,85,85,,,,59,,40,40,40',
',,,,,59,,40,98,,98,,,98,98,,,,,144,98,144,,,,,98,98,,30,,40,,,98,98',
'30,30,,,,,,,,30,,144,,,,,,,,,,,,,,,97,30,,59,,30,,,97,30,30,98,,59,',
',,97,97,,,,,,,,,144,30,144,,144,,38,,,,85,38,,30,59,,,59,,,40,,,144',
'59,,,30,30,30,,,,,59,,,,59,,,,38,38,38,,,,30,,,,,,,,,,,,,,40,,,59,,',
'59,59,38,85,59,,,,,,59,59,38,38,38,59,59,,,,,,,,,,,,,,,,,,,,,,,,,,,98',
'30,,,,,,,,98,,,,98,,,,38,,,,,,,,,38,,38,,,,,85,,85,,85,,,30,97,,97,',
',97,97,,,30,,,97,,,,98,,97,97,,,,,,,97,97,,,,,,85,,,85,,,,,,,,,,,,98',
'85,,,,,,,,,,,,,59,,,97,,,,30,38,,38,,,38,,30,,30,,,38,,,59,30,,38,38',
'59,59,,85,,,,,,,,59,85,85,,38,,30,,,30,,,,,,85,30,,59,,,,,,,,30,,,85',
'30,,,,,59,,,,,,,,,,,,,,,,,,,,,,30,,,30,30,,,30,,,,,,30,30,,,,30,30,',
',,,,,,38,,,,38,,,97,38,38,,,,,,59,97,,,,97,,,,,85,,38,,,,,59,,85,,,85',
',38,,,,,59,,,,,,59,,,,38,38,59,,,,,,,,97,,,,,,,,59,,,,,,,,,,,,,,,,,',
',,,,,,97,,,,,,,,85,,,30,,,,,23,,,,,23,30,,,,30,,,,,59,,,,,,,,,,,,,,',
',,,30,,,23,,30,30,,,,,59,59,,,,30,59,,,39,,,,,39,,,,,,23,,,30,,,,,,',
'23,109,109,,,,,,,,30,,,,,39,39,39,,,59,,59,59,,,,,,,,,,,,59,,,,,,85',
',39,,,,,23,,,,,39,39,39,,23,,23,85,38,,,59,,,,,38,,,,,30,,,,38,,,,,',
',,,,,,,30,,,,,,,,38,,39,38,30,,,104,104,,30,39,,39,,,30,,,,,,,,38,,',
',,,,,30,,,,30,,,,,,,23,,23,,,23,,,38,,,38,23,,,38,,,23,23,,38,38,,,',
'38,38,,,,,,,,23,,,,,,,,,30,,,,,,,,,39,,39,,30,39,,,,,,,39,,,,,,39,39',
'30,30,,,109,,30,,,,,,109,,,39,,,,,,109,109,,103,103,,,,,,,,,,,,,,,,',
'23,,,,23,30,,,30,23,30,30,,,,,,,,,,,,30,,,,38,,,,,,,,,,,38,23,,,,,,',
',,,,,,30,39,23,23,,39,,,,39,39,,,38,,104,,,38,,,,,104,,,,,39,38,,,104',
'104,,,,,,,39,,,,,,,38,71,,,,,71,,39,39,,,,,,,,38,,,,,,,,71,,,,,,,,,',
',,71,71,71,,,109,,109,,,109,109,,,,,,109,,,,,,109,109,,,,71,,,109,109',
',,,,,71,71,71,,,,,,,,,,,,,,,,,,102,102,,38,,,103,,,,,,109,,103,,,,,',
',38,,103,103,,,38,71,,,,,,,,,71,,71,,,,38,,101,101,38,,,,,104,23,104',
',,104,104,,,,,,104,,,,,,104,104,,,,,,,104,104,,,,,,,,,,,,23,,,23,,,',
'38,,,,,,,,39,,,,,38,,,39,23,,104,,,,,71,39,,,,38,38,,,,,38,71,100,100',
',,109,71,,23,,39,23,,39,109,23,,,109,,,23,23,71,,,23,23,,,,,,,39,,,',
',,38,39,,38,,,,,,,,103,,103,,,103,103,,,,39,109,103,39,,,,39,103,103',
',,,39,39,,103,103,39,39,,,,102,,,38,,,,,102,,109,,,,,,,102,102,71,,',
',71,,,104,71,71,,,,103,,,104,,,,104,,,,,,101,71,,,,,,,101,,,,,71,,,',
'101,101,,,,,,,,,,71,71,,,,,,,,,104,,,,,,,,,,,,,23,,,,,23,,,,,,,,,,39',
'23,,,104,,,,,,,39,,,,,,,,23,,,,,100,,,,,,,,100,,,,23,,39,,,100,100,39',
',,,,103,,,,,,39,,,103,,,,103,,,,,,,102,,102,,39,102,102,,,,,,102,,,',
',,102,102,,39,,,,,102,102,,,,,,,,,,103,,99,99,,,,,101,,101,,23,101,101',
',,,,,101,,,,,,101,101,102,,23,,103,,101,101,23,,,,,,,,,,,,,,71,,23,',
',,23,,71,,,,,,,39,,71,,,,,,101,,,,,,,,,,39,,,,,71,39,,71,,,,,,,100,',
'100,,,100,100,39,,23,,39,100,,71,,,,100,100,62,,,,,62,100,100,,,,,,',
',,,,23,23,,71,62,,23,,,,71,,,,62,62,62,,62,102,,,,,39,,,100,102,,,,102',
',,,,39,,,,,,,,,62,,,,23,62,62,39,39,62,,,,39,,,,,101,,,,,,,,,101,,,102',
'101,,,,,,,99,,,,,,,,99,,23,,,,,,39,99,99,39,62,,,,102,62,62,62,62,62',
',62,,,,,,101,,,,,,,,,,,,,,,,71,,,,,,,,,,39,71,,,,,101,100,,,,,,,,,100',
',,,100,,,,,,,,71,,,,,71,,,,,,,,,,,71,,,,,,,62,62,62,62,62,62,62,,,,',
',62,100,,,,,62,62,62,62,,,,,,,71,,,,,,,62,,,,,,,,,,100,,,,,,,,,,,,,',
',,,,,,99,,99,,,99,99,,,,,,99,,,,62,,99,99,,,,62,62,,99,99,,,,,62,,,',
',,,,,,,,71,,,,,,62,,,,62,,,,,62,,,71,,,99,,,71,,,,,,,,,,,,,,,,71,,,',
'71,62,,,,,,,,,,,,,,62,62,62,,,,,,,,,,,,,,,,,,,62,,,,,,,,,,,,,,,71,,',
',,,,,,,,,,71,,,,,,,,,,,,,,,,71,71,,,,,71,,,,,,,,,,,37,,,62,,,,99,,,37',
'37,37,,,,99,,,,99,,37,37,,37,37,,37,,71,,,71,,,,,,,,,62,37,37,,,,,,',
',62,,,,,,,,,,,,99,,,,,,,,,,,,,71,,,,,,,,,,,,,,,,,,,99,,,,,,,,,,,,,,',
',62,,,,,,,,,,62,,,,,,,,,,,,,,,,,,,,,,,,,,,,62,,,62,,,,,,,62,,,,,,,,',
',62,,,,62,,,,,,,,,,,,,,,,,,,,,37,37,,,37,37,62,,,62,62,,,62,,,,,37,62',
'62,,,,62,62,,,,,,37,,,,,,,37,37,37,37,37,37,37,37,37,37,37,37,37,37',
'37,37,37,37,37,37,37,37,,,,,37,,,,,,,,,,,,,,,,,,,,,,,37,37,,,,,,,,37',
',,,,,,37,,37,,,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,',
'62,,,,,,,,,,,,,,,,,,,,,,,62,,,,,62,62,,,,,,,,,,62,,,,,,,,,,,,,,,,,,62',
',,,,37,,,,,,,,,,,,62,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,',
',,,37,,,,,,,,,,,,,37,,62,,,,,,,,37,,37,37,37,,,,,62,,,,,,,,,,,,62,,',
',,,62,,,,,,62,,,,,,,37,,,,,,,,,62,37,,37,,37,,,,,,,,,,,,,,,,37,,,,,',
',,,,37,,,37,,37,,,,,,37,,,37,,,,,,,,,,62,,,37,37,,,,,,,,,,37,,,,,,,',
',,,,,,,62,62,,,,,62,,,,,,,,,,,,37,37,37,,,,37,,,37,37,37,37,,,,37,37',
',,,,,37,,,,,,,,,62,,62,62,,37,,,,,,,,,,62,,,,,,,,,,,,,,37,37,,,,,,,',
',,,,,,62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,37,,,37',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37',
',,,,,,,37,,,,,,,,,,,,,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,37,37,37',
'37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,',
',,,,37,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37' ]
        racc_goto_check = arr = ::Array.new(4752, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   343,   142,   162,   nil,   134,   154,   106,    86,    56,
  -209,     9,  -441,  -639,  -723,   nil,  -407,    59,   167,   -52,
  -129,   111,    35,  2068,  -107,   -30,    45,    59,  -108,   164,
  1262,  -210,  -357,    26,    23,   121,   -26,  3589,  1625,  2121,
   484,  -424,   -59,   -57,    -7,  -419,   -14,   nil,    -9,   nil,
   180,    66,  -345,   nil,   nil,  -193,    53,  -186,  -458,  1017,
  -350,   nil,  3145,   282,   104,   130,   -51,   nil,   -28,    62,
  -303,  2499,    -2,  -363,   116,    -4,   nil,    42,  -220,   291,
    20,   nil,    -5,   166,  -153,  1195,   153,    63,   235,  -252,
   114,   -28,  -258,  -332,  -277,  -480,   nil,   849,   616,  2504,
  2203,  2113,  2068,  1856,  1723,   200,   161,   -51,   nil,  1618,
  -339,  -763,  -364,  -596,   155,   nil,  -173,    35,   nil,    98,
   172,  -135,   173,  -366,  -397,  -603,  -161,  -762,  -466,  -373,
  -760,  -664,  -141,  -639,   nil,  -437,  -722,   nil,   nil,  -436,
   -27,   269,  -822,  -716,   413,  -815,  -438,  -638,   nil,  -737,
  -842,  -965,  -973,  -135,  -575,   194,  -361,   -88,   -25,  -714,
  -711,  -394,    -9,   nil,   -18,   -18,   nil,   nil,  -488,  -796,
  -691,  -919,  -530,  -844,    34,  -562,  -553,  -422,  -760,   nil,
  -620,   nil,  -620,  -431,  -425,   nil,   nil,  -648,  -424,  -423,
   nil,  -352,  -816,  -781,   nil,  -615,  -612,   nil,   -89,   nil,
  -390,   nil,  -558,   nil,   nil,  -437,  -353,  -735,   nil,   nil,
   257,   254,   255,   264,  -250,  -200,   265,   266,   271,  -274,
  -271,   nil,   nil,  -259,  -168,   -98,   nil,   nil,  -432,  -311,
  -218,  -569,   230,  -298,  -730,  -616,  -983,   nil,   nil,  -491 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,     6,   391,   334,   nil,
   nil,   472,   nil,   984,   nil,   331,   332,   nil,   nil,   nil,
    13,    14,    22,   247,   nil,   nil,    16,   nil,   441,   248,
   363,   nil,   nil,   637,   251,   nil,    27,    25,   252,   246,
   517,   nil,   nil,   nil,   nil,   nil,   nil,   386,   143,    26,
   nil,   nil,   nil,    28,    29,   812,   nil,   nil,   nil,   351,
   nil,    30,   348,   455,    37,   nil,   nil,    39,    42,    41,
   nil,   243,   244,   403,   nil,   463,   142,    87,   nil,   446,
   103,    51,    54,   283,   nil,   323,   nil,   891,   456,   nil,
   457,   468,   480,   686,   569,   321,   307,    55,    56,    57,
    58,    59,    60,    61,    62,    63,   nil,   308,    69,    70,
   nil,   nil,   nil,   nil,   nil,    77,   nil,   619,    78,   230,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   711,   492,   nil,
   712,   713,   478,   474,   475,   nil,  1179,   707,  1071,   nil,
   479,   nil,   nil,   nil,   481,   nil,   483,   nil,   971,   nil,
   nil,   nil,   490,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   467,   nil,   nil,   791,   783,   nil,   nil,
   nil,   nil,   nil,   nil,  1051,   nil,   736,   937,   738,   739,
   743,   740,   741,   nil,   nil,   742,   744,   nil,   nil,   nil,
   936,   938,   nil,   748,   750,   751,   752,   753,   nil,   757,
   501,   758,   759,   760,   761,   nil,   nil,   nil,    86,    88,
    89,   nil,   nil,   nil,   nil,   647,   nil,   nil,   nil,   nil,
   nil,    99,   100,   nil,   231,   901,   234,   477,   nil,   482,
   909,   495,   497,   498,  1082,   502,  1083,   505,   508,   326 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  0, 151, :_reduce_4,
  1, 151, :_reduce_5,
  3, 151, :_reduce_6,
  2, 151, :_reduce_7,
  1, 153, :_reduce_none,
  2, 153, :_reduce_9,
  3, 156, :_reduce_10,
  4, 157, :_reduce_11,
  2, 158, :_reduce_12,
  0, 162, :_reduce_13,
  1, 162, :_reduce_14,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  1, 163, :_reduce_none,
  2, 163, :_reduce_18,
  0, 174, :_reduce_19,
  4, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  3, 155, :_reduce_23,
  2, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  3, 155, :_reduce_29,
  4, 155, :_reduce_30,
  1, 155, :_reduce_none,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  5, 155, :_reduce_34,
  3, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 167, :_reduce_37,
  3, 167, :_reduce_38,
  6, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  5, 167, :_reduce_42,
  5, 167, :_reduce_43,
  4, 167, :_reduce_44,
  6, 167, :_reduce_45,
  4, 167, :_reduce_46,
  6, 167, :_reduce_47,
  3, 167, :_reduce_48,
  1, 175, :_reduce_none,
  3, 175, :_reduce_50,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_53,
  3, 173, :_reduce_54,
  3, 173, :_reduce_55,
  2, 173, :_reduce_56,
  0, 189, :_reduce_57,
  4, 173, :_reduce_58,
  0, 190, :_reduce_59,
  4, 173, :_reduce_60,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 194, :_reduce_63,
  3, 191, :_reduce_64,
  1, 193, :_reduce_65,
  2, 181, :_reduce_66,
  0, 199, :_reduce_67,
  5, 185, :_reduce_68,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 200, :_reduce_none,
  4, 200, :_reduce_72,
  0, 207, :_reduce_73,
  4, 204, :_reduce_74,
  1, 206, :_reduce_none,
  2, 183, :_reduce_76,
  3, 183, :_reduce_77,
  4, 183, :_reduce_78,
  5, 183, :_reduce_79,
  4, 183, :_reduce_80,
  5, 183, :_reduce_81,
  2, 183, :_reduce_82,
  2, 183, :_reduce_83,
  2, 183, :_reduce_84,
  2, 183, :_reduce_85,
  2, 183, :_reduce_86,
  1, 168, :_reduce_87,
  3, 168, :_reduce_88,
  1, 212, :_reduce_89,
  3, 212, :_reduce_90,
  1, 211, :_reduce_none,
  2, 211, :_reduce_92,
  3, 211, :_reduce_93,
  5, 211, :_reduce_94,
  2, 211, :_reduce_95,
  4, 211, :_reduce_96,
  2, 211, :_reduce_97,
  4, 211, :_reduce_98,
  1, 211, :_reduce_99,
  3, 211, :_reduce_100,
  1, 215, :_reduce_none,
  3, 215, :_reduce_102,
  2, 214, :_reduce_103,
  3, 214, :_reduce_104,
  1, 217, :_reduce_105,
  3, 217, :_reduce_106,
  1, 216, :_reduce_107,
  1, 216, :_reduce_108,
  4, 216, :_reduce_109,
  3, 216, :_reduce_110,
  3, 216, :_reduce_111,
  3, 216, :_reduce_112,
  3, 216, :_reduce_113,
  2, 216, :_reduce_114,
  1, 216, :_reduce_115,
  1, 170, :_reduce_116,
  1, 170, :_reduce_117,
  4, 170, :_reduce_118,
  3, 170, :_reduce_119,
  3, 170, :_reduce_120,
  3, 170, :_reduce_121,
  3, 170, :_reduce_122,
  2, 170, :_reduce_123,
  1, 170, :_reduce_124,
  1, 220, :_reduce_125,
  1, 220, :_reduce_none,
  2, 221, :_reduce_127,
  1, 221, :_reduce_128,
  3, 221, :_reduce_129,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 164, :_reduce_135,
  1, 164, :_reduce_none,
  1, 165, :_reduce_137,
  0, 225, :_reduce_138,
  4, 165, :_reduce_139,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  3, 184, :_reduce_211,
  3, 184, :_reduce_212,
  6, 184, :_reduce_213,
  5, 184, :_reduce_214,
  5, 184, :_reduce_215,
  5, 184, :_reduce_216,
  5, 184, :_reduce_217,
  4, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 184, :_reduce_221,
  2, 184, :_reduce_222,
  2, 184, :_reduce_223,
  2, 184, :_reduce_224,
  2, 184, :_reduce_225,
  3, 184, :_reduce_226,
  3, 184, :_reduce_227,
  3, 184, :_reduce_228,
  3, 184, :_reduce_229,
  3, 184, :_reduce_230,
  3, 184, :_reduce_231,
  4, 184, :_reduce_232,
  2, 184, :_reduce_233,
  2, 184, :_reduce_234,
  3, 184, :_reduce_235,
  3, 184, :_reduce_236,
  3, 184, :_reduce_237,
  3, 184, :_reduce_238,
  1, 184, :_reduce_none,
  3, 184, :_reduce_240,
  3, 184, :_reduce_241,
  3, 184, :_reduce_242,
  3, 184, :_reduce_243,
  3, 184, :_reduce_244,
  2, 184, :_reduce_245,
  2, 184, :_reduce_246,
  3, 184, :_reduce_247,
  3, 184, :_reduce_248,
  3, 184, :_reduce_249,
  3, 184, :_reduce_250,
  0, 231, :_reduce_251,
  4, 184, :_reduce_252,
  6, 184, :_reduce_253,
  4, 184, :_reduce_254,
  6, 184, :_reduce_255,
  4, 184, :_reduce_256,
  6, 184, :_reduce_257,
  1, 184, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  3, 228, :_reduce_263,
  3, 228, :_reduce_264,
  1, 232, :_reduce_none,
  1, 233, :_reduce_none,
  2, 233, :_reduce_none,
  4, 233, :_reduce_268,
  2, 233, :_reduce_269,
  1, 226, :_reduce_none,
  3, 226, :_reduce_271,
  3, 238, :_reduce_272,
  5, 238, :_reduce_273,
  3, 238, :_reduce_274,
  0, 240, :_reduce_275,
  1, 240, :_reduce_none,
  0, 178, :_reduce_277,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_280,
  2, 178, :_reduce_281,
  1, 210, :_reduce_282,
  2, 210, :_reduce_283,
  2, 210, :_reduce_284,
  4, 210, :_reduce_285,
  1, 210, :_reduce_286,
  0, 243, :_reduce_287,
  2, 203, :_reduce_288,
  2, 242, :_reduce_289,
  1, 242, :_reduce_290,
  2, 241, :_reduce_291,
  0, 241, :_reduce_292,
  1, 235, :_reduce_293,
  2, 235, :_reduce_294,
  3, 235, :_reduce_295,
  4, 235, :_reduce_296,
  1, 172, :_reduce_297,
  1, 172, :_reduce_none,
  3, 171, :_reduce_299,
  4, 171, :_reduce_300,
  2, 171, :_reduce_301,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_312,
  0, 267, :_reduce_313,
  4, 229, :_reduce_314,
  0, 268, :_reduce_315,
  4, 229, :_reduce_316,
  0, 269, :_reduce_317,
  4, 229, :_reduce_318,
  3, 229, :_reduce_319,
  3, 229, :_reduce_320,
  2, 229, :_reduce_321,
  3, 229, :_reduce_322,
  3, 229, :_reduce_323,
  1, 229, :_reduce_324,
  4, 229, :_reduce_325,
  3, 229, :_reduce_326,
  1, 229, :_reduce_327,
  0, 270, :_reduce_328,
  6, 229, :_reduce_329,
  4, 229, :_reduce_330,
  3, 229, :_reduce_331,
  2, 229, :_reduce_332,
  1, 229, :_reduce_none,
  2, 229, :_reduce_334,
  1, 229, :_reduce_none,
  6, 229, :_reduce_336,
  6, 229, :_reduce_337,
  4, 229, :_reduce_338,
  4, 229, :_reduce_339,
  5, 229, :_reduce_340,
  4, 229, :_reduce_341,
  5, 229, :_reduce_342,
  6, 229, :_reduce_343,
  0, 271, :_reduce_344,
  6, 229, :_reduce_345,
  0, 272, :_reduce_346,
  7, 229, :_reduce_347,
  0, 273, :_reduce_348,
  5, 229, :_reduce_349,
  4, 229, :_reduce_350,
  4, 229, :_reduce_351,
  1, 229, :_reduce_352,
  1, 229, :_reduce_353,
  1, 229, :_reduce_354,
  1, 229, :_reduce_355,
  1, 177, :_reduce_none,
  1, 262, :_reduce_357,
  1, 265, :_reduce_358,
  1, 196, :_reduce_359,
  1, 209, :_reduce_360,
  1, 257, :_reduce_none,
  1, 257, :_reduce_none,
  2, 257, :_reduce_363,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 258, :_reduce_none,
  5, 258, :_reduce_367,
  1, 160, :_reduce_none,
  2, 160, :_reduce_369,
  1, 261, :_reduce_none,
  1, 261, :_reduce_none,
  1, 274, :_reduce_372,
  3, 274, :_reduce_373,
  1, 277, :_reduce_374,
  3, 277, :_reduce_375,
  1, 276, :_reduce_none,
  3, 276, :_reduce_377,
  5, 276, :_reduce_378,
  1, 276, :_reduce_379,
  3, 276, :_reduce_380,
  2, 278, :_reduce_381,
  1, 278, :_reduce_382,
  1, 279, :_reduce_none,
  1, 279, :_reduce_none,
  0, 284, :_reduce_385,
  2, 282, :_reduce_386,
  4, 283, :_reduce_387,
  2, 283, :_reduce_388,
  2, 283, :_reduce_389,
  1, 283, :_reduce_390,
  2, 288, :_reduce_391,
  0, 288, :_reduce_392,
  1, 289, :_reduce_none,
  6, 290, :_reduce_394,
  8, 290, :_reduce_395,
  4, 290, :_reduce_396,
  6, 290, :_reduce_397,
  4, 290, :_reduce_398,
  2, 290, :_reduce_none,
  6, 290, :_reduce_400,
  2, 290, :_reduce_401,
  4, 290, :_reduce_402,
  6, 290, :_reduce_403,
  2, 290, :_reduce_404,
  4, 290, :_reduce_405,
  2, 290, :_reduce_406,
  4, 290, :_reduce_407,
  1, 290, :_reduce_none,
  0, 294, :_reduce_409,
  1, 294, :_reduce_410,
  3, 295, :_reduce_411,
  4, 295, :_reduce_412,
  1, 296, :_reduce_413,
  4, 296, :_reduce_414,
  1, 297, :_reduce_415,
  3, 297, :_reduce_416,
  1, 298, :_reduce_417,
  1, 298, :_reduce_none,
  0, 302, :_reduce_419,
  0, 303, :_reduce_420,
  5, 256, :_reduce_421,
  4, 300, :_reduce_422,
  1, 300, :_reduce_423,
  0, 306, :_reduce_424,
  4, 301, :_reduce_425,
  0, 307, :_reduce_426,
  4, 301, :_reduce_427,
  0, 309, :_reduce_428,
  4, 305, :_reduce_429,
  2, 201, :_reduce_430,
  4, 201, :_reduce_431,
  5, 201, :_reduce_432,
  5, 201, :_reduce_433,
  2, 255, :_reduce_434,
  4, 255, :_reduce_435,
  4, 255, :_reduce_436,
  3, 255, :_reduce_437,
  3, 255, :_reduce_438,
  3, 255, :_reduce_439,
  2, 255, :_reduce_440,
  1, 255, :_reduce_441,
  4, 255, :_reduce_442,
  0, 311, :_reduce_443,
  4, 254, :_reduce_444,
  0, 312, :_reduce_445,
  4, 254, :_reduce_446,
  0, 313, :_reduce_447,
  3, 205, :_reduce_448,
  0, 314, :_reduce_449,
  0, 315, :_reduce_450,
  4, 308, :_reduce_451,
  5, 259, :_reduce_452,
  1, 316, :_reduce_453,
  1, 316, :_reduce_none,
  0, 319, :_reduce_455,
  0, 320, :_reduce_456,
  7, 260, :_reduce_457,
  1, 318, :_reduce_458,
  1, 318, :_reduce_none,
  1, 317, :_reduce_460,
  3, 317, :_reduce_461,
  3, 317, :_reduce_462,
  1, 188, :_reduce_none,
  2, 188, :_reduce_464,
  3, 188, :_reduce_465,
  1, 188, :_reduce_466,
  1, 188, :_reduce_467,
  1, 188, :_reduce_468,
  1, 321, :_reduce_none,
  3, 326, :_reduce_470,
  1, 326, :_reduce_none,
  3, 328, :_reduce_472,
  1, 328, :_reduce_none,
  1, 330, :_reduce_474,
  1, 331, :_reduce_475,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  4, 329, :_reduce_478,
  4, 329, :_reduce_479,
  4, 329, :_reduce_480,
  3, 329, :_reduce_481,
  4, 329, :_reduce_482,
  4, 329, :_reduce_483,
  4, 329, :_reduce_484,
  3, 329, :_reduce_485,
  3, 329, :_reduce_486,
  3, 329, :_reduce_487,
  2, 329, :_reduce_488,
  0, 335, :_reduce_489,
  4, 329, :_reduce_490,
  2, 329, :_reduce_491,
  0, 336, :_reduce_492,
  4, 329, :_reduce_493,
  1, 322, :_reduce_494,
  1, 322, :_reduce_495,
  2, 322, :_reduce_496,
  3, 322, :_reduce_497,
  5, 322, :_reduce_498,
  2, 322, :_reduce_499,
  4, 322, :_reduce_500,
  1, 322, :_reduce_none,
  2, 337, :_reduce_502,
  3, 337, :_reduce_503,
  1, 324, :_reduce_504,
  3, 324, :_reduce_505,
  5, 323, :_reduce_506,
  2, 340, :_reduce_507,
  1, 340, :_reduce_508,
  1, 339, :_reduce_509,
  3, 339, :_reduce_510,
  1, 338, :_reduce_none,
  3, 325, :_reduce_512,
  1, 325, :_reduce_513,
  2, 325, :_reduce_514,
  1, 325, :_reduce_515,
  1, 341, :_reduce_516,
  3, 341, :_reduce_517,
  2, 343, :_reduce_518,
  1, 343, :_reduce_519,
  1, 344, :_reduce_520,
  3, 344, :_reduce_521,
  2, 346, :_reduce_522,
  1, 346, :_reduce_523,
  2, 348, :_reduce_524,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  1, 332, :_reduce_none,
  3, 332, :_reduce_528,
  3, 332, :_reduce_529,
  2, 332, :_reduce_530,
  2, 332, :_reduce_531,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 332, :_reduce_535,
  2, 332, :_reduce_536,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_none,
  1, 349, :_reduce_545,
  1, 349, :_reduce_none,
  1, 327, :_reduce_547,
  2, 350, :_reduce_548,
  2, 350, :_reduce_549,
  4, 351, :_reduce_550,
  2, 333, :_reduce_551,
  3, 333, :_reduce_552,
  1, 333, :_reduce_553,
  6, 159, :_reduce_554,
  0, 159, :_reduce_555,
  1, 353, :_reduce_556,
  1, 353, :_reduce_none,
  1, 353, :_reduce_none,
  2, 354, :_reduce_559,
  1, 354, :_reduce_none,
  2, 161, :_reduce_561,
  1, 161, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 245, :_reduce_565,
  1, 356, :_reduce_566,
  2, 356, :_reduce_567,
  3, 357, :_reduce_568,
  1, 357, :_reduce_569,
  1, 357, :_reduce_570,
  3, 246, :_reduce_571,
  4, 247, :_reduce_572,
  3, 248, :_reduce_573,
  0, 360, :_reduce_574,
  3, 360, :_reduce_575,
  1, 361, :_reduce_576,
  2, 361, :_reduce_577,
  3, 250, :_reduce_578,
  0, 363, :_reduce_579,
  3, 363, :_reduce_580,
  3, 249, :_reduce_581,
  3, 251, :_reduce_582,
  0, 364, :_reduce_583,
  3, 364, :_reduce_584,
  0, 365, :_reduce_585,
  3, 365, :_reduce_586,
  0, 345, :_reduce_587,
  2, 345, :_reduce_588,
  0, 358, :_reduce_589,
  2, 358, :_reduce_590,
  0, 359, :_reduce_591,
  2, 359, :_reduce_592,
  1, 362, :_reduce_593,
  2, 362, :_reduce_594,
  0, 367, :_reduce_595,
  4, 362, :_reduce_596,
  1, 366, :_reduce_597,
  1, 366, :_reduce_598,
  1, 366, :_reduce_599,
  1, 366, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 368, :_reduce_603,
  3, 369, :_reduce_604,
  1, 355, :_reduce_605,
  2, 355, :_reduce_606,
  1, 227, :_reduce_607,
  1, 227, :_reduce_608,
  1, 227, :_reduce_609,
  1, 227, :_reduce_610,
  1, 352, :_reduce_611,
  1, 352, :_reduce_612,
  1, 352, :_reduce_613,
  1, 218, :_reduce_614,
  1, 218, :_reduce_615,
  1, 218, :_reduce_616,
  1, 218, :_reduce_617,
  1, 218, :_reduce_618,
  1, 219, :_reduce_619,
  1, 219, :_reduce_620,
  1, 219, :_reduce_621,
  1, 219, :_reduce_622,
  1, 219, :_reduce_623,
  1, 219, :_reduce_624,
  1, 219, :_reduce_625,
  1, 252, :_reduce_626,
  1, 252, :_reduce_627,
  1, 176, :_reduce_628,
  1, 176, :_reduce_629,
  1, 186, :_reduce_630,
  1, 186, :_reduce_631,
  0, 370, :_reduce_632,
  4, 263, :_reduce_633,
  0, 263, :_reduce_634,
  1, 182, :_reduce_none,
  1, 182, :_reduce_636,
  3, 371, :_reduce_637,
  1, 266, :_reduce_none,
  0, 373, :_reduce_639,
  3, 266, :_reduce_640,
  4, 372, :_reduce_641,
  2, 372, :_reduce_642,
  2, 372, :_reduce_643,
  1, 372, :_reduce_644,
  1, 372, :_reduce_645,
  2, 375, :_reduce_646,
  0, 375, :_reduce_647,
  6, 304, :_reduce_648,
  8, 304, :_reduce_649,
  4, 304, :_reduce_650,
  6, 304, :_reduce_651,
  4, 304, :_reduce_652,
  6, 304, :_reduce_653,
  2, 304, :_reduce_654,
  4, 304, :_reduce_655,
  6, 304, :_reduce_656,
  2, 304, :_reduce_657,
  4, 304, :_reduce_658,
  2, 304, :_reduce_659,
  4, 304, :_reduce_660,
  1, 304, :_reduce_661,
  0, 304, :_reduce_662,
  1, 239, :_reduce_663,
  1, 299, :_reduce_664,
  1, 299, :_reduce_665,
  1, 299, :_reduce_666,
  1, 299, :_reduce_667,
  1, 275, :_reduce_none,
  1, 275, :_reduce_669,
  1, 377, :_reduce_670,
  1, 378, :_reduce_671,
  3, 378, :_reduce_672,
  1, 291, :_reduce_673,
  3, 291, :_reduce_674,
  1, 379, :_reduce_675,
  2, 380, :_reduce_676,
  1, 380, :_reduce_677,
  2, 381, :_reduce_678,
  1, 381, :_reduce_679,
  1, 285, :_reduce_680,
  3, 285, :_reduce_681,
  1, 374, :_reduce_682,
  3, 374, :_reduce_683,
  1, 347, :_reduce_none,
  1, 347, :_reduce_none,
  2, 281, :_reduce_686,
  2, 280, :_reduce_687,
  1, 280, :_reduce_688,
  3, 382, :_reduce_689,
  3, 383, :_reduce_690,
  1, 292, :_reduce_691,
  3, 292, :_reduce_692,
  1, 376, :_reduce_693,
  3, 376, :_reduce_694,
  1, 384, :_reduce_none,
  1, 384, :_reduce_none,
  2, 293, :_reduce_697,
  1, 293, :_reduce_698,
  1, 385, :_reduce_none,
  1, 385, :_reduce_none,
  2, 287, :_reduce_701,
  1, 287, :_reduce_702,
  2, 286, :_reduce_703,
  0, 286, :_reduce_704,
  1, 197, :_reduce_none,
  3, 197, :_reduce_706,
  0, 253, :_reduce_707,
  2, 253, :_reduce_none,
  1, 237, :_reduce_709,
  3, 237, :_reduce_710,
  3, 386, :_reduce_711,
  2, 386, :_reduce_712,
  1, 386, :_reduce_713,
  4, 386, :_reduce_714,
  2, 386, :_reduce_715,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 180, :_reduce_728,
  1, 180, :_reduce_729,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  2, 213, :_reduce_734,
  2, 179, :_reduce_735,
  2, 334, :_reduce_736,
  0, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 264, :_reduce_740,
  1, 264, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 234, :_reduce_744 ]

racc_reduce_n = 745

racc_shift_n = 1238

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@2",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "defn_head",
  "f_opt_paren_args",
  "command",
  "arg",
  "defs_head",
  "backref",
  "opt_nl",
  "p_top_expr_body",
  "@3",
  "@4",
  "expr_value_do",
  "do",
  "def_name",
  "@5",
  "fname",
  "k_def",
  "singleton",
  "dot_or_colon",
  "@6",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@7",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "op",
  "reswords",
  "symbol",
  "@8",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "@9",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@10",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "f_arglist",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "f_any_kwrest",
  "f_kwrest",
  "f_no_kwarg",
  "f_eq",
  "block_args_tail",
  "@18",
  "f_block_kwarg",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "excessed_comma",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@19",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "@22",
  "do_body",
  "@23",
  "operation3",
  "@24",
  "@25",
  "@26",
  "@27",
  "@28",
  "cases",
  "p_top_expr",
  "p_cases",
  "@29",
  "@30",
  "p_expr",
  "p_args",
  "p_find",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@31",
  "@32",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_rest",
  "p_kwarg",
  "p_any_kwrest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "p_kwrest",
  "kwrest_mark",
  "p_kwnorest",
  "p_primitive",
  "p_var_ref",
  "p_expr_ref",
  "nonlocal_var",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@33",
  "ssym",
  "dsym",
  "@34",
  "f_paren_args",
  "args_tail",
  "@35",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      @current_arg_stack.push(nil)
                      @max_numparam_stack.push(static: true)
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]

                      @current_arg_stack.pop
                      @max_numparam_stack.pop
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = val
                    
    result
end

def _reduce_11(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_13(val, _values, result)
                      result = []
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_19(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_23(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_34(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_44(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_45(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_46(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_47(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_48(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_55(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_57(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_58(val, _values, result)
                      @pattern_variables.pop
                      @context.in_kwarg = val[2]
                      result = @builder.match_pattern(val[0], val[1], val[3])
                    
    result
end

def _reduce_59(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_60(val, _values, result)
                      @pattern_variables.pop
                      @context.in_kwarg = val[2]
                      result = @builder.match_pattern_p(val[0], val[1], val[3])
                    
    result
end

# reduce 61 omitted

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_64(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

def _reduce_65(val, _values, result)
                      local_push
                      @current_arg_stack.push(nil)

                      result = [ val[0], @context.dup ]
                      @context.in_def = true
                    
    result
end

def _reduce_66(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_67(val, _values, result)
                      @lexer.state = :expr_fname
                      @context.in_argdef = true
                    
    result
end

def _reduce_68(val, _values, result)
                      result = [ val[0], val[1], val[2], val[4] ]
                    
    result
end

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_74(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

# reduce 75 omitted

def _reduce_76(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_79(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 91 omitted

def _reduce_92(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 101 omitted

def _reduce_102(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_104(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_106(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_110(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_112(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_115(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_116(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_117(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_120(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_121(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_122(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_123(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_124(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_125(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_128(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_129(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

def _reduce_135(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 136 omitted

def _reduce_137(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_138(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_139(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

def _reduce_211(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_217(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_218(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_243(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_244(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_246(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_247(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_250(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_251(val, _values, result)
                      @context.in_defined = true
                    
    result
end

def _reduce_252(val, _values, result)
                      @context.in_defined = false
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[3] ], nil)
                    
    result
end

def _reduce_253(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

def _reduce_254(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_255(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_method(def_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_256(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_257(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      endless_method_name(name_t)

                      rescue_body = @builder.rescue_body(val[4],
                                        nil, nil, nil,
                                        nil, val[5])

                      method_body = @builder.begin_body(val[3], [ rescue_body ])

                      result = @builder.def_endless_singleton(def_t, recv, dot_t, name_t,
                                 val[1], val[2], method_body)

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 270 omitted

def _reduce_271(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val
                    
    result
end

def _reduce_273(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[3]
                      end

                      result = [val[0], [*val[1], @builder.forwarded_args(val[3])], val[4]]
                    
    result
end

def _reduce_274(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_275(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 276 omitted

def _reduce_277(val, _values, result)
                      result = []
                    
    result
end

# reduce 278 omitted

# reduce 279 omitted

def _reduce_280(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_281(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_282(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_285(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_286(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_287(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_288(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_290(val, _values, result)
                      if !@static_env.declared_anonymous_blockarg?
                        diagnostic :error, :no_anonymous_blockarg, nil, val[0]
                      end

                      result = @builder.block_pass(val[0], nil)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_292(val, _values, result)
                      result = []
                    
    result
end

def _reduce_293(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 298 omitted

def _reduce_299(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_300(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

def _reduce_312(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_313(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_314(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_316(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_317(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_326(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_328(val, _values, result)
                      @context.in_defined = true
                    
    result
end

def _reduce_329(val, _values, result)
                      @context.in_defined = false
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[4] ], val[5])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_332(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 333 omitted

def _reduce_334(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_337(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_338(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_339(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_340(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_341(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_342(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_344(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_345(val, _values, result)
                      k_class, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :class_in_def, nil, k_class
                      end
                      lt_t, superclass = val[2]
                      result = @builder.def_class(k_class, val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_346(val, _values, result)
                      @context.in_def = false
                      @context.in_class = false
                      local_push
                    
    result
end

def _reduce_347(val, _values, result)
                      k_class, ctx = val[0]
                      result = @builder.def_sclass(k_class, val[1], val[2],
                                                   val[5], val[6])

                      local_pop
                      @context.in_def = ctx.in_def
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_348(val, _values, result)
                      @context.in_class = true
                      local_push
                    
    result
end

def _reduce_349(val, _values, result)
                      k_mod, ctx = val[0]
                      if @context.in_def
                        diagnostic :error, :module_in_def, nil, k_mod
                      end
                      result = @builder.def_module(k_mod, val[1],
                                                   val[3], val[4])

                      local_pop
                      @context.in_class = ctx.in_class
                    
    result
end

def _reduce_350(val, _values, result)
                      def_t, (name_t, ctx) = val[0]
                      result = @builder.def_method(def_t, name_t, val[1],
                                  val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_351(val, _values, result)
                      def_t, recv, dot_t, (name_t, ctx) = val[0]
                      result = @builder.def_singleton(def_t, recv, dot_t, name_t, val[1],
                                  val[2], val[3])

                      local_pop
                      @current_arg_stack.pop
                      @context.in_def = ctx.in_def
                    
    result
end

def _reduce_352(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_353(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ val[0], @context.dup ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0]
                      @context.in_argdef = true
                    
    result
end

def _reduce_360(val, _values, result)
                      if @context.in_class && !@context.in_def && !(context.in_block || context.in_lambda)
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 361 omitted

# reduce 362 omitted

def _reduce_363(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

def _reduce_367(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 368 omitted

def _reduce_369(val, _values, result)
                      result = val
                    
    result
end

# reduce 370 omitted

# reduce 371 omitted

def _reduce_372(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

# reduce 383 omitted

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      @context.in_argdef = false
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_389(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_390(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_391(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_392(val, _values, result)
                      result = []
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_395(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_401(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_402(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_405(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 408 omitted

def _reduce_409(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_410(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_411(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      @context.in_argdef = false
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_412(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      @context.in_argdef = false
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = []
                    
    result
end

def _reduce_414(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_417(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 418 omitted

def _reduce_419(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push(static: false)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_420(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_421(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      begin_t, body, end_t = val[4]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                      @context.in_lambda = val[1].in_lambda

                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_422(val, _values, result)
                      @context.in_argdef = false
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_423(val, _values, result)
                      @context.in_argdef = false
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_424(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_425(val, _values, result)
                      @context.in_lambda = val[1].in_lambda
                      result = [ val[0], val[2], val[3] ]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = @context.dup
                      @context.in_lambda = true
                    
    result
end

def _reduce_427(val, _values, result)
                      @context.in_lambda = val[1].in_lambda
                      result = [ val[0], val[2], val[3] ]
                    
    result
end

def _reduce_428(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_429(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

def _reduce_430(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_431(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_432(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_433(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_434(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_435(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_436(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_437(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_438(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_439(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_440(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_441(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_444(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @context.dup
                      @context.in_block = true
                    
    result
end

def _reduce_446(val, _values, result)
                      @context.in_block = val[1].in_block
                      result = [ val[0], *val[2], val[3] ]
                    
    result
end

def _reduce_447(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push(static: false)
                    
    result
end

def _reduce_448(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_449(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push(static: false)
                    
    result
end

def _reduce_450(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_451(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_452(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 454 omitted

def _reduce_455(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @context.in_kwarg
                      @context.in_kwarg = true
                    
    result
end

def _reduce_456(val, _values, result)
                      @pattern_variables.pop
                      @pattern_hash_keys.pop
                      @context.in_kwarg = val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 459 omitted

def _reduce_460(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.find_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 473 omitted

def _reduce_474(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 476 omitted

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_479(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_480(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_481(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_482(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_483(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.find_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_484(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_485(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.array_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.find_pattern(val[0], val[1], val[2])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_489(val, _values, result)
                      @pattern_hash_keys.push
                      result = @context.in_kwarg
                      @context.in_kwarg = false
                    
    result
end

def _reduce_490(val, _values, result)
                      @pattern_hash_keys.pop
                      @context.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_492(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_493(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_497(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_498(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 501 omitted

def _reduce_502(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_503(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_504(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = [ val[0], *val[2], val[4] ]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = @builder.match_rest(val[0], val[1])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = @builder.match_rest(val[0])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 511 omitted

def _reduce_512(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_520(val, _values, result)
                    result = [:label, val[0]]
                  
    result
end

def _reduce_521(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_522(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_523(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_524(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

def _reduce_528(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_529(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_530(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_531(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

# reduce 542 omitted

# reduce 543 omitted

# reduce 544 omitted

def _reduce_545(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

# reduce 546 omitted

def _reduce_547(val, _values, result)
                      result = @builder.assignable(@builder.match_var(val[0]))
                    
    result
end

def _reduce_548(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_549(val, _values, result)
                      non_lvar = @builder.accessible(val[1])
                      result = @builder.pin(val[0], non_lvar)
                    
    result
end

def _reduce_550(val, _values, result)
                      expr = @builder.begin(val[1], val[2], val[3])
                      result = @builder.pin(val[0], expr)
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_554(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = []
                    
    result
end

def _reduce_556(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 557 omitted

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_566(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_567(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_568(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_569(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_572(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = []
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_578(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = []
                    
    result
end

def _reduce_580(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_581(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_582(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_583(val, _values, result)
                      result = []
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = []
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_587(val, _values, result)
                      result = []
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = []
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_591(val, _values, result)
                      result = []
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_593(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_595(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_596(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

def _reduce_603(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_604(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_605(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_606(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_607(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_608(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_609(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_610(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_611(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_616(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_617(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_618(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_624(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_627(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_628(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_629(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_630(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_631(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_632(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_633(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_634(val, _values, result)
                      result = nil
                    
    result
end

# reduce 635 omitted

def _reduce_636(val, _values, result)
                      @context.in_argdef = false
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_637(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                      @context.in_argdef = false
                    
    result
end

# reduce 638 omitted

def _reduce_639(val, _values, result)
                      result = @context.dup
                      @context.in_kwarg = true
                      @context.in_argdef = true
                    
    result
end

def _reduce_640(val, _values, result)
                      @context.in_kwarg = val[0].in_kwarg
                      @context.in_argdef = false
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_641(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_644(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_645(val, _values, result)
                      @static_env.declare_forward_args
                      result = [ @builder.forward_arg(val[0]) ]
                    
    result
end

def _reduce_646(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_647(val, _values, result)
                      result = []
                    
    result
end

def _reduce_648(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_649(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_650(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_651(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_652(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_653(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_654(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_655(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_656(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_657(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_658(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_659(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_660(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_661(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_662(val, _values, result)
                      result = []
                    
    result
end

def _reduce_663(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_664(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_665(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_666(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_667(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 668 omitted

def _reduce_669(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_670(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_671(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_672(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_673(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_674(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_675(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])
                      @context.in_argdef = false

                      result = val[0]
                    
    result
end

def _reduce_676(val, _values, result)
                      @current_arg_stack.set(nil)
                      @context.in_argdef = true
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_677(val, _values, result)
                      @current_arg_stack.set(nil)
                      @context.in_argdef = true
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_678(val, _values, result)
                      @context.in_argdef = true
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_679(val, _values, result)
                      @context.in_argdef = true
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_680(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_681(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_682(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_683(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 684 omitted

# reduce 685 omitted

def _reduce_686(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_687(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_688(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_689(val, _values, result)
                      @current_arg_stack.set(0)
                      @context.in_argdef = true
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_690(val, _values, result)
                      @current_arg_stack.set(0)
                      @context.in_argdef = true
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_691(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_692(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_693(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_694(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 695 omitted

# reduce 696 omitted

def _reduce_697(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_698(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 699 omitted

# reduce 700 omitted

def _reduce_701(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_702(val, _values, result)
                      @static_env.declare_anonymous_blockarg

                      result = @builder.blockarg(val[0], nil)
                    
    result
end

def _reduce_703(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_704(val, _values, result)
                      result = []
                    
    result
end

# reduce 705 omitted

def _reduce_706(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_707(val, _values, result)
                      result = []
                    
    result
end

# reduce 708 omitted

def _reduce_709(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_710(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_711(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_712(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_713(val, _values, result)
                      result = @builder.pair_label(val[0])
                    
    result
end

def _reduce_714(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_715(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 716 omitted

# reduce 717 omitted

# reduce 718 omitted

# reduce 719 omitted

# reduce 720 omitted

# reduce 721 omitted

# reduce 722 omitted

# reduce 723 omitted

# reduce 724 omitted

# reduce 725 omitted

# reduce 726 omitted

# reduce 727 omitted

def _reduce_728(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_729(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 730 omitted

# reduce 731 omitted

# reduce 732 omitted

# reduce 733 omitted

def _reduce_734(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_735(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_736(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 737 omitted

# reduce 738 omitted

# reduce 739 omitted

def _reduce_740(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 741 omitted

# reduce 742 omitted

# reduce 743 omitted

def _reduce_744(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby31
  end   # module Parser
