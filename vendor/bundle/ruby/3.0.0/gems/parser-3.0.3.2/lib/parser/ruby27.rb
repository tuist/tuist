# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby27 < Parser::Base


  def version
    27
  end

  def default_encoding
    Encoding::UTF_8
  end

  def try_declare_numparam(node)
    name = node.children[0]

    if name =~ /\A_[1-9]\z/ && !static_env.declared?(name) && context.in_dynamic_block?
      # definitely an implicit param
      location = node.loc.expression

      if max_numparam_stack.has_ordinary_params?
        diagnostic :error, :ordinary_param_defined, nil, [nil, location]
      end

      raw_context = context.stack.dup
      raw_max_numparam_stack = max_numparam_stack.stack.dup

      # ignore current block scope
      raw_context.pop
      raw_max_numparam_stack.pop

      raw_context.reverse_each do |outer_scope|
        if outer_scope == :block || outer_scope == :lambda
          outer_scope_has_numparams = raw_max_numparam_stack.pop > 0

          if outer_scope_has_numparams
            diagnostic :error, :numparam_used_in_outer_scope, nil, [nil, location]
          else
            # for now it's ok, but an outer scope can also be a block
            # with numparams, so we need to continue
          end
        else
          # found an outer scope that can't have numparams
          # like def/class/etc
          break
        end
      end

      static_env.declare(name)
      max_numparam_stack.register(name[1].to_i)

      true
    else
      false
    end
  end
##### State transition tables begin ###

clist = [
'-304,556,-113,-112,533,-111,-106,-304,-304,-304,278,556,-304,-304,-304',
'-700,-304,278,-108,225,-114,812,215,216,-304,884,-304,-304,-304,597',
'1090,-107,1023,599,854,-107,-304,-304,556,-304,-304,-304,-304,-304,749',
'-585,215,216,-114,914,-106,556,-585,-112,556,226,215,216,619,873,226',
'975,-109,-113,226,556,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304',
'-304,-304,-304,-304,-688,-110,-304,-304,-304,-111,810,-304,-108,-113',
'-304,744,871,-304,-304,596,-304,277,-304,598,-304,-109,-304,-304,277',
'-304,-304,-304,-304,-304,-585,-304,1091,-304,1024,-97,226,-111,-688',
'120,-113,-112,893,-111,119,-113,-112,-304,-111,120,-304,-304,-304,-304',
'119,-304,-108,-304,-114,-691,226,-108,-304,-114,-98,-112,-691,-691,-691',
'-107,226,-691,-691,-691,-107,-691,120,-105,-687,869,-700,119,-103,-691',
'-691,-691,-691,-691,-106,120,974,-100,120,-106,119,-691,-691,119,-691',
'-691,-691,-691,-691,120,98,99,867,-99,119,-100,278,-102,278,563,-102',
'120,226,-99,-104,-110,119,749,-110,812,-110,-691,-691,-691,-691,-691',
'-691,-691,-691,-691,-691,-691,-691,-691,-691,-109,882,-691,-691,-691',
'-109,809,-691,812,-700,-691,215,216,-691,-691,865,-691,-588,-691,883',
'-691,794,-691,-691,-588,-691,-691,-691,-691,-691,1082,-691,-691,-691',
'-99,273,-100,273,-102,584,98,99,-101,100,101,226,1029,-691,-687,584',
'-691,-691,-691,-691,-486,-691,-595,-691,277,-588,277,658,-691,-595,1028',
'-110,-588,-588,-588,215,216,-588,-588,-588,-99,-588,-100,-99,-102,-100',
'-108,-102,-588,-588,569,-588,-588,-588,831,-99,865,-100,-101,-102,84',
'-588,-588,862,-588,-588,-588,-588,-588,586,585,120,85,-687,-101,584',
'119,569,854,586,585,831,86,-594,100,101,1098,-595,807,780,-594,-588',
'-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,-588,247',
'221,-588,-588,-588,223,-588,-588,1119,-101,-588,-599,-101,-588,-588',
'584,-588,1117,-588,584,-588,695,-588,-588,-101,-588,-588,-588,-588,-588',
'-596,-588,-585,-588,586,585,595,-596,-600,-585,-585,-585,-109,-594,-585',
'-585,-585,-588,-585,120,-588,-588,-588,-588,119,-588,-585,-588,-585',
'-585,-585,461,-588,569,-114,-588,222,570,-585,-585,-106,-585,-585,-585',
'-585,-585,273,-700,-92,586,585,582,584,586,585,584,546,120,584,548,-78',
'584,119,778,226,-596,681,-107,-585,-585,-585,-585,-585,-585,-585,-585',
'-585,-585,-585,-585,-585,-585,273,533,-585,-585,-585,584,-585,-585,-114',
'854,-585,563,584,-585,-585,915,-585,-593,-585,226,-585,618,-585,-585',
'-593,-585,-585,-585,-585,-585,808,-585,-599,-585,586,585,589,586,585',
'582,586,585,587,586,585,582,941,-585,-104,-590,-585,-585,-585,-585,1098',
'-585,-590,-585,-600,-691,-113,546,-585,695,545,-585,-691,-691,-691,586',
'585,600,-691,-691,-108,-691,586,585,591,-97,-109,221,-593,-691,-691',
'-591,-592,546,566,-111,548,-106,-591,-592,508,-691,-691,564,-691,-691',
'-691,-691,-691,546,506,-98,548,721,221,718,717,716,726,719,-590,572',
'221,-107,226,215,216,1151,729,271,574,-691,-691,-691,-691,-691,-691',
'-691,-691,-691,-691,-691,-691,-691,-691,-691,618,-691,-691,-691,724',
'624,222,825,826,-691,-591,-592,-691,734,733,737,736,-691,120,-691,730',
'-691,-691,119,-691,-691,-691,-691,-691,-304,-691,-691,-691,222,1080',
'1081,-304,-304,-304,264,265,222,-304,-304,844,-304,-691,-100,842,-691',
'-691,-691,-101,-304,-691,221,888,854,-691,-109,906,-691,271,-687,-110',
'-304,-304,-691,-304,-304,-304,-304,-304,948,619,263,262,721,221,718',
'717,716,726,719,818,1114,-691,737,736,814,888,854,729,815,574,-304,-304',
'-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-685,223',
'-304,-304,-304,724,623,-691,226,842,-304,222,-102,-304,734,733,737,736',
'-304,840,-304,730,-304,-304,-111,-304,-304,-304,-304,-304,-304,-304',
'932,-304,222,408,695,-304,-304,-304,410,409,729,-304,-304,267,-304,-304',
'-105,967,-304,-304,-588,-103,-304,-304,834,247,120,-588,-114,906,-304',
'119,-685,-112,-304,-304,-588,-304,-304,-304,-304,-304,-277,221,120,971',
'833,-305,730,119,611,226,830,813,-305,-685,812,244,226,609,940,246,245',
'-305,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304,-304',
'-304,492,932,-304,-304,-304,-304,623,-588,992,993,-304,729,-304,-304',
'492,226,996,-688,-304,794,-304,-304,-304,-304,795,-304,-304,-304,-304',
'-304,222,-304,-691,-304,-305,998,-278,782,781,-691,-691,-691,726,777',
'1006,-691,-691,-304,-691,730,-304,-304,729,-304,1007,-304,-691,-691',
'767,247,750,940,-304,1010,226,-112,-99,1012,-691,-691,-304,-691,-691',
'-691,-691,-691,226,221,-108,746,1016,-305,-280,745,220,737,736,740,-305',
'703,730,244,226,218,226,246,245,-305,-691,-691,-691,-691,-691,-691,-691',
'-691,-691,-691,-691,-691,-691,-691,226,701,-691,-691,-691,1022,624,700',
'221,1025,-691,695,539,-691,226,458,226,226,-691,226,-691,226,-691,-691',
'459,-691,-691,-691,-691,-691,222,-691,-691,-691,-305,1111,-304,718,717',
'716,684,719,221,-304,-92,1037,865,-691,-688,1114,-691,-691,-304,-691',
'865,-691,-343,1041,574,1043,1045,1047,-691,-343,226,-110,300,74,75,76',
'11,62,-343,222,1049,68,69,1050,226,226,72,-684,70,71,73,32,33,77,78',
'123,124,125,126,127,79,30,29,108,107,109,110,-304,721,21,718,717,716',
'222,719,10,50,302,12,112,111,113,102,61,104,103,105,-343,106,114,115',
'-597,98,99,46,47,45,-598,-597,-585,226,221,669,1063,-598,875,-585,-597',
'526,865,883,-684,1065,-598,879,-585,42,524,1067,35,1069,1071,63,64,-295',
'1071,65,226,37,226,247,-295,49,1111,-684,718,717,716,247,719,-295,22',
'247,247,1086,628,96,84,87,88,767,89,91,90,92,812,-597,1089,273,85,95',
'1092,-598,617,-585,616,222,67,812,86,100,101,226,612,43,44,300,74,75',
'76,11,62,608,607,-277,68,69,605,1108,-295,72,604,70,71,73,32,33,77,78',
'239,601,576,1115,568,79,30,29,108,107,109,110,772,773,21,567,774,114',
'115,400,10,50,302,12,112,111,113,102,61,104,103,105,563,106,114,115',
'1120,98,99,46,47,45,247,251,252,253,254,264,265,259,260,255,256,221',
'240,241,508,550,257,258,535,42,549,3,35,726,226,63,64,459,247,65,1127',
'37,244,729,250,49,246,245,1128,242,243,263,262,248,22,249,536,530,273',
'96,84,87,88,226,89,91,90,92,226,282,1136,527,85,95,520,261,737,736,1139',
'865,67,730,86,100,101,1141,222,43,44,300,74,75,76,11,62,1143,1145,1147',
'68,69,1147,1147,519,72,226,70,71,73,32,33,77,78,123,124,125,126,127',
'79,30,29,108,107,109,110,700,-77,21,129,508,506,1160,613,10,50,302,12',
'112,111,113,102,61,104,103,105,1161,106,114,115,1162,98,99,46,47,45',
'247,251,252,253,254,264,265,259,260,255,256,1071,240,241,1071,1071,257',
'258,504,42,492,225,304,1170,463,63,64,1139,1139,65,462,37,244,460,250',
'49,246,245,411,242,243,263,262,248,22,249,226,327,326,96,84,87,88,-688',
'89,91,90,92,-687,226,267,217,85,95,214,261,213,-250,1128,212,67,1139',
'86,100,101,1183,1147,43,44,300,74,75,76,11,62,1147,1147,129,68,69,1071',
'116,226,72,901,70,71,73,32,33,77,78,123,124,125,126,127,79,30,29,108',
'107,109,110,-279,226,21,226,891,890,854,613,10,50,302,12,112,111,113',
'102,61,104,103,105,885,106,114,115,,98,99,46,47,45,247,251,252,253,254',
'264,265,259,260,255,256,,240,241,,,257,258,,42,,,35,,,63,64,,,65,,37',
'244,,250,49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,,261,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,',
',,68,69,,,,72,,70,71,73,32,33,77,78,123,124,125,126,127,79,30,29,108',
'107,109,110,,721,21,718,717,716,,719,10,50,302,12,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265',
'259,260,255,256,,240,241,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250',
'49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,226,261,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68',
'69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,',
',,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,247,251,252,253,254,264,265,259,260,255,256,,240,241,,,257,258',
',42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,261,,,,,67,,86,100,101,,',
'43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79',
'30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265,259',
'260,255,256,,240,241,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49',
'246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,',
'85,95,,261,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'247,251,252,253,254,264,265,259,260,255,256,,240,241,,,257,258,,42,',
',35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22,249',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,261,,,,,67,,86,100,101,,,43,44',
'300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105',
',106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265,259,260,255',
'256,,240,241,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245',
',242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,261',
',,,,67,,86,100,101,,,43,44,7,74,75,76,11,62,,,,68,69,,,,72,,70,71,73',
'32,33,77,78,,,,,,79,30,29,108,107,109,110,,721,21,718,717,716,,719,10',
'50,9,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'721,,718,717,716,,719,,875,,721,,718,717,716,,719,879,,42,,,35,,,63',
'64,,247,65,,37,,,,49,,875,,721,,718,717,716,22,719,879,875,,96,84,87',
'88,,89,91,90,92,,,244,,85,95,246,245,,242,243,,67,,86,100,101,,875,43',
'44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30',
'29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265,259,260',
'255,256,,-713,-713,,,257,258,,42,,,35,,,63,64,,247,65,,37,244,,250,49',
'246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,244',
',85,95,246,245,,242,243,,67,,86,100,101,,,43,44,300,74,75,76,11,62,',
',,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,',
'21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,247,251,252,253,254,264,265,259,260,255,256,,-713,-713,',
',257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263',
'262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,721,,718,717,716',
'67,719,86,100,101,,,43,44,7,74,75,76,11,62,,,,68,69,,,,72,,70,71,73',
'32,33,77,78,875,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,9,12,112',
'111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,251,252',
'253,254,264,265,259,,255,256,,,,,,257,258,,42,,,35,,,63,64,,,65,,37',
'244,,250,49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68',
'69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,',
',,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,247,251,252,253,254,264,265,259,260,255,256,,-713,-713,,,257,258',
',42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43',
'44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30',
'29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,247,251,252,253,254,264,265,,,255,256',
',,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243',
'263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86',
'100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77',
'78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,,,,,,,,,,,,,,,,257',
'258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,,,248,22',
'249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43',
'44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30',
'29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,247,,,,,,,,,,,,,,,,257,258,,42,,,35',
',,63,64,,,65,,37,244,,250,49,246,245,,242,243,,,248,22,249,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75',
'76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,247,251,252,253,254,264,265,259,260,255,256,,-713',
'-713,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243',
'263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86',
'100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77',
'78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,247,-713,-713,-713,-713',
'264,265,,,-713,-713,,,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250',
'49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'247,-713,-713,-713,-713,264,265,,,-713,-713,,,,,,257,258,,42,,,304,',
',63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22,249,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74',
'75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,247,-713,-713,-713,-713,264,265,,,-713,-713,,,,',
',257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263',
'262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100',
'101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78',
',,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,247,-713,-713,-713,-713',
'264,265,,,-713,-713,,,,,,257,258,,42,,,35,,,63,64,,,65,,37,244,,250',
'49,246,245,,242,243,263,262,248,22,249,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'247,-713,-713,-713,-713,264,265,,,-713,-713,,,,,,257,258,,42,,,35,,',
'63,64,,,65,,37,244,,250,49,246,245,,242,243,263,262,248,22,249,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74',
'75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,247,-713,-713,-713,-713,264,265,,,-713,-713,,,,',
',257,258,,42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,263',
'262,248,22,249,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100',
'101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78',
',,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,247,,,,,,,,,,,,,,,,257,258',
',42,,,35,,,63,64,,,65,,37,244,,250,49,246,245,,242,243,,,,22,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74',
'75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,10,50,302,12,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,247,,,,,,,,,,,,,,,,257,258,,42,,,35,,,63,64,,,65',
',37,244,,250,49,246,245,,242,243,,,,22,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,',
',,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
'247,,,,,,,,,,,,,,,,257,258,,42,,,304,,,63,64,,,65,,37,244,,,49,246,245',
',242,243,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100',
'101,,,43,44,300,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78',
',,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,',
'35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,,,,67,,86,100,101,,,43,44,300,74,75,76,11,62,,,,68,69,,,',
'72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10',
'50,302,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43',
'44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,',
',,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,',
',,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,74,75,76,11',
'62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,21,,,,,,10,50,9,12,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,',
',,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,-421',
',43,44,,,,-421,-421,-421,,,-421,-421,-421,,-421,,,,,,,,-421,-421,-421',
'-421,,,,,,,,,-421,-421,,-421,-421,-421,-421,-421,,,,,,,,,,,,,,,,,,,',
',,,-421,-421,-421,-421,-421,-421,-421,-421,-421,-421,-421,-421,-421',
'-421,,,-421,-421,-421,,,-421,,273,-421,,,-421,-421,,-421,,-421,,-421',
',-421,-421,,-421,-421,-421,-421,-421,-311,-421,-421,-421,,,,-311,-311',
'-311,,,-311,-311,-311,,-311,-421,,,-421,-421,,-421,-311,-421,-311,-311',
',,,,-421,,,,-311,-311,,-311,-311,-311,-311,-311,,,,,,,,,,,,,,,,,,,,',
',,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311,-311',
',,-311,-311,-311,,,-311,,282,-311,,,-311,-311,,-311,,-311,,-311,,-311',
'-311,,-311,-311,-311,-311,-311,,-311,,-311,,,,,,,,,,,,,,-311,,,-311',
'-311,,-311,,-311,74,75,76,,62,,-311,,68,69,,,,72,,70,71,73,32,33,77',
'78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89',
'91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70',
'71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112',
'111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,',
',,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236,,,,,96',
'292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69',
'43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238',
',,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295',
',,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100',
'101,-296,,43,44,,,,-296,-296,-296,,,-296,-296,-296,,-296,,,,,,,,-296',
',-296,-296,-296,,,,108,107,109,110,-296,-296,,-296,-296,-296,-296,-296',
',,,,112,111,113,,,,,,,,,,,98,99,,,323,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296,,,-296',
',,-296,-296,,-296,,-296,,-296,,-296,-296,,-296,-296,-296,-296,-296,',
'-296,,-296,,96,84,87,88,,89,91,90,92,,,,-296,85,95,-296,-296,-296,-296',
',-296,657,-296,86,100,101,,-296,74,75,76,11,62,,,,68,69,,,,72,,70,71',
'73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,,12,112',
'111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,',
',,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89',
'91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70',
'71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,',
',112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,',
',,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,,,49,,,295,,,,,,236,,,,',
'96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,295',
',,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,120,,,,,119,67,,86,100',
'101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,',
',79,30,29,108,107,109,110,,,21,,,,,,10,50,9,12,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63',
'64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,,,400,67,,86,100,101,,,43,44,74,75,76,,62,,,,68,69,,,,72,,70,71,73',
'32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,,,,67,,86,100,101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,',
'70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,',
'12,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,',
',,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,',
'72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50',
',,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,',
',,,,,,,,,,,,,231,,,237,,,63,64,,,65,,416,,,,49,,,,,,,,,236,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,',
'50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,',
',,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,416,,,,49,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43',
'44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,',
',,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,',
',,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44',
',72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50',
',,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,',
',,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,',
'72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50',
',,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,',
',,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,',
'72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50',
',,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45,,,',
',,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236',
',,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,',
',,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,21',
',,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47',
'45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,',
'96,84,87,88,,89,91,90,92,,,,,85,95,226,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,',
'289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,494,,72,,70,71,73,32,33,77,78,,,,,,79',
'30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105',
'294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,',
'85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77',
'78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89',
'91,90,92,,,,,85,95,226,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,',
'70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50',
',,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,',
',,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,',
'72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,',
',,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43',
'44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238',
',,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47',
'45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44',
'74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108',
'107,109,110,,,21,,,,,,10,50,,12,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37',
',,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76',
'67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29',
'108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294',
'106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65',
',291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78',
',,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237',
',,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77',
'78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,539,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33',
'77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,',
',,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320',
'77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,,,,67,,86,100,101,-260,,43,44,,,,-260,-260,-260,,,-260,-260',
'-260,,-260,,,,,,,,-260,-260,-260,-260,,,,,,,,,-260,-260,,-260,-260,-260',
'-260,-260,,,,,,,,,,,,,,,,,,,,,,,-260,-260,-260,-260,-260,-260,-260,-260',
'-260,-260,-260,-260,-260,-260,,,-260,-260,-260,,,-260,,273,-260,,,-260',
'-260,,-260,,-260,,-260,,-260,-260,,-260,-260,-260,-260,-260,,-260,-260',
'-260,721,,718,717,716,726,719,,,,,,,-260,,729,-260,-260,-692,-260,,-260',
',,,-692,-692,-692,-260,,-692,-692,-692,,-692,,,724,,,,,-692,-692,-692',
'-692,-692,,737,736,,,,730,-692,-692,,-692,-692,-692,-692,-692,,,,,,',
',,,,,,,,,,,,,,,,-692,-692,-692,-692,-692,-692,-692,-692,-692,-692,-692',
'-692,-692,-692,,,-692,-692,-692,,,-692,,,-692,,,-692,-692,,-692,,-692',
',-692,,-692,-692,,-692,-692,-692,-692,-692,,-692,-692,-692,,,,,,,,,',
',,,,-692,,,-692,-692,-692,-692,,-692,-693,-692,,,,,-692,-693,-693,-693',
',,-693,-693,-693,,-693,,,,,,,,-693,-693,-693,-693,-693,,,,,,,,-693,-693',
',-693,-693,-693,-693,-693,,,,,,,,,,,,,,,,,,,,,,,-693,-693,-693,-693',
'-693,-693,-693,-693,-693,-693,-693,-693,-693,-693,,,-693,-693,-693,',
',-693,,,-693,,,-693,-693,,-693,,-693,,-693,,-693,-693,,-693,-693,-693',
'-693,-693,,-693,-693,-693,,,,,,,,,,,,,,-693,,,-693,-693,-693,-693,,-693',
',-693,,74,75,76,-693,62,,,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79',
'30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105',
'294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,',
'85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320',
'77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,',
',,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,,,,67,,86,100,101,-260,,43,44,,,,-260,-260,-260,,,-260',
'-260,-260,721,-260,718,717,716,726,719,,,-260,-260,-260,,,,729,,,,,',
'-260,-260,,-260,-260,-260,-260,-260,,,,,,,,721,724,718,717,716,726,719',
',,,734,733,737,736,,729,,730,,721,,718,717,716,726,719,-260,,,,,,,-260',
'729,,,724,273,-260,,,,226,,,734,733,737,736,,,,730,,,724,,,,,-260,-260',
',,734,733,737,736,,,,730,,,,-260,,,-260,,74,75,76,-260,62,,,,68,69,-260',
',,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,',
',,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43',
'44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238',
',,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46',
'47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,678,,289,,49,,,295',
',,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,',
',289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64',
',,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,',
',,67,,86,100,101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,302,12,112,111',
'113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,',
',,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91',
'90,92,,,,,85,95,,,,,,400,67,,86,100,101,,,43,44,74,75,76,,62,,,,68,69',
',,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,',
',,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236',
',,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,678',
',,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75',
'76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79',
'316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63',
'64,,,65,,,,,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77',
'78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91',
'90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71',
'73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112',
'111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,',
',,,,,,,231,,,237,,,63,64,,,65,,291,,,,49,,,,,,,,,236,,,,,96,84,87,88',
',89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72',
',70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,',
',112,111,113,102,61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,',
',,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236,',
',,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,291,,289,,49',
',,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67',
'62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322',
'108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106',
'114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,678',
',,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86',
'100,101,,,43,44,74,75,76,11,62,,,,68,69,,,,72,,70,71,73,32,33,77,78',
',,,,,79,30,29,108,107,109,110,,,21,,,,,,10,50,,12,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35',
',,63,64,,,65,,37,,,,49,,,,,,,,,22,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77',
'78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,',
',237,,,63,64,,,65,,786,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32',
'33,77,78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113',
'102,61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,',
',,231,,,237,,,63,64,,,65,,291,,289,,49,,,295,,,,,,236,,,,,96,292,87',
'88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,,,43,44,74,75,76,11,62',
',,,68,69,,,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109,110,',
',21,,,,,,10,50,,12,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,42,,,35,,,63,64,,,65,,37,,,,49,,,,,,,,,22',
',,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109',
'110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107,109',
'110,,,21,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98',
'99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,',
',,22,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,294,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,678,',
'289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,',
'79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103',
'105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63',
'64,,,65,,,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89,91,90,92,,,,',
'85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77',
'78,,,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237',
',,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78',
',,,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,',
',,,,79,30,29,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,',
'63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78',
',,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237',
',,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,43,44,,72,,70,71,73,319,320,77',
'78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,,,112,111,113,102',
'61,104,103,105,294,106,114,115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231',
',,237,,,63,64,,,65,,678,,289,,49,,,295,,,,,,236,,,,,96,292,87,88,,89',
'91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,494,,72,,70',
'71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,50,',
',112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45,,,,,,,',
',,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43,44,',
'72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,',
',,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47,45',
',,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,43',
'44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238',
',,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,46,47',
'45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,,,,,,,,236,,,',
',96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68',
'69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
'46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,416,,,,49,,,,,,',
',,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100',
'101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,32,33,77,78,,,,,,79,30,29,108,107',
'109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49,,',
',,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,50,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,46,47,45,,,,,,,,,,,,,,,,,,,,231,,,237,,,63,64,,,65,,,,,,49',
',,,,,,,,236,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62',
'86,100,101,68,69,43,44,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,317,,,112,111,113,366,61,104,103,367,,106,114',
'115,,98,99,,,323,,,,,,,,,,,,,,,,,373,,,368,,,237,,,63,64,,,65,,,,,,',
',,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,,,323,,,,,,,,,,,,,,,,,,,,361,,,35,,,63,64,,,65,,37,,,,,,,,,,',
',,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101',
'68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110',
',,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99',
',,323,,,,,,,,,,,,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,',
',,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,',
',,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115,,98,99,,,323',
',,,,,,,,,,,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87',
'88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,',
'70,71,73,319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317',
',,112,111,113,102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,',
',,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89',
'91,90,92,,,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73',
'319,320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112',
'111,113,102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,',
',,,,313,,,237,,,63,64,,,65,,,721,,718,717,716,726,719,,,,,,,,,729,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,522,,724,67,,86,100,101,74,75,76',
',62,737,736,,68,69,730,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322',
'108,107,109,110,,,238,,,,,,,317,,,112,111,113,366,61,104,103,367,,106',
'114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,368,,,237,,,63,64,,,65,,,,,',
',,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67,62,86',
'100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108,107',
'109,110,,,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114,115',
',98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,237,,,63,64,,,65,,,721,,718,717',
'716,726,719,,,,,,,,,729,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,325,',
'724,67,,86,100,101,74,75,76,,62,737,736,,68,69,730,,,72,,70,71,73,319',
'320,77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111',
'113,102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,',
'1058,,,237,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319,320',
'77,78,,,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111,113',
'102,61,104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,1052',
',,237,,,63,64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78',
',,,,,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111,113,102,61',
'104,103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,309,',
',63,64,,,65,,308,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95',
',,,74,75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,',
',,79,316,322,108,107,109,110,,,238,,,,,,,317,,,112,111,113,102,61,104',
'103,105,,106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,309,,,63',
'64,,,65,,,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74',
'75,76,67,62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316',
'322,108,107,109,110,,,238,,,,,,,317,,,112,111,113,102,61,104,103,105',
',106,114,115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,1052,,,237,,,63,64,,,65',
',,,,,,,,,,,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,74,75,76,67',
'62,86,100,101,68,69,,,,72,,70,71,73,319,320,77,78,,,,,,79,316,322,108',
'107,109,110,,,238,,,,,,,317,,,112,111,113,102,61,104,103,105,,106,114',
'115,,98,99,,,323,,,,,,,,,,,,,,,,,,,,313,,,309,,,63,64,,,65,,,,,,,,,',
',,,,,,,,,,96,84,87,88,,89,91,90,92,,,,,85,95,,,,,,,67,,86,100,101,179',
'190,180,203,176,196,186,185,206,207,201,184,183,178,204,208,209,188',
'177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194,193,',
',,,,174,181,172,173,169,170,171,132,134,,,133,,,,,,,,163,164,,160,142',
'143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,,,168,96,,,,,,,,,,',
',,,95,179,190,180,203,176,196,186,185,206,207,201,184,183,178,204,208',
'209,188,177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175,194',
'193,,,,,,174,181,172,173,169,170,171,132,134,,,133,,,,,,,,163,164,,160',
'142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157',
'156,,141,162,159,158,167,154,155,149,147,139,161,140,,,168,96,,,,,,',
',,,,,,,95,179,190,180,203,176,196,186,185,206,207,201,184,183,178,204',
'208,209,188,177,191,195,197,189,182,,,,198,205,200,199,192,202,187,175',
'194,193,,,,,,174,181,172,173,169,170,171,132,134,,,133,,,,,,,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,',
',,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,,,168,96',
',,,,,,,,,,,,,95,179,190,180,203,176,196,186,185,206,207,201,184,183',
'178,204,208,209,188,177,191,195,197,189,182,,,,198,205,200,199,192,202',
'187,175,194,193,,,,,,174,181,172,173,169,170,171,132,134,131,,133,,',
',,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153',
',,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140',
',,168,96,108,107,109,110,,,,,,,,,,95,,,112,111,113,658,,,721,661,718',
'717,716,726,719,98,99,,,323,,,,729,,,,,,,,,,,,,,,,660,,,642,,,724,640',
',,641,,,,,734,733,737,736,,,,730,,,,659,,,,96,84,87,88,,89,91,90,92',
',,,,85,95,108,107,109,110,,,657,,86,100,101,,,646,647,,112,111,113,658',
',,,661,932,,,,,98,99,,,323,729,,,,,,,,,,,,,,,,,,,660,,,642,,,,640,,',
'641,,926,,,,,,,730,,,,,,,659,,,,96,933,87,88,,89,91,90,92,,,,,85,95',
',,,,,,657,,86,100,101,,,646,647,179,190,180,203,176,196,186,185,206',
'207,201,184,183,178,204,208,209,188,177,191,195,197,189,182,,,,198,205',
'200,199,192,202,187,175,194,193,,,,,,174,181,172,173,169,170,171,132',
'134,,,133,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165',
'166,152,153,,,,,,,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147',
'139,161,140,,,168,108,107,109,110,,,721,,718,717,716,726,719,,,,112',
'111,113,658,,729,,661,,,,,,98,99,,,323,,,,,,,,,,724,,,,,,,,,,660,737',
'736,642,,,730,640,,,641,,,,,,,,,,,,,,,,659,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,108,107,109,110,,,657,,86,100,101,,,646,647,,112,111,113',
'658,,,,661,932,,,,,98,99,,,323,729,,,,,,,,,,,,,,,,,,,660,,,642,,,,640',
',,641,,926,,,,,,,730,,,,,,,659,,,,96,933,87,88,,89,91,90,92,,,,,85,95',
'108,107,109,110,,,657,,86,100,101,,,646,647,,112,111,113,658,,,721,661',
'718,717,716,726,719,98,99,,,323,,,,729,,,,,,,,,,,,,,,,660,,,642,,,724',
'640,,,641,,,,,734,733,737,736,,,,730,,,,659,,,,96,84,87,88,,89,91,90',
'92,,,,,85,95,108,107,109,110,,,657,,86,100,101,,,646,647,,112,111,113',
'658,,,721,661,718,717,716,726,719,98,99,,,323,,,,729,,,,,,,,,,,,,,,',
'660,,,642,,,724,640,,,641,,926,,,734,733,737,736,,,,730,,,,659,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,657,,86,100,101,,',
'646,647,,112,111,113,658,,,721,661,718,717,716,726,719,98,99,,,323,',
',,729,,,,,,,,,,,,,,,,660,,,642,,,724,640,,,641,,,,,734,733,737,736,',
',,730,,,,659,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,',
',657,,86,100,101,,,646,647,,112,111,113,658,,,721,661,718,717,716,726',
'719,98,99,,,323,,,,729,,,,,,,,,,,,,,,,660,,,642,,,724,640,,,641,,,,',
',,737,736,,,,730,,,,659,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107',
'109,110,,,657,,86,100,101,,,646,647,,112,111,113,658,,,721,661,718,717',
'716,726,719,98,99,,,323,,,,729,,,,,,,,,,,,,,,,660,,,642,,,724,640,,',
'641,,926,,,,,737,736,,,,730,,,,659,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,,,,657,,86,100,101,,,646,647,179,190,180,203,176,196,186,185,206',
'207,201,184,183,178,204,208,209,188,177,191,195,197,189,182,,,,198,205',
'200,384,383,385,382,175,194,193,,,,,,174,181,172,173,379,380,381,377',
'134,104,103,378,,106,,,,,,163,164,,160,142,143,144,151,148,150,,,145',
'146,,,,165,166,152,153,,,,,,389,,,,,,,,157,156,,141,162,159,158,167',
'154,155,149,147,139,161,140,,,168,108,107,109,110,,,721,,718,717,716',
'726,719,,,,112,111,113,658,,729,,661,,,,,,98,99,,,323,,,,,,,,,,724,',
',,,,,,,,660,737,736,642,,,730,640,,,641,,,,,,,,,,,,,,,,659,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,657,,86,100,101,,,646',
'647,,112,111,113,658,,,,661,932,,,,,98,99,,,323,729,,,,,,,,,,,,,,,,',
',,660,,,642,,,,640,,,641,,926,,,,,,,730,,,,,,,659,,,,96,933,87,88,,89',
'91,90,92,,,,,85,95,108,107,109,110,,,657,,86,100,101,,,646,647,,112',
'111,113,658,,,721,661,718,717,716,726,719,98,99,,,323,,,,729,,,,,,,',
',,,,,,,,660,,,642,,,724,640,,,641,,,,,,,737,736,,,,730,,,,659,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,,,657,,86,100,101,,',
'646,647,,112,111,113,658,,,721,661,718,717,716,726,719,98,99,,,323,',
',,729,,,,,,,,,,,,,,,,660,,,642,,,724,640,,,641,,,,,734,733,737,736,',
',,730,,,,659,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107,109,110,',
',657,,86,100,101,,,646,647,,112,111,113,658,,,721,661,718,717,716,726',
'719,98,99,,,323,,,,729,,,,,,,,,,,,,,,,660,,,642,,,724,640,,,641,,,,',
',,737,736,,,,730,,,,659,,,,96,84,87,88,,89,91,90,92,,,,,85,95,108,107',
'109,110,,,657,,86,100,101,,,646,647,,112,111,113,658,,,,661,,,,,,98',
'99,,,323,,,,,,,,108,107,109,110,,,,,,,,,660,,,642,112,111,113,640,,',
'641,,1021,,,,,98,99,,,323,,,,,659,,,,96,84,87,88,,89,91,90,92,,,,,85',
'95,,,,,,,657,,86,100,101,,,646,647,721,,718,717,716,726,719,,,,,96,84',
'87,88,729,89,91,90,92,,,,,85,95,108,107,109,110,,,657,,86,100,101,724',
'706,,,,112,111,113,,734,733,737,736,,,,730,,98,99,,,323,108,107,109',
'110,,,,,,,,,,,,,112,111,113,,,,,,,,,,,98,99,,,323,,,,,,,,,,,,,,,,96',
'84,87,88,,89,91,90,92,,,,,85,95,,,,,,,657,,86,100,101,,,,,,,,,96,84',
'87,88,,89,91,90,92,,,,,85,95,1158,449,,,1159,,657,,86,100,101,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,',
',,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,1156',
'442,168,,1157,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146',
',,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154',
'155,149,147,139,161,140,691,449,168,,692,,,,,,,,163,164,,160,142,143',
'144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156',
',141,162,159,158,167,154,155,149,147,139,161,140,1153,449,168,,1152',
',,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152',
'153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139',
'161,140,631,449,168,,632,,,,,,,,163,164,,160,142,143,144,151,148,150',
',,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158',
'167,154,155,149,147,139,161,140,629,442,168,,630,,,,,,,,163,164,,160',
'142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,',
',157,156,,141,162,159,158,167,154,155,149,147,139,161,140,445,449,168',
',444,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166',
'152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147',
'139,161,140,438,442,168,,439,,,,,,,,163,164,,160,142,143,144,151,148',
'150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159',
'158,167,154,155,149,147,139,161,140,631,449,168,,632,,,,,,,,163,164',
',160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,',
',,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,753,442',
'168,,754,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,,,,165',
'166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149',
'147,139,161,140,755,449,168,,756,,,,,,,,163,164,,160,142,143,144,151',
'148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162',
'159,158,167,154,155,149,147,139,161,140,629,442,168,,630,,,,,,,,163',
'164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273',
',,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,791',
'449,168,,790,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,',
',,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155',
'149,147,139,161,140,490,442,168,,491,,,,,,,,163,164,,160,142,143,144',
'151,148,150,,,145,146,,,,165,166,152,153,,,,,,,,,,,,,,157,156,,141,162',
'159,158,167,154,155,149,147,139,161,140,758,449,168,,759,,,,,,,,163',
'164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,,,,,273',
',,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140,490',
'442,168,,491,,,,,,,,163,164,,160,142,143,144,151,148,150,,,145,146,',
',,165,166,152,153,,,,,,273,,,,,,,,157,156,,141,162,159,158,167,154,155',
'149,147,139,161,140,788,442,168,,789,,,,,,,,163,164,,160,142,143,144',
'151,148,150,,,145,146,,,,165,166,152,153,,,,,,273,,,,,,,,157,156,,141',
'162,159,158,167,154,155,149,147,139,161,140,688,442,168,,689,,,,,,,',
'163,164,,160,142,143,144,151,148,150,,,145,146,,,,165,166,152,153,,',
',,,273,,,,,,,,157,156,,141,162,159,158,167,154,155,149,147,139,161,140',
',721,168,718,717,716,726,719,,721,,718,717,716,726,719,729,,,,,,,,729',
',,,,,,,,,,,,,724,,,,,,,,724,,,737,736,,,,730,734,733,737,736,,,,730' ]
        racc_action_table = arr = ::Array.new(27375, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'632,751,1120,1159,460,1157,358,632,632,632,66,351,632,632,632,814,632',
'666,1178,21,1059,942,454,454,632,735,632,632,632,396,1021,1056,926,397',
'1169,359,632,632,350,632,632,632,632,632,1169,377,698,698,362,796,1055',
'997,377,756,970,814,581,581,789,723,21,860,753,460,942,999,632,632,632',
'632,632,632,632,632,632,632,632,632,632,632,1159,1158,632,632,632,754',
'632,632,895,567,632,558,714,632,632,396,632,66,632,397,632,1156,632',
'632,666,632,632,632,632,632,377,632,1021,632,926,358,454,789,756,751',
'1120,1159,751,1157,751,1120,1159,632,1157,351,632,632,632,632,351,632',
'1178,632,1059,631,698,1178,632,1059,359,632,631,631,631,1056,581,631',
'631,631,1056,631,350,362,1158,713,640,350,756,631,631,631,631,631,1055',
'997,860,753,970,1055,997,631,631,970,631,631,631,631,631,999,45,45,712',
'849,999,688,28,689,318,561,754,558,640,895,567,1158,558,561,755,1001',
'1158,631,631,631,631,631,631,631,631,631,631,631,631,631,631,1156,731',
'631,631,631,1156,631,631,920,815,631,577,577,631,631,710,631,378,631',
'731,631,911,631,631,378,631,631,631,631,631,1001,631,631,631,849,28',
'688,318,689,1034,323,323,691,45,45,815,934,631,755,594,631,631,631,631',
'920,631,379,631,28,105,318,812,631,379,934,631,105,105,105,349,349,105',
'105,105,849,105,688,849,689,688,911,689,378,105,660,105,105,105,660',
'849,709,688,755,689,82,105,105,708,105,105,105,105,105,1034,1034,577',
'82,691,691,395,577,818,699,594,594,818,82,380,323,323,1034,379,629,594',
'380,105,105,105,105,105,105,105,105,105,105,105,105,105,105,697,1057',
'105,105,105,423,105,105,1057,691,105,229,691,105,105,510,105,1057,105',
'592,105,694,105,105,691,105,105,105,105,105,381,105,102,105,395,395',
'395,381,230,102,102,102,629,380,102,102,102,105,102,5,105,105,105,105',
'5,105,102,105,102,102,102,232,105,368,423,105,1057,368,102,102,229,102',
'102,102,102,102,693,641,683,510,510,510,393,592,592,1027,342,298,392',
'342,683,391,298,592,641,381,510,230,102,102,102,102,102,102,102,102',
'102,102,102,102,102,102,690,327,102,102,102,398,102,102,232,1005,102',
'1005,394,102,102,811,102,382,102,687,102,788,102,102,382,102,102,102',
'102,102,630,102,40,102,393,393,393,1027,1027,1027,392,392,392,391,391',
'391,823,102,327,383,102,102,102,102,1027,102,383,102,41,445,327,341',
'102,685,341,102,445,445,445,398,398,398,445,445,811,445,394,394,394',
'40,788,360,382,445,445,384,385,345,360,630,345,40,384,385,677,445,445',
'360,445,445,445,445,445,704,675,41,704,767,370,767,767,767,767,767,383',
'370,387,41,1109,16,16,1109,767,387,370,445,445,445,445,445,445,445,445',
'445,445,445,445,445,445,758,438,445,445,445,767,445,360,643,643,445',
'384,385,445,767,767,767,767,445,899,445,767,445,445,899,445,445,445',
'445,445,444,445,445,445,370,1000,1000,444,444,444,48,48,387,444,444',
'673,444,445,438,835,445,445,758,445,444,445,26,739,739,758,438,767,445',
'26,758,445,444,444,758,444,444,444,444,444,838,439,48,48,1012,1051,1012',
'1012,1012,1012,1012,639,1051,758,865,865,639,1129,1129,1012,639,1051',
'444,444,444,444,444,444,444,444,444,444,444,444,444,444,367,19,444,444',
'444,1012,444,758,839,672,444,26,439,444,1012,1012,1012,1012,444,671',
'444,1012,444,444,439,444,444,444,444,444,790,444,1025,444,1051,131,848',
'790,790,790,131,131,1025,790,790,665,790,444,19,852,444,444,367,444',
'790,444,663,468,907,367,19,1012,444,907,367,444,790,790,367,790,790',
'790,790,790,855,422,355,856,662,527,1025,355,422,861,659,636,527,367',
'634,468,633,422,1025,468,468,527,790,790,790,790,790,790,790,790,790',
'790,790,790,790,790,625,821,790,790,790,692,790,367,877,878,790,821',
'692,790,620,880,886,692,790,614,790,692,790,790,615,790,790,790,790',
'790,422,790,791,790,527,889,606,599,597,791,791,791,862,589,896,791',
'791,790,791,821,790,790,862,790,898,790,791,791,579,467,562,821,790',
'902,903,790,614,904,791,791,692,791,791,791,791,791,905,18,614,560,909',
'570,910,559,18,862,862,555,570,543,862,467,542,18,921,467,467,570,791',
'791,791,791,791,791,791,791,791,791,791,791,791,791,922,541,791,791',
'791,925,791,540,228,927,791,531,528,791,935,228,936,938,791,939,791',
'523,791,791,228,791,791,791,791,791,18,791,791,791,570,1049,759,1049',
'1049,1049,521,1049,1113,759,518,950,951,791,759,1113,791,791,759,791',
'952,791,51,954,1113,955,956,958,791,51,959,791,900,900,900,900,900,900',
'51,228,960,900,900,961,517,501,900,366,900,900,900,900,900,900,900,338',
'338,338,338,338,900,900,900,900,900,900,900,759,992,900,992,992,992',
'1113,992,900,900,900,900,900,900,900,900,900,900,900,900,51,900,900',
'900,310,900,900,900,900,900,311,310,366,497,312,496,976,311,992,366',
'310,312,977,979,366,982,311,992,366,900,312,983,900,985,986,900,900',
'314,988,900,991,900,495,472,314,900,1151,366,1151,1151,1151,471,1151',
'314,900,470,469,1009,456,900,900,900,900,1015,900,900,900,900,1019,310',
'1020,446,900,900,1023,311,437,366,436,312,900,1026,900,900,900,434,424',
'900,900,554,554,554,554,554,554,420,417,415,554,554,414,1048,314,554',
'412,554,554,554,554,554,554,554,23,406,372,1052,363,554,554,554,554',
'554,554,554,585,585,554,361,585,585,585,357,554,554,554,554,554,554',
'554,554,554,554,554,554,356,554,554,554,1058,554,554,554,554,554,23',
'23,23,23,23,23,23,23,23,23,23,328,23,23,346,344,23,23,328,554,343,1',
'554,1037,339,554,554,328,333,554,1076,554,23,1037,23,554,23,23,1077',
'23,23,23,23,23,554,23,331,324,322,554,554,554,554,317,554,554,554,554',
'1087,316,1090,313,554,554,307,23,1037,1037,1093,1099,554,1037,554,554',
'554,1102,328,554,554,304,304,304,304,304,304,1103,1104,1105,304,304',
'1107,1189,306,304,305,304,304,304,304,304,304,304,301,301,301,301,301',
'304,304,304,304,304,304,304,1116,303,304,302,290,287,1121,427,304,304',
'304,304,304,304,304,304,304,304,304,304,1122,304,304,304,1123,304,304',
'304,304,304,427,427,427,427,427,427,427,427,427,427,427,1124,427,427',
'1125,1126,427,427,286,304,272,238,304,1135,234,304,304,1137,1138,304',
'233,304,427,231,427,304,427,427,210,427,427,427,427,427,304,427,50,42',
'39,304,304,304,304,1152,304,304,304,304,1153,1155,24,17,304,304,15,427',
'14,427,1167,12,304,1171,304,304,304,1173,1174,304,304,762,762,762,762',
'762,762,1175,1176,9,762,762,1179,3,761,762,765,762,762,762,762,762,762',
'762,8,8,8,8,8,762,762,762,762,762,762,762,785,752,762,787,748,747,741',
'433,762,762,762,762,762,762,762,762,762,762,762,762,738,762,762,762',
',762,762,762,762,762,433,433,433,433,433,433,433,433,433,433,433,,433',
'433,,,433,433,,762,,,762,,,762,762,,,762,,762,433,,433,762,433,433,',
'433,433,433,433,433,762,433,,,,762,762,762,762,,762,762,762,762,,,,',
'762,762,,433,,,,,762,,762,762,762,,,762,762,947,947,947,947,947,947',
',,,947,947,,,,947,,947,947,947,947,947,947,947,515,515,515,515,515,947',
'947,947,947,947,947,947,,879,947,879,879,879,,879,947,947,947,947,947',
'947,947,947,947,947,947,947,,947,947,947,,947,947,947,947,947,486,486',
'486,486,486,486,486,486,486,486,486,,486,486,,,486,486,,947,,,947,,',
'947,947,,,947,,947,486,,486,947,486,486,,486,486,486,486,486,947,486',
',,,947,947,947,947,,947,947,947,947,,,,,947,947,486,486,,,,,947,,947',
'947,947,,,947,947,967,967,967,967,967,967,,,,967,967,,,,967,,967,967',
'967,967,967,967,967,,,,,,967,967,967,967,967,967,967,,,967,,,,,,967',
'967,967,967,967,967,967,967,967,967,967,967,,967,967,967,,967,967,967',
'967,967,946,946,946,946,946,946,946,946,946,946,946,,946,946,,,946,946',
',967,,,967,,,967,967,,,967,,967,946,,946,967,946,946,,946,946,946,946',
'946,967,946,,,,967,967,967,967,,967,967,967,967,,,,,967,967,,946,,,',
',967,,967,967,967,,,967,967,1130,1130,1130,1130,1130,1130,,,,1130,1130',
',,,1130,,1130,1130,1130,1130,1130,1130,1130,,,,,,1130,1130,1130,1130',
'1130,1130,1130,,,1130,,,,,,1130,1130,1130,1130,1130,1130,1130,1130,1130',
'1130,1130,1130,,1130,1130,1130,,1130,1130,1130,1130,1130,538,538,538',
'538,538,538,538,538,538,538,538,,538,538,,,538,538,,1130,,,1130,,,1130',
'1130,,,1130,,1130,538,,538,1130,538,538,,538,538,538,538,538,1130,538',
',,,1130,1130,1130,1130,,1130,1130,1130,1130,,,,,1130,1130,,538,,,,,1130',
',1130,1130,1130,,,1130,1130,237,237,237,237,237,237,,,,237,237,,,,237',
',237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237',
',,,,,237,237,237,237,237,237,237,237,237,237,237,237,,237,237,237,,237',
'237,237,237,237,793,793,793,793,793,793,793,793,793,793,793,,793,793',
',,793,793,,237,,,237,,,237,237,,,237,,237,793,,793,237,793,793,,793',
'793,793,793,793,237,793,,,,237,237,237,237,,237,237,237,237,,,,,237',
'237,,793,,,,,237,,237,237,237,,,237,237,212,212,212,212,212,212,,,,212',
'212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212',
'212,,,212,,,,,,212,212,212,212,212,212,212,212,212,212,212,212,,212',
'212,212,,212,212,212,212,212,284,284,284,284,284,284,284,284,284,284',
'284,,284,284,,,284,284,,212,,,212,,,212,212,,,212,,212,284,,284,212',
'284,284,,284,284,284,284,284,212,284,,,,212,212,212,212,,212,212,212',
'212,,,,,212,212,,284,,,,,212,,212,212,212,,,212,212,129,129,129,129',
'129,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129,129',
'129,129,129,129,129,,724,129,724,724,724,,724,129,129,129,129,129,129',
'129,129,129,129,129,129,,129,129,129,,129,129,129,129,129,875,,875,875',
'875,,875,,724,,993,,993,993,993,,993,724,,129,,,129,,,129,129,,482,129',
',129,,,,129,,875,,1128,,1128,1128,1128,129,1128,875,993,,129,129,129',
'129,,129,129,129,129,,,482,,129,129,482,482,,482,482,,129,,129,129,129',
',1128,129,129,1061,1061,1061,1061,1061,1061,,,,1061,1061,,,,1061,,1061',
'1061,1061,1061,1061,1061,1061,,,,,,1061,1061,1061,1061,1061,1061,1061',
',,1061,,,,,,1061,1061,1061,1061,1061,1061,1061,1061,1061,1061,1061,1061',
',1061,1061,1061,,1061,1061,1061,1061,1061,330,330,330,330,330,330,330',
'330,330,330,330,,330,330,,,330,330,,1061,,,1061,,,1061,1061,,483,1061',
',1061,330,,330,1061,330,330,,330,330,330,330,330,1061,330,,,,1061,1061',
'1061,1061,,1061,1061,1061,1061,,,483,,1061,1061,483,483,,483,483,,1061',
',1061,1061,1061,,,1061,1061,1062,1062,1062,1062,1062,1062,,,,1062,1062',
',,,1062,,1062,1062,1062,1062,1062,1062,1062,,,,,,1062,1062,1062,1062',
'1062,1062,1062,,,1062,,,,,,1062,1062,1062,1062,1062,1062,1062,1062,1062',
'1062,1062,1062,,1062,1062,1062,,1062,1062,1062,1062,1062,465,465,465',
'465,465,465,465,465,465,465,465,,465,465,,,465,465,,1062,,,1062,,,1062',
'1062,,,1062,,1062,465,,465,1062,465,465,,465,465,465,465,465,1062,465',
',,,1062,1062,1062,1062,,1062,1062,1062,1062,,,,,1062,1062,,1127,,1127',
'1127,1127,1062,1127,1062,1062,1062,,,1062,1062,2,2,2,2,2,2,,,,2,2,,',
',2,,2,2,2,2,2,2,2,1127,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2',
'2,2,2,,2,2,2,,2,2,2,2,2,485,485,485,485,485,485,485,485,,485,485,,,',
',,485,485,,2,,,2,,,2,2,,,2,,2,485,,485,2,485,485,,485,485,485,485,485',
'2,485,,,,2,2,2,2,,2,2,2,2,,,,,2,2,,,,,,,2,,2,2,2,,,2,2,843,843,843,843',
'843,843,,,,843,843,,,,843,,843,843,843,843,843,843,843,,,,,,843,843',
'843,843,843,843,843,,,843,,,,,,843,843,843,843,843,843,843,843,843,843',
'843,843,,843,843,843,,843,843,843,843,843,466,466,466,466,466,466,466',
'466,466,466,466,,466,466,,,466,466,,843,,,843,,,843,843,,,843,,843,466',
',466,843,466,466,,466,466,466,466,466,843,466,,,,843,843,843,843,,843',
'843,843,843,,,,,843,843,,,,,,,843,,843,843,843,,,843,843,776,776,776',
'776,776,776,,,,776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776',
'776,776,776,776,776,776,,,776,,,,,,776,776,776,776,776,776,776,776,776',
'776,776,776,,776,776,776,,776,776,776,776,776,484,484,484,484,484,484',
'484,,,484,484,,,,,,484,484,,776,,,776,,,776,776,,,776,,776,484,,484',
'776,484,484,,484,484,484,484,484,776,484,,,,776,776,776,776,,776,776',
'776,776,,,,,776,776,,,,,,,776,,776,776,776,,,776,776,766,766,766,766',
'766,766,,,,766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766,766',
'766,766,766,766,766,,,766,,,,,,766,766,766,766,766,766,766,766,766,766',
'766,766,,766,766,766,,766,766,766,766,766,487,,,,,,,,,,,,,,,,487,487',
',766,,,766,,,766,766,,,766,,766,487,,487,766,487,487,,487,487,,,487',
'766,487,,,,766,766,766,766,,766,766,766,766,,,,,766,766,,,,,,,766,,766',
'766,766,,,766,766,757,757,757,757,757,757,,,,757,757,,,,757,,757,757',
'757,757,757,757,757,,,,,,757,757,757,757,757,757,757,,,757,,,,,,757',
'757,757,757,757,757,757,757,757,757,757,757,,757,757,757,,757,757,757',
'757,757,537,,,,,,,,,,,,,,,,537,537,,757,,,757,,,757,757,,,757,,757,537',
',537,757,537,537,,537,537,,,537,757,537,,,,757,757,757,757,,757,757',
'757,757,,,,,757,757,,,,,,,757,,757,757,757,,,757,757,854,854,854,854',
'854,854,,,,854,854,,,,854,,854,854,854,854,854,854,854,,,,,,854,854',
'854,854,854,854,854,,,854,,,,,,854,854,854,854,854,854,854,854,854,854',
'854,854,,854,854,854,,854,854,854,854,854,329,329,329,329,329,329,329',
'329,329,329,329,,329,329,,,329,329,,854,,,854,,,854,854,,,854,,854,329',
',329,854,329,329,,329,329,329,329,329,854,329,,,,854,854,854,854,,854',
'854,854,854,,,,,854,854,,,,,,,854,,854,854,854,,,854,854,337,337,337',
'337,337,337,,,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337',
'337,337,337,337,337,337,,,337,,,,,,337,337,337,337,337,337,337,337,337',
'337,337,337,,337,337,337,,337,337,337,337,337,481,481,481,481,481,481',
'481,,,481,481,,,,,,481,481,,337,,,337,,,337,337,,,337,,337,481,,481',
'337,481,481,,481,481,481,481,481,337,481,,,,337,337,337,337,,337,337',
'337,337,,,,,337,337,,,,,,,337,,337,337,337,,,337,337,35,35,35,35,35',
'35,,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,',
'35,,,,,,35,35,35,35,35,35,35,35,35,35,35,35,,35,35,35,,35,35,35,35,35',
'480,480,480,480,480,480,480,,,480,480,,,,,,480,480,,35,,,35,,,35,35',
',,35,,35,480,,480,35,480,480,,480,480,480,480,480,35,480,,,,35,35,35',
'35,,35,35,35,35,,,,,35,35,,,,,,,35,,35,35,35,,,35,35,1054,1054,1054',
'1054,1054,1054,,,,1054,1054,,,,1054,,1054,1054,1054,1054,1054,1054,1054',
',,,,,1054,1054,1054,1054,1054,1054,1054,,,1054,,,,,,1054,1054,1054,1054',
'1054,1054,1054,1054,1054,1054,1054,1054,,1054,1054,1054,,1054,1054,1054',
'1054,1054,479,479,479,479,479,479,479,,,479,479,,,,,,479,479,,1054,',
',1054,,,1054,1054,,,1054,,1054,479,,479,1054,479,479,,479,479,479,479',
'479,1054,479,,,,1054,1054,1054,1054,,1054,1054,1054,1054,,,,,1054,1054',
',,,,,,1054,,1054,1054,1054,,,1054,1054,354,354,354,354,354,354,,,,354',
'354,,,,354,,354,354,354,354,354,354,354,,,,,,354,354,354,354,354,354',
'354,,,354,,,,,,354,354,354,354,354,354,354,354,354,354,354,354,,354',
'354,354,,354,354,354,354,354,478,478,478,478,478,478,478,,,478,478,',
',,,,478,478,,354,,,354,,,354,354,,,354,,354,478,,478,354,478,478,,478',
'478,478,478,478,354,478,,,,354,354,354,354,,354,354,354,354,,,,,354',
'354,,,,,,,354,,354,354,354,,,354,354,353,353,353,353,353,353,,,,353',
'353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353,353,353,353,353',
'353,,,353,,,,,,353,353,353,353,353,353,353,353,353,353,353,353,,353',
'353,353,,353,353,353,353,353,477,477,477,477,477,477,477,,,477,477,',
',,,,477,477,,353,,,353,,,353,353,,,353,,353,477,,477,353,477,477,,477',
'477,477,477,477,353,477,,,,353,353,353,353,,353,353,353,353,,,,,353',
'353,,,,,,,353,,353,353,353,,,353,353,1078,1078,1078,1078,1078,1078,',
',,1078,1078,,,,1078,,1078,1078,1078,1078,1078,1078,1078,,,,,,1078,1078',
'1078,1078,1078,1078,1078,,,1078,,,,,,1078,1078,1078,1078,1078,1078,1078',
'1078,1078,1078,1078,1078,,1078,1078,1078,,1078,1078,1078,1078,1078,476',
'476,476,476,476,476,476,,,476,476,,,,,,476,476,,1078,,,1078,,,1078,1078',
',,1078,,1078,476,,476,1078,476,476,,476,476,476,476,476,1078,476,,,',
'1078,1078,1078,1078,,1078,1078,1078,1078,,,,,1078,1078,,,,,,,1078,,1078',
'1078,1078,,,1078,1078,894,894,894,894,894,894,,,,894,894,,,,894,,894',
'894,894,894,894,894,894,,,,,,894,894,894,894,894,894,894,,,894,,,,,',
'894,894,894,894,894,894,894,894,894,894,894,894,,894,894,894,,894,894',
'894,894,894,473,,,,,,,,,,,,,,,,473,473,,894,,,894,,,894,894,,,894,,894',
'473,,473,894,473,473,,473,473,,,,894,,,,,894,894,894,894,,894,894,894',
'894,,,,,894,894,,,,,,,894,,894,894,894,,,894,894,1088,1088,1088,1088',
'1088,1088,,,,1088,1088,,,,1088,,1088,1088,1088,1088,1088,1088,1088,',
',,,,1088,1088,1088,1088,1088,1088,1088,,,1088,,,,,,1088,1088,1088,1088',
'1088,1088,1088,1088,1088,1088,1088,1088,,1088,1088,1088,,1088,1088,1088',
'1088,1088,474,,,,,,,,,,,,,,,,474,474,,1088,,,1088,,,1088,1088,,,1088',
',1088,474,,474,1088,474,474,,474,474,,,,1088,,,,,1088,1088,1088,1088',
',1088,1088,1088,1088,,,,,1088,1088,,,,,,,1088,,1088,1088,1088,,,1088',
'1088,309,309,309,309,309,309,,,,309,309,,,,309,,309,309,309,309,309',
'309,309,,,,,,309,309,309,309,309,309,309,,,309,,,,,,309,309,309,309',
'309,309,309,309,309,309,309,309,,309,309,309,,309,309,309,309,309,475',
',,,,,,,,,,,,,,,475,475,,309,,,309,,,309,309,,,309,,309,475,,,309,475',
'475,,475,475,,,,309,,,,,309,309,309,309,,309,309,309,309,,,,,309,309',
',,,,,,309,,309,309,309,,,309,309,578,578,578,578,578,578,,,,578,578',
',,,578,,578,578,578,578,578,578,578,,,,,,578,578,578,578,578,578,578',
',,578,,,,,,578,578,578,578,578,578,578,578,578,578,578,578,,578,578',
'578,,578,578,578,578,578,,,,,,,,,,,,,,,,,,,,578,,,578,,,578,578,,,578',
',578,,,,578,,,,,,,,,578,,,,,578,578,578,578,,578,578,578,578,,,,,578',
'578,,,,,,,578,,578,578,578,,,578,578,557,557,557,557,557,557,,,,557',
'557,,,,557,,557,557,557,557,557,557,557,,,,,,557,557,557,557,557,557',
'557,,,557,,,,,,557,557,557,557,557,557,557,557,557,557,557,557,,557',
'557,557,,557,557,557,557,557,,,,,,,,,,,,,,,,,,,,557,,,557,,,557,557',
',,557,,557,,,,557,,,,,,,,,557,,,,,557,557,557,557,,557,557,557,557,',
',,,557,557,,,,763,763,763,557,763,557,557,557,763,763,557,557,,763,',
'763,763,763,763,763,763,763,,,,,,763,763,763,763,763,763,763,,,763,',
',,,,,763,,,763,763,763,763,763,763,763,763,,763,763,763,,763,763,763',
'763,763,,,,,,,,,,,,,,,,,,,,763,,,763,,,763,763,,,763,,,,,,763,,,,,,',
',,763,,,,,763,763,763,763,,763,763,763,763,,,,,763,763,,,,,,,763,,763',
'763,763,,,763,763,7,7,7,7,7,,,,7,7,,,,7,,7,7,7,7,7,7,7,,,,,,7,7,7,7',
'7,7,7,,,7,,,,,,7,7,7,7,7,7,7,7,7,7,7,7,,7,7,7,,7,7,7,7,7,,,,,,,,,,,',
',,,,,,,,7,,,7,,,7,7,,,7,,7,,,,7,,,,,,,,,7,,,,,7,7,7,7,,7,7,7,7,,,,,7',
'7,,,,22,22,22,7,22,7,7,7,22,22,7,7,,22,,22,22,22,22,22,22,22,,,,,,22',
'22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,22,22,22,22,22,22,,22,22,22',
',22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22,22,,,22,,,,,,22,,,,',
',,,,22,,,,,22,22,22,22,,22,22,22,22,,,,,22,22,,,,,,,22,,22,22,22,29',
',22,22,,,,29,29,29,,,29,29,29,,29,,,,,,,,29,29,29,29,,,,,,,,,29,29,',
'29,29,29,29,29,,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,,,29,29,29,,,29,,29,29,,,29,29,,29,,29,,29,,29,29,,29,29,29',
'29,29,30,29,29,29,,,,30,30,30,,,30,30,30,,30,29,,,29,29,,29,30,29,30',
'30,,,,,29,,,,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30',
',30,,30,30,,30,30,30,30,30,,30,,30,,,,,,,,,,,,,,30,,,30,30,,30,,30,31',
'31,31,,31,,30,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31',
'31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31',
'31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,',
'31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,32,32,32,31,32,31,31,31',
'32,32,31,31,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32',
',,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,32,32,32,,,,,',
',,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,32,,,,,,32,,,,,32,32',
'32,32,,32,32,32,32,,,,,32,32,,,,33,33,33,32,33,32,32,32,33,33,32,32',
',33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,',
'33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,33,33,,,,,,,,,,,,,,,,',
',,,33,,,33,,,33,33,,,33,,33,,33,,33,,,33,,,,,,33,,,,,33,33,33,33,,33',
'33,33,33,,,,,33,33,,,,43,43,43,33,43,33,33,33,43,43,33,33,,43,,43,43',
'43,43,43,43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43',
'43,43,43,43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43',
'43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,',
',44,44,44,43,44,43,43,43,44,44,43,43,,44,,44,44,44,44,44,44,44,,,,,',
'44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44',
'44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,',
',,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,46,46,46,44,46,44',
'44,44,46,46,44,44,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46',
',,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,46,46,46,,',
',,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,,46,,,,,46,46,46',
'46,,46,46,46,46,,,,,46,46,,,,47,47,47,46,47,46,46,46,47,47,46,46,,47',
',47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47',
'47,47,47,47,47,47,,47,47,47,,47,47,47,47,47,,,,,,,,,,,,,,,,,,,,47,,',
'47,,,47,47,,,47,,,,,,47,,,,,,,,,47,,,,,47,47,47,47,,47,47,47,47,,,,',
'47,47,,,,49,49,49,47,49,47,47,47,49,49,47,47,,49,,49,49,49,49,49,49',
'49,,,,,,49,49,49,49,49,49,49,,,49,,,,,,,49,,,49,49,49,49,49,49,49,49',
',49,49,49,,49,49,49,49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49,49,,,49,,',
',,,49,,,,,,,,,49,,,,,49,49,49,49,,49,49,49,49,,,,,49,49,,,,,,,49,,49',
'49,49,61,,49,49,,,,61,61,61,,,61,61,61,,61,,,,,,,,61,,61,61,61,,,,825',
'825,825,825,61,61,,61,61,61,61,61,,,,,825,825,825,,,,,,,,,,,825,825',
',,825,61,61,61,61,61,61,61,61,61,61,61,61,61,61,,,61,61,61,,,61,,,61',
',,61,61,,61,,61,,61,,61,61,,61,61,61,61,61,,61,,61,,825,825,825,825',
',825,825,825,825,,,,61,825,825,61,61,61,61,,61,825,61,825,825,825,,61',
'63,63,63,63,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63',
'63,63,63,,,63,,,,,,63,63,,63,63,63,63,63,63,63,63,63,,63,63,63,,63,63',
'63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,63,,,,,,,,,63',
',,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64,63,64,63,63,63,64',
'64,63,63,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,',
',,,,64,,,64,64,64,64,64,64,64,64,64,64,64,64,,64,64,64,64,64,,,,,,,',
',,,,,,,,,,,,64,,,64,,,64,64,,,64,,64,,,,64,,,64,,,,,,64,,,,,64,64,64',
'64,,64,64,64,64,,,,,64,64,,,,65,65,65,64,65,64,64,64,65,65,64,64,,65',
',65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65',
'65,65,65,65,65,65,65,65,65,65,,65,65,65,65,65,,,,,,,,,,,,,,,,,,,,65',
',,65,,,65,65,,,65,,,,,,65,,,65,,,,,,65,,,,,65,65,65,65,,65,65,65,65',
',,,,65,65,,,,68,68,68,65,68,65,65,65,68,68,65,65,,68,,68,68,68,68,68',
'68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68',
'68,,68,68,68,,68,68,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68',
',,,,,68,,,,,,,,,68,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,69,69,69',
'68,69,68,68,68,69,69,68,68,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69',
'69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,69',
'69,69,,,,,,,,,,,,,,,,,,,,69,,,69,,,69,69,,,69,,,,,,69,,,,,,,,,69,,,',
',69,69,69,69,,69,69,69,69,,,,,69,69,,,,72,72,72,69,72,69,69,69,72,72',
'69,69,,72,,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72,72,,,72,,,,,',
',72,,,72,72,72,72,72,72,72,72,,72,72,72,,72,72,72,72,72,,,,,,,,,,,,',
',,,,,,,72,,,72,,,72,72,,,72,,,,,,72,,,,,,,,,72,,,,,72,72,72,72,,72,72',
'72,72,,,,,72,72,72,,,,,72,72,,72,72,72,,,72,72,118,118,118,118,118,',
',,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118',
'118,118,,,118,,,,,,118,118,118,118,118,118,118,118,118,118,118,118,',
'118,118,118,,118,118,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118',
'118,,,118,,118,,,,118,,,,,,,,,118,,,,,118,118,118,118,,118,118,118,118',
',,,,118,118,,,,,,118,118,,118,118,118,,,118,118,123,123,123,,123,,,',
'123,123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123',
'123,123,,,123,,,,,,,123,,,123,123,123,123,123,123,123,123,,123,123,123',
',123,123,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,',
',,,123,,,,,,,,,123,,,,,123,123,123,123,,123,123,123,123,,,,,123,123',
',,,124,124,124,123,124,123,123,123,124,124,123,123,,124,,124,124,124',
'124,124,124,124,,,,,,124,124,124,124,124,124,124,,,124,,,,,,,124,,,124',
'124,124,124,124,124,124,124,,124,124,124,,124,124,124,124,124,,,,,,',
',,,,,,,,,,,,,124,,,124,,,124,124,,,124,,,,,,124,,,,,,,,,124,,,,,124',
'124,124,124,,124,124,124,124,,,,,124,124,,,,125,125,125,124,125,124',
'124,124,125,125,124,124,,125,,125,125,125,125,125,125,125,,,,,,125,125',
'125,125,125,125,125,,,125,,,,,,,125,,,125,125,125,125,125,125,125,125',
',125,125,125,,125,125,125,125,125,,,,,,,,,,,,,,,,,,,,125,,,125,,,125',
'125,,,125,,,,,,125,,,,,,,,,125,,,,,125,125,125,125,,125,125,125,125',
',,,,125,125,,,,126,126,126,125,126,125,125,125,126,126,125,125,,126',
',126,126,126,126,126,126,126,,,,,,126,126,126,126,126,126,126,,,126',
',,,,,,126,,,126,126,126,126,126,126,126,126,,126,126,126,,126,126,126',
'126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,,126,,,,,,126,,,,,,',
',,126,,,,,126,126,126,126,,126,126,126,126,,,,,126,126,,,,,,,126,,126',
'126,126,,,126,126,127,127,127,127,127,,,,127,127,,,,127,,127,127,127',
'127,127,127,127,,,,,,127,127,127,127,127,127,127,,,127,,,,,,127,127',
',127,127,127,127,127,127,127,127,127,,127,127,127,,127,127,127,127,127',
',,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,,127,,127,,,,127,,,,,,,,,127',
',,,,127,127,127,127,,127,127,127,127,,,,,127,127,,,,213,213,213,127',
'213,127,127,127,213,213,127,127,,213,,213,213,213,213,213,213,213,,',
',,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213,213,213,213,213',
'213,213,213,,213,213,213,,213,213,213,213,213,,,,,,,,,,,,,,,,,,,,213',
',,213,,,213,213,,,213,,213,,,,213,,,,,,,,,213,,,,,213,213,213,213,,213',
'213,213,213,,,,,213,213,,,,214,214,214,213,214,213,213,213,214,214,213',
'213,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214,214,214',
',,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214,214,,214',
'214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,214,,',
',214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,,214,214,,',
',215,215,215,214,215,214,214,214,215,215,214,214,,215,,215,215,215,215',
'215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215',
'215,215,215,215,215,215,,215,215,215,,215,215,215,215,215,,,,,,,,,,',
',,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,,215,,,,,215,215',
'215,215,,215,215,215,215,,,,,215,215,,,,216,216,216,215,216,215,215',
'215,216,216,215,215,,216,,216,216,216,216,216,216,216,,,,,,216,216,216',
'216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216',
'216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216',
',,216,,,,,,216,,,,,,,,,216,,,,,216,216,216,216,,216,216,216,216,,,,',
'216,216,,,,217,217,217,216,217,216,216,216,217,217,216,216,,217,,217',
'217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,',
',217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,217,217',
'217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,,217',
',,,,217,217,217,217,,217,217,217,217,,,,,217,217,,,,218,218,218,217',
'218,217,217,217,218,218,217,217,,218,,218,218,218,218,218,218,218,,',
',,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218',
'218,218,218,218,218,218,218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,',
'218,,,218,,,218,218,,,218,,218,,218,,218,,,218,,,,,,218,,,,,218,218',
'218,218,,218,218,218,218,,,,,218,218,,,,223,223,223,218,223,218,218',
'218,223,223,218,218,,223,,223,223,223,223,223,223,223,,,,,,223,223,223',
'223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223,,223',
'223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223',
',,223,,,,,,223,,,,,,,,,223,,,,,223,223,223,223,,223,223,223,223,,,,',
'223,223,,,,224,224,224,223,224,223,223,223,224,224,223,223,,224,,224',
'224,224,224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,',
',224,,,224,224,224,224,224,224,224,224,,224,224,224,,224,224,224,224',
'224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,,,,224,,,,,,,,,224',
',,,,224,224,224,224,,224,224,224,224,,,,,224,224,,,,225,225,225,224',
'225,224,224,224,225,225,224,224,,225,,225,225,225,225,225,225,225,,',
',,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225',
'225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225',
',,225,,,225,225,,,225,,,,,,225,,,,,,,,,225,,,,,225,225,225,225,,225',
'225,225,225,,,,,225,225,225,,,236,236,236,225,236,225,225,225,236,236',
'225,225,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236',
'236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,',
'236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,',
',,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236,,,,,236,236,',
',,240,240,240,236,240,236,236,236,240,240,236,236,,240,,240,240,240',
'240,240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240',
'240,240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,',
',,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240',
'240,240,240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240',
'240,240,241,241,240,240,,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241',
',,,,241,241,,,,242,242,242,241,242,241,241,241,242,242,241,241,,242',
',242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242',
',,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,242',
'242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,',
',,242,,,,,242,242,242,242,,242,242,242,242,,,,,242,242,,,,243,243,243',
'242,243,242,242,242,243,243,242,242,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,,,,243,243,243,243,,243',
'243,243,243,,,,,243,243,,,,244,244,244,243,244,243,243,243,244,244,243',
'243,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244',
',,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244',
'244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244',
',,,,,,,,244,,,,,244,244,244,244,,244,244,244,244,,,,,244,244,,,,245',
'245,245,244,245,244,244,244,245,245,244,244,,245,,245,245,245,245,245',
'245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245',
'245,245,245,245,245,,245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,',
',,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,,,,245,245,245',
'245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246,245,245,245',
'246,246,245,245,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246',
'246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246',
'246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246',
',,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246,,,,,246,246',
',,,247,247,247,246,247,246,246,246,247,247,246,246,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,247,247,247,,,,,,',
',,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,,,,247',
'247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248,247,248,247',
'247,247,248,248,247,247,,248,,248,248,248,248,248,248,248,,,,,,248,248',
'248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248',
',248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248',
'248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248',
',,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,248,248,,249',
',249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249',
',,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249',
'249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,',
',,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250,250,250',
'249,250,249,249,249,250,250,249,249,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250',
',,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250',
'250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250,251,251,250',
'250,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251',
',,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251',
'251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251',
',,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252',
'252,252,251,252,251,251,251,252,252,251,251,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,252,252,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253',
'253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253',
'253,,253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253',
',,,,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,253,253,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,',
',,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254',
'254,254,254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254',
'254,254,255,255,254,254,,255,,255,255,255,255,255,255,255,,,,,,255,255',
'255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255',
',255,255,255,,255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255',
'255,,,255,,,,,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255',
',,,,255,255,,,,256,256,256,255,256,255,255,255,256,256,255,255,,256',
',256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256',
',,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256,256',
'256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,',
',,256,,,,,256,256,256,256,,256,256,256,256,,,,,256,256,,,,257,257,257',
'256,257,256,256,256,257,257,256,256,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257',
'257,257,257,,257,257,257,,257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257',
',,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,,,,257,257,257,257,,257',
'257,257,257,,,,,257,257,,,,258,258,258,257,258,257,257,257,258,258,257',
'257,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258',
',,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258,258,258,,258',
'258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258',
',,,,,,,,258,,,,,258,258,258,258,,258,258,258,258,,,,,258,258,,,,259',
'259,259,258,259,258,258,258,259,259,258,258,,259,,259,259,259,259,259',
'259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259',
'259,259,259,259,259,,259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,',
',,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,,259,,,,,259,259,259',
'259,,259,259,259,259,,,,,259,259,,,,260,260,260,259,260,259,259,259',
'260,260,259,259,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260',
'260,260,260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260',
'260,,260,260,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260',
',,,,,260,,,,,,,,,260,,,,,260,260,260,260,,260,260,260,260,,,,,260,260',
',,,261,261,261,260,261,260,260,260,261,261,260,260,,261,,261,261,261',
'261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261',
'261,261,261,261,261,261,261,,261,261,261,,261,261,261,261,261,,,,,,',
',,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,,261,,,,,261',
'261,261,261,,261,261,261,261,,,,,261,261,,,,266,266,266,261,266,261',
'261,261,266,266,261,261,,266,,266,266,266,266,266,266,266,,,,,,266,266',
'266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266',
',266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266',
'266,,,266,,,,,,266,,,,,,,,,266,,,,,266,266,266,266,,266,266,266,266',
',,,,266,266,,,,273,273,273,266,273,266,266,266,273,273,266,266,,273',
',273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273',
',,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273,273,,273,273',
'273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273,',
'273,,,273,,,,,,273,,,,,273,273,273,273,,273,273,273,273,,,,,273,273',
',,,274,274,274,273,274,273,273,273,274,274,273,273,,274,,274,274,274',
'274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274',
'274,274,274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,',
',,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,',
'274,,,,,274,274,274,274,,274,274,274,274,,,,,274,274,,,,282,282,282',
'274,282,274,274,274,282,282,274,274,,282,,282,282,282,282,282,282,282',
',,,,,282,282,282,282,282,282,282,,,282,,,,,,,282,,,282,282,282,282,282',
'282,282,282,282,282,282,282,,282,282,282,282,282,,,,,,,,,,,,,,,,,,,',
'282,,,282,,,282,282,,,282,,282,,282,,282,,,282,,,,,,282,,,,,282,282',
'282,282,,282,282,282,282,,,,,282,282,282,,,289,289,289,282,289,282,282',
'282,289,289,282,282,,289,,289,289,289,289,289,289,289,,,,,,289,289,289',
'289,289,289,289,,,289,,,,,,,289,,,289,289,289,289,289,289,289,289,,289',
'289,289,,289,289,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289',
',,289,,,,,,289,,,,,,,,,289,,,,,289,289,289,289,,289,289,289,289,,,,',
'289,289,,,,291,291,291,289,291,289,289,289,291,291,289,289,,291,,291',
'291,291,291,291,291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,',
',291,,,291,291,291,291,291,291,291,291,,291,291,291,,291,291,291,291',
'291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,,291',
',,,,291,291,291,291,,291,291,291,291,,,,,291,291,,,,294,294,294,291',
'294,291,291,291,294,294,291,291,,294,,294,294,294,294,294,294,294,,',
',,,294,294,294,294,294,294,294,,,294,,,,,,,294,,,294,294,294,294,294',
'294,294,294,,294,294,294,,294,294,294,294,294,,,,,,,,,,,,,,,,,,,,294',
',,294,,,294,294,,,294,,,,,,294,,,,,,,,,294,,,,,294,294,294,294,,294',
'294,294,294,,,,,294,294,,,,295,295,295,294,295,294,294,294,295,295,294',
'294,,295,,295,295,295,295,295,295,295,,,,,,295,295,295,295,295,295,295',
',,295,,,,,,,295,,,295,295,295,295,295,295,295,295,,295,295,295,,295',
'295,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,,295,,,,,,295',
',,,,,,,,295,,,,,295,295,295,295,,295,295,295,295,,,,,295,295,,,,,,,295',
',295,295,295,,,295,295,300,300,300,300,300,,,,300,300,,,,300,,300,300',
'300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,,300',
'300,,300,300,300,300,300,300,300,300,300,,300,300,300,,300,300,300,300',
'300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,300,,,,300,,,,,,,',
',300,,,,,300,300,300,300,,300,300,300,300,,,,,300,300,,,,1117,1117,1117',
'300,1117,300,300,300,1117,1117,300,300,,1117,,1117,1117,1117,1117,1117',
'1117,1117,,,,,,1117,1117,1117,1117,1117,1117,1117,,,1117,,,,,,,1117',
',,1117,1117,1117,1117,1117,1117,1117,1117,1117,1117,1117,1117,,1117',
'1117,1117,1117,1117,,,,,,,,,,,,,,,,,,,,1117,,,1117,,,1117,1117,,,1117',
',1117,,1117,,1117,,,1117,,,,,,1117,,,,,1117,1117,1117,1117,,1117,1117',
'1117,1117,,,,,1117,1117,,,,1081,1081,1081,1117,1081,1117,1117,1117,1081',
'1081,1117,1117,,1081,,1081,1081,1081,1081,1081,1081,1081,,,,,,1081,1081',
'1081,1081,1081,1081,1081,,,1081,,,,,,,1081,,,1081,1081,1081,1081,1081',
'1081,1081,1081,,1081,1081,1081,,1081,1081,1081,1081,1081,,,,,,,,,,,',
',,,,,,,,1081,,,1081,,,1081,1081,,,1081,,,,,,1081,,,,,,,,,1081,,,,,1081',
'1081,1081,1081,,1081,1081,1081,1081,,,,,1081,1081,,,,1080,1080,1080',
'1081,1080,1081,1081,1081,1080,1080,1081,1081,,1080,,1080,1080,1080,1080',
'1080,1080,1080,,,,,,1080,1080,1080,1080,1080,1080,1080,,,1080,,,,,,',
'1080,,,1080,1080,1080,1080,1080,1080,1080,1080,,1080,1080,1080,,1080',
'1080,1080,1080,1080,,,,,,,,,,,,,,,,,,,,1080,,,1080,,,1080,1080,,,1080',
',,,,,1080,,,,,,,,,1080,,,,,1080,1080,1080,1080,,1080,1080,1080,1080',
',,,,1080,1080,,,,334,334,334,1080,334,1080,1080,1080,334,334,1080,1080',
',334,,334,334,334,334,334,334,334,,,,,,334,334,334,334,334,334,334,',
',334,,,,,,,334,,,334,334,334,334,334,334,334,334,,334,334,334,,334,334',
'334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,,,334,334,,,334,,,,,,334,,',
',,,,,,334,,,,,334,334,334,334,,334,334,334,334,,,,,334,334,,,,336,336',
'336,334,336,334,334,334,336,336,334,334,,336,,336,336,336,336,336,336',
'336,,,,,,336,336,336,336,336,336,336,,,336,,,,,,,336,,,336,336,336,336',
'336,336,336,336,,336,336,336,,336,336,336,336,336,,,,,,,,,,,,,,,,,,',
',336,,,336,336,,336,336,,,336,,,,,,336,,,,,,,,,336,,,,,336,336,336,336',
',336,336,336,336,,,,,336,336,,,,352,352,352,336,352,336,336,336,352',
'352,336,336,,352,,352,352,352,352,352,352,352,,,,,,352,352,352,352,352',
'352,352,,,352,,,,,,,352,,,352,352,352,352,352,352,352,352,,352,352,352',
',352,352,352,352,352,,,,,,,,,,,,,,,,,,,,352,,,352,,,352,352,,,352,,',
',,,352,,,,,,,,,352,,,,,352,352,352,352,,352,352,352,352,,,,,352,352',
',,,373,373,373,352,373,352,352,352,373,373,352,352,,373,,373,373,373',
'373,373,373,373,,,,,,373,373,373,373,373,373,373,,,373,,,,,,,373,,,373',
'373,373,373,373,373,373,373,,373,373,373,,373,373,373,373,373,,,,,,',
',,,,,,,,,,,,,373,,,373,,,373,373,,,373,,,,,,373,,,,,,,,,373,,,,,373',
'373,373,373,,373,373,373,373,,,,,373,373,,,,389,389,389,373,389,373',
'373,373,389,389,373,373,,389,,389,389,389,389,389,389,389,,,,,,389,389',
'389,389,389,389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389',
',389,389,389,,389,389,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389',
'389,,,389,,,,,,389,,,,,,,,,389,,,,,389,389,389,389,,389,389,389,389',
',,,,389,389,,,,416,416,416,389,416,389,389,389,416,416,389,389,,416',
',416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416,416,,,416',
',,,,,,416,,,416,416,416,416,416,416,416,416,,416,416,416,,416,416,416',
'416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416,,,,,,',
',,416,,,,,416,416,416,416,,416,416,416,416,,,,,416,416,,,,,,,416,,416',
'416,416,440,,416,416,,,,440,440,440,,,440,440,440,,440,,,,,,,,440,440',
'440,440,,,,,,,,,440,440,,440,440,440,440,440,,,,,,,,,,,,,,,,,,,,,,,440',
'440,440,440,440,440,440,440,440,440,440,440,440,440,,,440,440,440,,',
'440,,440,440,,,440,440,,440,,440,,440,,440,440,,440,440,440,440,440',
',440,440,440,1162,,1162,1162,1162,1162,1162,,,,,,,440,,1162,440,440',
'449,440,,440,,,,449,449,449,440,,449,449,449,,449,,,1162,,,,,449,449',
'449,449,449,,1162,1162,,,,1162,449,449,,449,449,449,449,449,,,,,,,,',
',,,,,,,,,,,,,,449,449,449,449,449,449,449,449,449,449,449,449,449,449',
',,449,449,449,,,449,,,449,,,449,449,,449,,449,,449,,449,449,,449,449',
'449,449,449,,449,449,449,,,,,,,,,,,,,,449,,,449,449,449,449,,449,450',
'449,,,,,449,450,450,450,,,450,450,450,,450,,,,,,,,450,450,450,450,450',
',,,,,,,450,450,,450,450,450,450,450,,,,,,,,,,,,,,,,,,,,,,,450,450,450',
'450,450,450,450,450,450,450,450,450,450,450,,,450,450,450,,,450,,,450',
',,450,450,,450,,450,,450,,450,450,,450,450,450,450,450,,450,450,450',
',,,,,,,,,,,,,450,,,450,450,450,450,,450,,450,,459,459,459,450,459,,',
',459,459,,,,459,,459,459,459,459,459,459,459,,,,,,459,459,459,459,459',
'459,459,,,459,,,,,,,459,,,459,459,459,459,459,459,459,459,459,459,459',
'459,,459,459,459,459,459,,,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459',
',459,,459,,459,,,459,,,,,,459,,,,,459,459,459,459,,459,459,459,459,',
',,,459,459,,,,461,461,461,459,461,459,459,459,461,461,459,459,,461,',
'461,461,461,461,461,461,461,,,,,,461,461,461,461,461,461,461,,,461,',
',,,,,461,,,461,461,461,461,461,461,461,461,,461,461,461,,461,461,461',
'461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461,461,,,461,,,,,,461,,,,,,',
',,461,,,,,461,461,461,461,,461,461,461,461,,,,,461,461,,,,462,462,462',
'461,462,461,461,461,462,462,461,461,,462,,462,462,462,462,462,462,462',
',,,,,462,462,462,462,462,462,462,,,462,,,,,,,462,,,462,462,462,462,462',
'462,462,462,,462,462,462,,462,462,462,462,462,,,,,,,,,,,,,,,,,,,,462',
',,462,,,462,462,,,462,,,,,,462,,,,,,,,,462,,,,,462,462,462,462,,462',
'462,462,462,,,,,462,462,,,,463,463,463,462,463,462,462,462,463,463,462',
'462,,463,,463,463,463,463,463,463,463,,,,,,463,463,463,463,463,463,463',
',,463,,,,,,,463,,,463,463,463,463,463,463,463,463,,463,463,463,,463',
'463,463,463,463,,,,,,,,,,,,,,,,,,,,463,,,463,,,463,463,,,463,,,,,,463',
',,,,,,,,463,,,,,463,463,463,463,,463,463,463,463,,,,,463,463,,,,,,,463',
',463,463,463,489,,463,463,,,,489,489,489,,,489,489,489,842,489,842,842',
'842,842,842,,,489,489,489,,,,842,,,,,,489,489,,489,489,489,489,489,',
',,,,,,1141,842,1141,1141,1141,1141,1141,,,,842,842,842,842,,1141,,842',
',706,,706,706,706,706,706,489,,,,,,,489,706,,,1141,489,489,,,,842,,',
'1141,1141,1141,1141,,,,1141,,,706,,,,,489,489,,,706,706,706,706,,,,706',
',,,489,,,489,,494,494,494,489,494,,,,494,494,489,,,494,,494,494,494',
'494,494,494,494,,,,,,494,494,494,494,494,494,494,,,494,,,,,,,494,,,494',
'494,494,494,494,494,494,494,,494,494,494,,494,494,494,494,494,,,,,,',
',,,,,,,,,,,,,494,,,494,,,494,494,,,494,,,,,,494,,,,,,,,,494,,,,,494',
'494,494,494,,494,494,494,494,,,,,494,494,,,,504,504,504,494,504,494',
'494,494,504,504,494,494,,504,,504,504,504,504,504,504,504,,,,,,504,504',
'504,504,504,504,504,,,504,,,,,,,504,,,504,504,504,504,504,504,504,504',
'504,504,504,504,,504,504,504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,',
'504,504,,,504,,504,,504,,504,,,504,,,,,,504,,,,,504,504,504,504,,504',
'504,504,504,,,,,504,504,,,,506,506,506,504,506,504,504,504,506,506,504',
'504,,506,,506,506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506',
',,506,,,,,,,506,,,506,506,506,506,506,506,506,506,506,506,506,506,,506',
'506,506,506,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506,,,506,,,,506',
',506,,,506,,,,,,506,,,,,506,506,506,506,,506,506,506,506,,,,,506,506',
',,,508,508,508,506,508,506,506,506,508,508,506,506,,508,,508,508,508',
'508,508,508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,,,508,,,508',
'508,508,508,508,508,508,508,,508,508,508,,508,508,508,508,508,,,,,,',
',,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,,,,508,,,,,,,,,508,,,,,508',
'508,508,508,,508,508,508,508,,,,,508,508,,,,,,,508,,508,508,508,,,508',
'508,514,514,514,514,514,,,,514,514,,,,514,,514,514,514,514,514,514,514',
',,,,,514,514,514,514,514,514,514,,,514,,,,,,514,514,514,514,514,514',
'514,514,514,514,514,514,,514,514,514,,514,514,514,514,514,,,,,,,,,,',
',,,,,,,,,514,,,514,,,514,514,,,514,,514,,,,514,,,,,,,,,514,,,,,514,514',
'514,514,,514,514,514,514,,,,,514,514,,,,,,514,514,,514,514,514,,,514',
'514,524,524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524,524',
',,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524',
'524,524,524,524,524,524,524,,524,524,524,524,524,,,,,,,,,,,,,,,,,,,',
'524,,,524,,,524,524,,,524,,524,,524,,524,,,524,,,,,,524,,,,,524,524',
'524,524,,524,524,524,524,,,,,524,524,,,,533,533,533,524,533,524,524',
'524,533,533,524,524,,533,,533,533,533,533,533,533,533,,,,,,533,533,533',
'533,533,533,533,,,533,,,,,,,533,,,533,533,533,533,533,533,533,533,,533',
'533,533,,533,533,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533',
',,533,,,,,,533,,,,,,,,,533,,,,,533,533,533,533,,533,533,533,533,,,,',
'533,533,,,,536,536,536,533,536,533,533,533,536,536,533,533,,536,,536',
'536,536,536,536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,',
',536,,,536,536,536,536,536,536,536,536,,536,536,536,,536,536,536,536',
'536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,,,,,536,,,,,,,,,536',
',,,,536,536,536,536,,536,536,536,536,,,,,536,536,,,,539,539,539,536',
'539,536,536,536,539,539,536,536,,539,,539,539,539,539,539,539,539,,',
',,,539,539,539,539,539,539,539,,,539,,,,,,,539,,,539,539,539,539,539',
'539,539,539,,539,539,539,,539,539,539,539,539,,,,,,,,,,,,,,,,,,,,539',
',,539,,,539,539,,,539,,,,,,539,,,,,,,,,539,,,,,539,539,539,539,,539',
'539,539,539,,,,,539,539,,,,915,915,915,539,915,539,539,539,915,915,539',
'539,,915,,915,915,915,915,915,915,915,,,,,,915,915,915,915,915,915,915',
',,915,,,,,,,915,,,915,915,915,915,915,915,915,915,,915,915,915,,915',
'915,915,915,915,,,,,,,,,,,,,,,,,,,,915,,,915,,,915,915,,,915,,,,,,915',
',,,,,,,,915,,,,,915,915,915,915,,915,915,915,915,,,,,915,915,,,,545',
'545,545,915,545,915,915,915,545,545,915,915,,545,,545,545,545,545,545',
'545,545,,,,,,545,545,545,545,545,545,545,,,545,,,,,,,545,,,545,545,545',
'545,545,545,545,545,545,545,545,545,,545,545,545,545,545,,,,,,,,,,,',
',,,,,,,,545,,,545,,,545,545,,,545,,545,,,,545,,,545,,,,,,545,,,,,545',
'545,545,545,,545,545,545,545,,,,,545,545,,,,548,548,548,545,548,545',
'545,545,548,548,545,545,,548,,548,548,548,548,548,548,548,,,,,,548,548',
'548,548,548,548,548,,,548,,,,,,,548,,,548,548,548,548,548,548,548,548',
'548,548,548,548,,548,548,548,548,548,,,,,,,,,,,,,,,,,,,,548,,,548,,',
'548,548,,,548,,,,,,548,,,548,,,,,,548,,,,,548,548,548,548,,548,548,548',
'548,,,,,548,548,,,,914,914,914,548,914,548,548,548,914,914,548,548,',
'914,,914,914,914,914,914,914,914,,,,,,914,914,914,914,914,914,914,,',
'914,,,,,,,914,,,914,914,914,914,914,914,914,914,914,914,914,914,,914',
'914,914,914,914,,,,,,,,,,,,,,,,,,,,914,,,914,,,914,914,,,914,,,,914',
',914,,,914,,,,,,914,,,,,914,914,914,914,,914,914,914,914,,,,,914,914',
',,,563,563,563,914,563,914,914,914,563,563,914,914,,563,,563,563,563',
'563,563,563,563,,,,,,563,563,563,563,563,563,563,,,563,,,,,,,563,,,563',
'563,563,563,563,563,563,563,,563,563,563,,563,563,563,563,563,,,,,,',
',,,,,,,,,,,,,563,,,563,,,563,563,,,563,,563,,,,563,,,,,,,,,563,,,,,563',
'563,563,563,,563,563,563,563,,,,,563,563,,,,564,564,564,563,564,563',
'563,563,564,564,563,563,,564,,564,564,564,564,564,564,564,,,,,,564,564',
'564,564,564,564,564,,,564,,,,,,,564,,,564,564,564,564,564,564,564,564',
'564,564,564,564,,564,564,564,564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,',
'564,564,,,564,,564,,564,,564,,,564,,,,,,564,,,,,564,564,564,564,,564',
'564,564,564,,,,,564,564,,,,574,574,574,564,574,564,564,564,574,574,564',
'564,,574,,574,574,574,574,574,574,574,,,,,,574,574,574,574,574,574,574',
',,574,,,,,,,574,,,574,574,574,574,574,574,574,574,574,574,574,574,,574',
'574,574,574,574,,,,,,,,,,,,,,,,,,,,574,,,574,,,574,574,,,574,,574,,574',
',574,,,574,,,,,,574,,,,,574,574,574,574,,574,574,574,574,,,,,574,574',
',,,893,893,893,574,893,574,574,574,893,893,574,574,,893,,893,893,893',
'893,893,893,893,,,,,,893,893,893,893,893,893,893,,,893,,,,,,,893,,,893',
'893,893,893,893,893,893,893,,893,893,893,,893,893,893,893,893,,,,,,',
',,,,,,,,,,,,,893,,,893,,,893,893,,,893,,893,,,,893,,,,,,,,,893,,,,,893',
'893,893,893,,893,893,893,893,,,,,893,893,,,,,,,893,,893,893,893,,,893',
'893,605,605,605,605,605,,,,605,605,,,,605,,605,605,605,605,605,605,605',
',,,,,605,605,605,605,605,605,605,,,605,,,,,,605,605,,605,605,605,605',
'605,605,605,605,605,,605,605,605,,605,605,605,605,605,,,,,,,,,,,,,,',
',,,,,605,,,605,,,605,605,,,605,,605,,,,605,,,,,,,,,605,,,,,605,605,605',
'605,,605,605,605,605,,,,,605,605,,,,607,607,607,605,607,605,605,605',
'607,607,605,605,,607,,607,607,607,607,607,607,607,,,,,,607,607,607,607',
'607,607,607,,,607,,,,,,,607,,,607,607,607,607,607,607,607,607,,607,607',
'607,,607,607,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,,607',
',607,,,,607,,,,,,,,,607,,,,,607,607,607,607,,607,607,607,607,,,,,607',
'607,,,,608,608,608,607,608,607,607,607,608,608,607,607,,608,,608,608',
'608,608,608,608,608,,,,,,608,608,608,608,608,608,608,,,608,,,,,,,608',
',,608,608,608,608,608,608,608,608,,608,608,608,,608,608,608,608,608',
',,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,,608,,,,,,608,,,,,,,,,608,,',
',,608,608,608,608,,608,608,608,608,,,,,608,608,,,,609,609,609,608,609',
'608,608,608,609,609,608,608,,609,,609,609,609,609,609,609,609,,,,,,609',
'609,609,609,609,609,609,,,609,,,,,,,609,,,609,609,609,609,609,609,609',
'609,609,609,609,609,,609,609,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609',
',,609,609,,,609,,609,,609,,609,,,609,,,,,,609,,,,,609,609,609,609,,609',
'609,609,609,,,,,609,609,,,,,,,609,,609,609,609,,,609,609,612,612,612',
'612,612,,,,612,612,,,,612,,612,612,612,612,612,612,612,,,,,,612,612',
'612,612,612,612,612,,,612,,,,,,612,612,,612,612,612,612,612,612,612',
'612,612,,612,612,612,,612,612,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612',
',,612,612,,,612,,612,,,,612,,,,,,,,,612,,,,,612,612,612,612,,612,612',
'612,612,,,,,612,612,,,,613,613,613,612,613,612,612,612,613,613,612,612',
',613,,613,613,613,613,613,613,613,,,,,,613,613,613,613,613,613,613,',
',613,,,,,,,613,,,613,613,613,613,613,613,613,613,,613,613,613,,613,613',
'613,613,613,,,,,,,,,,,,,,,,,,,,613,,,613,,,613,613,,,613,,,,,,613,,',
',,,,,,613,,,,,613,613,613,613,,613,613,613,613,,,,,613,613,,,,888,888',
'888,613,888,613,613,613,888,888,613,613,,888,,888,888,888,888,888,888',
'888,,,,,,888,888,888,888,888,888,888,,,888,,,,,,,888,,,888,888,888,888',
'888,888,888,888,,888,888,888,,888,888,888,888,888,,,,,,,,,,,,,,,,,,',
',888,,,888,,,888,888,,,888,,,,,,888,,,,,,,,,888,,,,,888,888,888,888',
',888,888,888,888,,,,,888,888,,,,616,616,616,888,616,888,888,888,616',
'616,888,888,,616,,616,616,616,616,616,616,616,,,,,,616,616,616,616,616',
'616,616,,,616,,,,,,,616,,,616,616,616,616,616,616,616,616,616,616,616',
'616,,616,616,616,616,616,,,,,,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616',
',616,,616,,616,,,616,,,,,,616,,,,,616,616,616,616,,616,616,616,616,',
',,,616,616,,,,617,617,617,616,617,616,616,616,617,617,616,616,,617,',
'617,617,617,617,617,617,617,,,,,,617,617,617,617,617,617,617,,,617,',
',,,,,617,,,617,617,617,617,617,617,617,617,617,617,617,617,,617,617',
'617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,,,,617,,617',
',,617,,,,,,617,,,,,617,617,617,617,,617,617,617,617,,,,,617,617,,,,618',
'618,618,617,618,617,617,617,618,618,617,617,,618,,618,618,618,618,618',
'618,618,,,,,,618,618,618,618,618,618,618,,,618,,,,,,,618,,,618,618,618',
'618,618,618,618,618,,618,618,618,,618,618,618,618,618,,,,,,,,,,,,,,',
',,,,,618,,,618,,,618,618,,,618,,,,,,618,,,,,,,,,618,,,,,618,618,618',
'618,,618,618,618,618,,,,,618,618,,,,619,619,619,618,619,618,618,618',
'619,619,618,618,,619,,619,619,619,619,619,619,619,,,,,,619,619,619,619',
'619,619,619,,,619,,,,,,,619,,,619,619,619,619,619,619,619,619,,619,619',
'619,,619,619,619,619,619,,,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619',
',,,,,619,,,,,,,,,619,,,,,619,619,619,619,,619,619,619,619,,,,,619,619',
',,,623,623,623,619,623,619,619,619,623,623,619,619,,623,,623,623,623',
'623,623,623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,,623,,,623',
'623,623,623,623,623,623,623,,623,623,623,,623,623,623,623,623,,,,,,',
',,,,,,,,,,,,,623,,,623,,,623,623,,,623,,,,,,623,,,,,,,,,623,,,,,623',
'623,623,623,,623,623,623,623,,,,,623,623,,,,624,624,624,623,624,623',
'623,623,624,624,623,623,,624,,624,624,624,624,624,624,624,,,,,,624,624',
'624,624,624,624,624,,,624,,,,,,,624,,,624,624,624,624,624,624,624,624',
',624,624,624,,624,624,624,624,624,,,,,,,,,,,,,,,,,,,,624,,,624,,,624',
'624,,,624,,,,,,624,,,,,,,,,624,,,,,624,624,624,624,,624,624,624,624',
',,,,624,624,,,,873,873,873,624,873,624,624,624,873,873,624,624,,873',
',873,873,873,873,873,873,873,,,,,,873,873,873,873,873,873,873,,,873',
',,,,,,873,,,873,873,873,873,873,873,873,873,,873,873,873,,873,873,873',
'873,873,,,,,,,,,,,,,,,,,,,,873,,,873,,,873,873,,,873,,,,,,873,,,,,,',
',,873,,,,,873,873,873,873,,873,873,873,873,,,,,873,873,,,,669,669,669',
'873,669,873,873,873,669,669,873,873,,669,,669,669,669,669,669,669,669',
',,,,,669,669,669,669,669,669,669,,,669,,,,,,,669,,,669,669,669,669,669',
'669,669,669,669,669,669,669,,669,669,669,669,669,,,,,,,,,,,,,,,,,,,',
'669,,,669,,,669,669,,,669,,669,,669,,669,,,669,,,,,,669,,,,,669,669',
'669,669,,669,669,669,669,,,,,669,669,,,,833,833,833,669,833,669,669',
'669,833,833,669,669,,833,,833,833,833,833,833,833,833,,,,,,833,833,833',
'833,833,833,833,,,833,,,,,,,833,,,833,833,833,833,833,833,833,833,,833',
'833,833,,833,833,833,833,833,,,,,,,,,,,,,,,,,,,,833,,,833,,,833,833',
',,833,,,,,,833,,,,,,,,,833,,,,,833,833,833,833,,833,833,833,833,,,,',
'833,833,,,,678,678,678,833,678,833,833,833,678,678,833,833,,678,,678',
'678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,,,678,,,,,',
',678,,,678,678,678,678,678,678,678,678,,678,678,678,,678,678,678,678',
'678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,,,,,678,,,,,,,,,678',
',,,,678,678,678,678,,678,678,678,678,,,,,678,678,,,,681,681,681,678',
'681,678,678,678,681,681,678,678,,681,,681,681,681,681,681,681,681,,',
',,,681,681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681,681,681',
'681,681,681,,681,681,681,,681,681,681,681,681,,,,,,,,,,,,,,,,,,,,681',
',,681,,,681,681,,,681,,,,,,681,,,,,,,,,681,,,,,681,681,681,681,,681',
'681,681,681,,,,,681,681,,,,700,700,700,681,700,681,681,681,700,700,681',
'681,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700,700,700,700',
',,700,,,,,,,700,,,700,700,700,700,700,700,700,700,,700,700,700,,700',
'700,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,,700,,700,,',
',700,,,,,,,,,700,,,,,700,700,700,700,,700,700,700,700,,,,,700,700,,',
',810,810,810,700,810,700,700,700,810,810,700,700,,810,,810,810,810,810',
'810,810,810,,,,,,810,810,810,810,810,810,810,,,810,,,,,,,810,,,810,810',
'810,810,810,810,810,810,,810,810,810,,810,810,810,810,810,,,,,,,,,,',
',,,,,,,,,810,,,810,,,810,810,,,810,,,,,,810,,,,,,,,,810,,,,,810,810',
'810,810,,810,810,810,810,,,,,810,810,,,,809,809,809,810,809,810,810',
'810,809,809,810,810,,809,,809,809,809,809,809,809,809,,,,,,809,809,809',
'809,809,809,809,,,809,,,,,,,809,,,809,809,809,809,809,809,809,809,,809',
'809,809,,809,809,809,809,809,,,,,,,,,,,,,,,,,,,,809,,,809,,,809,809',
',,809,,,,,,809,,,,,,,,,809,,,,,809,809,809,809,,809,809,809,809,,,,',
'809,809,,,,808,808,808,809,808,809,809,809,808,808,809,809,,808,,808',
'808,808,808,808,808,808,,,,,,808,808,808,808,808,808,808,,,808,,,,,',
',808,,,808,808,808,808,808,808,808,808,,808,808,808,,808,808,808,808',
'808,,,,,,,,,,,,,,,,,,,,808,,,808,,,808,808,,,808,,,,,,808,,,,,,,,,808',
',,,,808,808,808,808,,808,808,808,808,,,,,808,808,,,,807,807,807,808',
'807,808,808,808,807,807,808,808,,807,,807,807,807,807,807,807,807,,',
',,,807,807,807,807,807,807,807,,,807,,,,,,,807,,,807,807,807,807,807',
'807,807,807,,807,807,807,,807,807,807,807,807,,,,,,,,,,,,,,,,,,,,807',
',,807,,,807,807,,,807,,,,,,807,,,,,,,,,807,,,,,807,807,807,807,,807',
'807,807,807,,,,,807,807,,,,727,727,727,807,727,807,807,807,727,727,807',
'807,,727,,727,727,727,727,727,727,727,,,,,,727,727,727,727,727,727,727',
',,727,,,,,,,727,,,727,727,727,727,727,727,727,727,,727,727,727,,727',
'727,727,727,727,,,,,,,,,,,,,,,,,,,,727,,,727,,,727,727,,,727,,,,,,727',
',,,,,,,,727,,,,,727,727,727,727,,727,727,727,727,,,,,727,727,,,,794',
'794,794,727,794,727,727,727,794,794,727,727,,794,,794,794,794,794,794',
'794,794,,,,,,794,794,794,794,794,794,794,,,794,,,,,,,794,,,794,794,794',
'794,794,794,794,794,,794,794,794,,794,794,794,794,794,,,,,,,,,,,,,,',
',,,,,794,,,794,,,794,794,,,794,,,,,,794,,,,,,,,,794,,,,,794,794,794',
'794,,794,794,794,794,,,,,794,794,,,,786,786,786,794,786,794,794,794',
'786,786,794,794,,786,,786,786,786,786,786,786,786,,,,,,786,786,786,786',
'786,786,786,,,786,,,,,,,786,,,786,786,786,786,786,786,786,786,,786,786',
'786,,786,786,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786',
',,,,,786,,,,,,,,,786,,,,,786,786,786,786,,786,786,786,786,,,,,786,786',
',,,74,74,74,786,74,786,786,786,74,74,786,786,,74,,74,74,74,74,74,74',
'74,,,,,,74,74,74,74,74,74,74,,,74,,,,,,,74,,,74,74,74,74,74,74,74,74',
',74,74,74,,74,74,,,74,,,,,,,,,,,,,,,,,74,,,74,,,74,,,74,74,,,74,,,,',
',,,,,,,,,,,,,,,74,74,74,74,,74,74,74,74,,,,,74,74,,,,73,73,73,74,73',
'74,74,74,73,73,,,,73,,73,73,73,73,73,73,73,,,,,,73,73,73,73,73,73,73',
',,73,,,,,,,73,,,73,73,73,73,73,73,73,73,,73,73,73,,73,73,,,73,,,,,,',
',,,,,,,,,,,,,73,,,73,,,73,73,,,73,,73,,,,,,,,,,,,,,,,,,73,73,73,73,',
'73,73,73,73,,,,,73,73,,,,684,684,684,73,684,73,73,73,684,684,,,,684',
',684,684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684',
',,,,,,684,,,684,684,684,684,684,684,684,684,,684,684,684,,684,684,,',
'684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,684,,,684,,,,,,,,,,,,,,,,,,,',
'684,684,684,684,,684,684,684,684,,,,,684,684,,,,695,695,695,684,695',
'684,684,684,695,695,,,,695,,695,695,695,695,695,695,695,,,,,,695,695',
'695,695,695,695,695,,,695,,,,,,,695,,,695,695,695,695,695,695,695,695',
',695,695,695,,695,695,,,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,',
',695,,,,,,,,,,,,,,,,,,,,695,695,695,695,,695,695,695,695,,,,,695,695',
',,,530,530,530,695,530,695,695,695,530,530,,,,530,,530,530,530,530,530',
'530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530',
'530,530,530,530,530,,530,530,530,,530,530,,,530,,,,,,,,,,,,,,,,,,,,530',
',,530,,,530,530,,,530,,,,,,,,,,,,,,,,,,,,530,530,530,530,,530,530,530',
'530,,,,,530,530,,,,308,308,308,530,308,530,530,530,308,308,,,,308,,308',
'308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308,,,308,,,,,',
',308,,,308,308,308,308,308,308,308,308,,308,308,308,,308,308,,,308,',
',,,,,,,,,,,,,,,,,,308,,,308,,,308,308,,,308,,,1143,,1143,1143,1143,1143',
'1143,,,,,,,,,1143,,308,308,308,308,,308,308,308,308,,,,,308,308,,,,308',
',1143,308,,308,308,308,75,75,75,,75,1143,1143,,75,75,1143,,,75,,75,75',
'75,75,75,75,75,,,,,,75,75,75,75,75,75,75,,,75,,,,,,,75,,,75,75,75,75',
'75,75,75,75,,75,75,75,,75,75,,,75,,,,,,,,,,,,,,,,,,,,75,,,75,,,75,75',
',,75,,,,,,,,,,,,,,,,,,,,75,75,75,75,,75,75,75,75,,,,,75,75,,,,37,37',
'37,75,37,75,75,75,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37',
'37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,',
'37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,,871,,871,871,871,871,871',
',,,,,,,,871,,37,37,37,37,,37,37,37,37,,,,,37,37,,,,37,,871,37,,37,37',
'37,971,971,971,,971,871,871,,971,971,871,,,971,,971,971,971,971,971',
'971,971,,,,,,971,971,971,971,971,971,971,,,971,,,,,,,971,,,971,971,971',
'971,971,971,971,971,,971,971,971,,971,971,,,971,,,,,,,,,,,,,,,,,,,,971',
',,971,,,971,971,,,971,,,,,,,,,,,,,,,,,,,,971,971,971,971,,971,971,971',
'971,,,,,971,971,,,,962,962,962,971,962,971,971,971,962,962,,,,962,,962',
'962,962,962,962,962,962,,,,,,962,962,962,962,962,962,962,,,962,,,,,',
',962,,,962,962,962,962,962,962,962,962,,962,962,962,,962,962,,,962,',
',,,,,,,,,,,,,,,,,,962,,,962,,,962,962,,,962,,,,,,,,,,,,,,,,,,,,962,962',
'962,962,,962,962,962,962,,,,,962,962,,,,36,36,36,962,36,962,962,962',
'36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,',
',,,36,,,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,,36,,,,,,,,,,,,,,',
',,,,,36,,,36,,,36,36,,,36,,36,,,,,,,,,,,,,,,,,,36,36,36,36,,36,36,36',
'36,,,,,36,36,,,,522,522,522,36,522,36,36,36,522,522,,,,522,,522,522',
'522,522,522,522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522',
',,522,522,522,522,522,522,522,522,,522,522,522,,522,522,,,522,,,,,,',
',,,,,,,,,,,,,522,,,522,,,522,522,,,522,,,,,,,,,,,,,,,,,,,,522,522,522',
'522,,522,522,522,522,,,,,522,522,,,,1050,1050,1050,522,1050,522,522',
'522,1050,1050,,,,1050,,1050,1050,1050,1050,1050,1050,1050,,,,,,1050',
'1050,1050,1050,1050,1050,1050,,,1050,,,,,,,1050,,,1050,1050,1050,1050',
'1050,1050,1050,1050,,1050,1050,1050,,1050,1050,,,1050,,,,,,,,,,,,,,',
',,,,,1050,,,1050,,,1050,1050,,,1050,,,,,,,,,,,,,,,,,,,,1050,1050,1050',
'1050,,1050,1050,1050,1050,,,,,1050,1050,,,,325,325,325,1050,325,1050',
'1050,1050,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325',
'325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325',
'325,325,,325,325,,,325,,,,,,,,,,,,,,,,,,,,325,,,325,,,325,325,,,325',
',,,,,,,,,,,,,,,,,,,325,325,325,325,,325,325,325,325,,,,,325,325,,,,',
',,325,,325,325,325,603,603,603,603,603,603,603,603,603,603,603,603,603',
'603,603,603,603,603,603,603,603,603,603,603,,,,603,603,603,603,603,603',
'603,603,603,603,,,,,,603,603,603,603,603,603,603,603,603,,,603,,,,,',
',,603,603,,603,603,603,603,603,603,603,,,603,603,,,,603,603,603,603',
',,,,,,,,,,,,,603,603,,603,603,603,603,603,603,603,603,603,603,603,603',
',,603,603,,,,,,,,,,,,,,603,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,',
'11,11,11,11,11,11,11,11,11,,,11,,,,,,,,11,11,,11,11,11,11,11,11,11,',
',11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11',
'11,11,11,,,11,11,,,,,,,,,,,,,,11,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,,,,407,407',
'407,407,407,407,407,407,407,407,,,,,,407,407,407,407,407,407,407,407',
'407,,,407,,,,,,,,407,407,,407,407,407,407,407,407,407,,,407,407,,,,407',
'407,407,407,,,,,,,,,,,,,,407,407,,407,407,407,407,407,407,407,407,407',
'407,407,407,,,407,407,,,,,,,,,,,,,,407,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,,,,10,10,10,10,10,10,10,10',
'10,10,,,,,,10,10,10,10,10,10,10,10,10,10,,10,,,,,,,,10,10,,10,10,10',
'10,10,10,10,,,10,10,,,,10,10,10,10,,,,,,,,,,,,,,10,10,,10,10,10,10,10',
'10,10,10,10,10,10,10,,,10,10,464,464,464,464,,,,,,,,,,10,,,464,464,464',
'464,,,768,464,768,768,768,768,768,464,464,,,464,,,,768,,,,,,,,,,,,,',
',,464,,,464,,,768,464,,,464,,,,,768,768,768,768,,,,768,,,,464,,,,464',
'464,464,464,,464,464,464,464,,,,,464,464,816,816,816,816,,,464,,464',
'464,464,,,464,464,,816,816,816,816,,,,816,816,,,,,816,816,,,816,816',
',,,,,,,,,,,,,,,,,,816,,,816,,,,816,,,816,,816,,,,,,,816,,,,,,,816,,',
',816,816,816,816,,816,816,816,816,,,,,816,816,,,,,,,816,,816,816,816',
',,816,816,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769',
'769,769,769,769,769,769,769,769,769,,,,769,769,769,769,769,769,769,769',
'769,769,,,,,,769,769,769,769,769,769,769,769,769,,,769,,,,,,,,769,769',
',769,769,769,769,769,769,769,,,769,769,,,,769,769,769,769,,,,,,,,,,',
',,,769,769,,769,769,769,769,769,769,769,769,769,769,769,769,,,769,1092',
'1092,1092,1092,,,1145,,1145,1145,1145,1145,1145,,,,1092,1092,1092,1092',
',1145,,1092,,,,,,1092,1092,,,1092,,,,,,,,,,1145,,,,,,,,,,1092,1145,1145',
'1092,,,1145,1092,,,1092,,,,,,,,,,,,,,,,1092,,,,1092,1092,1092,1092,',
'1092,1092,1092,1092,,,,,1092,1092,892,892,892,892,,,1092,,1092,1092',
'1092,,,1092,1092,,892,892,892,892,,,,892,892,,,,,892,892,,,892,892,',
',,,,,,,,,,,,,,,,,892,,,892,,,,892,,,892,,892,,,,,,,892,,,,,,,892,,,',
'892,892,892,892,,892,892,892,892,,,,,892,892,1024,1024,1024,1024,,,892',
',892,892,892,,,892,892,,1024,1024,1024,1024,,,867,1024,867,867,867,867',
'867,1024,1024,,,1024,,,,867,,,,,,,,,,,,,,,,1024,,,1024,,,867,1024,,',
'1024,,,,,867,867,867,867,,,,867,,,,1024,,,,1024,1024,1024,1024,,1024',
'1024,1024,1024,,,,,1024,1024,1082,1082,1082,1082,,,1024,,1024,1024,1024',
',,1024,1024,,1082,1082,1082,1082,,,1041,1082,1041,1041,1041,1041,1041',
'1082,1082,,,1082,,,,1041,,,,,,,,,,,,,,,,1082,,,1082,,,1041,1082,,,1082',
',1082,,,1041,1041,1041,1041,,,,1041,,,,1082,,,,1082,1082,1082,1082,',
'1082,1082,1082,1082,,,,,1082,1082,1091,1091,1091,1091,,,1082,,1082,1082',
'1082,,,1082,1082,,1091,1091,1091,1091,,,1043,1091,1043,1043,1043,1043',
'1043,1091,1091,,,1091,,,,1043,,,,,,,,,,,,,,,,1091,,,1091,,,1043,1091',
',,1091,,,,,1043,1043,1043,1043,,,,1043,,,,1091,,,,1091,1091,1091,1091',
',1091,1091,1091,1091,,,,,1091,1091,824,824,824,824,,,1091,,1091,1091',
'1091,,,1091,1091,,824,824,824,824,,,1069,824,1069,1069,1069,1069,1069',
'824,824,,,824,,,,1069,,,,,,,,,,,,,,,,824,,,824,,,1069,824,,,824,,,,',
',,1069,1069,,,,1069,,,,824,,,,824,824,824,824,,824,824,824,824,,,,,824',
'824,819,819,819,819,,,824,,824,824,824,,,824,824,,819,819,819,819,,',
'1045,819,1045,1045,1045,1045,1045,819,819,,,819,,,,1045,,,,,,,,,,,,',
',,,819,,,819,,,1045,819,,,819,,819,,,,,1045,1045,,,,1045,,,,819,,,,819',
'819,819,819,,819,819,819,819,,,,,819,819,,,,,,,819,,819,819,819,,,819',
'819,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,,,,76,76,76,76,76,76,76,76,76,76,,,,,,76,76,76,76,76,76,76,76',
'76,76,76,76,,76,,,,,,76,76,,76,76,76,76,76,76,76,,,76,76,,,,76,76,76',
'76,,,,,,76,,,,,,,,76,76,,76,76,76,76,76,76,76,76,76,76,76,76,,,76,813',
'813,813,813,,,1147,,1147,1147,1147,1147,1147,,,,813,813,813,813,,1147',
',813,,,,,,813,813,,,813,,,,,,,,,,1147,,,,,,,,,,813,1147,1147,813,,,1147',
'813,,,813,,,,,,,,,,,,,,,,813,,,,813,813,813,813,,813,813,813,813,,,',
',813,813,817,817,817,817,,,813,,813,813,813,,,813,813,,817,817,817,817',
',,,817,817,,,,,817,817,,,817,817,,,,,,,,,,,,,,,,,,,817,,,817,,,,817',
',,817,,817,,,,,,,817,,,,,,,817,,,,817,817,817,817,,817,817,817,817,',
',,,817,817,1139,1139,1139,1139,,,817,,817,817,817,,,817,817,,1139,1139',
'1139,1139,,,1067,1139,1067,1067,1067,1067,1067,1139,1139,,,1139,,,,1067',
',,,,,,,,,,,,,,,1139,,,1139,,,1067,1139,,,1139,,,,,,,1067,1067,,,,1067',
',,,1139,,,,1139,1139,1139,1139,,1139,1139,1139,1139,,,,,1139,1139,1136',
'1136,1136,1136,,,1139,,1139,1139,1139,,,1139,1139,,1136,1136,1136,1136',
',,1065,1136,1065,1065,1065,1065,1065,1136,1136,,,1136,,,,1065,,,,,,',
',,,,,,,,,1136,,,1136,,,1065,1136,,,1136,,,,,1065,1065,1065,1065,,,,1065',
',,,1136,,,,1136,1136,1136,1136,,1136,1136,1136,1136,,,,,1136,1136,931',
'931,931,931,,,1136,,1136,1136,1136,,,1136,1136,,931,931,931,931,,,1183',
'931,1183,1183,1183,1183,1183,931,931,,,931,,,,1183,,,,,,,,,,,,,,,,931',
',,931,,,1183,931,,,931,,,,,,,1183,1183,,,,1183,,,,931,,,,931,931,931',
'931,,931,931,931,931,,,,,931,931,923,923,923,923,,,931,,931,931,931',
',,931,931,,923,923,923,923,,,,923,,,,,,923,923,,,923,,,,,,,,826,826',
'826,826,,,,,,,,,923,,,923,826,826,826,923,,,923,,923,,,,,826,826,,,826',
',,,,923,,,,923,923,923,923,,923,923,923,923,,,,,923,923,,,,,,,923,,923',
'923,923,,,923,923,553,,553,553,553,553,553,,,,,826,826,826,826,553,826',
'826,826,826,,,,,826,826,647,647,647,647,,,826,,826,826,826,553,553,',
',,647,647,647,,553,553,553,553,,,,553,,647,647,,,647,646,646,646,646',
',,,,,,,,,,,,646,646,646,,,,,,,,,,,646,646,,,646,,,,,,,,,,,,,,,,647,647',
'647,647,,647,647,647,647,,,,,647,647,,,,,,,647,,647,647,647,,,,,,,,',
'646,646,646,646,,646,646,646,646,,,,,646,646,1119,1119,,,1119,,646,',
'646,646,646,,1119,1119,,1119,1119,1119,1119,1119,1119,1119,,,1119,1119',
',,,1119,1119,1119,1119,,,,,,1119,,,,,,,,1119,1119,,1119,1119,1119,1119',
'1119,1119,1119,1119,1119,1119,1119,1119,1118,1118,1119,,1118,,,,,,,',
'1118,1118,,1118,1118,1118,1118,1118,1118,1118,,,1118,1118,,,,1118,1118',
'1118,1118,,,,,,1118,,,,,,,,1118,1118,,1118,1118,1118,1118,1118,1118',
'1118,1118,1118,1118,1118,1118,526,526,1118,,526,,,,,,,,526,526,,526',
'526,526,526,526,526,526,,,526,526,,,,526,526,526,526,,,,,,526,,,,,,',
',526,526,,526,526,526,526,526,526,526,526,526,526,526,526,1114,1114',
'526,,1114,,,,,,,,1114,1114,,1114,1114,1114,1114,1114,1114,1114,,,1114',
'1114,,,,1114,1114,1114,1114,,,,,,1114,,,,,,,,1114,1114,,1114,1114,1114',
'1114,1114,1114,1114,1114,1114,1114,1114,1114,458,458,1114,,458,,,,,',
',,458,458,,458,458,458,458,458,458,458,,,458,458,,,,458,458,458,458',
',,,,,458,,,,,,,,458,458,,458,458,458,458,458,458,458,458,458,458,458',
'458,457,457,458,,457,,,,,,,,457,457,,457,457,457,457,457,457,457,,,457',
'457,,,,457,457,457,457,,,,,,457,,,,,,,,457,457,,457,457,457,457,457',
'457,457,457,457,457,457,457,220,220,457,,220,,,,,,,,220,220,,220,220',
'220,220,220,220,220,,,220,220,,,,220,220,220,220,,,,,,220,,,,,,,,220',
'220,,220,220,220,220,220,220,220,220,220,220,220,220,219,219,220,,219',
',,,,,,,219,219,,219,219,219,219,219,219,219,,,219,219,,,,219,219,219',
'219,,,,,,219,,,,,,,,219,219,,219,219,219,219,219,219,219,219,219,219',
'219,219,535,535,219,,535,,,,,,,,535,535,,535,535,535,535,535,535,535',
',,535,535,,,,535,535,535,535,,,,,,535,,,,,,,,535,535,,535,535,535,535',
'535,535,535,535,535,535,535,535,565,565,535,,565,,,,,,,,565,565,,565',
'565,565,565,565,565,565,,,565,565,,,,565,565,565,565,,,,,,565,,,,,,',
',565,565,,565,565,565,565,565,565,565,565,565,565,565,565,566,566,565',
',566,,,,,,,,566,566,,566,566,566,566,566,566,566,,,566,566,,,,566,566',
'566,566,,,,,,566,,,,,,,,566,566,,566,566,566,566,566,566,566,566,566',
'566,566,566,534,534,566,,534,,,,,,,,534,534,,534,534,534,534,534,534',
'534,,,534,534,,,,534,534,534,534,,,,,,534,,,,,,,,534,534,,534,534,534',
'534,534,534,534,534,534,534,534,534,611,611,534,,611,,,,,,,,611,611',
',611,611,611,611,611,611,611,,,611,611,,,,611,611,611,611,,,,,,611,',
',,,,,,611,611,,611,611,611,611,611,611,611,611,611,611,611,611,269,269',
'611,,269,,,,,,,,269,269,,269,269,269,269,269,269,269,,,269,269,,,,269',
'269,269,269,,,,,,,,,,,,,,269,269,,269,269,269,269,269,269,269,269,269',
'269,269,269,572,572,269,,572,,,,,,,,572,572,,572,572,572,572,572,572',
'572,,,572,572,,,,572,572,572,572,,,,,,572,,,,,,,,572,572,,572,572,572',
'572,572,572,572,572,572,572,572,572,573,573,572,,573,,,,,,,,573,573',
',573,573,573,573,573,573,573,,,573,573,,,,573,573,573,573,,,,,,573,',
',,,,,,573,573,,573,573,573,573,573,573,573,573,573,573,573,573,610,610',
'573,,610,,,,,,,,610,610,,610,610,610,610,610,610,610,,,610,610,,,,610',
'610,610,610,,,,,,610,,,,,,,,610,610,,610,610,610,610,610,610,610,610',
'610,610,610,610,525,525,610,,525,,,,,,,,525,525,,525,525,525,525,525',
'525,525,,,525,525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525',
'525,525,525,525,525,525,525,525,525,525,,1071,525,1071,1071,1071,1071',
'1071,,869,,869,869,869,869,869,1071,,,,,,,,869,,,,,,,,,,,,,,1071,,,',
',,,,869,,,1071,1071,,,,1071,869,869,869,869,,,,869' ]
        racc_action_check = arr = ::Array.new(27375, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1237,  2734,  1451,   nil,   277,   nil,  5312,  1423,  1335,
 24199, 23943,  1317,   nil,  1281,  1279,   553,  1335,   829,   634,
   nil,   -70,  5443,  1150,  1393,   nil,   588,   nil,   165,  5584,
  5694,  5828,  5959,  6090,   nil,  3742, 23283, 22882,   nil,  1275,
   416,   442,  1352,  6221,  6352,   123,  6483,  6614,   578,  6745,
  1276,   920,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  6886,   nil,  7027,  7158,  7289,   -15,   nil,  7420,  7551,
   nil,   nil,  7682, 22088, 21957, 22751, 25338,   nil,   nil,   nil,
   nil,   nil,   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   390,   nil,   nil,   278,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  7825,   nil,
   nil,   nil,   nil,  7968,  8099,  8230,  8361,  8504,   nil,  2302,
   nil,   701,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1265,   nil,  2158,  8635,  8766,  8897,  9028,  9159,  9290, 26590,
 26529,   nil,   nil,  9421,  9552,  9683,   nil,   nil,   872,   283,
   310,  1338,   333,  1245,  1298,   nil,  9814,  2014,  1292,   nil,
  9945, 10076, 10207, 10338, 10469, 10600, 10731, 10862, 10993, 11124,
 11255, 11386, 11517, 11648, 11779, 11910, 12041, 12172, 12303, 12434,
 12565, 12696,   nil,   nil,   nil,   nil, 12827,   nil,   nil, 26956,
   nil,   nil,  1284, 12958, 13089,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 13220,   nil,  2158,   nil,  1245,  1202,   nil, 13351,
  1247, 13482,   nil,   nil, 13613, 13744,   nil,   nil,   315,   nil,
 13887,  1279,  1221,  1186,  1294,  1180,  1218,  1147, 22612,  4750,
   989,   995,   999,  1222,  1022,   nil,  1186,  1139,   167,   nil,
   nil,   nil,  1175,   198,  1130, 23676,   nil,   385,  1150,  3454,
  2446,  1196,   nil,  1178, 14411,   nil, 14542,  3598,   991,  1110,
   nil,   401,   314,  1142,  1118,   427,  1143,   nil,   nil,   252,
    26,    -1, 14673,  4174,  4030,   665,  1190,  1058,   -18,    11,
   474,  1134,    24,  1154,   nil,   nil,   997,   694,   370,   nil,
   501,   nil,  1069, 14804,   nil,   nil,   nil,   -32,   159,   198,
   259,   311,   410,   442,   478,   479,   nil,   509,   nil, 14935,
   nil,   389,   386,   380,   422,   268,   -31,   -27,   415,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1062, 24071,   nil,   nil,
   nil,   nil,  1053,   nil,  1119,  1026, 15066,  1025,   nil,   nil,
  1012,   nil,   717,   277,  1105,   nil,   nil,  1294,   nil,   nil,
   nil,   nil,   nil,  1438,  1017,   nil,  1007,  1005,   524,   598,
 15207,   nil,   nil,   nil,   639,   529,  1044,   nil,   nil, 15339,
 15475,   nil,   nil,   nil,   -14,   nil,  1030, 26468, 26407, 15612,
   -82, 15743, 15874, 16005, 24283,  2590,  2878,   822,   710,  1052,
  1051,  1047,  1039,  4462,  4606,  4750,  4318,  4174,  4030,  3886,
  3742,  3598,  2330,  2474,  3022,  2734,  1582,  3166,   nil, 16146,
   nil,   nil,   nil,   nil, 16276,   974,   944,   945,   nil,   nil,
   nil,   890,   nil,   nil, 16407,   nil, 16538,   nil, 16669,   nil,
   313,   nil,   nil,   nil, 16812,  1567,   nil,   889,   852,   nil,
   nil,   848, 23414,   832, 16955, 27200, 26285,   721,   864,   nil,
 22481,   819,   nil, 17086, 26834, 26651, 17217,  3310,  1870, 17348,
   941,   933,   791,   828,   nil, 17610,   nil,   nil, 17741,   nil,
   nil,   nil,   nil, 26005,  1150,   904,   nil,  5038,    65,   903,
   899,   177,   880, 18003, 18134, 26712, 26773,    65,   nil,   nil,
   833,   nil, 27017, 27078, 18265,   nil,   nil,   194,  4894,   798,
   nil,    20,   nil,   nil,   nil,  1133,   nil,   nil,   nil,   753,
   nil,   nil,   317,   nil,   208,   nil,   nil,   733,   nil,   732,
   nil,   nil,   nil, 23815,   nil, 18539,   732, 18670, 18801, 18932,
 27139, 26895, 19075, 19206,   762,   759, 19468, 19599, 19730, 19861,
   747,   nil,   nil, 19992, 20123,   733,   nil,   nil,   nil,   255,
   414,   139,     0,   679,   720,   nil,   695,   nil,   nil,   610,
    66,   322,   nil,   539,   nil,   nil, 26084, 26050,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   752,
   252,   nil,   665,   766,   nil,   737,    -8,   nil,   nil, 20385,
   nil,   625,   619,   645,   nil,   441,   nil,   477, 20647,   nil,
   nil, 20778,   nil,   303, 22219,   400,   nil,   359,   165,   167,
   381,   237,   757,   345,   246, 22350,   nil,   292,    10,   317,
 20909,   nil,   nil,   nil,   443,   nil, 16165,   nil,   183,   176,
   101,   nil,    53,    26,   -41,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -86,  2288,   nil,   nil, 21564,   nil,   nil,
   nil,   187,   nil,   nil,   nil,   -26,   nil,   nil,  1443,   653,
   nil,  1466,   nil,   nil,   nil,   nil,   nil,  1470,  1469,   nil,
   nil,   -11,  1345,    38,    61,   178,    29,  3310,   584,   900,
   nil,  1322,  1438,  5169,   nil,  1445,  3166,   526, 24286, 24524,
   nil,   nil,   nil,   nil,   nil,   nil,  3022,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1341, 21826,  1347,   405,   -28,
   749,   861,   nil,  2014, 21695,   nil,   -84,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil, 21433, 21302, 21171,
 21040,   399,   229, 25421,   -75,   134, 24381, 25519,   279, 25195,
   nil,   774,   nil,   403, 25097,  6886, 25952,   nil,   nil,   nil,
   nil,   nil,   nil, 20516,   nil,   549,   nil,   nil,   570,   597,
   nil,   nil, 16110,  2878,   nil,   nil,   nil,   nil,   622,   163,
   nil,   nil,   760,   nil,  3454,   660,   709,   nil,   nil,   nil,
    33,   672,   815,   nil,   nil,   598,   nil, 24806,   nil, 27270,
   nil, 22929,   nil, 20254,   nil,  2317,   nil,   704,   705,  1568,
   714,   nil,   nil,   nil,   nil,   nil,   836,   nil, 19337,   855,
   nil,   nil, 24705, 18396,  4462,    64,   864,   nil,   874,   498,
  1006,   nil,   883,   763,   763,   775,   nil,   647,   nil,   782,
   778,   154,   nil,   nil, 17872, 17479,   nil,   nil,   nil,   nil,
   140,   793,   811, 25911,   nil,   813,   -19,   817,   nil,   nil,
   nil, 25813,   nil,   nil,   232,   825,   827,   nil,   828,   830,
   nil,   nil,   -66,   nil,   nil,   nil,  1726,  1582,   nil,   nil,
   853,   854,   862,   nil,   865,   867,   868,   nil,   893,   875,
   880,   873, 23152,   nil,   nil,   nil,   nil,  1726,   nil,   nil,
    42, 23021,   nil,   nil,   nil,   nil,   988,   951,   nil,  1034,
   nil,   nil,   954,   960,   nil,   962,   963,   nil,   967,   nil,
   nil,   972,   992,  2327,   nil,   nil,   nil,    39,   nil,    53,
   605,   116,   nil,   nil,   nil,   465,   nil,   nil,   nil,  1110,
   nil,   nil,   636,   nil,   nil,  1036,   nil,   nil,   nil,  1043,
   999,   -21,   nil,  1003, 24803,   695,  1056,   383,   nil,   nil,
   nil,   nil,   nil,   nil,   198,   nil,   nil,  1183,   nil,   nil,
   nil, 24904,   nil, 25002,   nil, 25198,   nil,   nil,  1054,   925,
 23545,   611,  1122,   nil,  3886,    38,    19,   282,  1155,     8,
   nil,  2446,  2590,   nil,   nil, 25718,   nil, 25620,   nil, 25100,
   nil, 27262,   nil,   nil,   nil,   nil,  1113,  1121,  4318,   nil,
 14280, 14149, 24901,   nil,   nil,   nil,   nil,  1144,  4606,   nil,
  1143, 24999, 24607,  1151,   nil,   nil,   nil,   nil,   nil,  1152,
   nil,   nil,  1158,  1168,  1169,  1170,   nil,  1173,   nil,   458,
   nil,   nil,   nil,   906, 26346,   nil,  1323, 14018, 26224, 26163,
   -10,  1223,  1341,  1221,  1238,  1241,  1242,  2670,  2356,   687,
  1870,   nil,   nil,   nil,   nil,  1374, 25715,  1254,  1255, 25617,
   nil, 16146,   nil, 22659,   nil, 24594,   nil, 25408,   nil,   nil,
   nil,  1057,  1324,  1329,   nil,  1289,    89,    -7,    69,    -9,
   nil,   nil, 15270,   nil,   nil,   nil,   nil,  1295,   nil,    20,
   nil,  1298,   nil,  1302,  1303,  1312,  1313,   nil,     6,  1317,
   nil,   nil,   nil, 25816,   nil,   nil,   nil,   nil,   nil,  1174,
   nil ]

racc_action_default = [
    -1,  -713,    -4,  -713,    -2,  -698,    -5,  -713,    -8,  -713,
  -713,  -713,  -713,   -31,  -713,  -713,   -36,  -713,  -713,  -295,
   -48,  -700,  -713,   -55,   -59,   -60,   -61,   -65,  -272,  -272,
  -272,  -308,  -339,  -340,   -77,   -13,   -81,   -89,   -91,  -713,
  -597,  -598,  -713,  -713,  -713,  -713,  -713,  -713,  -229,  -713,
  -700,  -243,  -286,  -287,  -288,  -289,  -290,  -291,  -292,  -293,
  -294,  -686,  -297,  -301,  -712,  -676,  -316,  -318,  -713,  -713,
   -57,   -57,  -698,  -713,  -713,  -713,  -713,  -341,  -342,  -344,
  -537,  -538,  -539,  -540,  -561,  -543,  -544,  -563,  -565,  -548,
  -553,  -557,  -559,  -575,  -576,  -577,  -561,  -579,  -581,  -582,
  -583,  -584,  -684,  -586,  -587,  -685,  -589,  -590,  -591,  -592,
  -593,  -594,  -595,  -596,  -601,  -602,  1191,    -3,  -699,  -708,
  -709,  -710,    -7,  -713,  -713,  -713,  -713,  -713,    -9,    -4,
   -19,  -713,  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,
  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,
  -191,  -192,  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -200,
   -24,  -127,   -13,  -713,  -713,  -713,  -713,  -713,  -262,  -713,
  -713,  -696,  -697,  -713,  -713,  -700,  -701,   -52,  -713,  -597,
  -598,  -713,  -295,  -713,  -713,  -235,  -713,   -13,  -713,   -53,
  -212,  -213,  -713,  -713,  -713,  -713,  -713,  -713,  -713,  -713,
  -713,  -713,  -713,  -713,  -713,  -713,  -713,  -713,  -713,  -713,
  -713,  -713,  -244,  -245,  -246,  -247,  -713,  -408,  -410,  -713,
  -694,  -695,   -66,  -262,  -713,  -315,  -414,  -423,  -425,   -72,
  -420,   -73,  -700,   -74,  -250,  -267,  -276,  -276,  -271,  -713,
  -277,  -713,  -561,  -678,  -713,  -713,   -75,   -76,  -698,   -14,
  -713,   -17,  -713,   -79,   -13,  -700,  -713,   -82,   -85,   -13,
   -97,   -98,  -713,  -713,  -105,  -308,  -311,  -700,  -713,  -339,
  -340,  -343,  -421,  -713,   -87,  -713,   -93,  -305,  -713,  -214,
  -215,  -580,  -223,  -224,  -713,  -236,  -713,   -13,  -299,  -700,
  -251,  -705,  -705,  -713,  -713,  -705,  -713,  -317,  -399,   -56,
  -713,  -713,  -713,   -13,   -13,  -698,  -713,  -699,  -597,  -598,
  -713,  -713,  -295,  -713,  -354,  -355,  -115,  -116,  -713,  -118,
  -713,  -295,  -605,  -713,  -597,  -598,  -332,  -120,  -121,  -160,
  -161,  -162,  -178,  -183,  -190,  -193,  -334,  -713,  -674,  -713,
  -541,  -713,  -713,  -713,  -713,  -713,  -713,  -713,  -713,    -6,
  -711,   -25,   -26,   -27,   -28,   -29,  -713,  -713,   -21,   -22,
   -23,  -128,  -713,   -32,   -35,  -282,  -713,  -713,  -281,   -33,
  -713,   -37,  -713,  -295,   -45,   -47,  -201,  -255,  -277,   -49,
   -50,   -38,  -202,  -255,  -700,  -263,  -276,  -276,  -687,  -688,
  -272,  -418,  -689,  -690,  -688,  -687,  -272,  -417,  -419,  -689,
  -690,   -44,  -209,   -51,  -700,  -314,  -713,  -713,  -713,  -262,
  -305,  -713,  -713,  -713,  -713,  -210,  -211,  -216,  -217,  -218,
  -219,  -220,  -221,  -225,  -226,  -227,  -228,  -230,  -231,  -232,
  -233,  -234,  -237,  -238,  -239,  -240,  -700,  -248,  -429,  -272,
  -687,  -688,   -63,   -67,  -633,  -700,  -276,  -700,  -273,  -427,
  -429,  -700,  -310,  -268,  -713,  -269,  -713,  -274,  -713,  -278,
  -713,  -681,  -683,   -12,  -699,   -16,   -18,  -700,   -78,  -303,
   -94,   -83,  -713,  -700,  -262,  -713,  -713,  -104,  -713,  -580,
  -713,   -90,   -95,  -713,  -713,  -713,  -713,  -249,  -241,  -713,
  -529,  -713,  -700,  -713,  -252,  -707,  -706,  -254,  -707,  -306,
  -307,  -677,  -319,  -632,   -13,  -345,  -346,   -13,  -713,  -713,
  -713,  -713,  -713,  -713,  -262,  -713,  -713,  -305,   -57,  -115,
  -116,  -117,  -713,  -713,  -262,  -328,  -603,  -713,   -13,  -609,
  -336,  -700,  -542,  -562,  -567,  -713,  -569,  -545,  -564,  -713,
  -566,  -547,  -713,  -550,  -713,  -552,  -555,  -713,  -556,  -713,
  -578,   -10,   -20,  -713,   -30,  -713,  -285,  -713,  -713,  -262,
  -713,  -713,  -713,  -713,  -422,  -713,  -264,  -266,  -713,  -713,
   -68,  -261,  -415,  -713,  -713,   -70,  -416,  -313,  -702,  -687,
  -688,  -687,  -688,  -700,   -54,  -448,  -450,  -452,  -455,  -509,
  -462,  -465,  -468,  -502,  -507,  -508,  -713,  -713,  -512,  -513,
  -514,  -515,  -516,  -517,  -518,  -519,  -520,  -521,  -523,  -713,
  -713,  -527,  -713,  -713,  -430,   -62,  -411,  -427,  -257,  -264,
  -259,  -713,  -389,  -713,  -309,  -276,  -275,  -279,  -713,  -679,
  -680,  -713,   -15,   -80,  -713,   -86,   -92,  -700,  -687,  -688,
  -260,  -691,  -103,  -713,   -88,  -713,  -208,  -222,  -700,  -712,
  -712,  -298,  -300,  -302,  -705,  -400,  -632,  -403,  -673,  -673,
  -673,  -615,  -617,  -617,  -617,  -631,  -634,  -635,  -636,  -637,
  -638,  -639,  -640,  -641,  -713,  -643,  -645,  -647,  -652,  -654,
  -655,  -658,  -663,  -665,  -666,  -668,  -669,  -670,  -713,  -712,
  -347,  -712,   -58,  -348,  -349,  -322,  -323,  -713,  -713,  -435,
  -325,  -713,  -700,  -687,  -688,  -691,  -304,   -13,  -115,  -116,
  -119,  -700,   -13,  -713,  -330,  -713,   -13,  -632,  -632,  -713,
  -675,  -568,  -571,  -572,  -573,  -574,   -13,  -546,  -549,  -551,
  -554,  -558,  -560,  -129,   -34,  -283,  -713,  -700,  -687,  -688,
  -688,  -687,   -46,  -256,  -713,  -703,  -276,   -40,  -204,   -41,
  -205,   -69,   -42,  -207,   -43,  -206,   -71,  -713,  -713,  -713,
  -713,  -422,  -713,  -713,  -453,  -454,  -713,  -713,  -713,  -713,
  -464,  -713,  -467,  -713,  -713,  -505,  -506,  -510,  -511,  -399,
  -524,  -116,  -525,  -713,  -409,  -389,  -413,  -412,  -713,  -700,
  -424,  -390,  -700,   -13,  -426,  -270,  -280,  -682,   -84,  -422,
   -96,  -312,  -712,  -352,   -13,  -530,  -712,  -531,  -532,  -253,
  -713,  -700,  -713,  -612,  -613,  -713,  -614,  -713,  -624,  -713,
  -627,  -713,  -629,  -713,  -356,  -713,  -358,  -360,  -363,  -366,
  -700,  -646,  -656,  -657,  -667,  -671,  -713,  -350,  -713,  -713,
  -324,  -326,  -713,  -713,   -13,  -422,  -713,  -422,  -713,  -713,
   -13,  -333,  -713,  -700,  -617,  -700,  -633,  -713,  -337,  -713,
  -284,  -422,   -39,  -203,  -265,  -713,  -449,  -451,  -458,  -461,
  -470,  -700,  -700,  -471,  -477,  -713,  -482,  -488,  -490,  -492,
  -493,  -496,  -497,  -561,  -500,  -700,  -700,  -526,  -700,  -700,
  -561,  -704,  -700,  -503,  -504,  -522,  -242,   -13,   -64,  -258,
  -673,  -673,  -673,  -371,  -373,  -373,  -373,  -388,  -713,  -700,
  -393,  -641,  -649,  -650,  -661,  -428,   -11,   -13,  -536,  -353,
  -713,  -713,  -534,  -401,  -404,  -406,  -713,  -673,  -653,  -658,
  -672,  -616,  -617,  -617,  -644,  -617,  -617,  -664,  -617,  -641,
  -659,  -700,  -713,  -713,  -365,  -642,  -320,  -713,  -321,  -713,
  -440,  -443,  -446,  -447,  -279,  -712,  -327,  -329,  -604,  -713,
  -335,  -606,  -713,  -608,  -610,  -609,  -570,  -456,  -457,  -486,
  -472,  -475,  -478,  -480,  -713,  -489,  -495,  -713,  -499,  -501,
  -459,  -460,  -463,  -466,  -713,  -469,  -431,  -713,  -368,  -369,
  -370,  -379,  -381,  -713,  -384,  -713,  -386,  -391,  -713,  -713,
  -713,  -648,  -713,  -535,   -13,  -597,  -598,  -713,  -713,  -295,
  -533,   -13,   -13,  -402,  -611,  -713,  -620,  -713,  -622,  -713,
  -625,  -713,  -628,  -630,  -357,  -359,  -361,  -364,   -13,  -436,
  -713,  -713,  -444,  -432,  -433,  -434,  -331,  -700,   -13,  -479,
  -473,  -713,  -713,  -483,  -484,  -487,  -491,  -494,  -498,  -673,
  -651,  -372,  -373,  -373,  -373,  -373,  -662,  -373,  -392,  -700,
  -395,  -397,  -398,  -660,  -713,  -305,  -529,  -262,  -713,  -713,
  -305,  -713,  -713,  -617,  -617,  -617,  -617,  -713,  -713,  -712,
   -13,  -441,  -442,  -445,  -607,  -713,  -713,  -476,  -481,  -713,
  -367,  -713,  -376,  -713,  -378,  -713,  -382,  -713,  -385,  -387,
  -394,  -713,  -304,  -691,  -528,  -700,  -687,  -688,  -691,  -304,
  -405,  -407,  -713,  -618,  -621,  -623,  -626,  -362,  -351,  -712,
  -338,  -474,  -485,  -373,  -373,  -373,  -373,  -396,  -422,  -617,
  -437,  -438,  -439,  -713,  -374,  -377,  -380,  -383,  -619,  -373,
  -375 ]

clist = [
'41,285,285,285,386,41,219,350,351,224,121,355,227,340,270,321,321,391',
'268,497,434,306,135,135,276,280,349,349,307,398,349,541,748,41,311,311',
'15,347,336,440,446,15,562,634,552,287,287,287,766,554,557,699,321,321',
'321,138,138,130,211,505,679,41,401,402,403,404,353,354,676,15,676,359',
'375,375,375,495,852,121,342,345,269,349,349,349,349,418,419,886,135',
'489,117,822,455,272,279,281,531,15,128,286,286,286,679,303,8,880,118',
'364,571,8,544,547,955,493,551,707,41,987,889,331,1077,324,283,296,297',
'41,671,41,921,935,982,938,341,1075,122,432,843,1110,305,1106,1020,452',
'900,4,715,762,934,934,1112,502,958,934,15,348,922,936,663,356,959,939',
'339,15,542,15,614,338,372,376,673,976,337,679,518,429,430,592,594,874',
'387,1,676,676,453,454,1109,575,365,705,285,973,860,425,979,363,425,863',
'864,866,412,344,425,1061,1062,413,424,488,499,424,500,505,41,835,984',
'424,1083,441,457,999,431,1180,8,892,934,306,451,510,827,828,1130,405',
'1003,8,450,676,1000,41,388,1106,1002,1177,916,1094,917,285,285,399,15',
'747,420,816,1112,420,285,817,1167,666,991,420,956,819,821,633,824,588',
'590,593,593,1048,861,1075,406,15,765,723,343,982,334,440,446,1095,1096',
'417,417,983,1097,985,2,321,287,603,306,558,829,685,838,306,287,715,41',
'947,525,694,41,121,321,528,311,41,1094,1094,349,1102,760,987,276,856',
'534,532,280,970,390,627,392,311,393,394,687,543,874,903,907,577,994',
'667,15,41,395,396,15,559,560,496,286,15,397,690,1093,581,565,771,286',
'41,41,1094,690,934,1172,984,715,715,121,776,668,811,670,498,752,979',
'674,763,820,15,303,501,742,270,761,303,464,452,966,432,1084,513,683',
'690,984,15,15,1033,686,516,521,690,1133,920,920,529,920,514,832,682',
'515,942,210,943,944,517,407,702,610,787,523,1137,1138,839,984,849,978',
'135,1100,414,615,769,1015,1076,723,957,983,285,440,446,579,578,,,621',
'1038,1039,1040,561,580,626,,,874,874,845,770,,894,696,138,441,602,848',
'898,1103,1171,1104,902,801,656,779,1064,779,806,,679,,450,1001,,859',
'662,,,1168,676,,,1123,895,,1088,621,,723,723,,,897,984,,285,,,698,,',
',321,,,,620,,,,321,1026,625,41,905,532,,,911,675,,311,441,532,,,945',
',,311,,441,,,,285,,798,800,450,,739,803,805,741,285,919,1181,450,15',
',,,41,,665,41,,1173,937,704,,441,961,743,757,851,952,,845,441,,,857',
',,,41,,450,285,874,874,764,,450,425,1140,723,15,723,,15,,,1009,425,425',
',424,,425,425,,41,,,441,,424,424,41,,15,424,424,135,,962,,797,799,615',
',450,802,804,,1154,615,823,796,751,,,,,,837,,15,1182,1036,420,,656,656',
'15,,138,858,783,,420,420,,,,420,420,836,,920,,321,,1030,1031,,1032,1054',
',,,,321,615,532,,,,,918,311,796,,,621,850,,626,,1085,,311,,,1078,908',
'1079,,,,899,,,,949,784,,,,,913,,792,,,,,,,349,,,,798,800,805,803,,,',
'723,,,,,,,,615,,,896,,,,995,,615,,,,,,41,1122,,1087,,41,961,909,961',
'41,952,,952,417,952,1011,425,1013,,41,615,,,,,,135,1135,,424,723,,,1017',
'1018,,15,,,,912,15,,,,15,968,,615,,972,,,,1035,15,656,962,,656,656,962',
'656,962,,962,,656,656,656,,,997,420,965,960,,,913,,,,,,,969,41,,,,,349',
',,960,,,41,,,,,,1074,,,961,,,,952,1027,952,,952,,952,,1034,,,,15,,,1005',
',953,,,1178,,,15,,656,,41,,,,651,,41,870,872,,980,,1008,980,,952,,17',
',,1014,,17,,962,,962,1155,962,656,962,615,615,,615,823,15,656,,,,,15',
',,,690,,,321,17,,,41,,960,,,321,,,1053,1134,,,,962,,375,,,,,41,,655',
',1056,17,,,,,,,,,,,15,,18,,,,,18,,,,,,,,,,904,,,15,,228,,1060,,,,346',
',,228,228,228,,18,312,312,1131,1132,,656,,,17,,,,321,,,,,17,,17,,349',
'349,1116,,,,18,1118,,1121,375,228,228,,41,228,360,370,370,,,41,41,,',
',1129,,,,,,654,,951,954,,,41,980,651,651,656,953,,953,,953,41,285,15',
'656,656,,977,,,15,15,1150,,18,986,,988,,228,228,228,228,18,,18,,15,',
'441,,1169,,,17,,17,15,,17,,450,,41,,17,450,,,656,,,656,,,,,,615,17,',
',,,655,655,,,,,,,415,428,,,,,,15,,,,1066,1068,,1070,1072,,1073,,,,,',
',953,,953,,953,,953,,,,,,18,228,422,228,228,422,228,,,,,422,228,228',
'17,,,,17,,,,,17,,18,,,,,953,,,,,,,,,,507,,509,,,511,512,,,,,17,651,',
',651,651,,651,654,654,228,228,651,651,651,,17,17,,228,,,,1099,,,,951',
',951,1105,951,1107,,,,,18,,,,18,,,,312,18,,,,,,1124,,1125,,1126,,,,',
',312,,40,1163,1164,1165,1166,40,,,655,,18,655,655,,655,,651,,,655,655',
'655,,,,228,18,18,,,,,,40,310,310,,,,,,,,,,,228,651,,,,,606,,,651,653',
'1188,,,,40,228,951,1174,951,1175,951,1176,951,,358,374,374,374,,,,,',
',,,,,1179,,655,,,,,,,,,,,,,,,,,,951,1189,,1042,1044,1046,654,,17,654',
'654,40,654,655,,,,654,654,654,40,655,40,,,,,228,,,,,,,,677,,346,,680',
',,,651,,,,,17,,,17,,,,,,,,,,,,,,,,,,,,,17,,,,677,,,346,,,18,,,654,,',
',,312,652,228,,428,,,,312,17,,651,17,,,40,17,228,,,651,651,17,17,655',
',654,17,17,,,,18,,654,18,,,,,40,,228,653,653,,,,785,,,,228,,,,18,677',
'346,,,1142,1144,1146,1148,651,1149,,651,,,,,,,,,,,,,,655,18,,,422,228',
',,18,655,655,,,,422,422,,,,422,422,40,,,,40,,,677,310,40,,,,,,,846,',
',847,,,,,654,310,,,,1184,1185,1186,1187,655,,,655,40,855,,,,,,,1190',
',,,,,,,40,40,,,,17,312,,,,17,,881,,17,,,312,,,,,,,17,,,652,652,654,',
',,,,,,,654,654,,,17,,,,,,,,,,,,653,,,653,653,650,653,,,,,653,653,653',
',,,910,,,,649,,,,18,,,,654,18,228,654,,18,,,17,,,,,,,18,,,,17,,,,,,',
',,,,,,,422,,,,,,,,,,,,,,,,,653,,,648,,,,,,17,,,,,,17,,,,,,,,,,990,,',
'40,,,653,18,,,,310,,,653,,,,18,310,1004,,,,,,,,,,,,,,,,652,17,,652,652',
'346,652,40,,,40,652,652,652,,,228,,,,,17,18,,,,,,18,,,40,,,,,,,,31,',
',,,31,,,650,650,,,,,,,,,,40,31,,,,649,649,40,,,31,31,31,653,31,,,18',
',,,652,,,,,,,,,,,1051,,,,,18,,,,1057,31,,,,,31,31,,17,31,652,,,,,17',
'17,,652,,,,,,648,648,,,,653,,,17,,,,,310,653,653,,,17,,,,,,310,,,,,',
',31,,,,,31,31,31,31,31,,31,,,,,,,,,,,,1113,,,,18,653,17,,653,,,18,18',
',,,,,,,,,,,,,,,18,,228,228,40,652,,,650,40,18,650,650,40,650,,,,,650',
'650,650,,40,649,,,649,649,,649,,,,,649,649,649,,228,,,,31,31,31,31,31',
'31,31,,,18,,31,31,31,,,,,,,652,,,,,31,,,,652,652,,,,,,,,,,,,648,,650',
'648,648,40,648,,,,,648,648,648,,,40,,649,31,31,,,,,,,,31,,,,652,650',
',652,,,,,,650,,,,,31,,,649,31,,,,,31,40,649,,,,28,40,,,,28,,,,,,,,,',
',,,648,,28,,31,,,,,,,28,28,28,,28,,,,31,31,31,,,,,,,,,40,648,,,,,,,',
'648,31,,,28,,374,,,28,28,40,,28,,1055,650,31,,,,,,,,,,,,,,,649,,,,,',
',,,,,,,,19,,,,,19,,,,,,,,28,,,,,28,28,28,28,28,,28,,,,650,,,,,19,314',
'314,,650,650,,,31,,,649,,,648,374,,,,40,649,649,,,,,40,40,19,,,,,,,',
',,362,371,371,,,40,,,,,,650,,,650,40,,,,,,,,,,31,,649,,,649,,,,648,31',
'28,28,28,28,28,28,28,648,648,19,,28,28,28,31,,,,19,,19,40,,,,28,,,,31',
',,31,,,,,,,31,,,,,,,,,,31,,,648,31,,648,,,,,,28,28,,,,,,,,28,,,,,,,',
',,31,,,31,31,,,31,28,,,,28,31,31,,,28,31,31,,,,19,,423,,,423,,,,,,423',
',,,,,,,,,,28,,,19,,,,,,,,,,,,28,28,28,,,,,,,,,,,,,,,,,,,28,,,,,,,,,',
',,,,,,28,,,,,,,,,,,,,,19,,,,19,,,,314,19,,,,,,,,,,,,,,,,314,,,,,,,,',
',,,19,,,,31,,,,,31,31,,,31,,,19,19,,28,,,,31,,,,,,,,,,,,,,,,,,31,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,28,,,,,,31,,,,,,,,,28,,31,',
',,,,,,,,,,,28,,,28,,,,,,,28,,,,,,,,,,28,31,,,28,,,31,,,,,,31,,,,,,,',
',,,,,,,,,,28,,,28,28,,,28,,,,,19,28,28,,,,28,28,314,,,,,,,,314,31,,',
',,,,,,,,,,,,,,,,,31,,,19,,,19,,,,,,,,,,,,,,,,,,,,,19,,,,,,,775,,,,,',
',,,,,,,,,,,,,,19,,,423,,,,19,,,,,,423,423,,,,423,423,,,,,,,,,,,,,,31',
',,,,,,31,31,,,,,,,,28,,,,,28,28,,31,28,31,31,,,,,,,31,28,,,,,,,,,,235',
'314,,,,,,,28,284,284,284,314,,,,,,31,,,329,330,,332,333,,335,,,,31,',
',,,,,,,,,284,284,,,,,,,,,,,,,,28,,,,,,,,,,,28,,,,,,19,,,,,19,,,,19,',
',,,,,,,,19,,,,,,,,,28,,,,,,28,,,423,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,19,28,,,,,,,,,,19,,,,,,,,,,28,,,,,,,,,,284,427,,,433',
'284,,,,,433,,,,,,,,,,19,,,235,,,19,465,466,467,468,469,470,471,472,473',
'474,475,476,477,478,479,480,481,482,483,484,485,486,,,,,487,,,,,,,284',
'284,,,,,,,,284,,,,19,,,284,28,284,,,284,284,,28,28,,,371,,,,,19,,,,1059',
',,,28,,28,28,,,,,,,28,,,,,,,,,,537,,538,,,,,,,,,,,,,,,,,28,,,,,,,,,',
',,,28,,,,,,,,,,,,,,,,,,,,,,,371,,,,19,,,,,,,19,19,,,,,,,,,,,,,,,284',
'19,,,,,,,,,,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,,433,433,433,,,,,',
'19,,,,,,,,,,,,,,,,,,,,,,,,,330,,,,,,,,,,284,,284,,284,,,,,,,,,,,,,,',
',284,,,,,,,,,433,,,697,,,,,,,,,284,,,284,,,,,,,,,,,,,,,284,284,,,,,',
',,,,284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,433,284,,,,793,,,284,284',
'433,433,,,,433,433,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,',
',,,,,,,284,,,284,,,,,,,,,,,,,,,,,,,284,,,,,,,,,,,,,,,,,,,,,,,,,,,284',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,,,,,,',
',433,,,,,,,,,,,,,433,433,433,433,,,,,,,,,,,,,,,,,,,,,,,946,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,,,,,,,,,,,,,,,,,,,,284,,,,,,,,,,,',
',,,,,,,,,284,433,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,284' ]
        racc_goto_table = arr = ::Array.new(4085, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'63,42,42,42,66,63,33,19,19,35,107,19,22,78,33,74,74,187,147,83,31,11',
'67,67,82,82,26,26,59,187,26,10,104,63,63,63,23,98,35,46,46,23,103,37',
'100,81,81,81,108,101,101,12,74,74,74,69,69,17,17,85,224,63,19,19,19',
'19,39,39,86,23,86,63,63,63,63,31,13,107,81,81,45,26,26,26,26,24,24,102',
'67,46,5,175,57,47,47,47,61,23,9,79,79,79,224,55,8,122,7,23,64,8,80,80',
'134,48,80,146,63,220,13,72,123,60,54,54,54,63,49,63,164,164,214,164',
'79,120,6,71,136,140,56,221,180,71,115,2,210,114,188,188,141,57,138,188',
'23,113,166,166,150,5,132,166,112,23,111,23,32,8,65,65,150,138,110,224',
'57,26,26,200,200,121,109,1,86,86,26,26,139,106,21,142,42,143,145,20',
'188,105,20,128,128,128,11,97,20,148,149,22,22,151,153,22,154,85,63,157',
'216,22,158,82,33,159,28,160,8,161,188,11,28,187,189,189,162,8,166,8',
'67,86,163,63,96,221,165,140,168,180,170,42,42,6,23,103,23,171,141,23',
'42,172,123,84,122,23,135,176,177,31,178,201,201,201,201,138,146,120',
'2,23,10,215,77,214,75,46,46,183,184,79,79,135,185,135,3,74,81,70,11',
'19,191,61,49,11,81,210,63,136,33,61,63,107,74,35,63,63,180,180,26,134',
'64,220,82,192,33,59,82,193,196,57,197,63,198,199,31,35,121,146,146,26',
'121,51,23,63,202,203,23,11,11,79,79,23,204,46,181,26,33,205,79,63,63',
'180,46,188,180,216,210,210,107,206,57,32,57,54,31,188,57,209,32,23,55',
'54,40,33,31,55,38,71,14,71,13,5,57,46,216,23,23,175,57,9,60,46,164,37',
'37,72,37,7,64,16,8,37,18,189,189,56,27,57,33,31,56,181,181,83,216,32',
'218,67,219,25,35,118,119,124,215,125,135,42,46,46,117,116,,,82,128,128',
'128,5,45,82,,,121,121,85,57,,101,71,69,82,17,61,10,135,181,135,10,48',
'63,201,128,201,48,,224,,67,37,,80,35,,,102,86,,,135,32,,108,82,,215',
'215,,,32,216,,42,,,26,,,,74,,,,47,,,,74,37,47,63,83,59,,,32,81,,63,82',
'59,,,100,,,63,,82,,,,42,,71,71,67,,11,71,71,11,42,32,13,67,23,,,,63',
',47,63,,135,64,81,,82,215,107,39,57,129,,85,82,,,24,,,,63,,67,42,121',
'121,107,,67,20,128,215,23,215,,23,,,10,20,20,,22,,20,20,,63,,,82,,22',
'22,63,,23,22,22,67,,217,,28,28,35,,67,28,28,,12,35,35,81,79,,,,,,98',
',23,104,10,23,,63,63,23,,69,78,17,,23,23,,,,23,23,147,,37,,74,,32,32',
',32,101,,,,,74,35,59,,,,,57,63,81,,,82,59,,82,,103,,63,,,101,66,101',
',,,19,,,,57,8,,,,,71,,8,,,,,,,26,,,,71,71,71,71,,,,215,,,,,,,,35,,,11',
',,,57,,35,,,,,,63,10,,83,,63,215,11,215,63,129,,129,79,129,57,20,57',
',63,35,,,,,,67,10,,22,215,,,57,57,,23,,,,28,23,,,,23,78,,35,,78,,,,57',
'23,63,217,,63,63,217,63,217,,217,,63,63,63,,,19,23,11,35,,,71,,,,,,',
'11,63,,,,,26,,,35,,,63,,,,,,57,,,215,,,,129,187,129,,129,,129,,187,',
',,23,,,11,,130,,,32,,,23,,63,,63,,,,91,,63,213,213,,130,,107,130,,129',
',29,,,107,,29,,217,,217,31,217,63,217,35,35,,35,35,23,63,,,,,23,,,,46',
',,74,29,,,63,,35,,,74,,,11,57,,,,217,,63,,,,,63,,95,,63,29,,,,,,,,,',
',23,,30,,,,,30,,,,,,,,,,133,,,23,,30,,23,,,,76,,,30,30,30,,30,30,30',
'19,19,,63,,,29,,,,74,,,,,29,,29,,26,26,11,,,,30,33,,11,63,30,30,,63',
'30,30,30,30,,,63,63,,,,11,,,,,,94,,127,133,,,63,130,91,91,63,130,,130',
',130,63,42,23,63,63,,127,,,23,23,35,,30,133,,133,,30,30,30,30,30,,30',
',23,,82,,11,,,29,,29,23,,29,,67,,63,,29,67,,,63,,,63,,,,,,35,29,,,,',
'95,95,,,,,,,76,76,,,,,,23,,,,213,213,,213,213,,213,,,,,,,130,,130,,130',
',130,,,,,,30,30,30,30,30,30,30,,,,,30,30,30,29,,,,29,,,,,29,,30,,,,',
'130,,,,,,,,,,76,,76,,,76,76,,,,,29,91,,,91,91,,91,94,94,30,30,91,91',
'91,,29,29,,30,,,,127,,,,127,,127,133,127,133,,,,,30,,,,30,,,,30,30,',
',,,,133,,133,,133,,,,,,30,,62,213,213,213,213,62,,,95,,30,95,95,,95',
',91,,,95,95,95,,,,30,30,30,,,,,,62,62,62,,,,,,,,,,,30,91,,,,,76,,,91',
'93,213,,,,62,30,127,133,127,133,127,133,127,,62,62,62,62,,,,,,,,,,,133',
',95,,,,,,,,,,,,,,,,,,127,133,,131,131,131,94,,29,94,94,62,94,95,,,,94',
'94,94,62,95,62,,,,,30,,,,,,,,76,,76,,76,,,,91,,,,,29,,,29,,,,,,,,,,',
',,,,,,,,,,29,,,,76,,,76,,,30,,,94,,,,,30,92,30,,76,,,,30,29,,91,29,',
',62,29,30,,,91,91,29,29,95,,94,29,29,,,,30,,94,30,,,,,62,,30,93,93,',
',,76,,,,30,,,,30,76,76,,,131,131,131,131,91,131,,91,,,,,,,,,,,,,,95',
'30,,,30,30,,,30,95,95,,,,30,30,,,,30,30,62,,,,62,,,76,62,62,,,,,,,76',
',,76,,,,,94,62,,,,131,131,131,131,95,,,95,62,76,,,,,,,131,,,,,,,,62',
'62,,,,29,30,,,,29,,76,,29,,,30,,,,,,,29,,,92,92,94,,,,,,,,,94,94,,,29',
',,,,,,,,,,,93,,,93,93,90,93,,,,,93,93,93,,,,76,,,,89,,,,30,,,,94,30',
'30,94,,30,,,29,,,,,,,30,,,,29,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,93,,,88',
',,,,,29,,,,,,29,,,,,,,,,,76,,,62,,,93,30,,,,62,,,93,,,,30,62,76,,,,',
',,,,,,,,,,,92,29,,92,92,76,92,62,,,62,92,92,92,,,30,,,,,29,30,,,,,,30',
',,62,,,,,,,,53,,,,,53,,,90,90,,,,,,,,,,62,53,,,,89,89,62,,,53,53,53',
'93,53,,,30,,,,92,,,,,,,,,,,30,,,,,30,,,,30,53,,,,,53,53,,29,53,92,,',
',,29,29,,92,,,,,,88,88,,,,93,,,29,,,,,62,93,93,,,29,,,,,,62,,,,,,,53',
',,,,53,53,53,53,53,,53,,,,,,,,,,,,30,,,,30,93,29,,93,,,30,30,,,,,,,',
',,,,,,,,30,,30,30,62,92,,,90,62,30,90,90,62,90,,,,,90,90,90,,62,89,',
',89,89,,89,,,,,89,89,89,,30,,,,53,53,53,53,53,53,53,,,30,,53,53,53,',
',,,,,92,,,,,53,,,,92,92,,,,,,,,,,,,88,,90,88,88,62,88,,,,,88,88,88,',
',62,,89,53,53,,,,,,,,53,,,,92,90,,92,,,,,,90,,,,,53,,,89,53,,,,,53,62',
'89,,,,50,62,,,,50,,,,,,,,,,,,,88,,50,,53,,,,,,,50,50,50,,50,,,,53,53',
'53,,,,,,,,,62,88,,,,,,,,88,53,,,50,,62,,,50,50,62,,50,,62,90,53,,,,',
',,,,,,,,,,89,,,,,,,,,,,,,,34,,,,,34,,,,,,,,50,,,,,50,50,50,50,50,,50',
',,,90,,,,,34,34,34,,90,90,,,53,,,89,,,88,62,,,,62,89,89,,,,,62,62,34',
',,,,,,,,,34,34,34,,,62,,,,,,90,,,90,62,,,,,,,,,,53,,89,,,89,,,,88,53',
'50,50,50,50,50,50,50,88,88,34,,50,50,50,53,,,,34,,34,62,,,,50,,,,53',
',,53,,,,,,,53,,,,,,,,,,53,,,88,53,,88,,,,,,50,50,,,,,,,,50,,,,,,,,,',
'53,,,53,53,,,53,50,,,,50,53,53,,,50,53,53,,,,34,,34,,,34,,,,,,34,,,',
',,,,,,,50,,,34,,,,,,,,,,,,50,50,50,,,,,,,,,,,,,,,,,,,50,,,,,,,,,,,,',
',,,50,,,,,,,,,,,,,,34,,,,34,,,,34,34,,,,,,,,,,,,,,,,34,,,,,,,,,,,,34',
',,,53,,,,,53,53,,,53,,,34,34,,50,,,,53,,,,,,,,,,,,,,,,,,53,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,50,,,,,,,,,,50,,,,,,53,,,,,,,,,50,,53,,,,,,,',
',,,,,50,,,50,,,,,,,50,,,,,,,,,,50,53,,,50,,,53,,,,,,53,,,,,,,,,,,,,',
',,,,50,,,50,50,,,50,,,,,34,50,50,,,,50,50,34,,,,,,,,34,53,,,,,,,,,,',
',,,,,,,,,53,,,34,,,34,,,,,,,,,,,,,,,,,,,,,34,,,,,,,34,,,,,,,,,,,,,,',
',,,,,34,,,34,,,,34,,,,,,34,34,,,,34,34,,,,,,,,,,,,,,53,,,,,,,53,53,',
',,,,,,50,,,,,50,50,,53,50,53,53,,,,,,,53,50,,,,,,,,,,36,34,,,,,,,50',
'36,36,36,34,,,,,,53,,,36,36,,36,36,,36,,,,53,,,,,,,,,,,36,36,,,,,,,',
',,,,,,50,,,,,,,,,,,50,,,,,,34,,,,,34,,,,34,,,,,,,,,,34,,,,,,,,,50,,',
',,,50,,,34,,,50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,50,',
',,,,,,,,34,,,,,,,,,,50,,,,,,,,,,36,36,,,36,36,,,,,36,,,,,,,,,,34,,,36',
',,34,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36',
'36,,,,,36,,,,,,,36,36,,,,,,,,36,,,,34,,,36,50,36,,,36,36,,50,50,,,34',
',,,,34,,,,34,,,,50,,50,50,,,,,,,50,,,,,,,,,,36,,36,,,,,,,,,,,,,,,,,50',
',,,,,,,,,,,,50,,,,,,,,,,,,,,,,,,,,,,,34,,,,34,,,,,,,34,34,,,,,,,,,,',
',,,,36,34,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,36,36,36,,',
',,,34,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,36,,36,,36,,,,,,,,,,,,,,,',
'36,,,,,,,,,36,,,36,,,,,,,,,36,,,36,,,,,,,,,,,,,,,36,36,,,,,,,,,,36,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,36,36,,,,36,,,36,36,36,36,,,,36,36',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,36,,,36,,,,,',
',,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,36,,,,,,,,,,,,,36,36,36',
'36,,,,,,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36',
',,,,,,,,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,,,,,36,36,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,36' ]
        racc_goto_check = arr = ::Array.new(4085, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   179,   141,   286,   nil,    85,   127,   101,   102,    89,
  -306,   -14,  -489,  -623,  -472,   nil,  -113,    47,   393,   -61,
   -23,   113,   -10,    34,  -128,   208,   -42,   278,     1,   907,
   981,  -198,  -270,   -12,  2306,   -12,  2967,  -421,   139,    -4,
  -184,   nil,   -30,   nil,   nil,    54,  -180,    65,  -159,  -373,
  2203,  -159,   nil,  1890,    91,    68,   103,  -133,   nil,    -8,
    84,  -229,  1306,    -2,  -260,    92,   -72,    12,   nil,    45,
  -122,   -82,    74,   nil,   -21,   228,   944,   210,   -51,    68,
  -231,    14,    -4,  -254,  -234,  -228,  -436,   nil,  1331,  1270,
  1254,   432,  1040,   900,   606,   503,   160,   134,   -29,   nil,
  -304,  -301,  -652,  -314,  -529,   120,  -187,     5,  -531,   102,
   108,  -176,    97,    86,  -430,  -622,    57,    46,  -157,  -484,
  -859,  -547,  -619,  -873,  -567,  -415,   nil,   230,  -513,  -276,
    40,   462,  -684,   231,  -730,  -584,  -536,   nil,  -692,  -865,
  -912,  -901,  -366,  -671,   nil,  -515,  -438,    -6,  -773,  -773,
  -332,   -62,   nil,   -71,   -70,   nil,   nil,  -453,  -791,  -675,
  -950,  -528,  -851,  -658,  -688,  -654,  -662,   nil,  -572,   nil,
  -571,  -390,  -386,   nil,   nil,  -550,  -381,  -381,  -380,   nil,
  -783,  -678,   nil,  -746,  -745,  -741,   nil,   -67,  -670,  -420,
   nil,  -365,  -385,  -537,   nil,   nil,   238,   235,   236,   236,
  -219,  -129,   246,   246,   252,  -236,  -225,   nil,   nil,  -207,
  -409,   nil,   nil,   186,  -737,  -280,  -655,  -225,  -444,  -617,
  -752,  -904,   nil,   nil,  -446 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,     6,   357,   301,   nil,
   nil,   540,   nil,   887,   nil,   298,   299,   nil,   nil,   nil,
    13,    14,    20,   233,   nil,   nil,    16,   nil,   421,   234,
   328,   nil,   nil,   573,   232,   456,    23,  1019,   nil,   nil,
   nil,   352,    24,    25,    26,   nil,   693,   nil,   nil,   nil,
   318,   nil,    27,   315,   435,    34,   nil,   nil,    36,    39,
    38,   nil,   229,   230,   369,   nil,   137,   443,   136,    81,
   nil,   426,    97,    48,    51,   266,   290,   nil,   853,   436,
   nil,   437,   448,   nil,   622,   503,   288,   274,    52,    53,
    54,    55,    56,    57,    58,    59,    60,   nil,   275,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   555,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   876,   722,   nil,   877,   878,  1101,   950,   709,   nil,   710,
   711,   nil,   nil,   712,   nil,   714,   nil,   841,   nil,   nil,
   nil,   720,   nil,   nil,   553,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   447,   nil,   nil,   672,   664,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   924,   nil,   635,   644,   636,
   637,   nil,   nil,   638,   639,   nil,   nil,   nil,   nil,   923,
   925,   nil,   927,   928,   929,   930,   931,   nil,   731,   643,
   645,   nil,   nil,   nil,    80,    82,    83,   nil,   nil,   nil,
   nil,   583,   nil,   nil,   nil,   nil,   nil,    93,    94,   nil,
   981,   768,   708,   868,   713,   989,   725,   727,   728,   963,
   732,   964,   735,   738,   293 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 150, :_reduce_1,
  2, 148, :_reduce_2,
  2, 149, :_reduce_3,
  0, 151, :_reduce_4,
  1, 151, :_reduce_5,
  3, 151, :_reduce_6,
  2, 151, :_reduce_7,
  1, 153, :_reduce_none,
  2, 153, :_reduce_9,
  3, 156, :_reduce_10,
  4, 157, :_reduce_11,
  2, 158, :_reduce_12,
  0, 162, :_reduce_13,
  1, 162, :_reduce_14,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  1, 163, :_reduce_none,
  2, 163, :_reduce_18,
  0, 174, :_reduce_19,
  4, 155, :_reduce_20,
  3, 155, :_reduce_21,
  3, 155, :_reduce_22,
  3, 155, :_reduce_23,
  2, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  3, 155, :_reduce_28,
  3, 155, :_reduce_29,
  4, 155, :_reduce_30,
  1, 155, :_reduce_none,
  3, 155, :_reduce_32,
  3, 155, :_reduce_33,
  5, 155, :_reduce_34,
  3, 155, :_reduce_35,
  1, 155, :_reduce_none,
  3, 167, :_reduce_37,
  3, 167, :_reduce_38,
  6, 167, :_reduce_39,
  5, 167, :_reduce_40,
  5, 167, :_reduce_41,
  5, 167, :_reduce_42,
  5, 167, :_reduce_43,
  3, 167, :_reduce_44,
  1, 175, :_reduce_none,
  3, 175, :_reduce_46,
  1, 175, :_reduce_none,
  1, 173, :_reduce_none,
  3, 173, :_reduce_49,
  3, 173, :_reduce_50,
  3, 173, :_reduce_51,
  2, 173, :_reduce_52,
  0, 185, :_reduce_53,
  4, 173, :_reduce_54,
  1, 173, :_reduce_none,
  1, 166, :_reduce_none,
  0, 188, :_reduce_57,
  3, 186, :_reduce_58,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 190, :_reduce_none,
  4, 190, :_reduce_62,
  0, 198, :_reduce_63,
  4, 195, :_reduce_64,
  1, 197, :_reduce_none,
  2, 189, :_reduce_66,
  3, 189, :_reduce_67,
  4, 189, :_reduce_68,
  5, 189, :_reduce_69,
  4, 189, :_reduce_70,
  5, 189, :_reduce_71,
  2, 189, :_reduce_72,
  2, 189, :_reduce_73,
  2, 189, :_reduce_74,
  2, 189, :_reduce_75,
  2, 189, :_reduce_76,
  1, 168, :_reduce_77,
  3, 168, :_reduce_78,
  1, 203, :_reduce_79,
  3, 203, :_reduce_80,
  1, 202, :_reduce_none,
  2, 202, :_reduce_82,
  3, 202, :_reduce_83,
  5, 202, :_reduce_84,
  2, 202, :_reduce_85,
  4, 202, :_reduce_86,
  2, 202, :_reduce_87,
  4, 202, :_reduce_88,
  1, 202, :_reduce_89,
  3, 202, :_reduce_90,
  1, 206, :_reduce_none,
  3, 206, :_reduce_92,
  2, 205, :_reduce_93,
  3, 205, :_reduce_94,
  1, 208, :_reduce_95,
  3, 208, :_reduce_96,
  1, 207, :_reduce_97,
  1, 207, :_reduce_98,
  4, 207, :_reduce_99,
  3, 207, :_reduce_100,
  3, 207, :_reduce_101,
  3, 207, :_reduce_102,
  3, 207, :_reduce_103,
  2, 207, :_reduce_104,
  1, 207, :_reduce_105,
  1, 170, :_reduce_106,
  1, 170, :_reduce_107,
  4, 170, :_reduce_108,
  3, 170, :_reduce_109,
  3, 170, :_reduce_110,
  3, 170, :_reduce_111,
  3, 170, :_reduce_112,
  2, 170, :_reduce_113,
  1, 170, :_reduce_114,
  1, 211, :_reduce_115,
  1, 211, :_reduce_none,
  2, 212, :_reduce_117,
  1, 212, :_reduce_118,
  3, 212, :_reduce_119,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 164, :_reduce_125,
  1, 164, :_reduce_none,
  1, 165, :_reduce_127,
  0, 217, :_reduce_128,
  4, 165, :_reduce_129,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  3, 183, :_reduce_201,
  3, 183, :_reduce_202,
  6, 183, :_reduce_203,
  5, 183, :_reduce_204,
  5, 183, :_reduce_205,
  5, 183, :_reduce_206,
  5, 183, :_reduce_207,
  4, 183, :_reduce_208,
  3, 183, :_reduce_209,
  3, 183, :_reduce_210,
  3, 183, :_reduce_211,
  2, 183, :_reduce_212,
  2, 183, :_reduce_213,
  2, 183, :_reduce_214,
  2, 183, :_reduce_215,
  3, 183, :_reduce_216,
  3, 183, :_reduce_217,
  3, 183, :_reduce_218,
  3, 183, :_reduce_219,
  3, 183, :_reduce_220,
  3, 183, :_reduce_221,
  4, 183, :_reduce_222,
  2, 183, :_reduce_223,
  2, 183, :_reduce_224,
  3, 183, :_reduce_225,
  3, 183, :_reduce_226,
  3, 183, :_reduce_227,
  3, 183, :_reduce_228,
  1, 183, :_reduce_none,
  3, 183, :_reduce_230,
  3, 183, :_reduce_231,
  3, 183, :_reduce_232,
  3, 183, :_reduce_233,
  3, 183, :_reduce_234,
  2, 183, :_reduce_235,
  2, 183, :_reduce_236,
  3, 183, :_reduce_237,
  3, 183, :_reduce_238,
  3, 183, :_reduce_239,
  3, 183, :_reduce_240,
  3, 183, :_reduce_241,
  6, 183, :_reduce_242,
  1, 183, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  3, 220, :_reduce_248,
  3, 220, :_reduce_249,
  1, 223, :_reduce_none,
  1, 224, :_reduce_none,
  2, 224, :_reduce_none,
  4, 224, :_reduce_253,
  2, 224, :_reduce_254,
  1, 218, :_reduce_none,
  3, 218, :_reduce_256,
  3, 229, :_reduce_257,
  5, 229, :_reduce_258,
  3, 229, :_reduce_259,
  0, 231, :_reduce_260,
  1, 231, :_reduce_none,
  0, 178, :_reduce_262,
  1, 178, :_reduce_none,
  2, 178, :_reduce_none,
  4, 178, :_reduce_265,
  2, 178, :_reduce_266,
  1, 201, :_reduce_267,
  2, 201, :_reduce_268,
  2, 201, :_reduce_269,
  4, 201, :_reduce_270,
  1, 201, :_reduce_271,
  0, 234, :_reduce_272,
  2, 194, :_reduce_273,
  2, 233, :_reduce_274,
  2, 232, :_reduce_275,
  0, 232, :_reduce_276,
  1, 226, :_reduce_277,
  2, 226, :_reduce_278,
  3, 226, :_reduce_279,
  4, 226, :_reduce_280,
  1, 172, :_reduce_281,
  1, 172, :_reduce_none,
  3, 171, :_reduce_283,
  4, 171, :_reduce_284,
  2, 171, :_reduce_285,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_296,
  0, 257, :_reduce_297,
  4, 221, :_reduce_298,
  0, 258, :_reduce_299,
  4, 221, :_reduce_300,
  0, 259, :_reduce_301,
  4, 221, :_reduce_302,
  3, 221, :_reduce_303,
  3, 221, :_reduce_304,
  2, 221, :_reduce_305,
  3, 221, :_reduce_306,
  3, 221, :_reduce_307,
  1, 221, :_reduce_308,
  4, 221, :_reduce_309,
  3, 221, :_reduce_310,
  1, 221, :_reduce_311,
  5, 221, :_reduce_312,
  4, 221, :_reduce_313,
  3, 221, :_reduce_314,
  2, 221, :_reduce_315,
  1, 221, :_reduce_none,
  2, 221, :_reduce_317,
  0, 260, :_reduce_318,
  3, 221, :_reduce_319,
  6, 221, :_reduce_320,
  6, 221, :_reduce_321,
  4, 221, :_reduce_322,
  4, 221, :_reduce_323,
  5, 221, :_reduce_324,
  4, 221, :_reduce_325,
  5, 221, :_reduce_326,
  6, 221, :_reduce_327,
  0, 261, :_reduce_328,
  6, 221, :_reduce_329,
  0, 262, :_reduce_330,
  7, 221, :_reduce_331,
  0, 263, :_reduce_332,
  5, 221, :_reduce_333,
  0, 264, :_reduce_334,
  6, 221, :_reduce_335,
  0, 265, :_reduce_336,
  0, 266, :_reduce_337,
  9, 221, :_reduce_338,
  1, 221, :_reduce_339,
  1, 221, :_reduce_340,
  1, 221, :_reduce_341,
  1, 221, :_reduce_342,
  1, 177, :_reduce_none,
  1, 200, :_reduce_344,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  2, 248, :_reduce_347,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 249, :_reduce_none,
  5, 249, :_reduce_351,
  1, 160, :_reduce_none,
  2, 160, :_reduce_353,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  1, 267, :_reduce_356,
  3, 267, :_reduce_357,
  1, 270, :_reduce_358,
  3, 270, :_reduce_359,
  1, 269, :_reduce_none,
  3, 269, :_reduce_361,
  5, 269, :_reduce_362,
  1, 269, :_reduce_363,
  3, 269, :_reduce_364,
  2, 271, :_reduce_365,
  1, 271, :_reduce_366,
  4, 272, :_reduce_367,
  2, 272, :_reduce_368,
  2, 272, :_reduce_369,
  2, 272, :_reduce_370,
  1, 272, :_reduce_371,
  2, 278, :_reduce_372,
  0, 278, :_reduce_373,
  6, 279, :_reduce_374,
  8, 279, :_reduce_375,
  4, 279, :_reduce_376,
  6, 279, :_reduce_377,
  4, 279, :_reduce_378,
  2, 279, :_reduce_none,
  6, 279, :_reduce_380,
  2, 279, :_reduce_381,
  4, 279, :_reduce_382,
  6, 279, :_reduce_383,
  2, 279, :_reduce_384,
  4, 279, :_reduce_385,
  2, 279, :_reduce_386,
  4, 279, :_reduce_387,
  1, 279, :_reduce_none,
  0, 283, :_reduce_389,
  1, 283, :_reduce_390,
  3, 284, :_reduce_391,
  4, 284, :_reduce_392,
  1, 285, :_reduce_393,
  4, 285, :_reduce_394,
  1, 286, :_reduce_395,
  3, 286, :_reduce_396,
  1, 287, :_reduce_397,
  1, 287, :_reduce_none,
  0, 291, :_reduce_399,
  0, 292, :_reduce_400,
  4, 247, :_reduce_401,
  4, 289, :_reduce_402,
  1, 289, :_reduce_403,
  0, 295, :_reduce_404,
  4, 290, :_reduce_405,
  0, 296, :_reduce_406,
  4, 290, :_reduce_407,
  0, 298, :_reduce_408,
  4, 294, :_reduce_409,
  2, 191, :_reduce_410,
  4, 191, :_reduce_411,
  5, 191, :_reduce_412,
  5, 191, :_reduce_413,
  2, 246, :_reduce_414,
  4, 246, :_reduce_415,
  4, 246, :_reduce_416,
  3, 246, :_reduce_417,
  3, 246, :_reduce_418,
  3, 246, :_reduce_419,
  2, 246, :_reduce_420,
  1, 246, :_reduce_421,
  4, 246, :_reduce_422,
  0, 300, :_reduce_423,
  4, 245, :_reduce_424,
  0, 301, :_reduce_425,
  4, 245, :_reduce_426,
  0, 302, :_reduce_427,
  3, 196, :_reduce_428,
  0, 303, :_reduce_429,
  0, 304, :_reduce_430,
  4, 297, :_reduce_431,
  5, 250, :_reduce_432,
  1, 305, :_reduce_433,
  1, 305, :_reduce_none,
  0, 308, :_reduce_435,
  0, 309, :_reduce_436,
  7, 251, :_reduce_437,
  1, 307, :_reduce_438,
  1, 307, :_reduce_none,
  1, 306, :_reduce_440,
  3, 306, :_reduce_441,
  3, 306, :_reduce_442,
  1, 310, :_reduce_none,
  2, 310, :_reduce_444,
  3, 310, :_reduce_445,
  1, 310, :_reduce_446,
  1, 310, :_reduce_447,
  1, 184, :_reduce_none,
  3, 314, :_reduce_449,
  1, 314, :_reduce_none,
  3, 316, :_reduce_451,
  1, 316, :_reduce_none,
  1, 318, :_reduce_453,
  1, 319, :_reduce_454,
  1, 317, :_reduce_none,
  4, 317, :_reduce_456,
  4, 317, :_reduce_457,
  3, 317, :_reduce_458,
  4, 317, :_reduce_459,
  4, 317, :_reduce_460,
  3, 317, :_reduce_461,
  0, 323, :_reduce_462,
  4, 317, :_reduce_463,
  2, 317, :_reduce_464,
  0, 324, :_reduce_465,
  4, 317, :_reduce_466,
  2, 317, :_reduce_467,
  0, 325, :_reduce_468,
  4, 317, :_reduce_469,
  1, 311, :_reduce_470,
  1, 311, :_reduce_471,
  2, 311, :_reduce_472,
  3, 311, :_reduce_473,
  5, 311, :_reduce_474,
  2, 311, :_reduce_475,
  4, 311, :_reduce_476,
  1, 311, :_reduce_none,
  2, 326, :_reduce_478,
  3, 326, :_reduce_479,
  2, 312, :_reduce_480,
  4, 312, :_reduce_481,
  1, 312, :_reduce_482,
  3, 312, :_reduce_483,
  1, 328, :_reduce_484,
  3, 328, :_reduce_485,
  1, 327, :_reduce_none,
  3, 313, :_reduce_487,
  1, 313, :_reduce_488,
  2, 313, :_reduce_489,
  1, 313, :_reduce_490,
  3, 313, :_reduce_491,
  1, 313, :_reduce_492,
  1, 329, :_reduce_493,
  3, 329, :_reduce_494,
  2, 332, :_reduce_495,
  1, 332, :_reduce_496,
  1, 333, :_reduce_497,
  3, 333, :_reduce_498,
  2, 330, :_reduce_499,
  1, 330, :_reduce_500,
  2, 331, :_reduce_501,
  1, 320, :_reduce_none,
  3, 320, :_reduce_503,
  3, 320, :_reduce_504,
  2, 320, :_reduce_505,
  2, 320, :_reduce_506,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  2, 320, :_reduce_510,
  2, 320, :_reduce_511,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  1, 336, :_reduce_520,
  0, 338, :_reduce_521,
  3, 336, :_reduce_522,
  1, 315, :_reduce_523,
  2, 337, :_reduce_524,
  2, 321, :_reduce_525,
  3, 321, :_reduce_526,
  1, 321, :_reduce_527,
  6, 159, :_reduce_528,
  0, 159, :_reduce_529,
  1, 339, :_reduce_530,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 340, :_reduce_533,
  1, 340, :_reduce_none,
  2, 161, :_reduce_535,
  1, 161, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  1, 236, :_reduce_539,
  1, 342, :_reduce_540,
  2, 342, :_reduce_541,
  3, 343, :_reduce_542,
  1, 343, :_reduce_543,
  1, 343, :_reduce_544,
  3, 237, :_reduce_545,
  4, 238, :_reduce_546,
  3, 239, :_reduce_547,
  0, 346, :_reduce_548,
  3, 346, :_reduce_549,
  1, 347, :_reduce_550,
  2, 347, :_reduce_551,
  3, 241, :_reduce_552,
  0, 349, :_reduce_553,
  3, 349, :_reduce_554,
  3, 240, :_reduce_555,
  3, 242, :_reduce_556,
  0, 350, :_reduce_557,
  3, 350, :_reduce_558,
  0, 351, :_reduce_559,
  3, 351, :_reduce_560,
  0, 334, :_reduce_561,
  2, 334, :_reduce_562,
  0, 344, :_reduce_563,
  2, 344, :_reduce_564,
  0, 345, :_reduce_565,
  2, 345, :_reduce_566,
  1, 348, :_reduce_567,
  2, 348, :_reduce_568,
  0, 353, :_reduce_569,
  4, 348, :_reduce_570,
  1, 352, :_reduce_571,
  1, 352, :_reduce_572,
  1, 352, :_reduce_573,
  1, 352, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 354, :_reduce_577,
  3, 355, :_reduce_578,
  1, 341, :_reduce_579,
  2, 341, :_reduce_580,
  1, 219, :_reduce_581,
  1, 219, :_reduce_582,
  1, 219, :_reduce_583,
  1, 219, :_reduce_584,
  1, 209, :_reduce_585,
  1, 209, :_reduce_586,
  1, 209, :_reduce_587,
  1, 209, :_reduce_588,
  1, 209, :_reduce_589,
  1, 210, :_reduce_590,
  1, 210, :_reduce_591,
  1, 210, :_reduce_592,
  1, 210, :_reduce_593,
  1, 210, :_reduce_594,
  1, 210, :_reduce_595,
  1, 210, :_reduce_596,
  1, 243, :_reduce_597,
  1, 243, :_reduce_598,
  1, 176, :_reduce_599,
  1, 176, :_reduce_600,
  1, 181, :_reduce_601,
  1, 181, :_reduce_602,
  0, 356, :_reduce_603,
  4, 253, :_reduce_604,
  0, 253, :_reduce_605,
  3, 255, :_reduce_606,
  5, 255, :_reduce_607,
  3, 255, :_reduce_608,
  0, 358, :_reduce_609,
  3, 255, :_reduce_610,
  4, 357, :_reduce_611,
  2, 357, :_reduce_612,
  2, 357, :_reduce_613,
  2, 357, :_reduce_614,
  1, 357, :_reduce_615,
  2, 360, :_reduce_616,
  0, 360, :_reduce_617,
  6, 293, :_reduce_618,
  8, 293, :_reduce_619,
  4, 293, :_reduce_620,
  6, 293, :_reduce_621,
  4, 293, :_reduce_622,
  6, 293, :_reduce_623,
  2, 293, :_reduce_624,
  4, 293, :_reduce_625,
  6, 293, :_reduce_626,
  2, 293, :_reduce_627,
  4, 293, :_reduce_628,
  2, 293, :_reduce_629,
  4, 293, :_reduce_630,
  1, 293, :_reduce_631,
  0, 293, :_reduce_632,
  1, 230, :_reduce_633,
  1, 288, :_reduce_634,
  1, 288, :_reduce_635,
  1, 288, :_reduce_636,
  1, 288, :_reduce_637,
  1, 268, :_reduce_none,
  1, 268, :_reduce_639,
  1, 362, :_reduce_640,
  1, 363, :_reduce_641,
  3, 363, :_reduce_642,
  1, 280, :_reduce_643,
  3, 280, :_reduce_644,
  1, 364, :_reduce_645,
  2, 365, :_reduce_646,
  1, 365, :_reduce_647,
  2, 366, :_reduce_648,
  1, 366, :_reduce_649,
  1, 273, :_reduce_650,
  3, 273, :_reduce_651,
  1, 359, :_reduce_652,
  3, 359, :_reduce_653,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 276, :_reduce_656,
  2, 274, :_reduce_657,
  1, 274, :_reduce_658,
  3, 367, :_reduce_659,
  3, 368, :_reduce_660,
  1, 281, :_reduce_661,
  3, 281, :_reduce_662,
  1, 361, :_reduce_663,
  3, 361, :_reduce_664,
  1, 369, :_reduce_none,
  1, 369, :_reduce_none,
  2, 282, :_reduce_667,
  1, 282, :_reduce_668,
  1, 370, :_reduce_none,
  1, 370, :_reduce_none,
  2, 277, :_reduce_671,
  2, 275, :_reduce_672,
  0, 275, :_reduce_673,
  1, 256, :_reduce_none,
  3, 256, :_reduce_675,
  0, 244, :_reduce_676,
  2, 244, :_reduce_none,
  1, 228, :_reduce_678,
  3, 228, :_reduce_679,
  3, 371, :_reduce_680,
  2, 371, :_reduce_681,
  4, 371, :_reduce_682,
  2, 371, :_reduce_683,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 180, :_reduce_696,
  1, 180, :_reduce_697,
  0, 152, :_reduce_none,
  1, 152, :_reduce_none,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  2, 204, :_reduce_702,
  2, 179, :_reduce_703,
  2, 322, :_reduce_704,
  0, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  1, 254, :_reduce_708,
  1, 254, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_none,
  0, 225, :_reduce_712 ]

racc_reduce_n = 713

racc_shift_n = 1191

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tBDOT2 => 143,
  :tBDOT3 => 144,
  :tEQL => 145,
  :tLOWEST => 146 }

racc_nt_base = 147

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tBDOT2",
  "tBDOT3",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "begin_block",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@2",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "p_expr",
  "@3",
  "expr_value_do",
  "do",
  "@4",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "@5",
  "operation",
  "k_return",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "args_forward",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "case_body",
  "p_case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "f_rest_marg",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_no_kwarg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@18",
  "@19",
  "f_args",
  "do_block",
  "@20",
  "@21",
  "do_body",
  "@22",
  "operation3",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "cases",
  "p_top_expr",
  "p_cases",
  "@28",
  "@29",
  "p_top_expr_body",
  "p_args",
  "p_args_tail",
  "p_kwargs",
  "p_as",
  "p_variable",
  "p_alt",
  "p_expr_basic",
  "p_lparen",
  "p_lbracket",
  "p_value",
  "p_const",
  "rbrace",
  "@30",
  "@31",
  "@32",
  "p_args_head",
  "p_arg",
  "p_args_post",
  "p_kwarg",
  "p_kwrest",
  "p_kwnorest",
  "p_kw",
  "p_kw_label",
  "string_contents",
  "kwrest_mark",
  "p_primitive",
  "p_var_ref",
  "@33",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@34",
  "ssym",
  "dsym",
  "@35",
  "args_tail",
  "@36",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      @current_arg_stack.push(nil)
                      @max_numparam_stack.push
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]

                      @current_arg_stack.pop
                      @max_numparam_stack.pop
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      result = @builder.preexe(val[0], *val[1])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = val
                    
    result
end

def _reduce_11(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_t.nil?
                        diagnostic :error, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_13(val, _values, result)
                      result = []
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 17 omitted

def _reduce_18(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_19(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_23(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_34(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                                         nil, nil, nil,
                                                         nil, val[4])
                      begin_body = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.multi_assign(val[0], val[1], begin_body)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 36 omitted

def _reduce_37(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_42(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_44(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 47 omitted

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_51(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_52(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_53(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_54(val, _values, result)
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[2]
                      if @builder.class.emit_match_pattern
                        result = @builder.match_pattern(val[0], val[1], val[3])
                      else
                        result = @builder.in_match(val[0], val[1], val[3])
                      end
                    
    result
end

# reduce 55 omitted

# reduce 56 omitted

def _reduce_57(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_58(val, _values, result)
                      @lexer.cond.pop
                      result = [ val[1], val[2] ]
                    
    result
end

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

# reduce 65 omitted

def _reduce_66(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_71(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_73(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_74(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 81 omitted

def _reduce_82(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_84(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 91 omitted

def _reduce_92(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_96(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_100(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      if (val[1][0] == :anddot)
                        diagnostic :error, :csend_in_lhs_of_masgn, nil, val[1]
                      end

                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_108(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_109(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_112(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_113(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_114(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_115(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 116 omitted

def _reduce_117(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_118(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_119(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

def _reduce_125(val, _values, result)
                      result = @builder.symbol_internal(val[0])
                    
    result
end

# reduce 126 omitted

def _reduce_127(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_128(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_129(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

def _reduce_201(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_207(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_208(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 229 omitted

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_236(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_241(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_242(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_249(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_257(val, _values, result)
                      result = val
                    
    result
end

def _reduce_258(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[3]
                      end

                      result = [val[0], [*val[1], @builder.forwarded_args(val[3])], val[4]]
                    
    result
end

def _reduce_259(val, _values, result)
                      unless @static_env.declared_forward_args?
                        diagnostic :error, :unexpected_token, { :token => 'tBDOT3' } , val[1]
                      end

                      result = [val[0], [@builder.forwarded_args(val[1])], val[2]]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = []
                    
    result
end

# reduce 263 omitted

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_270(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_271(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_272(val, _values, result)
                      # When branch gets invoked by RACC's lookahead
                      # and command args start with '[' or '('
                      # we need to put `true` to the cmdarg stack
                      # **before** `false` pushed by lexer
                      #   m [], n
                      #     ^
                      # Right here we have cmdarg [...0] because
                      # lexer pushed it on '['
                      # We need to modify cmdarg stack to [...10]
                      #
                      # For all other cases (like `m n` or `m n, []`) we simply put 1 to the stack
                      # and later lexer pushes corresponding bits on top of it.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACK || last_token == :tLPAREN_ARG

                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.push(true)
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.push(true)
                      end
                    
    result
end

def _reduce_273(val, _values, result)
                      # call_args can be followed by tLBRACE_ARG (that does cmdarg.push(0) in the lexer)
                      # but the push must be done after cmdarg.pop() in the parser.
                      # So this code does cmdarg.pop() to pop 0 pushed by tLBRACE_ARG,
                      # cmdarg.pop() to pop 1 pushed by command_args,
                      # and cmdarg.push(0) to restore back the flag set by tLBRACE_ARG.
                      last_token = @last_token[0]
                      lookahead = last_token == :tLBRACE_ARG
                      if lookahead
                        top = @lexer.cmdarg.pop
                        @lexer.cmdarg.pop
                        @lexer.cmdarg.push(top)
                      else
                        @lexer.cmdarg.pop
                      end

                      result = val[1]
                    
    result
end

def _reduce_274(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_276(val, _values, result)
                      result = []
                    
    result
end

def _reduce_277(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_278(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_280(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 282 omitted

def _reduce_283(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_284(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

def _reduce_296(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_298(val, _values, result)
                      @lexer.cmdarg.pop

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_301(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_304(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_305(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_307(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_308(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_311(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_313(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_315(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 316 omitted

def _reduce_317(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_318(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_319(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_320(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_321(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_322(val, _values, result)
                      result = @builder.loop(:while, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @builder.loop(:until, val[0], *val[1], val[2], val[3])
                    
    result
end

def _reduce_324(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_325(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_326(val, _values, result)
                      *in_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case_match(val[0], val[1],
                                             in_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_327(val, _values, result)
                      result = @builder.for(val[0], val[1], val[2], *val[3], val[4], val[5])
                    
    result
end

def _reduce_328(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:class)
                    
    result
end

def _reduce_329(val, _values, result)
                      unless @context.class_definition_allowed?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_330(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:sclass)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_332(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @context.push(:module)
                    
    result
end

def _reduce_333(val, _values, result)
                      unless @context.module_definition_allowed?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.cmdarg.pop
                      @static_env.unextend
                      @context.pop
                    
    result
end

def _reduce_334(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:def)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_336(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_337(val, _values, result)
                      @static_env.extend_static
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                      @context.push(:defs)
                      @current_arg_stack.push(nil)
                    
    result
end

def _reduce_338(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.cmdarg.pop
                      @lexer.cond.pop
                      @static_env.unextend
                      @context.pop
                      @current_arg_stack.pop
                    
    result
end

def _reduce_339(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_340(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_341(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_342(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
                      if @context.in_class?
                        diagnostic :error, :invalid_return, nil, val[0]
                      end
                    
    result
end

# reduce 345 omitted

# reduce 346 omitted

def _reduce_347(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

def _reduce_351(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val
                    
    result
end

# reduce 354 omitted

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[0].
                                  push(val[2])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].
                                  push(val[2]).
                                  concat(val[4])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ val[0], *val[2] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = @builder.restarg(val[0], val[1])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = @builder.restarg(val[0])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_373(val, _values, result)
                      result = []
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_381(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_382(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_390(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_391(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_392(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      @current_arg_stack.set(nil)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_393(val, _values, result)
                      result = []
                    
    result
end

def _reduce_394(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_397(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_400(val, _values, result)
                      @context.pop
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_401(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_402(val, _values, result)
                      @max_numparam_stack.has_ordinary_params!
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_403(val, _values, result)
                      if val[0].any?
                        @max_numparam_stack.has_ordinary_params!
                      end
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_404(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_406(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = [ val[0], val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_408(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_410(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_413(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_414(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_415(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_416(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_418(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_419(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_420(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_421(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_423(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_425(val, _values, result)
                      @context.push(:block)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = [ val[0], *val[2], val[3] ]
                      @context.pop
                    
    result
end

def _reduce_427(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_428(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[1]
                      result = [ args, val[2] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      @static_env.extend_dynamic
                      @max_numparam_stack.push
                    
    result
end

def _reduce_430(val, _values, result)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_431(val, _values, result)
                      args = @max_numparam_stack.has_numparams? ? @builder.numargs(@max_numparam_stack.top) : val[2]
                      result = [ args, val[3] ]

                      @max_numparam_stack.pop
                      @static_env.unextend
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_432(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_433(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 434 omitted

def _reduce_435(val, _values, result)
                      @lexer.state = :expr_beg
                      @lexer.command_start = false
                      @pattern_variables.push
                      @pattern_hash_keys.push

                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_436(val, _values, result)
                      @pattern_hash_keys.pop
                      @pattern_variables.pop
                      @lexer.in_kwarg = val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      result = [ @builder.in_pattern(val[0], *val[2], val[3], val[5]),
                                 *val[6] ]
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 439 omitted

def _reduce_440(val, _values, result)
                      result = [ val[0], nil ]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = [ val[0], @builder.if_guard(val[1], val[2]) ]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = [ val[0], @builder.unless_guard(val[1], val[2]) ]
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      # array patterns that end with comma
                      # like 1, 2,
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = @builder.array_pattern(nil, [ item ], nil)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.array_pattern(nil, [val[0]].concat(val[2]), nil)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.array_pattern(nil, val[0], nil)
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.hash_pattern(nil, val[0], nil)
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      result = @builder.match_as(val[0], val[1], val[2])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = @builder.match_alt(val[0], val[1], val[2])
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0]
                      @pattern_hash_keys.push
                    
    result
end

# reduce 455 omitted

def _reduce_456(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_457(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_458(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_459(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.array_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_460(val, _values, result)
                      @pattern_hash_keys.pop
                      pattern = @builder.hash_pattern(nil, val[2], nil)
                      result = @builder.const_pattern(val[0], val[1], pattern, val[3])
                    
    result
end

def _reduce_461(val, _values, result)
                      pattern = @builder.array_pattern(val[1], nil, val[2])
                      result = @builder.const_pattern(val[0], val[1], pattern, val[2])
                    
    result
end

def _reduce_462(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_463(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.array_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = @builder.array_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_465(val, _values, result)
                      @pattern_hash_keys.push
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = false
                    
    result
end

def _reduce_466(val, _values, result)
                      @pattern_hash_keys.pop
                      @lexer.in_kwarg = val[1]
                      result = @builder.hash_pattern(val[0], val[2], val[3])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.hash_pattern(val[0], [], val[1])
                    
    result
end

def _reduce_468(val, _values, result)
                      @pattern_hash_keys.push
                    
    result
end

def _reduce_469(val, _values, result)
                      @pattern_hash_keys.pop
                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = [ *val[0], val[1] ]
                    
    result
end

def _reduce_473(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest ]
                    
    result
end

def _reduce_474(val, _values, result)
                      match_rest = @builder.match_rest(val[1], val[2])
                      result = [ *val[0], match_rest, *val[4] ]
                    
    result
end

def _reduce_475(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]) ]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = [ *val[0], @builder.match_rest(val[1]), *val[3] ]
                    
    result
end

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      item = @builder.match_with_trailing_comma(val[0], val[1])
                      result = [ item ]
                    
    result
end

def _reduce_479(val, _values, result)
                      # array patterns that end with comma
                      # like [1, 2,]
                      # must be emitted as `array_pattern_with_tail`
                      last_item = @builder.match_with_trailing_comma(val[1], val[2])
                      result = [ *val[0], last_item ]
                    
    result
end

def _reduce_480(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest ]
                    
    result
end

def _reduce_481(val, _values, result)
                      match_rest = @builder.match_rest(val[0], val[1])
                      result = [ match_rest, *val[3] ]
                    
    result
end

def _reduce_482(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest ]
                    
    result
end

def _reduce_483(val, _values, result)
                      match_rest = @builder.match_rest(val[0])
                      result = [ match_rest, *val[2] ]
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

# reduce 486 omitted

def _reduce_487(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_488(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_489(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_491(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_492(val, _values, result)
                      result = [ *val[0], *val[2] ]
                    
    result
end

def _reduce_493(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ *val[0], val[2] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.match_pair(*val[0], val[1])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.match_label(*val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                    result = [:label, val[0]]
                  
    result
end

def _reduce_498(val, _values, result)
                    result = [:quoted, [val[0], val[1], val[2]]]
                  
    result
end

def _reduce_499(val, _values, result)
                      result = [ @builder.match_rest(val[0], val[1]) ]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ @builder.match_rest(val[0], nil) ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = [ @builder.match_nil_pattern(val[0], val[1]) ]
                    
    result
end

# reduce 502 omitted

def _reduce_503(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], nil)
                    
    result
end

def _reduce_506(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], nil)
                    
    result
end

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

def _reduce_510(val, _values, result)
                      result = @builder.range_inclusive(nil, val[0], val[1])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = @builder.range_exclusive(nil, val[0], val[1])
                    
    result
end

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

def _reduce_520(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_521(val, _values, result)
                      @context.push(:lambda)
                    
    result
end

def _reduce_522(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[2]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_523(val, _values, result)
                      result = @builder.assignable(@builder.match_var(val[0]))
                    
    result
end

def _reduce_524(val, _values, result)
                      name = val[1][0]
                      unless static_env.declared?(name)
                        diagnostic :error, :undefined_lvar, { :name => name }, val[1]
                      end

                      lvar = @builder.accessible(@builder.ident(val[1]))
                      result = @builder.pin(val[0], lvar)
                    
    result
end

def _reduce_525(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_526(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_527(val, _values, result)
                      result = @builder.const(val[0])
                   
    result
end

def _reduce_528(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_529(val, _values, result)
                      result = []
                    
    result
end

def _reduce_530(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 531 omitted

# reduce 532 omitted

def _reduce_533(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

def _reduce_539(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_540(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_542(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_543(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_544(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_545(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_546(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = []
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_550(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      result = []
                    
    result
end

def _reduce_554(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_555(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_556(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_557(val, _values, result)
                      result = []
                    
    result
end

def _reduce_558(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_559(val, _values, result)
                      result = []
                    
    result
end

def _reduce_560(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_561(val, _values, result)
                      result = []
                    
    result
end

def _reduce_562(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_563(val, _values, result)
                      result = []
                    
    result
end

def _reduce_564(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_565(val, _values, result)
                      result = []
                    
    result
end

def _reduce_566(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_567(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_568(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_569(val, _values, result)
                      @lexer.cmdarg.push(false)
                      @lexer.cond.push(false)
                    
    result
end

def _reduce_570(val, _values, result)
                      @lexer.cmdarg.pop
                      @lexer.cond.pop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

def _reduce_577(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_580(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_581(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_582(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_583(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_584(val, _values, result)
                      @lexer.state = :expr_end
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_585(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_586(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_587(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_588(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_589(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_590(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_592(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_593(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_601(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_602(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_603(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_604(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_605(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_606(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_607(val, _values, result)
                      args = [ *val[1], @builder.forward_arg(val[3]) ]
                      result = @builder.args(val[0], args, val[4])
                      @static_env.declare_forward_args
                    
    result
end

def _reduce_608(val, _values, result)
                      result = @builder.forward_only_args(val[0], val[1], val[2])
                      @static_env.declare_forward_args

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_609(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_610(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_611(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_612(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_613(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_614(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_615(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_616(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_617(val, _values, result)
                      result = []
                    
    result
end

def _reduce_618(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_619(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_620(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_621(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_622(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_623(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_624(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_625(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_626(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_627(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_628(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_629(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_630(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_631(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_632(val, _values, result)
                      result = []
                    
    result
end

def _reduce_633(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_634(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_635(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_636(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_637(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 638 omitted

def _reduce_639(val, _values, result)
                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      result = val[0]
                    
    result
end

def _reduce_640(val, _values, result)
                      @current_arg_stack.set(val[0][0])
                      result = val[0]
                    
    result
end

def _reduce_641(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_642(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_643(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_644(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_645(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      @max_numparam_stack.has_ordinary_params!

                      @current_arg_stack.set(val[0][0])

                      result = val[0]
                    
    result
end

def _reduce_646(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_647(val, _values, result)
                      @current_arg_stack.set(nil)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_648(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_649(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_650(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_651(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_652(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_653(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 654 omitted

# reduce 655 omitted

def _reduce_656(val, _values, result)
                      result = [ @builder.kwnilarg(val[0], val[1]) ]
                    
    result
end

def _reduce_657(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_658(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_659(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_660(val, _values, result)
                      @current_arg_stack.set(0)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_661(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_662(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_663(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_664(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 665 omitted

# reduce 666 omitted

def _reduce_667(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_668(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 669 omitted

# reduce 670 omitted

def _reduce_671(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_672(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_673(val, _values, result)
                      result = []
                    
    result
end

# reduce 674 omitted

def _reduce_675(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_676(val, _values, result)
                      result = []
                    
    result
end

# reduce 677 omitted

def _reduce_678(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_679(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_680(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_681(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_682(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_683(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 684 omitted

# reduce 685 omitted

# reduce 686 omitted

# reduce 687 omitted

# reduce 688 omitted

# reduce 689 omitted

# reduce 690 omitted

# reduce 691 omitted

# reduce 692 omitted

# reduce 693 omitted

# reduce 694 omitted

# reduce 695 omitted

def _reduce_696(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_697(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 698 omitted

# reduce 699 omitted

# reduce 700 omitted

# reduce 701 omitted

def _reduce_702(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_703(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_704(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 705 omitted

# reduce 706 omitted

# reduce 707 omitted

def _reduce_708(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 709 omitted

# reduce 710 omitted

# reduce 711 omitted

def _reduce_712(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby27
  end   # module Parser
