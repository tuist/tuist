# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-schema_comparator` gem.
# Please instead update this file by running `bin/tapioca gem graphql-schema_comparator`.

# source://graphql-schema_comparator//lib/graphql/schema_comparator/version.rb#1
module GraphQL
  class << self
    # source://graphql/2.1.5/lib/graphql.rb#35
    def default_parser; end

    # source://graphql/2.1.5/lib/graphql.rb#39
    def default_parser=(_arg0); end

    # source://graphql/2.1.5/lib/graphql.rb#45
    def parse(graphql_string, trace: T.unsafe(nil)); end

    # source://graphql/2.1.5/lib/graphql.rb#52
    def parse_file(filename); end

    # source://graphql/2.1.5/lib/graphql.rb#62
    def parse_with_racc(string, filename: T.unsafe(nil), trace: T.unsafe(nil)); end

    # source://graphql/2.1.5/lib/graphql.rb#58
    def scan(graphql_string); end

    # source://graphql/2.1.5/lib/graphql.rb#66
    def scan_with_ruby(graphql_string); end
  end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/version.rb#2
module GraphQL::SchemaComparator
  class << self
    # Compares and returns changes for two versions of a schema
    #
    # @param old_schema [GraphQL::Schema, String]
    # @param new_schema [GraphQL::Schema, String]
    # @return [GraphQL::SchemaComparator::Result] the result of the comparison
    #
    # source://graphql-schema_comparator//lib/graphql/schema_comparator.rb#28
    def compare(old_schema, new_schema); end

    # source://graphql-schema_comparator//lib/graphql/schema_comparator.rb#38
    def parse_schema(schema); end
  end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#3
module GraphQL::SchemaComparator::Changes; end

# Base class for change objects
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#8
class GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [Boolean] If the change is breaking or not
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#16
  def breaking?; end

  # @raise [NotImplementedError]
  # @return [GraphQL::SchemaComparator::Changes::Criticality] The criticality of this change
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#31
  def criticality; end

  # @return [Boolean] If the change is dangerous or not
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#21
  def dangerous?; end

  # A message describing the change that happened between the two version
  #
  # @raise [NotImplementedError]
  # @return [String] The change message
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#11
  def message; end

  # @return [Boolean] If the change is non breaking
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#26
  def non_breaking?; end

  # @raise [NotImplementedError]
  # @return [String] Dot-delimited path to the affected schema member.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#36
  def path; end
end

# Defines the criticality of a {Change} object.
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#5
class GraphQL::SchemaComparator::Changes::Criticality
  # Creates a new Criticality object
  #
  # @param level [Symbol] The criticality level
  # @param reason [String] The reason why this criticality is set on the change
  # @return [Criticality] a new instance of Criticality
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#59
  def initialize(level: T.unsafe(nil), reason: T.unsafe(nil)); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#64
  def <=>(other); end

  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#74
  def breaking?; end

  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#82
  def dangerous?; end

  # Returns the value of attribute level.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#21
  def level; end

  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#78
  def non_breaking?; end

  # Returns the value of attribute reason.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#21
  def reason; end

  class << self
    # Returns a new Criticality object with a BREAKING level
    #
    # @param reason [String] optional reason for this criticality
    # @return [GraphQL::SchemaComparator::Changes::Criticality]
    #
    # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#27
    def breaking(reason: T.unsafe(nil)); end

    # Returns a new Criticality object with a DANGEROUS level
    #
    # @param reason [String] optional reason for this criticality
    # @return [GraphQL::SchemaComparator::Changes::Criticality]
    #
    # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#47
    def dangerous(reason: T.unsafe(nil)); end

    # Returns a new Criticality object with a NON_BREAKING level
    #
    # @param reason [String] optional reason for this criticality
    # @return [GraphQL::SchemaComparator::Changes::Criticality]
    #
    # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#37
    def non_breaking(reason: T.unsafe(nil)); end
  end
end

# Breaking criticality are changes that immediately impact
# clients usually causing queries not to be valid anymore.
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#19
GraphQL::SchemaComparator::Changes::Criticality::BREAKING = T.let(T.unsafe(nil), Integer)

# Dangerous criticality defines changes that are not breaking
# the schema, but may break runtime logic on clients
# if they did not code defensively enough to prevent
# these changes.
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#15
GraphQL::SchemaComparator::Changes::Criticality::DANGEROUS = T.let(T.unsafe(nil), Integer)

# Non-breaking criticality usually defines changes that are always
# safe to make to a GraphQL Schema. They do not
# require any changes on the client side
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/criticality.rb#9
GraphQL::SchemaComparator::Changes::Criticality::NON_BREAKING = T.let(T.unsafe(nil), Integer)

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#694
class GraphQL::SchemaComparator::Changes::DirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveAdded] a new instance of DirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#697
  def initialize(directive); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#695
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#695
  def directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#702
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#706
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1073
class GraphQL::SchemaComparator::Changes::DirectiveArgumentAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveArgumentAdded] a new instance of DirectiveArgumentAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1076
  def initialize(directive, argument); end

  # Returns the value of attribute argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1074
  def argument; end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1074
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1074
  def directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1086
  def message; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#966
class GraphQL::SchemaComparator::Changes::DirectiveArgumentAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveArgumentAstDirectiveAdded] a new instance of DirectiveArgumentAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#967
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#972
class GraphQL::SchemaComparator::Changes::DirectiveArgumentAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveArgumentAstDirectiveRemoved] a new instance of DirectiveArgumentAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#973
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#532
class GraphQL::SchemaComparator::Changes::DirectiveArgumentDefaultChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveArgumentDefaultChanged] a new instance of DirectiveArgumentDefaultChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#535
  def initialize(directive, old_argument, new_argument); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#533
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#533
  def directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#545
  def message; end

  # Returns the value of attribute new_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#533
  def new_argument; end

  # Returns the value of attribute old_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#533
  def old_argument; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#554
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#853
class GraphQL::SchemaComparator::Changes::DirectiveArgumentDescriptionChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveArgumentDescriptionChanged] a new instance of DirectiveArgumentDescriptionChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#856
  def initialize(directive, old_argument, new_argument); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#854
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#854
  def directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#863
  def message; end

  # Returns the value of attribute new_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#854
  def new_argument; end

  # Returns the value of attribute old_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#854
  def old_argument; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#868
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#186
class GraphQL::SchemaComparator::Changes::DirectiveArgumentRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveArgumentRemoved] a new instance of DirectiveArgumentRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#189
  def initialize(directive, argument); end

  # Returns the value of attribute argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#187
  def argument; end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#187
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#187
  def directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#195
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#199
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#450
class GraphQL::SchemaComparator::Changes::DirectiveArgumentTypeChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  include ::GraphQL::SchemaComparator::Changes::SafeTypeChange

  # @return [DirectiveArgumentTypeChanged] a new instance of DirectiveArgumentTypeChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#455
  def initialize(directive, old_argument, new_argument); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#453
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#453
  def directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#469
  def message; end

  # Returns the value of attribute new_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#453
  def new_argument; end

  # Returns the value of attribute old_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#453
  def old_argument; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#474
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#793
class GraphQL::SchemaComparator::Changes::DirectiveDescriptionChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveDescriptionChanged] a new instance of DirectiveDescriptionChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#796
  def initialize(old_directive, new_directive); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#794
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#802
  def message; end

  # Returns the value of attribute new_directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#794
  def new_directive; end

  # Returns the value of attribute old_directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#794
  def old_directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#807
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#911
class GraphQL::SchemaComparator::Changes::DirectiveLocationAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveLocationAdded] a new instance of DirectiveLocationAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#914
  def initialize(directive, location); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#912
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#912
  def directive; end

  # Returns the value of attribute location.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#912
  def location; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#920
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#924
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#322
class GraphQL::SchemaComparator::Changes::DirectiveLocationRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveLocationRemoved] a new instance of DirectiveLocationRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#325
  def initialize(directive, location); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#323
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#323
  def directive; end

  # Returns the value of attribute location.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#323
  def location; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#331
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#335
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#62
class GraphQL::SchemaComparator::Changes::DirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [DirectiveRemoved] a new instance of DirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#65
  def initialize(directive); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#63
  def criticality; end

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#63
  def directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#70
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#74
  def path; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1026
class GraphQL::SchemaComparator::Changes::EnumTypeAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumTypeAstDirectiveAdded] a new instance of EnumTypeAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1027
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1032
class GraphQL::SchemaComparator::Changes::EnumTypeAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumTypeAstDirectiveRemoved] a new instance of EnumTypeAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1033
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#559
class GraphQL::SchemaComparator::Changes::EnumValueAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumValueAdded] a new instance of EnumValueAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#562
  def initialize(enum_type, enum_value, usage); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#560
  def criticality; end

  # Returns the value of attribute enum_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#560
  def enum_type; end

  # Returns the value of attribute enum_value.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#560
  def enum_value; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#577
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#581
  def path; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#942
class GraphQL::SchemaComparator::Changes::EnumValueAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumValueAstDirectiveAdded] a new instance of EnumValueAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#943
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#948
class GraphQL::SchemaComparator::Changes::EnumValueAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumValueAstDirectiveRemoved] a new instance of EnumValueAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#949
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#749
class GraphQL::SchemaComparator::Changes::EnumValueDeprecated < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumValueDeprecated] a new instance of EnumValueDeprecated
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#752
  def initialize(enum, old_enum_value, new_enum_value); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#750
  def criticality; end

  # Returns the value of attribute enum.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#750
  def enum; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#759
  def message; end

  # Returns the value of attribute new_enum_value.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#750
  def new_enum_value; end

  # Returns the value of attribute old_enum_value.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#750
  def old_enum_value; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#768
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#729
class GraphQL::SchemaComparator::Changes::EnumValueDescriptionChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumValueDescriptionChanged] a new instance of EnumValueDescriptionChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#732
  def initialize(enum, old_enum_value, new_enum_value); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#730
  def criticality; end

  # Returns the value of attribute enum.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#730
  def enum; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#739
  def message; end

  # Returns the value of attribute new_enum_value.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#730
  def new_enum_value; end

  # Returns the value of attribute old_enum_value.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#730
  def old_enum_value; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#744
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#99
class GraphQL::SchemaComparator::Changes::EnumValueRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [EnumValueRemoved] a new instance of EnumValueRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#102
  def initialize(enum_type, enum_value, usage); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#100
  def criticality; end

  # Returns the value of attribute enum_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#100
  def enum_type; end

  # Returns the value of attribute enum_value.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#100
  def enum_value; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#116
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#120
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#893
class GraphQL::SchemaComparator::Changes::FieldAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldAdded] a new instance of FieldAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#896
  def initialize(object_type, field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#894
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#894
  def field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#902
  def message; end

  # Returns the value of attribute object_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#894
  def object_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#906
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#653
class GraphQL::SchemaComparator::Changes::FieldArgumentAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldArgumentAdded] a new instance of FieldArgumentAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#656
  def initialize(type, field, argument); end

  # Returns the value of attribute argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#654
  def argument; end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#654
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#654
  def field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#668
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#672
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#654
  def type; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#978
class GraphQL::SchemaComparator::Changes::FieldArgumentAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldArgumentAstDirectiveAdded] a new instance of FieldArgumentAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#979
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#984
class GraphQL::SchemaComparator::Changes::FieldArgumentAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldArgumentAstDirectiveRemoved] a new instance of FieldArgumentAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#985
  def initialize(*_arg0); end
end

# Dangerous Changes
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#481
class GraphQL::SchemaComparator::Changes::FieldArgumentDefaultChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldArgumentDefaultChanged] a new instance of FieldArgumentDefaultChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#484
  def initialize(type, field, old_argument, new_argument); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#482
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#482
  def field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#495
  def message; end

  # Returns the value of attribute new_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#482
  def new_argument; end

  # Returns the value of attribute old_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#482
  def old_argument; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#504
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#482
  def type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#832
class GraphQL::SchemaComparator::Changes::FieldArgumentDescriptionChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldArgumentDescriptionChanged] a new instance of FieldArgumentDescriptionChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#835
  def initialize(type, field, old_argument, new_argument); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#833
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#833
  def field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#843
  def message; end

  # Returns the value of attribute new_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#833
  def new_argument; end

  # Returns the value of attribute old_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#833
  def old_argument; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#848
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#833
  def type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#165
class GraphQL::SchemaComparator::Changes::FieldArgumentRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldArgumentRemoved] a new instance of FieldArgumentRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#168
  def initialize(object_type, field, argument); end

  # Returns the value of attribute argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#166
  def argument; end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#166
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#166
  def field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#177
  def message; end

  # Returns the value of attribute object_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#166
  def object_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#181
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#418
class GraphQL::SchemaComparator::Changes::FieldArgumentTypeChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  include ::GraphQL::SchemaComparator::Changes::SafeTypeChange

  # @return [FieldArgumentTypeChanged] a new instance of FieldArgumentTypeChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#423
  def initialize(type, field, old_argument, new_argument); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#421
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#421
  def field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#440
  def message; end

  # Returns the value of attribute new_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#421
  def new_argument; end

  # Returns the value of attribute old_argument.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#421
  def old_argument; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#445
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#421
  def type; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#930
class GraphQL::SchemaComparator::Changes::FieldAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldAstDirectiveAdded] a new instance of FieldAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#931
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#936
class GraphQL::SchemaComparator::Changes::FieldAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldAstDirectiveRemoved] a new instance of FieldAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#937
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#873
class GraphQL::SchemaComparator::Changes::FieldDeprecationChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldDeprecationChanged] a new instance of FieldDeprecationChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#876
  def initialize(type, old_field, new_field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#874
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#883
  def message; end

  # Returns the value of attribute new_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#874
  def new_field; end

  # Returns the value of attribute old_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#874
  def old_field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#888
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#874
  def type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#812
class GraphQL::SchemaComparator::Changes::FieldDescriptionChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldDescriptionChanged] a new instance of FieldDescriptionChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#815
  def initialize(type, old_field, new_field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#813
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#822
  def message; end

  # Returns the value of attribute new_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#813
  def new_field; end

  # Returns the value of attribute old_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#813
  def old_field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#827
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#813
  def type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#294
class GraphQL::SchemaComparator::Changes::FieldRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [FieldRemoved] a new instance of FieldRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#297
  def initialize(object_type, field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#295
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#295
  def field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#313
  def message; end

  # Returns the value of attribute object_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#295
  def object_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#317
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#360
class GraphQL::SchemaComparator::Changes::FieldTypeChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  include ::GraphQL::SchemaComparator::Changes::SafeTypeChange

  # @return [FieldTypeChanged] a new instance of FieldTypeChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#365
  def initialize(type, old_field, new_field); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#375
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#371
  def message; end

  # Returns the value of attribute new_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#363
  def new_field; end

  # Returns the value of attribute old_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#363
  def old_field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#383
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#363
  def type; end
end

# Mostly Non-Breaking Changes
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#630
class GraphQL::SchemaComparator::Changes::InputFieldAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputFieldAdded] a new instance of InputFieldAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#633
  def initialize(input_object_type, field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#631
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#631
  def field; end

  # Returns the value of attribute input_object_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#631
  def input_object_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#644
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#648
  def path; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#954
class GraphQL::SchemaComparator::Changes::InputFieldAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputFieldAstDirectiveAdded] a new instance of InputFieldAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#955
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#960
class GraphQL::SchemaComparator::Changes::InputFieldAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputFieldAstDirectiveRemoved] a new instance of InputFieldAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#961
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#509
class GraphQL::SchemaComparator::Changes::InputFieldDefaultChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputFieldDefaultChanged] a new instance of InputFieldDefaultChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#512
  def initialize(input_type, old_field, new_field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#510
  def criticality; end

  # Returns the value of attribute input_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#510
  def input_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#522
  def message; end

  # Returns the value of attribute new_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#510
  def new_field; end

  # Returns the value of attribute old_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#510
  def old_field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#527
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#773
class GraphQL::SchemaComparator::Changes::InputFieldDescriptionChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputFieldDescriptionChanged] a new instance of InputFieldDescriptionChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#776
  def initialize(input_type, old_field, new_field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#774
  def criticality; end

  # Returns the value of attribute input_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#774
  def input_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#783
  def message; end

  # Returns the value of attribute new_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#774
  def new_field; end

  # Returns the value of attribute old_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#774
  def old_field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#788
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#145
class GraphQL::SchemaComparator::Changes::InputFieldRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputFieldRemoved] a new instance of InputFieldRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#148
  def initialize(input_object_type, field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#146
  def criticality; end

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#146
  def field; end

  # Returns the value of attribute input_object_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#146
  def input_object_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#156
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#160
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#388
class GraphQL::SchemaComparator::Changes::InputFieldTypeChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  include ::GraphQL::SchemaComparator::Changes::SafeTypeChange

  # @return [InputFieldTypeChanged] a new instance of InputFieldTypeChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#393
  def initialize(input_type, old_input_field, new_input_field); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#391
  def criticality; end

  # Returns the value of attribute input_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#391
  def input_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#409
  def message; end

  # Returns the value of attribute new_input_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#391
  def new_input_field; end

  # Returns the value of attribute old_input_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#391
  def old_input_field; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#413
  def path; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1050
class GraphQL::SchemaComparator::Changes::InputObjectTypeAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputObjectTypeAstDirectiveAdded] a new instance of InputObjectTypeAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1051
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1056
class GraphQL::SchemaComparator::Changes::InputObjectTypeAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InputObjectTypeAstDirectiveRemoved] a new instance of InputObjectTypeAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1057
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1002
class GraphQL::SchemaComparator::Changes::InterfaceTypeAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InterfaceTypeAstDirectiveAdded] a new instance of InterfaceTypeAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1003
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1008
class GraphQL::SchemaComparator::Changes::InterfaceTypeAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [InterfaceTypeAstDirectiveRemoved] a new instance of InterfaceTypeAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1009
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#990
class GraphQL::SchemaComparator::Changes::ObjectTypeAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [ObjectTypeAstDirectiveAdded] a new instance of ObjectTypeAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#991
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#996
class GraphQL::SchemaComparator::Changes::ObjectTypeAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [ObjectTypeAstDirectiveRemoved] a new instance of ObjectTypeAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#997
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#607
class GraphQL::SchemaComparator::Changes::ObjectTypeInterfaceAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [ObjectTypeInterfaceAdded] a new instance of ObjectTypeInterfaceAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#610
  def initialize(interface, object_type); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#608
  def criticality; end

  # Returns the value of attribute interface.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#608
  def interface; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#619
  def message; end

  # Returns the value of attribute object_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#608
  def object_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#623
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#340
class GraphQL::SchemaComparator::Changes::ObjectTypeInterfaceRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [ObjectTypeInterfaceRemoved] a new instance of ObjectTypeInterfaceRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#343
  def initialize(interface, object_type); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#341
  def criticality; end

  # Returns the value of attribute interface.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#341
  def interface; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#351
  def message; end

  # Returns the value of attribute object_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#341
  def object_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#355
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#204
class GraphQL::SchemaComparator::Changes::RootOperationTypeAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [RootOperationTypeAdded] a new instance of RootOperationTypeAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#207
  def initialize(new_schema:, operation_type:); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#205
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#215
  def message; end

  # Returns the value of attribute new_schema.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#205
  def new_schema; end

  # Returns the value of attribute operation_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#205
  def operation_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#223
  def operation_type_name; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#219
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#235
class GraphQL::SchemaComparator::Changes::RootOperationTypeChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [RootOperationTypeChanged] a new instance of RootOperationTypeChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#238
  def initialize(old_schema:, new_schema:, operation_type:); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#236
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#245
  def message; end

  # Returns the value of attribute new_schema.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#236
  def new_schema; end

  # Returns the value of attribute old_schema.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#236
  def old_schema; end

  # Returns the value of attribute operation_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#236
  def operation_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#253
  def operation_type_name(schema); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#249
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#265
class GraphQL::SchemaComparator::Changes::RootOperationTypeRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [RootOperationTypeRemoved] a new instance of RootOperationTypeRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#268
  def initialize(old_schema:, operation_type:); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#266
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#274
  def message; end

  # Returns the value of attribute old_schema.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#266
  def old_schema; end

  # Returns the value of attribute operation_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#266
  def operation_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#282
  def operation_type_name; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#278
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/safe_type_change.rb#4
module GraphQL::SchemaComparator::Changes::SafeTypeChange
  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/safe_type_change.rb#5
  def safe_change_for_field?(old_type, new_type); end

  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes/safe_type_change.rb#19
  def safe_change_for_input_value?(old_type, new_type); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1038
class GraphQL::SchemaComparator::Changes::ScalarTypeAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [ScalarTypeAstDirectiveAdded] a new instance of ScalarTypeAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1039
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1044
class GraphQL::SchemaComparator::Changes::ScalarTypeAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [ScalarTypeAstDirectiveRemoved] a new instance of ScalarTypeAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1045
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1062
class GraphQL::SchemaComparator::Changes::SchemaAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [SchemaAstDirectiveAdded] a new instance of SchemaAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1063
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1068
class GraphQL::SchemaComparator::Changes::SchemaAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [SchemaAstDirectiveRemoved] a new instance of SchemaAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1069
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#677
class GraphQL::SchemaComparator::Changes::TypeAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [TypeAdded] a new instance of TypeAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#680
  def initialize(type); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#678
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#685
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#689
  def path; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#678
  def type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#711
class GraphQL::SchemaComparator::Changes::TypeDescriptionChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [TypeDescriptionChanged] a new instance of TypeDescriptionChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#714
  def initialize(old_type, new_type); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#712
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#720
  def message; end

  # Returns the value of attribute new_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#712
  def new_type; end

  # Returns the value of attribute old_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#712
  def old_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#724
  def path; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#79
class GraphQL::SchemaComparator::Changes::TypeKindChanged < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [TypeKindChanged] a new instance of TypeKindChanged
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#82
  def initialize(old_type, new_type); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#80
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#90
  def message; end

  # Returns the value of attribute new_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#80
  def new_type; end

  # Returns the value of attribute old_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#80
  def old_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#94
  def path; end
end

# Mostly breaking changes
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#43
class GraphQL::SchemaComparator::Changes::TypeRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [TypeRemoved] a new instance of TypeRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#46
  def initialize(removed_type); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#44
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#53
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#57
  def path; end

  # Returns the value of attribute removed_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#44
  def removed_type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#586
class GraphQL::SchemaComparator::Changes::UnionMemberAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [UnionMemberAdded] a new instance of UnionMemberAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#589
  def initialize(union_type, union_member); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#587
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#598
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#602
  def path; end

  # Returns the value of attribute union_member.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#587
  def union_member; end

  # Returns the value of attribute union_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#587
  def union_type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#125
class GraphQL::SchemaComparator::Changes::UnionMemberRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [UnionMemberRemoved] a new instance of UnionMemberRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#128
  def initialize(union_type, union_member); end

  # Returns the value of attribute criticality.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#126
  def criticality; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#136
  def message; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#140
  def path; end

  # Returns the value of attribute union_member.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#126
  def union_member; end

  # Returns the value of attribute union_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#126
  def union_type; end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1014
class GraphQL::SchemaComparator::Changes::UnionTypeAstDirectiveAdded < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [UnionTypeAstDirectiveAdded] a new instance of UnionTypeAstDirectiveAdded
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1015
  def initialize(*_arg0); end
end

# TODO
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1020
class GraphQL::SchemaComparator::Changes::UnionTypeAstDirectiveRemoved < ::GraphQL::SchemaComparator::Changes::AbstractChange
  # @return [UnionTypeAstDirectiveRemoved] a new instance of UnionTypeAstDirectiveRemoved
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/changes.rb#1021
  def initialize(*_arg0); end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#3
module GraphQL::SchemaComparator::Diff; end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/argument.rb#4
class GraphQL::SchemaComparator::Diff::Argument
  # @return [Argument] a new instance of Argument
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/argument.rb#5
  def initialize(type, field, old_arg, new_arg); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/argument.rb#13
  def diff; end

  private

  # Returns the value of attribute field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/argument.rb#35
  def field; end

  # Returns the value of attribute new_arg.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/argument.rb#35
  def new_arg; end

  # Returns the value of attribute old_arg.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/argument.rb#35
  def old_arg; end

  # Returns the value of attribute type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/argument.rb#35
  def type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#4
class GraphQL::SchemaComparator::Diff::Directive
  # @return [Directive] a new instance of Directive
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#5
  def initialize(old_directive, new_directive); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#12
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#45
  def added_arguments; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#37
  def added_locations; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#49
  def each_common_argument(&block); end

  # Returns the value of attribute new_arguments.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#59
  def new_arguments; end

  # Returns the value of attribute new_directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#59
  def new_directive; end

  # Returns the value of attribute old_arguments.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#59
  def old_arguments; end

  # Returns the value of attribute old_directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#59
  def old_directive; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#41
  def removed_arguments; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive.rb#33
  def removed_locations; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive_argument.rb#4
class GraphQL::SchemaComparator::Diff::DirectiveArgument
  # @return [DirectiveArgument] a new instance of DirectiveArgument
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive_argument.rb#5
  def initialize(directive, old_arg, new_arg); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive_argument.rb#11
  def diff; end

  private

  # Returns the value of attribute directive.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive_argument.rb#33
  def directive; end

  # Returns the value of attribute new_arg.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive_argument.rb#33
  def new_arg; end

  # Returns the value of attribute old_arg.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/directive_argument.rb#33
  def old_arg; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#4
class GraphQL::SchemaComparator::Diff::Enum
  # @return [Enum] a new instance of Enum
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#5
  def initialize(old_enum, new_enum, usage); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#15
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#54
  def added_values; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#40
  def each_common_value(&block); end

  # Returns the value of attribute new_enum.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#38
  def new_enum; end

  # Returns the value of attribute new_values.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#38
  def new_values; end

  # Returns the value of attribute old_enum.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#38
  def old_enum; end

  # Returns the value of attribute old_values.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#38
  def old_values; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#50
  def removed_values; end

  # Returns the value of attribute usage.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/enum.rb#38
  def usage; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#4
class GraphQL::SchemaComparator::Diff::Field
  # @return [Field] a new instance of Field
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#5
  def initialize(old_type, new_type, old_field, new_field); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#16
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#58
  def arg_additions; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#53
  def arg_removals; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#63
  def each_common_argument(&block); end

  # Returns the value of attribute new_arguments.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#44
  def new_arguments; end

  # Returns the value of attribute new_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#44
  def new_field; end

  # Returns the value of attribute new_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#44
  def new_type; end

  # Returns the value of attribute old_arguments.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#44
  def old_arguments; end

  # Returns the value of attribute old_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#44
  def old_field; end

  # Returns the value of attribute old_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/field.rb#44
  def old_type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_field.rb#4
class GraphQL::SchemaComparator::Diff::InputField
  # @return [InputField] a new instance of InputField
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_field.rb#5
  def initialize(old_type, new_type, old_field, new_field); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_field.rb#13
  def diff; end

  private

  # Returns the value of attribute new_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_field.rb#35
  def new_field; end

  # Returns the value of attribute new_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_field.rb#35
  def new_type; end

  # Returns the value of attribute old_field.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_field.rb#35
  def old_field; end

  # Returns the value of attribute old_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_field.rb#35
  def old_type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#4
class GraphQL::SchemaComparator::Diff::InputObject
  # @return [InputObject] a new instance of InputObject
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#5
  def initialize(old_type, new_type); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#13
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#45
  def added_fields; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#31
  def each_common_field(&block); end

  # Returns the value of attribute new_fields.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#29
  def new_fields; end

  # Returns the value of attribute new_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#29
  def new_type; end

  # Returns the value of attribute old_fields.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#29
  def old_fields; end

  # Returns the value of attribute old_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#29
  def old_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/input_object.rb#41
  def removed_fields; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#4
class GraphQL::SchemaComparator::Diff::Interface
  # @return [Interface] a new instance of Interface
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#5
  def initialize(old_interface, new_interface); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#13
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#39
  def each_common_field(&block); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#34
  def field_additions; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#29
  def field_removals; end

  # Returns the value of attribute new_fields.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#27
  def new_fields; end

  # Returns the value of attribute new_interface.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#27
  def new_interface; end

  # Returns the value of attribute old_fields.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#27
  def old_fields; end

  # Returns the value of attribute old_interface.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/interface.rb#27
  def old_interface; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#4
class GraphQL::SchemaComparator::Diff::ObjectType
  # @return [ObjectType] a new instance of ObjectType
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#5
  def initialize(old_type, new_type); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#16
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#66
  def each_common_field(&block); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#61
  def field_additions; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#56
  def field_removals; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#52
  def filter_interfaces(interfaces, excluded_interfaces); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#47
  def interface_additions; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#42
  def interface_removals; end

  # Returns the value of attribute new_fields.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#33
  def new_fields; end

  # Returns the value of attribute new_interfaces.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#33
  def new_interfaces; end

  # Returns the value of attribute new_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#33
  def new_type; end

  # Returns the value of attribute old_fields.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#33
  def old_fields; end

  # Returns the value of attribute old_interfaces.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#33
  def old_interfaces; end

  # Returns the value of attribute old_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/object_type.rb#33
  def old_type; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#4
class GraphQL::SchemaComparator::Diff::Schema
  # @return [Schema] a new instance of Schema
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#5
  def initialize(old_schema, new_schema); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#100
  def changes_in_directives; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#64
  def changes_in_schema; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#37
  def changes_in_type(old_type, new_type); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#16
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#143
  def added_directives; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#135
  def added_types; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#147
  def each_common_directive(&block); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#121
  def each_common_type(&block); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#115
  def enum_usage(new_enum); end

  # Returns the value of attribute new_directives.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#157
  def new_directives; end

  # Returns the value of attribute new_schema.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#157
  def new_schema; end

  # Returns the value of attribute new_types.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#157
  def new_types; end

  # Returns the value of attribute old_directives.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#157
  def old_directives; end

  # Returns the value of attribute old_schema.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#157
  def old_schema; end

  # Returns the value of attribute old_types.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#157
  def old_types; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#139
  def removed_directives; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/schema.rb#131
  def removed_types; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#4
class GraphQL::SchemaComparator::Diff::Union
  # @return [Union] a new instance of Union
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#5
  def initialize(old_type, new_type); end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#13
  def diff; end

  private

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#32
  def added_possible_types; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#36
  def filter_types(types, exclude_types); end

  # Returns the value of attribute new_possible_types.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#26
  def new_possible_types; end

  # Returns the value of attribute new_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#26
  def new_type; end

  # Returns the value of attribute old_possible_types.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#26
  def old_possible_types; end

  # Returns the value of attribute old_type.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#26
  def old_type; end

  # source://graphql-schema_comparator//lib/graphql/schema_comparator/diff/union.rb#28
  def removed_possible_types; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/enum_usage.rb#3
class GraphQL::SchemaComparator::EnumUsage
  # @return [EnumUsage] a new instance of EnumUsage
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/enum_usage.rb#4
  def initialize(input:, output:); end

  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/enum_usage.rb#9
  def input?; end

  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/enum_usage.rb#13
  def output?; end
end

# The result of a comparison between two schema versions
#
# source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#4
class GraphQL::SchemaComparator::Result
  # @return [Result] a new instance of Result
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#7
  def initialize(changes); end

  # If there was a breaking change between the two schema versions
  #
  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#22
  def breaking?; end

  # Returns the value of attribute breaking_changes.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#5
  def breaking_changes; end

  # Returns the value of attribute changes.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#5
  def changes; end

  # Returns the value of attribute dangerous_changes.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#5
  def dangerous_changes; end

  # If the two schemas were identical
  #
  # @return [Boolean]
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#16
  def identical?; end

  # Returns the value of attribute non_breaking_changes.
  #
  # source://graphql-schema_comparator//lib/graphql/schema_comparator/result.rb#5
  def non_breaking_changes; end
end

# source://graphql-schema_comparator//lib/graphql/schema_comparator/version.rb#3
GraphQL::SchemaComparator::VERSION = T.let(T.unsafe(nil), String)
