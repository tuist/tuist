# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-mini-profiler` gem.
# Please instead update this file by running `bin/tapioca gem rack-mini-profiler`.

# source://rack-mini-profiler//lib/patches/db/pg.rb#31
class PG::Connection
  include ::PG::Constants

  # source://pg/1.5.4/lib/pg/connection.rb#582
  def async_cancel; end

  def async_describe_portal(_arg0); end
  def async_describe_prepared(_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#555
  def async_encrypt_password(password, username, algorithm = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#109
  def async_exec(*args, &blk); end

  def async_exec_params(*_arg0); end
  def async_exec_prepared(*_arg0); end
  def async_exec_without_profiling(*_arg0); end
  def async_flush; end

  # source://pg/1.5.4/lib/pg/connection.rb#423
  def async_get_copy_data(async = T.unsafe(nil), decoder = T.unsafe(nil)); end

  def async_get_last_result; end

  # source://pg/1.5.4/lib/pg/connection.rb#400
  def async_get_result; end

  # source://pg/1.5.4/lib/pg/connection.rb#471
  def async_isnonblocking; end

  def async_prepare(*_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#495
  def async_put_copy_data(buffer, encoder = T.unsafe(nil)); end

  # source://pg/1.5.4/lib/pg/connection.rb#525
  def async_put_copy_end(*args); end

  def async_query(*_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#567
  def async_reset; end

  def async_set_client_encoding(_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#457
  def async_setnonblocking(enabled); end

  def backend_key; end
  def backend_pid; end
  def block(*_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#582
  def cancel; end

  # source://pg/1.5.4/lib/pg/connection.rb#379
  def check_socket; end

  def client_encoding=(_arg0); end
  def close; end

  # source://pg/1.5.4/lib/pg/connection.rb#321
  def conndefaults; end

  # source://pg/1.5.4/lib/pg/connection.rb#337
  def conndefaults_hash; end

  def connect_poll; end
  def connection_needs_password; end
  def connection_used_password; end
  def conninfo; end

  # source://pg/1.5.4/lib/pg/connection.rb#345
  def conninfo_hash; end

  def consume_input; end

  # source://pg/1.5.4/lib/pg/connection.rb#211
  def copy_data(sql, coder = T.unsafe(nil)); end

  def db; end
  def decoder_for_get_copy_data; end
  def decoder_for_get_copy_data=(_arg0); end
  def describe_portal(_arg0); end
  def describe_prepared(_arg0); end
  def discard_results; end
  def encoder_for_put_copy_data; end
  def encoder_for_put_copy_data=(_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#555
  def encrypt_password(password, username, algorithm = T.unsafe(nil)); end

  def enter_pipeline_mode; end
  def error_message; end
  def escape(_arg0); end
  def escape_bytea(_arg0); end
  def escape_identifier(_arg0); end
  def escape_literal(_arg0); end
  def escape_string(_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#55
  def exec(*args, &blk); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#68
  def exec_params(*args, &blk); end

  def exec_params_without_profiling(*_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#81
  def exec_prepared(*args, &blk); end

  def exec_prepared_without_profiling(*_arg0); end
  def exec_without_profiling(*_arg0); end
  def exit_pipeline_mode; end
  def external_encoding; end
  def field_name_type; end
  def field_name_type=(_arg0); end
  def finish; end
  def finished?; end
  def flush; end
  def get_client_encoding; end

  # source://pg/1.5.4/lib/pg/connection.rb#423
  def get_copy_data(async = T.unsafe(nil), decoder = T.unsafe(nil)); end

  def get_last_result; end

  # source://pg/1.5.4/lib/pg/connection.rb#400
  def get_result; end

  def host; end
  def hostaddr; end

  # source://pg/1.5.4/lib/pg/connection.rb#100
  def inspect; end

  def internal_encoding; end
  def internal_encoding=(_arg0); end
  def is_busy; end

  # source://pg/1.5.4/lib/pg/connection.rb#471
  def isnonblocking; end

  def lo_close(_arg0); end
  def lo_creat(*_arg0); end
  def lo_create(_arg0); end
  def lo_export(_arg0, _arg1); end
  def lo_import(_arg0); end
  def lo_lseek(_arg0, _arg1, _arg2); end
  def lo_open(*_arg0); end
  def lo_read(_arg0, _arg1); end
  def lo_seek(_arg0, _arg1, _arg2); end
  def lo_tell(_arg0); end
  def lo_truncate(_arg0, _arg1); end
  def lo_unlink(_arg0); end
  def lo_write(_arg0, _arg1); end
  def loclose(_arg0); end
  def locreat(*_arg0); end
  def locreate(_arg0); end
  def loexport(_arg0, _arg1); end
  def loimport(_arg0); end
  def lolseek(_arg0, _arg1, _arg2); end
  def loopen(*_arg0); end
  def loread(_arg0, _arg1); end
  def loseek(_arg0, _arg1, _arg2); end
  def lotell(_arg0); end
  def lotruncate(_arg0, _arg1); end
  def lounlink(_arg0); end
  def lowrite(_arg0, _arg1); end
  def make_empty_pgresult(_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#471
  def nonblocking?; end

  def notifies; end
  def notifies_wait(*_arg0); end
  def options; end
  def parameter_status(_arg0); end
  def pass; end
  def pipeline_status; end
  def pipeline_sync; end
  def port; end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#42
  def prepare(*args, &blk); end

  def prepare_without_profiling(*_arg0); end
  def protocol_version; end

  # source://pg/1.5.4/lib/pg/connection.rb#495
  def put_copy_data(buffer, encoder = T.unsafe(nil)); end

  # source://pg/1.5.4/lib/pg/connection.rb#525
  def put_copy_end(*args); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#55
  def query(*args, &blk); end

  def quote_ident(_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#567
  def reset; end

  def reset_poll; end
  def reset_start; end
  def send_describe_portal(_arg0); end
  def send_describe_prepared(_arg0); end
  def send_flush_request; end
  def send_prepare(*_arg0); end
  def send_query(*_arg0); end
  def send_query_params(*_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#95
  def send_query_prepared(*args, &blk); end

  def send_query_prepared_without_profiling(*_arg0); end
  def server_version; end
  def set_client_encoding(_arg0); end
  def set_default_encoding; end
  def set_error_context_visibility(_arg0); end
  def set_error_verbosity(_arg0); end
  def set_notice_processor; end
  def set_notice_receiver; end
  def set_single_row_mode; end

  # source://pg/1.5.4/lib/pg/connection.rb#457
  def setnonblocking(enabled); end

  def socket; end
  def socket_io; end
  def ssl_attribute(_arg0); end
  def ssl_attribute_names; end

  # source://pg/1.5.4/lib/pg/connection.rb#362
  def ssl_attributes; end

  def ssl_in_use?; end
  def status; end
  def sync_cancel; end
  def sync_describe_portal(_arg0); end
  def sync_describe_prepared(_arg0); end
  def sync_encrypt_password(*_arg0); end
  def sync_exec(*_arg0); end
  def sync_exec_params(*_arg0); end
  def sync_exec_prepared(*_arg0); end
  def sync_flush; end
  def sync_get_copy_data(*_arg0); end
  def sync_get_last_result; end
  def sync_get_result; end
  def sync_isnonblocking; end
  def sync_prepare(*_arg0); end
  def sync_put_copy_data(*_arg0); end
  def sync_put_copy_end(*_arg0); end
  def sync_reset; end
  def sync_set_client_encoding(_arg0); end
  def sync_setnonblocking(_arg0); end
  def trace(_arg0); end

  # source://pg/1.5.4/lib/pg/connection.rb#305
  def transaction; end

  def transaction_status; end
  def tty; end
  def type_map_for_queries; end
  def type_map_for_queries=(_arg0); end
  def type_map_for_results; end
  def type_map_for_results=(_arg0); end
  def unescape_bytea(_arg0); end
  def untrace; end
  def user; end
  def wait_for_notify(*_arg0); end

  private

  # source://pg/1.5.4/lib/pg/connection.rb#637
  def async_connect_or_reset(poll_meth); end

  def flush_data=(_arg0); end

  class << self
    # source://pg/1.5.4/lib/pg/connection.rb#937
    def async_api=(enable); end

    # source://pg/1.5.4/lib/pg/connection.rb#758
    def async_connect(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#858
    def async_ping(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#914
    def async_send_api=(enable); end

    def conndefaults; end

    # source://pg/1.5.4/lib/pg/connection.rb#329
    def conndefaults_hash; end

    # source://pg/1.5.4/lib/pg/connection.rb#758
    def connect(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#44
    def connect_hash_to_string(hash); end

    def connect_start(*_arg0); end
    def conninfo_parse(_arg0); end
    def encrypt_password(_arg0, _arg1); end
    def escape(_arg0); end
    def escape_bytea(_arg0); end
    def escape_string(_arg0); end
    def isthreadsafe; end

    # source://pg/1.5.4/lib/pg/connection.rb#758
    def new(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#758
    def open(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#64
    def parse_connect_args(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#858
    def ping(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#37
    def quote_connstr(value); end

    def quote_ident(_arg0); end

    # source://pg/1.5.4/lib/pg/connection.rb#758
    def setdb(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#758
    def setdblogin(*args); end

    def sync_connect(*_arg0); end
    def sync_ping(*_arg0); end
    def unescape_bytea(_arg0); end

    private

    # source://pg/1.5.4/lib/pg/connection.rb#776
    def connect_to_hosts(*args); end

    # source://pg/1.5.4/lib/pg/connection.rb#828
    def host_is_named_pipe?(host_string); end
  end
end

module PG::Constants; end

# PG patches, keep in mind exec and async_exec have a exec{|r| } semantics that is yet to be implemented
#
# source://rack-mini-profiler//lib/patches/db/pg.rb#4
class PG::Result
  include ::Enumerable
  include ::PG::Constants

  def [](_arg0); end
  def autoclear?; end
  def binary_tuples; end
  def check; end
  def check_result; end
  def clear; end
  def cleared?; end
  def cmd_status; end
  def cmd_tuples; end
  def cmdtuples; end
  def column_values(_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#15
  def each(*args, &blk); end

  def each_row; end
  def each_without_profiling; end
  def error_field(_arg0); end
  def error_message; end
  def fformat(_arg0); end
  def field_name_type; end
  def field_name_type=(_arg0); end

  # source://pg/1.5.4/lib/pg/result.rb#26
  def field_names_as(type); end

  def field_values(_arg0); end
  def fields; end
  def fmod(_arg0); end
  def fname(_arg0); end
  def fnumber(_arg0); end
  def freeze; end
  def fsize(_arg0); end
  def ftable(_arg0); end
  def ftablecol(_arg0); end
  def ftype(_arg0); end
  def getisnull(_arg0, _arg1); end
  def getlength(_arg0, _arg1); end
  def getvalue(_arg0, _arg1); end

  # source://pg/1.5.4/lib/pg/result.rb#32
  def inspect; end

  # source://pg/1.5.4/lib/pg/result.rb#16
  def map_types!(type_map); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#22
  def mp_report_sql(&block); end

  def nfields; end
  def nparams; end
  def ntuples; end
  def num_fields; end
  def num_tuples; end
  def oid_value; end
  def paramtype(_arg0); end
  def res_status(*_arg0); end
  def result_error_field(_arg0); end
  def result_error_message; end
  def result_status; end
  def result_verbose_error_message(_arg0, _arg1); end
  def stream_each; end
  def stream_each_row; end
  def stream_each_tuple; end
  def tuple(_arg0); end
  def tuple_values(_arg0); end
  def type_map; end
  def type_map=(_arg0); end

  # source://rack-mini-profiler//lib/patches/db/pg.rb#8
  def values(*args, &blk); end

  def values_without_profiling; end
  def verbose_error_message(_arg0, _arg1); end

  class << self
    def res_status(_arg0); end
  end
end

# based off https://github.com/newrelic/rpm/blob/master/lib/new_relic/agent/instrumentation/active_record.rb
# fallback for alls sorts of weird dbs
#
# source://rack-mini-profiler//lib/mini_profiler/version.rb#3
module Rack
  class << self
    # source://rack/2.2.8/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.8/lib/rack/version.rb#19
    def version; end
  end
end

# source://rack-mini-profiler//lib/mini_profiler/version.rb#4
class Rack::MiniProfiler
  extend ::Rack::MiniProfiler::ProfilingMethods

  # options:
  # :auto_inject - should script be automatically injected on every html page (not xhr)
  #
  # @return [MiniProfiler] a new instance of MiniProfiler
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#115
  def initialize(app, config = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#206
  def advanced_debugging_enabled?; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#575
  def analyze_memory; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#792
  def cache_control_value; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#214
  def call(env); end

  # cancels automatic injection of profile script for the current page
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#788
  def cancel_auto_inject(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#202
  def config; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#194
  def current; end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#198
  def current=(c); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#547
  def dump_env(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#529
  def dump_exceptions(exceptions); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#682
  def flamegraph(graph, path); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#167
  def generate_html(page_struct, env, result_json = T.unsafe(nil)); end

  # get_profile_script returns script to be injected inside current html page
  # By default, profile_script is appended to the end of all html requests automatically.
  # Calling get_profile_script cancels automatic append for the current page
  # Use it when:
  # * you have disabled auto append behaviour throught :auto_inject => false flag
  # * you do not want script to be automatically appended for the current page. You can also call cancel_auto_inject
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#730
  def get_profile_script(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#651
  def help(client_settings, env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#711
  def ids(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#720
  def ids_comma_separated(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#508
  def inject(fragment, script); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#474
  def inject_profiler(env, status, headers, body); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#646
  def make_link(postfix, env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#179
  def serve_html(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#130
  def serve_results(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#641
  def text_result(body); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#210
  def tool_disabled_message(client_settings); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#569
  def trim_strings(strings, max_size); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#126
  def user(env); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#798
  def handle_snapshots_request(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#863
  def rails_route_from_path(path, method); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#845
  def serve_flamegraph(env); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#890
  def take_snapshot(env, start); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#884
  def take_snapshot?(path); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#879
  def url_for_snapshot(id); end

  # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#874
  def url_for_snapshots_group(group_name); end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#48
    def add_snapshot_custom_field(key, value); end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#84
    def advanced_tools_message; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#72
    def authorize_request; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#90
    def binds_to_params(binds); end

    # So we can change the configuration if we want
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#25
    def config; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#63
    def create_current(env = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#37
    def current; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#41
    def current=(c); end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#76
    def deauthorize_request; end

    # discard existing results, don't track this request
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#59
    def discard_results; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#16
    def generate_id; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#54
    def get_snapshot_custom_fields; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#12
    def patch_rails?; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#106
    def redact_sql_queries?; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#80
    def request_authorized?; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#20
    def reset_config; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#29
    def resources_root; end

    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#33
    def share_template; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#101
    def snapshots_transporter?; end

    # Returns the value of attribute subscribe_sql_active_record.
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#10
    def subscribe_sql_active_record; end

    # Sets the attribute subscribe_sql_active_record
    #
    # @param value the value to set the attribute subscribe_sql_active_record to.
    #
    # source://rack-mini-profiler//lib/mini_profiler/profiler.rb#10
    def subscribe_sql_active_record=(_arg0); end
  end
end

# source://rack-mini-profiler//lib/mini_profiler/asset_version.rb#4
Rack::MiniProfiler::ASSET_VERSION = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#5
class Rack::MiniProfiler::AbstractStore
  # a list of tokens that are permitted to access profiler in explicit mode
  #
  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#40
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#34
  def diagnostics(user); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#52
  def fetch_snapshots(batch_size: T.unsafe(nil), &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#79
  def find_snapshots_group(group_name); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#30
  def get_unviewed_ids(user); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#14
  def load(id); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#100
  def load_snapshot(id); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#48
  def push_snapshot(page_struct, config); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#10
  def save(page_struct); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#26
  def set_all_unviewed(user, ids); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#18
  def set_unviewed(user, id); end

  # @raise [NotImplementedError]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#22
  def set_viewed(user, id); end

  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#44
  def should_take_snapshot?(period); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#56
  def snapshot_groups_overview; end

  private

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#106
  def default_snapshot_grouping(snapshot); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#112
  def rails_route_from_path(path, method); end
end

# maximum age of allowed tokens before cycling in seconds
#
# source://rack-mini-profiler//lib/mini_profiler/storage/abstract_store.rb#8
Rack::MiniProfiler::AbstractStore::MAX_TOKEN_AGE = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#5
class Rack::MiniProfiler::ClientSettings
  # @return [ClientSettings] a new instance of ClientSettings
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#16
  def initialize(env, store, start); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#118
  def backtrace_default?; end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#114
  def backtrace_full?; end

  # Returns the value of attribute backtrace_level.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#14
  def backtrace_level; end

  # Sets the attribute backtrace_level
  #
  # @param value the value to set the attribute backtrace_level to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#14
  def backtrace_level=(_arg0); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#122
  def backtrace_none?; end

  # Returns the value of attribute disable_profiling.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#13
  def disable_profiling; end

  # Sets the attribute disable_profiling
  #
  # @param value the value to set the attribute disable_profiling to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#13
  def disable_profiling=(_arg0); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#110
  def disable_profiling?; end

  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#84
  def discard_cookie!(headers); end

  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#42
  def handle_cookie(result); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#90
  def has_valid_cookie?; end

  # source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#58
  def write!(headers); end
end

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#9
Rack::MiniProfiler::ClientSettings::BACKTRACE_DEFAULT = T.let(T.unsafe(nil), T.untyped)

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#10
Rack::MiniProfiler::ClientSettings::BACKTRACE_FULL = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#11
Rack::MiniProfiler::ClientSettings::BACKTRACE_NONE = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/client_settings.rb#7
Rack::MiniProfiler::ClientSettings::COOKIE_NAME = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler/config.rb#5
class Rack::MiniProfiler::Config
  # Returns the value of attribute assets_url.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#92
  def assets_url; end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#110
  def assets_url=(lmbda); end

  # Returns the value of attribute authorization_mode.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def authorization_mode; end

  # Sets the attribute authorization_mode
  #
  # @param value the value to set the attribute authorization_mode to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#96
  def authorization_mode=(mode); end

  # Returns the value of attribute auto_inject.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def auto_inject; end

  # Sets the attribute auto_inject
  #
  # @param value the value to set the attribute auto_inject to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def auto_inject=(_arg0); end

  # Returns the value of attribute backtrace_ignores.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_ignores; end

  # Sets the attribute backtrace_ignores
  #
  # @param value the value to set the attribute backtrace_ignores to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_ignores=(_arg0); end

  # Returns the value of attribute backtrace_includes.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_includes; end

  # Sets the attribute backtrace_includes
  #
  # @param value the value to set the attribute backtrace_includes to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_includes=(_arg0); end

  # Returns the value of attribute backtrace_remove.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_remove; end

  # Sets the attribute backtrace_remove
  #
  # @param value the value to set the attribute backtrace_remove to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_remove=(_arg0); end

  # Returns the value of attribute backtrace_threshold_ms.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_threshold_ms; end

  # Sets the attribute backtrace_threshold_ms
  #
  # @param value the value to set the attribute backtrace_threshold_ms to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def backtrace_threshold_ms=(_arg0); end

  # Returns the value of attribute base_url_path.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def base_url_path; end

  # Sets the attribute base_url_path
  #
  # @param value the value to set the attribute base_url_path to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def base_url_path=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def collapse_results; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def collapse_results=(_arg0); end

  # Returns the value of attribute content_security_policy_nonce.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def content_security_policy_nonce; end

  # Sets the attribute content_security_policy_nonce
  #
  # @param value the value to set the attribute content_security_policy_nonce to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def content_security_policy_nonce=(_arg0); end

  # Returns the value of attribute cookie_path.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def cookie_path; end

  # Sets the attribute cookie_path
  #
  # @param value the value to set the attribute cookie_path to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def cookie_path=(_arg0); end

  # Returns the value of attribute disable_caching.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def disable_caching; end

  # Sets the attribute disable_caching
  #
  # @param value the value to set the attribute disable_caching to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def disable_caching=(_arg0); end

  # Returns the value of attribute enable_advanced_debugging_tools.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_advanced_debugging_tools; end

  # Sets the attribute enable_advanced_debugging_tools
  #
  # @param value the value to set the attribute enable_advanced_debugging_tools to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_advanced_debugging_tools=(_arg0); end

  # Returns the value of attribute enable_hotwire_turbo_drive_support.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_hotwire_turbo_drive_support; end

  # Sets the attribute enable_hotwire_turbo_drive_support
  #
  # @param value the value to set the attribute enable_hotwire_turbo_drive_support to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enable_hotwire_turbo_drive_support=(_arg0); end

  # Returns the value of attribute enabled.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def enabled=(_arg0); end

  # Returns the value of attribute flamegraph_mode.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_mode; end

  # Sets the attribute flamegraph_mode
  #
  # @param value the value to set the attribute flamegraph_mode to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_mode=(_arg0); end

  # Returns the value of attribute flamegraph_sample_rate.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_sample_rate; end

  # Sets the attribute flamegraph_sample_rate
  #
  # @param value the value to set the attribute flamegraph_sample_rate to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def flamegraph_sample_rate=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#121
  def horizontal_position; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def html_container; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def html_container=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def logger=(_arg0); end

  # Returns the value of attribute max_sql_param_length.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_sql_param_length; end

  # Sets the attribute max_sql_param_length
  #
  # @param value the value to set the attribute max_sql_param_length to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_sql_param_length=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_traces_to_show; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def max_traces_to_show=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#125
  def merge!(config); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def position; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def position=(_arg0); end

  # Returns the value of attribute pre_authorize_cb.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def pre_authorize_cb; end

  # Sets the attribute pre_authorize_cb
  #
  # @param value the value to set the attribute pre_authorize_cb to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def pre_authorize_cb=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_children; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_children=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_controls; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_controls=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_total_sql_count; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_total_sql_count=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_trivial; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def show_trivial=(_arg0); end

  # Returns the value of attribute skip_paths.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_paths; end

  # Sets the attribute skip_paths
  #
  # @param value the value to set the attribute skip_paths to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_paths=(_arg0); end

  # Returns the value of attribute skip_schema_queries.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_schema_queries; end

  # Sets the attribute skip_schema_queries
  #
  # @param value the value to set the attribute skip_schema_queries to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_schema_queries=(_arg0); end

  # Returns the value of attribute skip_sql_param_names.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_sql_param_names; end

  # Sets the attribute skip_sql_param_names
  #
  # @param value the value to set the attribute skip_sql_param_names to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def skip_sql_param_names=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_every_n_requests; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_every_n_requests=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_hidden_custom_fields; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshot_hidden_custom_fields=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_limit; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_limit=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_redact_sql_queries; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_redact_sql_queries=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_auth_key; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_auth_key=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_destination_url; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_destination_url=(_arg0); end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_gzip_requests; end

  # snapshot related config
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def snapshots_transport_gzip_requests=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def start_hidden; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def start_hidden=(_arg0); end

  # Returns the value of attribute storage.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage; end

  # Sets the attribute storage
  #
  # @param value the value to set the attribute storage to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage=(_arg0); end

  # Returns the value of attribute storage_failure.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_failure; end

  # Sets the attribute storage_failure
  #
  # @param value the value to set the attribute storage_failure to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_failure=(_arg0); end

  # Returns the value of attribute storage_instance.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_instance; end

  # Sets the attribute storage_instance
  #
  # @param value the value to set the attribute storage_instance to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_instance=(_arg0); end

  # Returns the value of attribute storage_options.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_options; end

  # Sets the attribute storage_options
  #
  # @param value the value to set the attribute storage_options to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def storage_options=(_arg0); end

  # Returns the value of attribute suppress_encoding.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def suppress_encoding; end

  # Sets the attribute suppress_encoding
  #
  # @param value the value to set the attribute suppress_encoding to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def suppress_encoding=(_arg0); end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def toggle_shortcut; end

  # ui accessors
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def toggle_shortcut=(_arg0); end

  # Deprecated options
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def use_existing_jquery; end

  # Deprecated options
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def use_existing_jquery=(_arg0); end

  # Returns the value of attribute user_provider.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def user_provider; end

  # Sets the attribute user_provider
  #
  # @param value the value to set the attribute user_provider to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/config.rb#9
  def user_provider=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/config.rb#117
  def vertical_position; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/config.rb#6
    def attr_accessor(*vars); end

    # source://rack-mini-profiler//lib/mini_profiler/config.rb#12
    def attributes; end

    # source://rack-mini-profiler//lib/mini_profiler/config.rb#16
    def default; end
  end
end

# source://rack-mini-profiler//lib/mini_profiler/context.rb#3
class Rack::MiniProfiler::Context
  # @return [Context] a new instance of Context
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#7
  def initialize(opts = T.unsafe(nil)); end

  # Returns the value of attribute current_timer.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def current_timer; end

  # Sets the attribute current_timer
  #
  # @param value the value to set the attribute current_timer to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def current_timer=(_arg0); end

  # Returns the value of attribute discard.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def discard; end

  # Sets the attribute discard
  #
  # @param value the value to set the attribute discard to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def discard=(_arg0); end

  # Returns the value of attribute full_backtrace.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def full_backtrace; end

  # Sets the attribute full_backtrace
  #
  # @param value the value to set the attribute full_backtrace to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def full_backtrace=(_arg0); end

  # Returns the value of attribute inject_js.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def inject_js; end

  # Sets the attribute inject_js
  #
  # @param value the value to set the attribute inject_js to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def inject_js=(_arg0); end

  # Returns the value of attribute measure.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def measure; end

  # Sets the attribute measure
  #
  # @param value the value to set the attribute measure to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def measure=(_arg0); end

  # Returns the value of attribute mpt_init.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def mpt_init; end

  # Sets the attribute mpt_init
  #
  # @param value the value to set the attribute mpt_init to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def mpt_init=(_arg0); end

  # Returns the value of attribute page_struct.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def page_struct; end

  # Sets the attribute page_struct
  #
  # @param value the value to set the attribute page_struct to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def page_struct=(_arg0); end

  # Returns the value of attribute skip_backtrace.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def skip_backtrace; end

  # Sets the attribute skip_backtrace
  #
  # @param value the value to set the attribute skip_backtrace to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/context.rb#4
  def skip_backtrace=(_arg0); end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#5
class Rack::MiniProfiler::FileStore < ::Rack::MiniProfiler::AbstractStore
  # @return [FileStore] a new instance of FileStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#49
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#145
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#161
  def cleanup_cache; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#139
  def flush_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#133
  def get_unviewed_ids(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#102
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#96
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#127
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#108
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#117
  def set_viewed(user, id); end
end

# Sub-class thread so we have a named thread (useful for debugging in Thread.list).
#
# source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#8
class Rack::MiniProfiler::FileStore::CacheCleanupThread < ::Thread; end

# source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#47
Rack::MiniProfiler::FileStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#11
class Rack::MiniProfiler::FileStore::FileCache
  # @return [FileCache] a new instance of FileCache
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#12
  def initialize(path, prefix); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#17
  def [](key); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#28
  def []=(key, val); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/storage/file_store.rb#41
  def path(key); end
end

# source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#3
class Rack::MiniProfiler::GCProfiler
  # @return [GCProfiler] a new instance of GCProfiler
  #
  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#5
  def initialize; end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#63
  def analyze_growth(ids_before, ids_after); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#79
  def analyze_initial_state(ids_before); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#51
  def analyze_strings(ids_before, ids_after); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#39
  def diff_object_stats(before, after); end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#10
  def object_space_stats; end

  # source://rack-mini-profiler//lib/mini_profiler/gc_profiler.rb#94
  def profile_gc(app, env); end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#5
class Rack::MiniProfiler::MemcacheStore < ::Rack::MiniProfiler::AbstractStore
  # @return [MemcacheStore] a new instance of MemcacheStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#10
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#64
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#60
  def flush_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#56
  def get_unviewed_ids(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#25
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#21
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#52
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#32
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#42
  def set_viewed(user, id); end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#7
Rack::MiniProfiler::MemcacheStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/storage/memcache_store.rb#8
Rack::MiniProfiler::MemcacheStore::MAX_RETRIES = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#5
class Rack::MiniProfiler::MemoryStore < ::Rack::MiniProfiler::AbstractStore
  # @return [MemoryStore] a new instance of MemoryStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#50
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#129
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#122
  def cleanup_cache; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#166
  def fetch_snapshots(batch_size: T.unsafe(nil), &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#116
  def get_unviewed_ids(user); end

  # FIXME: use weak ref, trouble it may be broken in 1.9 so need to use the 'ref' gem
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#73
  def initialize_cleanup_thread(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#62
  def initialize_locks; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#90
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#174
  def load_snapshot(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#155
  def push_snapshot(page_struct, config); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#84
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#110
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#96
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#103
  def set_viewed(user, id); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#143
  def should_take_snapshot?(period); end

  private

  # used in tests only
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#183
  def wipe_snapshots_data; end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#48
Rack::MiniProfiler::MemoryStore::CLEANUP_CYCLE = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#47
Rack::MiniProfiler::MemoryStore::CLEANUP_INTERVAL = T.let(T.unsafe(nil), Integer)

# Sub-class thread so we have a named thread (useful for debugging in Thread.list).
#
# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#8
class Rack::MiniProfiler::MemoryStore::CacheCleanupThread < ::Thread
  # @return [CacheCleanupThread] a new instance of CacheCleanupThread
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#10
  def initialize(interval, cycle, store); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#32
  def cleanup; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#37
  def cycle_count; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#41
  def increment_cycle; end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#18
  def should_cleanup?; end

  # We don't want to hit the filesystem every 10s to clean up the cache so we need to do a bit of
  # accounting to avoid sleeping that entire time.  We don't want to sleep for the entire period because
  # it means the thread will stay live in hot deployment scenarios, keeping a potentially large memory
  # graph from being garbage collected upon undeploy.
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#26
  def sleepy_run; end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/memory_store.rb#46
Rack::MiniProfiler::MemoryStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#5
module Rack::MiniProfiler::ProfilingMethods
  # Add a custom timing. These are displayed similar to SQL/query time in
  # columns expanding to the right.
  #
  # type        - String counter type. Each distinct type gets its own column.
  # duration_ms - Duration of the call in ms. Either this or a block must be
  #               given but not both.
  #
  # When a block is given, calculate the duration by yielding to the block
  # and keeping a record of its run time.
  #
  # Returns the result of the block, or nil when no block is given.
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#143
  def counter(type, duration_ms = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#64
  def counter_method(klass, method, &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#27
  def finish_step(obj); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#72
  def profile_method(klass, method, type = T.unsafe(nil), &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#124
  def profile_singleton_method(klass, method, type = T.unsafe(nil), &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#7
  def record_sql(query, elapsed_ms, params = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#20
  def start_step(name); end

  # perform a profiling step on given block
  #
  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#35
  def step(name, opts = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#68
  def uncounter_method(klass, method); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#50
  def unprofile_method(klass, method); end

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#128
  def unprofile_singleton_method(klass, method); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/profiling_methods.rb#157
  def clean_method_name(method); end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#7
class Rack::MiniProfiler::RedisStore < ::Rack::MiniProfiler::AbstractStore
  # @return [RedisStore] a new instance of RedisStore
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#13
  def initialize(args = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#87
  def allowed_tokens; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#70
  def diagnostics(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#167
  def fetch_snapshots(batch_size: T.unsafe(nil), &blk); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#78
  def flush_tokens; end

  # Remove expired ids from the unviewed sorted set and return the remaining ids
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#64
  def get_unviewed_ids(user); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#24
  def load(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#203
  def load_snapshot(id); end

  # Returns the value of attribute prefix.
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#9
  def prefix; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#136
  def push_snapshot(page_struct, config); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#20
  def save(page_struct); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#47
  def set_all_unviewed(user, ids); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#38
  def set_unviewed(user, id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#59
  def set_viewed(user, id); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#126
  def should_take_snapshot?(period); end

  # Only used for testing
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#83
  def simulate_expire; end

  private

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#248
  def cached_redis_eval(script, script_sha, reraise: T.unsafe(nil), argv: T.unsafe(nil), keys: T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#225
  def prefixed_id(id); end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#229
  def redis; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#236
  def snapshot_counter_key; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#244
  def snapshot_hash_key; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#240
  def snapshot_zset_key; end

  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#221
  def user_key(user); end

  # only used in tests
  #
  # source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#261
  def wipe_snapshots_data; end
end

# source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#115
Rack::MiniProfiler::RedisStore::COUNTER_LUA = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#124
Rack::MiniProfiler::RedisStore::COUNTER_LUA_SHA = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler/storage/redis_store.rb#11
Rack::MiniProfiler::RedisStore::EXPIRES_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# source://rack-mini-profiler//lib/mini_profiler/version.rb#6
Rack::MiniProfiler::SOURCE_CODE_URI = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#3
class Rack::MiniProfiler::SnapshotsTransporter
  # @return [SnapshotsTransporter] a new instance of SnapshotsTransporter
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#28
  def initialize(config); end

  # Returns the value of attribute buffer.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#25
  def buffer; end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#49
  def flush_buffer; end

  # Returns the value of attribute gzip_requests.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def gzip_requests; end

  # Sets the attribute gzip_requests
  #
  # @param value the value to set the attribute gzip_requests to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def gzip_requests=(_arg0); end

  # Returns the value of attribute max_buffer_size.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def max_buffer_size; end

  # Sets the attribute max_buffer_size
  #
  # @param value the value to set the attribute max_buffer_size to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#26
  def max_buffer_size=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#89
  def requests_interval; end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#41
  def ship(snapshot); end

  private

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#95
  def backoff_delay; end

  # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#100
  def start_thread; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#15
    def failed_http_requests_count; end

    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#12
    def successful_http_requests_count; end

    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#19
    def transport(snapshot); end

    # source://rack-mini-profiler//lib/mini_profiler/snapshots_transporter.rb#9
    def transported_snapshots_count; end
  end
end

# Timing system for a SQL query
#
# source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#5
module Rack::MiniProfiler::TimerStruct; end

# A base class for timing structures
#
# source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#7
class Rack::MiniProfiler::TimerStruct::Base
  # @return [Base] a new instance of Base
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#9
  def initialize(attrs = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#17
  def [](name); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#21
  def []=(name, val); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#32
  def as_json(options = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#13
  def attributes; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/base.rb#26
  def to_json(*a); end
end

# This class holds the client timings
#
# source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#8
class Rack::MiniProfiler::TimerStruct::Client < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Client] a new instance of Client
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#27
  def initialize(env = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#31
  def redirect_count; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#35
  def timings; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#39
    def init_from_form_data(env, page_struct); end

    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#10
    def init_instrumentation; end

    # used by Railtie to instrument asset_tag for JS / CSS
    #
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/client.rb#19
    def instrument(name, orig); end
  end
end

# Timing system for a custom timers such as cache, redis, RPC, external API
# calls, etc.
#
# source://rack-mini-profiler//lib/mini_profiler/timer_struct/custom.rb#8
class Rack::MiniProfiler::TimerStruct::Custom < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Custom] a new instance of Custom
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/custom.rb#10
  def initialize(type, duration_ms, page, parent); end

  # Returns the value of attribute parent.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/custom.rb#9
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/custom.rb#9
  def parent=(_arg0); end
end

# TimerStruct::Page
#   Root: TimerStruct::Request
#     :has_many TimerStruct::Request children
#     :has_many TimerStruct::Sql children
#     :has_many TimerStruct::Custom children
#
# source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#12
class Rack::MiniProfiler::TimerStruct::Page < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Page] a new instance of Page
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#60
  def initialize(env); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#124
  def as_json(options = T.unsafe(nil)); end

  # Returns the value of attribute attributes.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#58
  def attributes; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#116
  def attributes_to_serialize; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#104
  def duration_ms; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#108
  def duration_ms_in_sql; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#128
  def extra_json; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#100
  def name; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#112
  def root; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#120
  def to_json(*a); end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#14
    def from_hash(hash); end

    private

    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#45
    def symbolize_array(array); end

    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/page.rb#30
    def symbolize_hash(hash); end
  end
end

# source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#6
class Rack::MiniProfiler::TimerStruct::Request < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Request] a new instance of Request
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#16
  def initialize(name, page, parent); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#81
  def add_child(name); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#128
  def add_custom(type, elapsed_ms, page); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#104
  def add_sql(query, elapsed_ms, page, params = T.unsafe(nil), skip_backtrace = T.unsafe(nil), full_backtrace = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#172
  def adjust_depth; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#69
  def children; end

  # Returns the value of attribute children_duration.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def children_duration; end

  # Sets the attribute children_duration
  #
  # @param value the value to set the attribute children_duration to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def children_duration=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#73
  def custom_timings; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#65
  def depth; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#53
  def duration_ms; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#57
  def duration_ms_in_sql; end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#90
  def move_child(child, destination); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#145
  def move_custom(type, custom, destination); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#115
  def move_sql(sql, destination); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#49
  def name; end

  # Returns the value of attribute parent.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def parent=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#165
  def record_time(milliseconds = T.unsafe(nil)); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#77
  def sql_timings; end

  # Returns the value of attribute start.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def start; end

  # Sets the attribute start
  #
  # @param value the value to set the attribute start to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#14
  def start=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#61
  def start_ms; end

  class << self
    # source://rack-mini-profiler//lib/mini_profiler/timer_struct/request.rb#8
    def createRoot(name, page); end
  end
end

# source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#8
class Rack::MiniProfiler::TimerStruct::Sql < ::Rack::MiniProfiler::TimerStruct::Base
  # @return [Sql] a new instance of Sql
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#11
  def initialize(query, duration_ms, page, parent, params = T.unsafe(nil), skip_backtrace = T.unsafe(nil), full_backtrace = T.unsafe(nil)); end

  # Returns the value of attribute parent.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#9
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#9
  def parent=(_arg0); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#52
  def report_reader_duration(elapsed_ms); end

  # source://rack-mini-profiler//lib/mini_profiler/timer_struct/sql.rb#60
  def trim_binds(binds); end
end

# source://rack-mini-profiler//lib/mini_profiler/version.rb#5
Rack::MiniProfiler::VERSION = T.let(T.unsafe(nil), String)

# source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#6
module Rack::MiniProfilerRails
  extend ::Rack::MiniProfilerRailsMethods

  class << self
    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#121
    def create_engine; end

    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#142
    def get_key(payload); end

    # call direct if needed to do a defer init
    #
    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#10
    def initialize!(app); end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#150
    def serves_static_assets?(app); end

    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#146
    def shorten_identifier(identifier); end

    # source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#132
    def subscribe(event, &blk); end
  end
end

# source://rack-mini-profiler//lib/mini_profiler_rails/railtie.rb#166
class Rack::MiniProfilerRails::Railtie < ::Rails::Railtie; end

# source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#3
module Rack::MiniProfilerRailsMethods
  extend ::Rack::MiniProfilerRailsMethods

  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#54
  def get_webpacker_assets_path; end

  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#4
  def render_notification_handler(name, finish, start, name_as_description: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#42
  def should_measure?; end

  # @return [Boolean]
  #
  # source://rack-mini-profiler//lib/mini_profiler_rails/railtie_methods.rb#47
  def should_move?(child, node); end
end

# source://rack-mini-profiler//lib/patches/sql_patches.rb#3
class SqlPatches
  class << self
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#61
    def all_patch_files; end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#4
    def correct_version?(required_version, klass); end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#22
    def elapsed_time(start_time); end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#49
    def other_patches; end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#67
    def patch(patch_files = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#26
    def patch_rails?; end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#10
    def record_sql(statement, parameters = T.unsafe(nil), &block); end

    # @return [Boolean]
    #
    # source://rack-mini-profiler//lib/patches/sql_patches.rb#17
    def should_measure?; end

    # source://rack-mini-profiler//lib/patches/sql_patches.rb#30
    def sql_patches; end
  end
end
