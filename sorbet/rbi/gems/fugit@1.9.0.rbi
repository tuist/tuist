# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `fugit` gem.
# Please instead update this file by running `bin/tapioca gem fugit`.

# source://fugit//lib/fugit.rb#4
module Fugit
  class << self
    # source://fugit//lib/fugit/parse.rb#49
    def determine_type(s); end

    # source://fugit//lib/fugit/parse.rb#30
    def do_parse(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/parse.rb#16
    def do_parse_at(s); end

    # source://fugit//lib/fugit/parse.rb#13
    def do_parse_cron(s); end

    # source://fugit//lib/fugit/parse.rb#43
    def do_parse_cronish(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/parse.rb#14
    def do_parse_duration(s); end

    # source://fugit//lib/fugit/parse.rb#17
    def do_parse_in(s); end

    # source://fugit//lib/fugit/parse.rb#15
    def do_parse_nat(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/misc.rb#10
    def isostamp(show_date, show_time, show_usec, time); end

    # source://fugit//lib/fugit/parse.rb#19
    def parse(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/parse.rb#10
    def parse_at(s); end

    # source://fugit//lib/fugit/parse.rb#7
    def parse_cron(s); end

    # source://fugit//lib/fugit/parse.rb#36
    def parse_cronish(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/parse.rb#8
    def parse_duration(s); end

    # source://fugit//lib/fugit/parse.rb#11
    def parse_in(s); end

    # source://fugit//lib/fugit/parse.rb#9
    def parse_nat(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/misc.rb#28
    def time_to_plain_s(t = T.unsafe(nil), z = T.unsafe(nil)); end

    # source://fugit//lib/fugit/misc.rb#23
    def time_to_s(t); end

    # source://fugit//lib/fugit/misc.rb#33
    def time_to_zone_s(t = T.unsafe(nil)); end
  end
end

# source://fugit//lib/fugit/at.rb#5
module Fugit::At
  class << self
    # source://fugit//lib/fugit/at.rb#14
    def do_parse(s); end

    # source://fugit//lib/fugit/at.rb#9
    def parse(s); end
  end
end

# source://fugit//lib/fugit/cron.rb#5
class Fugit::Cron
  # source://fugit//lib/fugit/cron.rb#431
  def ==(o); end

  # Mostly used as a #next_time sanity check.
  # Avoid for "business" use, it's slow.
  #
  # 2017 is a non leap year (though it is preceded by
  # a leap second on 2016-12-31)
  #
  # Nota bene: cron with seconds are not supported.
  #
  # source://fugit//lib/fugit/cron.rb#329
  def brute_frequency(year = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#198
  def day_match?(nt); end

  # source://fugit//lib/fugit/cron.rb#431
  def eql?(o); end

  # source://fugit//lib/fugit/cron.rb#437
  def hash; end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#151
  def hour_match?(nt); end

  # Returns the value of attribute hours.
  #
  # source://fugit//lib/fugit/cron.rb#22
  def hours; end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#228
  def match?(t); end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#152
  def min_match?(nt); end

  # Returns the value of attribute minutes.
  #
  # source://fugit//lib/fugit/cron.rb#22
  def minutes; end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#150
  def month_match?(nt); end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#187
  def monthday_match?(nt); end

  # Returns the value of attribute monthdays.
  #
  # source://fugit//lib/fugit/cron.rb#22
  def monthdays; end

  # Returns the value of attribute months.
  #
  # source://fugit//lib/fugit/cron.rb#22
  def months; end

  # See gh-15 and tst/iteration_count.rb
  #
  # Initially set to 1024 after seeing the worst case for #next_time
  # at 167 iterations, I placed it at 2048 after experimenting with
  # gh-18 and noticing some > 1024 for some experiments. 2048 should
  # be ok.
  #
  # source://fugit//lib/fugit/cron.rb#245
  def next_time(from = T.unsafe(nil)); end

  # Returns the value of attribute original.
  #
  # source://fugit//lib/fugit/cron.rb#20
  def original; end

  # source://fugit//lib/fugit/cron.rb#295
  def previous_time(from = T.unsafe(nil)); end

  # source://fugit//lib/fugit/cron.rb#359
  def rough_frequency; end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#153
  def sec_match?(nt); end

  # Returns the value of attribute seconds.
  #
  # source://fugit//lib/fugit/cron.rb#22
  def seconds; end

  # Returns the value of attribute timezone.
  #
  # source://fugit//lib/fugit/cron.rb#22
  def timezone; end

  # source://fugit//lib/fugit/cron.rb#416
  def to_a; end

  # source://fugit//lib/fugit/cron.rb#53
  def to_cron_s; end

  # source://fugit//lib/fugit/cron.rb#421
  def to_h; end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#155
  def weekday_hash_match?(nt, hsh); end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#171
  def weekday_match?(nt); end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#166
  def weekday_modulo_match?(nt, mod); end

  # Returns the value of attribute weekdays.
  #
  # source://fugit//lib/fugit/cron.rb#22
  def weekdays; end

  # Returns the value of attribute zone.
  #
  # source://fugit//lib/fugit/cron.rb#20
  def zone; end

  protected

  # source://fugit//lib/fugit/cron.rb#444
  def compact_month_days; end

  # source://fugit//lib/fugit/cron.rb#595
  def determine_hours(arr); end

  # source://fugit//lib/fugit/cron.rb#591
  def determine_minutes(arr); end

  # source://fugit//lib/fugit/cron.rb#599
  def determine_monthdays(arr); end

  # source://fugit//lib/fugit/cron.rb#603
  def determine_months(arr); end

  # source://fugit//lib/fugit/cron.rb#587
  def determine_seconds(arr); end

  # source://fugit//lib/fugit/cron.rb#634
  def determine_timezone(z); end

  # source://fugit//lib/fugit/cron.rb#607
  def determine_weekdays(arr); end

  # source://fugit//lib/fugit/cron.rb#570
  def do_determine(key, arr, min, max); end

  # source://fugit//lib/fugit/cron.rb#510
  def expand(min, max, r); end

  # source://fugit//lib/fugit/cron.rb#487
  def init(original, h); end

  # source://fugit//lib/fugit/cron.rb#528
  def range(min, max, sta, edn, sla); end

  # source://fugit//lib/fugit/cron.rb#460
  def rough_days; end

  # source://fugit//lib/fugit/cron.rb#641
  def weekdays_to_cron_s; end

  class << self
    # source://fugit//lib/fugit/cron.rb#46
    def do_parse(s); end

    # source://fugit//lib/fugit/cron.rb#27
    def new(original); end

    # source://fugit//lib/fugit/cron.rb#32
    def parse(s); end
  end
end

# source://fugit//lib/fugit/cron.rb#485
Fugit::Cron::FREQUENCY_CACHE = T.let(T.unsafe(nil), Hash)

# source://fugit//lib/fugit/cron.rb#388
class Fugit::Cron::Frequency
  # @return [Frequency] a new instance of Frequency
  #
  # source://fugit//lib/fugit/cron.rb#393
  def initialize(deltas, span); end

  # Returns the value of attribute delta_max.
  #
  # source://fugit//lib/fugit/cron.rb#390
  def delta_max; end

  # Returns the value of attribute delta_min.
  #
  # source://fugit//lib/fugit/cron.rb#390
  def delta_min; end

  # Returns the value of attribute occurrences.
  #
  # source://fugit//lib/fugit/cron.rb#390
  def occurrences; end

  # Returns the value of attribute span.
  #
  # source://fugit//lib/fugit/cron.rb#390
  def span; end

  # Returns the value of attribute span_years.
  #
  # source://fugit//lib/fugit/cron.rb#391
  def span_years; end

  # source://fugit//lib/fugit/cron.rb#403
  def to_debug_s; end

  # Returns the value of attribute yearly_occurrences.
  #
  # source://fugit//lib/fugit/cron.rb#391
  def yearly_occurrences; end
end

# source://fugit//lib/fugit/cron.rb#17
Fugit::Cron::MAXDAYS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/cron.rb#236
Fugit::Cron::MAX_ITERATION_COUNT = T.let(T.unsafe(nil), Integer)

# source://fugit//lib/fugit/cron.rb#659
module Fugit::Cron::Parser
  include ::Raabro
  extend ::Raabro::ModuleMethods
  extend ::Raabro
  extend ::Fugit::Cron::Parser

  # source://fugit//lib/fugit/cron.rb#695
  def _dom(i); end

  # source://fugit//lib/fugit/cron.rb#697
  def _dow(i); end

  # source://fugit//lib/fugit/cron.rb#694
  def _hou(i); end

  # source://fugit//lib/fugit/cron.rb#696
  def _mon(i); end

  # source://fugit//lib/fugit/cron.rb#693
  def _mos(i); end

  # source://fugit//lib/fugit/cron.rb#754
  def _tz(i); end

  # source://fugit//lib/fugit/cron.rb#751
  def _tz_delta(i); end

  # source://fugit//lib/fugit/cron.rb#748
  def _tz_name(i); end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#681
  def and?(i); end

  # source://fugit//lib/fugit/cron.rb#756
  def classic_cron(i); end

  # source://fugit//lib/fugit/cron.rb#679
  def comma(i); end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/cron.rb#680
  def comma?(i); end

  # source://fugit//lib/fugit/cron.rb#765
  def cron(i); end

  # source://fugit//lib/fugit/cron.rb#687
  def dom(i); end

  # source://fugit//lib/fugit/cron.rb#723
  def dom_elt(i); end

  # source://fugit//lib/fugit/cron.rb#689
  def dow(i); end

  # source://fugit//lib/fugit/cron.rb#725
  def dow_elt(i); end

  # source://fugit//lib/fugit/cron.rb#732
  def dow_elt_(i); end

  # source://fugit//lib/fugit/cron.rb#691
  def dow_hash(i); end

  # source://fugit//lib/fugit/cron.rb#730
  def h_dow(i); end

  # source://fugit//lib/fugit/cron.rb#686
  def hou(i); end

  # source://fugit//lib/fugit/cron.rb#722
  def hou_elt(i); end

  # source://fugit//lib/fugit/cron.rb#678
  def hyphen(i); end

  # source://fugit//lib/fugit/cron.rb#744
  def ldom_(i); end

  # source://fugit//lib/fugit/cron.rb#746
  def ldow(i); end

  # source://fugit//lib/fugit/cron.rb#743
  def lhou_(i); end

  # source://fugit//lib/fugit/cron.rb#737
  def list_dom(i); end

  # source://fugit//lib/fugit/cron.rb#739
  def list_dow(i); end

  # source://fugit//lib/fugit/cron.rb#736
  def list_hou(i); end

  # source://fugit//lib/fugit/cron.rb#735
  def list_min(i); end

  # source://fugit//lib/fugit/cron.rb#738
  def list_mon(i); end

  # source://fugit//lib/fugit/cron.rb#734
  def list_sec(i); end

  # source://fugit//lib/fugit/cron.rb#742
  def lmin_(i); end

  # source://fugit//lib/fugit/cron.rb#745
  def lmon_(i); end

  # source://fugit//lib/fugit/cron.rb#741
  def lsec_(i); end

  # source://fugit//lib/fugit/cron.rb#727
  def mod(i); end

  # source://fugit//lib/fugit/cron.rb#729
  def mod_dow(i); end

  # source://fugit//lib/fugit/cron.rb#688
  def mon(i); end

  # source://fugit//lib/fugit/cron.rb#724
  def mon_elt(i); end

  # min or sec
  #
  # source://fugit//lib/fugit/cron.rb#685
  def mos(i); end

  # ssws: slash or sorws
  #
  # source://fugit//lib/fugit/cron.rb#721
  def mos_elt(i); end

  # source://fugit//lib/fugit/cron.rb#702
  def r_dom(i); end

  # source://fugit//lib/fugit/cron.rb#704
  def r_dow(i); end

  # source://fugit//lib/fugit/cron.rb#701
  def r_hou(i); end

  # source://fugit//lib/fugit/cron.rb#703
  def r_mon(i); end

  # r: range
  #
  # source://fugit//lib/fugit/cron.rb#700
  def r_mos(i); end

  # rewriting the parsed tree
  #
  # source://fugit//lib/fugit/cron.rb#771
  def rewrite_bound(k, t); end

  # source://fugit//lib/fugit/cron.rb#832
  def rewrite_cron(t); end

  # source://fugit//lib/fugit/cron.rb#789
  def rewrite_elt(k, t); end

  # source://fugit//lib/fugit/cron.rb#817
  def rewrite_entry(t); end

  # source://fugit//lib/fugit/cron.rb#781
  def rewrite_mod(k, t); end

  # source://fugit//lib/fugit/cron.rb#824
  def rewrite_tz(t); end

  # piece parsers bottom to top
  #
  # source://fugit//lib/fugit/cron.rb#676
  def s(i); end

  # source://fugit//lib/fugit/cron.rb#760
  def second_cron(i); end

  # source://fugit//lib/fugit/cron.rb#683
  def slash(i); end

  # source://fugit//lib/fugit/cron.rb#709
  def sor_dom(i); end

  # source://fugit//lib/fugit/cron.rb#711
  def sor_dow(i); end

  # source://fugit//lib/fugit/cron.rb#708
  def sor_hou(i); end

  # source://fugit//lib/fugit/cron.rb#710
  def sor_mon(i); end

  # sor: star or range
  #
  # source://fugit//lib/fugit/cron.rb#707
  def sor_mos(i); end

  # source://fugit//lib/fugit/cron.rb#716
  def sorws_dom(i); end

  # source://fugit//lib/fugit/cron.rb#718
  def sorws_dow(i); end

  # source://fugit//lib/fugit/cron.rb#715
  def sorws_hou(i); end

  # source://fugit//lib/fugit/cron.rb#717
  def sorws_mon(i); end

  # sorws: star or range with[out] slash
  #
  # source://fugit//lib/fugit/cron.rb#714
  def sorws_mos(i); end

  # source://fugit//lib/fugit/cron.rb#677
  def star(i); end
end

# source://fugit//lib/fugit/cron.rb#666
Fugit::Cron::Parser::DOW_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/cron.rb#669
Fugit::Cron::Parser::MONTHS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/cron.rb#671
Fugit::Cron::Parser::MONTH_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/cron.rb#661
Fugit::Cron::Parser::WEEKDAYS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/cron.rb#664
Fugit::Cron::Parser::WEEKDS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/cron.rb#353
Fugit::Cron::SLOTS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/cron.rb#7
Fugit::Cron::SPECIALS = T.let(T.unsafe(nil), Hash)

# source://fugit//lib/fugit/cron.rb#66
class Fugit::Cron::TimeCursor
  # @return [TimeCursor] a new instance of TimeCursor
  #
  # source://fugit//lib/fugit/cron.rb#68
  def initialize(cron, t); end

  # source://fugit//lib/fugit/cron.rb#80
  def day; end

  # source://fugit//lib/fugit/cron.rb#83
  def dec(i); end

  # source://fugit//lib/fugit/cron.rb#132
  def dec_day; end

  # source://fugit//lib/fugit/cron.rb#135
  def dec_hour; end

  # source://fugit//lib/fugit/cron.rb#138
  def dec_min; end

  # source://fugit//lib/fugit/cron.rb#128
  def dec_month; end

  # source://fugit//lib/fugit/cron.rb#142
  def dec_sec; end

  # source://fugit//lib/fugit/cron.rb#80
  def hour; end

  # source://fugit//lib/fugit/cron.rb#82
  def inc(i); end

  # source://fugit//lib/fugit/cron.rb#96
  def inc_day; end

  # source://fugit//lib/fugit/cron.rb#113
  def inc_hour; end

  # source://fugit//lib/fugit/cron.rb#116
  def inc_min; end

  # source://fugit//lib/fugit/cron.rb#85
  def inc_month; end

  # source://fugit//lib/fugit/cron.rb#120
  def inc_sec; end

  # source://fugit//lib/fugit/cron.rb#80
  def min; end

  # source://fugit//lib/fugit/cron.rb#80
  def month; end

  # source://fugit//lib/fugit/cron.rb#80
  def rday; end

  # source://fugit//lib/fugit/cron.rb#80
  def rweek; end

  # source://fugit//lib/fugit/cron.rb#80
  def sec; end

  # source://fugit//lib/fugit/cron.rb#74
  def time; end

  # source://fugit//lib/fugit/cron.rb#77
  def to_i; end

  # source://fugit//lib/fugit/cron.rb#75
  def to_t; end

  # source://fugit//lib/fugit/cron.rb#80
  def wday; end

  # source://fugit//lib/fugit/cron.rb#80
  def wday_in_month; end

  # source://fugit//lib/fugit/cron.rb#80
  def year; end
end

# source://fugit//lib/fugit/misc.rb#5
Fugit::DAY_S = T.let(T.unsafe(nil), Integer)

# source://fugit//lib/fugit/duration.rb#5
class Fugit::Duration
  # source://fugit//lib/fugit/duration.rb#255
  def +(a); end

  # source://fugit//lib/fugit/duration.rb#268
  def -(a); end

  # source://fugit//lib/fugit/duration.rb#199
  def -@; end

  # source://fugit//lib/fugit/duration.rb#281
  def ==(o); end

  # source://fugit//lib/fugit/duration.rb#255
  def add(a); end

  # source://fugit//lib/fugit/duration.rb#216
  def add_duration(d); end

  # source://fugit//lib/fugit/duration.rb#208
  def add_numeric(n); end

  # source://fugit//lib/fugit/duration.rb#223
  def add_to_time(t); end

  # source://fugit//lib/fugit/duration.rb#163
  def deflate(options = T.unsafe(nil)); end

  # Returns a copy of this duration, omitting its seconds.
  #
  # source://fugit//lib/fugit/duration.rb#299
  def drop_seconds; end

  # source://fugit//lib/fugit/duration.rb#281
  def eql?(o); end

  # Returns the value of attribute h.
  #
  # source://fugit//lib/fugit/duration.rb#7
  def h; end

  # source://fugit//lib/fugit/duration.rb#287
  def hash; end

  # source://fugit//lib/fugit/duration.rb#143
  def inflate; end

  # source://fugit//lib/fugit/duration.rb#292
  def next_time(from = T.unsafe(nil)); end

  # source://fugit//lib/fugit/duration.rb#199
  def opposite; end

  # Returns the value of attribute options.
  #
  # source://fugit//lib/fugit/duration.rb#7
  def options; end

  # Returns the value of attribute original.
  #
  # source://fugit//lib/fugit/duration.rb#7
  def original; end

  # source://fugit//lib/fugit/duration.rb#268
  def subtract(a); end

  # For now, let's alias to #h
  #
  # source://fugit//lib/fugit/duration.rb#128
  def to_h; end

  # source://fugit//lib/fugit/duration.rb#90
  def to_iso_s; end

  # source://fugit//lib/fugit/duration.rb#109
  def to_long_s(opts = T.unsafe(nil)); end

  # source://fugit//lib/fugit/duration.rb#87
  def to_plain_s; end

  # source://fugit//lib/fugit/duration.rb#130
  def to_rufus_h; end

  # source://fugit//lib/fugit/duration.rb#88
  def to_rufus_s; end

  # Warning: this is an "approximation", months are 30 days and years are
  # 365 days, ...
  #
  # source://fugit//lib/fugit/duration.rb#138
  def to_sec; end

  protected

  # source://fugit//lib/fugit/duration.rb#76
  def _to_s(key); end

  # source://fugit//lib/fugit/duration.rb#310
  def init(original, options, h); end

  class << self
    # source://fugit//lib/fugit/duration.rb#51
    def common_rewrite_dur(t); end

    # source://fugit//lib/fugit/duration.rb#41
    def do_parse(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/duration.rb#11
    def new(s); end

    # source://fugit//lib/fugit/duration.rb#16
    def parse(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/duration.rb#48
    def to_iso_s(o); end

    # source://fugit//lib/fugit/duration.rb#49
    def to_long_s(o, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/duration.rb#47
    def to_plain_s(o); end
  end
end

# source://fugit//lib/fugit/duration.rb#72
Fugit::Duration::INFLA_KEYS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/duration.rb#374
module Fugit::Duration::IsoParser
  include ::Raabro
  extend ::Raabro::ModuleMethods
  extend ::Raabro
  extend ::Fugit::Duration::IsoParser

  # source://fugit//lib/fugit/duration.rb#392
  def date(i); end

  # source://fugit//lib/fugit/duration.rb#384
  def day(i); end

  # source://fugit//lib/fugit/duration.rb#389
  def delt(i); end

  # source://fugit//lib/fugit/duration.rb#396
  def dur(i); end

  # source://fugit//lib/fugit/duration.rb#385
  def hou(i); end

  # source://fugit//lib/fugit/duration.rb#386
  def min(i); end

  # source://fugit//lib/fugit/duration.rb#382
  def mon(i); end

  # piece parsers bottom to top
  #
  # source://fugit//lib/fugit/duration.rb#378
  def p(i); end

  # rewrite parsed tree
  #
  # source://fugit//lib/fugit/duration.rb#400
  def rewrite_dur(t); end

  # source://fugit//lib/fugit/duration.rb#387
  def sec(i); end

  # source://fugit//lib/fugit/duration.rb#379
  def t(i); end

  # source://fugit//lib/fugit/duration.rb#394
  def t_time(i); end

  # source://fugit//lib/fugit/duration.rb#390
  def telt(i); end

  # source://fugit//lib/fugit/duration.rb#393
  def time(i); end

  # source://fugit//lib/fugit/duration.rb#383
  def wee(i); end

  # source://fugit//lib/fugit/duration.rb#381
  def yea(i); end
end

# source://fugit//lib/fugit/duration.rb#63
Fugit::Duration::KEYS = T.let(T.unsafe(nil), Hash)

# source://fugit//lib/fugit/duration.rb#72
Fugit::Duration::NON_INFLA_KEYS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/duration.rb#325
module Fugit::Duration::Parser
  include ::Raabro
  extend ::Raabro::ModuleMethods
  extend ::Raabro
  extend ::Fugit::Duration::Parser

  # source://fugit//lib/fugit/duration.rb#334
  def day(i); end

  # source://fugit//lib/fugit/duration.rb#346
  def dur(i); end

  # source://fugit//lib/fugit/duration.rb#341
  def elt(i); end

  # source://fugit//lib/fugit/duration.rb#335
  def hou(i); end

  # rewrite parsed tree
  #
  # source://fugit//lib/fugit/duration.rb#350
  def merge(h0, h1); end

  # source://fugit//lib/fugit/duration.rb#336
  def min(i); end

  # source://fugit//lib/fugit/duration.rb#332
  def mon(i); end

  # source://fugit//lib/fugit/duration.rb#367
  def rewrite_dur(t); end

  # source://fugit//lib/fugit/duration.rb#357
  def rewrite_sdur(t); end

  # source://fugit//lib/fugit/duration.rb#344
  def sdur(i); end

  # source://fugit//lib/fugit/duration.rb#338
  def sec(i); end

  # source://fugit//lib/fugit/duration.rb#339
  def sek(i); end

  # piece parsers bottom to top
  #
  # source://fugit//lib/fugit/duration.rb#329
  def sep(i); end

  # source://fugit//lib/fugit/duration.rb#342
  def sign(i); end

  # source://fugit//lib/fugit/duration.rb#333
  def wee(i); end

  # source://fugit//lib/fugit/duration.rb#331
  def yea(i); end
end

# Round float seconds to 9 decimals when deflating
#
# source://fugit//lib/fugit/duration.rb#161
Fugit::Duration::SECOND_ROUND = T.let(T.unsafe(nil), Integer)

# A natural language set of parsers for fugit.
# Focuses on cron expressions. The rest is better left to Chronic and friends.
#
# source://fugit//lib/fugit/nat.rb#8
module Fugit::Nat
  class << self
    # source://fugit//lib/fugit/nat.rb#30
    def do_parse(s, opts = T.unsafe(nil)); end

    # source://fugit//lib/fugit/nat.rb#12
    def parse(s, opts = T.unsafe(nil)); end
  end
end

# source://fugit//lib/fugit/nat.rb#37
module Fugit::Nat::Parser
  include ::Raabro
  extend ::Raabro::ModuleMethods
  extend ::Raabro
  extend ::Fugit::Nat::Parser

  # source://fugit//lib/fugit/nat.rb#109
  def _and(i); end

  # source://fugit//lib/fugit/nat.rb#110
  def _and_or_or(i); end

  # source://fugit//lib/fugit/nat.rb#113
  def _and_or_or_or_comma(i); end

  # source://fugit//lib/fugit/nat.rb#105
  def _at(i); end

  # source://fugit//lib/fugit/nat.rb#119
  def _day_s(i); end

  # source://fugit//lib/fugit/nat.rb#146
  def _dmin(i); end

  # parsers bottom to top #################################################
  #
  # source://fugit//lib/fugit/nat.rb#103
  def _every(i); end

  # source://fugit//lib/fugit/nat.rb#104
  def _from(i); end

  # source://fugit//lib/fugit/nat.rb#111
  def _in_or_on(i); end

  # source://fugit//lib/fugit/nat.rb#144
  def _minute(i); end

  # source://fugit//lib/fugit/nat.rb#106
  def _on(i); end

  # source://fugit//lib/fugit/nat.rb#235
  def _point(i); end

  # source://fugit//lib/fugit/nat.rb#361
  def _rewrite_sub(t, key = T.unsafe(nil)); end

  # source://fugit//lib/fugit/nat.rb#358
  def _rewrite_subs(t, key = T.unsafe(nil)); end

  # source://fugit//lib/fugit/nat.rb#123
  def _sep(i); end

  # source://fugit//lib/fugit/nat.rb#122
  def _space(i); end

  # source://fugit//lib/fugit/nat.rb#120
  def _the(i); end

  # source://fugit//lib/fugit/nat.rb#107
  def _to(i); end

  # source://fugit//lib/fugit/nat.rb#116
  def _to_or_dash(i); end

  # Try to follow https://en.wikipedia.org/wiki/12-hour_clock#Confusion_at_noon_and_midnight
  #
  # source://fugit//lib/fugit/nat.rb#486
  def adjust_h(h, m, ap); end

  # source://fugit//lib/fugit/nat.rb#200
  def ampm(i); end

  # source://fugit//lib/fugit/nat.rb#149
  def and_dmin(i); end

  # source://fugit//lib/fugit/nat.rb#261
  def at(i); end

  # at five
  # at five pm
  # at five o'clock
  # at 16:30
  # at noon
  # at 18:00 UTC <-- ...tz
  #
  # source://fugit//lib/fugit/nat.rb#254
  def at_object(i); end

  # source://fugit//lib/fugit/nat.rb#257
  def at_objects(i); end

  # source://fugit//lib/fugit/nat.rb#241
  def at_p(i); end

  # source://fugit//lib/fugit/nat.rb#244
  def at_point(i); end

  # source://fugit//lib/fugit/nat.rb#184
  def city_tz(i); end

  # source://fugit//lib/fugit/nat.rb#125
  def count(i); end

  # source://fugit//lib/fugit/nat.rb#237
  def counts(i); end

  # source://fugit//lib/fugit/nat.rb#203
  def dark(i); end

  # source://fugit//lib/fugit/nat.rb#190
  def delta_tz(i); end

  # source://fugit//lib/fugit/nat.rb#207
  def digital_h(i); end

  # source://fugit//lib/fugit/nat.rb#210
  def digital_hour(i); end

  # source://fugit//lib/fugit/nat.rb#340
  def every(i); end

  # every day
  # every 1 minute
  #
  # source://fugit//lib/fugit/nat.rb#271
  def every_interval(i); end

  # source://fugit//lib/fugit/nat.rb#326
  def every_named(i); end

  # source://fugit//lib/fugit/nat.rb#330
  def every_object(i); end

  # source://fugit//lib/fugit/nat.rb#336
  def every_objects(i); end

  # every 1st of the month
  # every first of the month
  # Every 2nd of the month
  # Every second of the month
  # every 15th of the month
  #
  # source://fugit//lib/fugit/nat.rb#322
  def every_of_the_month(i); end

  # source://fugit//lib/fugit/nat.rb#275
  def every_single_interval(i); end

  # every monday
  # every Fri-Sun
  # every Monday and Tuesday
  #
  # source://fugit//lib/fugit/nat.rb#309
  def every_weekday(i); end

  # source://fugit//lib/fugit/nat.rb#302
  def from(i); end

  # source://fugit//lib/fugit/nat.rb#296
  def from_object(i); end

  # source://fugit//lib/fugit/nat.rb#299
  def from_objects(i); end

  # source://fugit//lib/fugit/nat.rb#265
  def interval(i); end

  # source://fugit//lib/fugit/nat.rb#130
  def monthday(i); end

  # source://fugit//lib/fugit/nat.rb#138
  def monthdays(i); end

  # source://fugit//lib/fugit/nat.rb#228
  def named_h(i); end

  # source://fugit//lib/fugit/nat.rb#231
  def named_hour(i); end

  # source://fugit//lib/fugit/nat.rb#221
  def named_m(i); end

  # source://fugit//lib/fugit/nat.rb#224
  def named_min(i); end

  # source://fugit//lib/fugit/nat.rb#187
  def named_tz(i); end

  # source://fugit//lib/fugit/nat.rb#347
  def nat(i); end

  # source://fugit//lib/fugit/nat.rb#344
  def nat_elt(i); end

  # source://fugit//lib/fugit/nat.rb#127
  def omonthday(i); end

  # source://fugit//lib/fugit/nat.rb#137
  def omonthdays(i); end

  # 'every month on day 2 at 10:00' => '0 10 2 * *',
  # 'every month on day 2 and 5 at 10:00' => '0 10 2,5 * *',
  # 'every month on days 1,15 at 10:00' => '0 10 1,15 * *',
  #
  # 'every week on monday 18:23' => '23 18 * * 1',
  #
  # every month on the 1st
  #
  # source://fugit//lib/fugit/nat.rb#180
  def on(i); end

  # source://fugit//lib/fugit/nat.rb#162
  def on_days(i); end

  # source://fugit//lib/fugit/nat.rb#153
  def on_minutes(i); end

  # source://fugit//lib/fugit/nat.rb#165
  def on_object(i); end

  # source://fugit//lib/fugit/nat.rb#168
  def on_objects(i); end

  # source://fugit//lib/fugit/nat.rb#142
  def on_the(i); end

  # source://fugit//lib/fugit/nat.rb#161
  def on_thes(i); end

  # source://fugit//lib/fugit/nat.rb#157
  def on_thex(i); end

  # source://fugit//lib/fugit/nat.rb#163
  def on_weekdays(i); end

  # source://fugit//lib/fugit/nat.rb#313
  def otm(i); end

  # source://fugit//lib/fugit/nat.rb#542
  def rewrite_at(t); end

  # source://fugit//lib/fugit/nat.rb#405
  def rewrite_at_p(t); end

  # source://fugit//lib/fugit/nat.rb#499
  def rewrite_digital_hour(t); end

  # source://fugit//lib/fugit/nat.rb#366
  def rewrite_dmin(t); end

  # source://fugit//lib/fugit/nat.rb#546
  def rewrite_every(t); end

  # source://fugit//lib/fugit/nat.rb#426
  def rewrite_every_interval(t); end

  # source://fugit//lib/fugit/nat.rb#446
  def rewrite_every_named(t); end

  # source://fugit//lib/fugit/nat.rb#418
  def rewrite_every_single_interval(t); end

  # source://fugit//lib/fugit/nat.rb#397
  def rewrite_monthday(t); end

  # source://fugit//lib/fugit/nat.rb#516
  def rewrite_named_hour(t); end

  # source://fugit//lib/fugit/nat.rb#550
  def rewrite_nat(t); end

  # source://fugit//lib/fugit/nat.rb#401
  def rewrite_omonthday(t); end

  # source://fugit//lib/fugit/nat.rb#393
  def rewrite_on(t); end

  # source://fugit//lib/fugit/nat.rb#389
  def rewrite_on_days(t); end

  # source://fugit//lib/fugit/nat.rb#370
  def rewrite_on_minutes(t); end

  # source://fugit//lib/fugit/nat.rb#386
  def rewrite_on_thes(t); end

  # source://fugit//lib/fugit/nat.rb#377
  def rewrite_on_thex(t); end

  # source://fugit//lib/fugit/nat.rb#465
  def rewrite_on_weekdays(t); end

  # source://fugit//lib/fugit/nat.rb#508
  def rewrite_simple_hour(t); end

  # source://fugit//lib/fugit/nat.rb#532
  def rewrite_to_hour(t); end

  # source://fugit//lib/fugit/nat.rb#479
  def rewrite_to_omonthday(t); end

  # source://fugit//lib/fugit/nat.rb#472
  def rewrite_to_weekday(t); end

  # source://fugit//lib/fugit/nat.rb#455
  def rewrite_tz(t); end

  # source://fugit//lib/fugit/nat.rb#460
  def rewrite_weekday(t); end

  # source://fugit//lib/fugit/nat.rb#465
  def rewrite_weekdays(t); end

  # source://fugit//lib/fugit/nat.rb#214
  def simple_h(i); end

  # source://fugit//lib/fugit/nat.rb#217
  def simple_hour(i); end

  # rewrite parsed tree ###################################################
  #
  # source://fugit//lib/fugit/nat.rb#354
  def slot(key, data0, data1 = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://fugit//lib/fugit/nat.rb#292
  def to_hour(i); end

  # source://fugit//lib/fugit/nat.rb#287
  def to_omonthday(i); end

  # source://fugit//lib/fugit/nat.rb#279
  def to_weekday(i); end

  # source://fugit//lib/fugit/nat.rb#193
  def tz(i); end

  # source://fugit//lib/fugit/nat.rb#196
  def tzone(i); end

  # source://fugit//lib/fugit/nat.rb#133
  def weekday(i); end

  # source://fugit//lib/fugit/nat.rb#283
  def weekday_range(i); end

  # source://fugit//lib/fugit/nat.rb#140
  def weekdays(i); end
end

# source://fugit//lib/fugit/nat.rb#71
Fugit::Nat::Parser::INTERVALS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/nat.rb#98
Fugit::Nat::Parser::INTERVAL_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/nat.rb#92
Fugit::Nat::Parser::MONTHDAY_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/nat.rb#96
Fugit::Nat::Parser::NAMED_H_REX = T.let(T.unsafe(nil), Regexp)

# prevent "mon" from eating "monday"
#
# source://fugit//lib/fugit/nat.rb#95
Fugit::Nat::Parser::NAMED_M_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/nat.rb#51
Fugit::Nat::Parser::NHOURS = T.let(T.unsafe(nil), Hash)

# source://fugit//lib/fugit/nat.rb#57
Fugit::Nat::Parser::NMINUTES = T.let(T.unsafe(nil), Hash)

# source://fugit//lib/fugit/nat.rb#89
Fugit::Nat::Parser::OMONTHDAYS = T.let(T.unsafe(nil), Hash)

# source://fugit//lib/fugit/nat.rb#91
Fugit::Nat::Parser::OMONTHDAY_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/nat.rb#68
Fugit::Nat::Parser::POINTS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/nat.rb#97
Fugit::Nat::Parser::POINT_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/nat.rb#64
Fugit::Nat::Parser::WEEKDAYS = T.let(T.unsafe(nil), Array)

# source://fugit//lib/fugit/nat.rb#93
Fugit::Nat::Parser::WEEKDAY_REX = T.let(T.unsafe(nil), Regexp)

# source://fugit//lib/fugit/nat.rb#556
class Fugit::Nat::Slot
  # @return [Slot] a new instance of Slot
  #
  # source://fugit//lib/fugit/nat.rb#559
  def initialize(key, d0, d1 = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute _data0.
  #
  # source://fugit//lib/fugit/nat.rb#558
  def _data0; end

  # Sets the attribute _data0
  #
  # @param value the value to set the attribute _data0 to.
  #
  # source://fugit//lib/fugit/nat.rb#558
  def _data0=(_arg0); end

  # Returns the value of attribute _data1.
  #
  # source://fugit//lib/fugit/nat.rb#558
  def _data1; end

  # Sets the attribute _data1
  #
  # @param value the value to set the attribute _data1 to.
  #
  # source://fugit//lib/fugit/nat.rb#558
  def _data1=(_arg0); end

  # source://fugit//lib/fugit/nat.rb#580
  def a; end

  # source://fugit//lib/fugit/nat.rb#569
  def append(slot); end

  # source://fugit//lib/fugit/nat.rb#564
  def data0; end

  # source://fugit//lib/fugit/nat.rb#565
  def data1; end

  # @return [Boolean]
  #
  # source://fugit//lib/fugit/nat.rb#568
  def graded?; end

  # source://fugit//lib/fugit/nat.rb#574
  def inspect; end

  # Returns the value of attribute key.
  #
  # source://fugit//lib/fugit/nat.rb#557
  def key; end

  # source://fugit//lib/fugit/nat.rb#567
  def strong; end

  # source://fugit//lib/fugit/nat.rb#566
  def weak; end

  protected

  # source://fugit//lib/fugit/nat.rb#586
  def conflate(index, slot); end

  # source://fugit//lib/fugit/nat.rb#602
  def hour_range; end

  # source://fugit//lib/fugit/nat.rb#582
  def to_a(x); end
end

# source://fugit//lib/fugit/nat.rb#608
class Fugit::Nat::SlotGroup
  # @return [SlotGroup] a new instance of SlotGroup
  #
  # source://fugit//lib/fugit/nat.rb#610
  def initialize(slots); end

  # source://fugit//lib/fugit/nat.rb#635
  def to_crons(opts); end

  protected

  # source://fugit//lib/fugit/nat.rb#658
  def determine_hms; end

  # source://fugit//lib/fugit/nat.rb#653
  def make_slot(key, data0, data1 = T.unsafe(nil)); end

  # source://fugit//lib/fugit/nat.rb#681
  def parse_cron(hm, opts); end

  # Return nil if the cron is "not strict"
  #
  # For example, "0 0/17 * * *" (gh-86) is a perfectly valid
  # cron string, but makes not much sense when derived via `.parse_nat`
  # from "every 17 hours".
  #
  # It happens here because it's nat being strict, not cron.
  #
  # source://fugit//lib/fugit/nat.rb#718
  def restrict(a, cron); end

  # source://fugit//lib/fugit/nat.rb#729
  def slot(key, default); end
end

# source://fugit//lib/fugit.rb#6
Fugit::VERSION = T.let(T.unsafe(nil), String)

# source://fugit//lib/fugit/misc.rb#6
Fugit::YEAR_S = T.let(T.unsafe(nil), Integer)
