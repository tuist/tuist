# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railties` gem.
# Please instead update this file by running `bin/tapioca gem railties`.

# :include: railties/README.rdoc
#
# source://railties//lib/rails/gem_version.rb#3
module Rails
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Benchmarkable

  class << self
    # Returns the value of attribute app_class.
    #
    # source://railties//lib/rails.rb#42
    def app_class; end

    # Sets the attribute app_class
    #
    # @param value the value to set the attribute app_class to.
    #
    # source://railties//lib/rails.rb#42
    def app_class=(_arg0); end

    # source://railties//lib/rails.rb#43
    def application; end

    # Sets the attribute application
    #
    # @param value the value to set the attribute application to.
    #
    # source://railties//lib/rails.rb#41
    def application=(_arg0); end

    # source://railties//lib/rails.rb#123
    def autoloaders; end

    # source://railties//lib/rails.rb#54
    def backtrace_cleaner; end

    # Returns the value of attribute cache.
    #
    # source://railties//lib/rails.rb#42
    def cache; end

    # Sets the attribute cache
    #
    # @param value the value to set the attribute cache to.
    #
    # source://railties//lib/rails.rb#42
    def cache=(_arg0); end

    # The Configuration instance used to configure the \Rails environment
    #
    # source://railties//lib/rails.rb#50
    def configuration; end

    # source://railties//lib/rails/deprecator.rb#4
    def deprecator; end

    # Returns the current \Rails environment.
    #
    #   Rails.env # => "development"
    #   Rails.env.development? # => true
    #   Rails.env.production? # => false
    #
    # source://railties//lib/rails.rb#72
    def env; end

    # Sets the \Rails environment.
    #
    #   Rails.env = "staging" # => "staging"
    #
    # source://railties//lib/rails.rb#79
    def env=(environment); end

    # Returns the ActiveSupport::ErrorReporter of the current \Rails project,
    # otherwise it returns +nil+ if there is no project.
    #
    #   Rails.error.handle(IOError) do
    #     # ...
    #   end
    #   Rails.error.report(error)
    #
    # source://railties//lib/rails.rb#90
    def error; end

    # Returns the currently loaded version of \Rails as a +Gem::Version+.
    #
    # source://railties//lib/rails/gem_version.rb#5
    def gem_version; end

    # Returns all \Rails groups for loading based on:
    #
    # * The \Rails environment;
    # * The environment variable RAILS_GROUPS;
    # * The optional envs given as argument and the hash with group dependencies;
    #
    #  Rails.groups assets: [:development, :test]
    #  # => [:default, "development", :assets] for Rails.env == "development"
    #  # => [:default, "production"]           for Rails.env == "production"
    #
    # source://railties//lib/rails.rb#103
    def groups(*groups); end

    # source://railties//lib/rails.rb#47
    def initialize!(*_arg0, **_arg1, &_arg2); end

    # source://railties//lib/rails.rb#47
    def initialized?(*_arg0, **_arg1, &_arg2); end

    # Returns the value of attribute logger.
    #
    # source://railties//lib/rails.rb#42
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://railties//lib/rails.rb#42
    def logger=(_arg0); end

    # Returns a Pathname object of the public folder of the current
    # \Rails project, otherwise it returns +nil+ if there is no project:
    #
    #   Rails.public_path
    #     # => #<Pathname:/Users/someuser/some/path/project/public>
    #
    # source://railties//lib/rails.rb#119
    def public_path; end

    # Returns a Pathname object of the current \Rails project,
    # otherwise it returns +nil+ if there is no project:
    #
    #   Rails.root
    #     # => #<Pathname:/Users/someuser/some/path/project>
    #
    # source://railties//lib/rails.rb#63
    def root; end

    # Returns the currently loaded version of \Rails as a string.
    #
    # source://railties//lib/rails/version.rb#7
    def version; end
  end
end

# An Engine with the responsibility of coordinating the whole boot process.
#
# == Initialization
#
# Rails::Application is responsible for executing all railties and engines
# initializers. It also executes some bootstrap initializers (check
# Rails::Application::Bootstrap) and finishing initializers, after all the others
# are executed (check Rails::Application::Finisher).
#
# == \Configuration
#
# Besides providing the same configuration as Rails::Engine and Rails::Railtie,
# the application object has several specific configurations, for example
# +enable_reloading+, +consider_all_requests_local+, +filter_parameters+,
# +logger+, and so forth.
#
# Check Rails::Application::Configuration to see them all.
#
# == Routes
#
# The application object is also responsible for holding the routes and reloading routes
# whenever the files change in development.
#
# == Middlewares
#
# The Application is also responsible for building the middleware stack.
#
# == Booting process
#
# The application is also responsible for setting up and executing the booting
# process. From the moment you require <tt>config/application.rb</tt> in your app,
# the booting process goes like this:
#
# 1.  <tt>require "config/boot.rb"</tt> to set up load paths.
# 2.  +require+ railties and engines.
# 3.  Define +Rails.application+ as <tt>class MyApp::Application < Rails::Application</tt>.
# 4.  Run +config.before_configuration+ callbacks.
# 5.  Load <tt>config/environments/ENV.rb</tt>.
# 6.  Run +config.before_initialize+ callbacks.
# 7.  Run <tt>Railtie#initializer</tt> defined by railties, engines, and application.
#     One by one, each engine sets up its load paths and routes, and runs its <tt>config/initializers/*</tt> files.
# 8.  Custom <tt>Railtie#initializers</tt> added by railties, engines, and applications are executed.
# 9.  Build the middleware stack and run +to_prepare+ callbacks.
# 10. Run +config.before_eager_load+ and +eager_load!+ if +eager_load+ is +true+.
# 11. Run +config.after_initialize+ callbacks.
#
# source://railties//lib/rails/application.rb#62
class Rails::Application < ::Rails::Engine
  # @return [Application] a new instance of Application
  #
  # source://railties//lib/rails/application.rb#109
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#37
  def asset_precompiled?(logical_path); end

  # Returns the value of attribute assets.
  #
  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#30
  def assets; end

  # Sets the attribute assets
  #
  # @param value the value to set the attribute assets to.
  #
  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#30
  def assets=(_arg0); end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#33
  def assets_manifest; end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#33
  def assets_manifest=(_arg0); end

  # Returns the value of attribute autoloaders.
  #
  # source://railties//lib/rails/application.rb#102
  def autoloaders; end

  # source://railties//lib/rails/engine.rb#510
  def build_middleware_stack; end

  # source://railties//lib/rails/application.rb#434
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://railties//lib/rails/application.rb#438
  def config=(_arg0); end

  # Convenience for loading config/foo.yml for the current \Rails env.
  #
  # Examples:
  #
  #     # config/exception_notification.yml:
  #     production:
  #       url: http://127.0.0.1:8080
  #       namespace: my_app_production
  #
  #     development:
  #       url: http://localhost:3001
  #       namespace: my_app_development
  #
  #     # config/environments/production.rb
  #     Rails.application.configure do
  #       config.middleware.use ExceptionNotifier, config_for(:exception_notification)
  #     end
  #
  #     # You can also store configurations in a shared section which will be
  #     # merged with the environment configuration
  #
  #     # config/example.yml
  #     shared:
  #       foo:
  #         bar:
  #           baz: 1
  #
  #     development:
  #       foo:
  #         bar:
  #           qux: 2
  #
  #     # development environment
  #     Rails.application.config_for(:example)[:foo][:bar]
  #     # => { baz: 1, qux: 2 }
  #
  # source://railties//lib/rails/application.rb#271
  def config_for(name, env: T.unsafe(nil)); end

  # Sends any console called in the instance of a new application up
  # to the +console+ method defined in Rails::Railtie.
  #
  # source://railties//lib/rails/application.rb#354
  def console(&blk); end

  # Returns an ActiveSupport::EncryptedConfiguration instance for the
  # credentials file specified by +config.credentials.content_path+.
  #
  # By default, +config.credentials.content_path+ will point to either
  # <tt>config/credentials/#{environment}.yml.enc</tt> for the current
  # environment (for example, +config/credentials/production.yml.enc+ for the
  # +production+ environment), or +config/credentials.yml.enc+ if that file
  # does not exist.
  #
  # The encryption key is taken from either <tt>ENV["RAILS_MASTER_KEY"]</tt>,
  # or from the file specified by +config.credentials.key_path+. By default,
  # +config.credentials.key_path+ will point to either
  # <tt>config/credentials/#{environment}.key</tt> for the current
  # environment, or +config/master.key+ if that file does not exist.
  #
  # source://railties//lib/rails/application.rb#499
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  #
  # source://railties//lib/rails/application.rb#457
  def credentials=(_arg0); end

  # source://railties//lib/rails/application.rb#104
  def default_url_options(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/application.rb#104
  def default_url_options=(arg); end

  # A managed collection of deprecators (ActiveSupport::Deprecation::Deprecators).
  # The collection's configuration methods affect all deprecators in the
  # collection. Additionally, the collection's +silence+ method silences all
  # deprecators in the collection for the duration of a given block.
  #
  # source://railties//lib/rails/application.rb#230
  def deprecators; end

  # Eager loads the application code.
  #
  # source://railties//lib/rails/application.rb#557
  def eager_load!; end

  # Returns an ActiveSupport::EncryptedConfiguration instance for an encrypted
  # file. By default, the encryption key is taken from either
  # <tt>ENV["RAILS_MASTER_KEY"]</tt>, or from the +config/master.key+ file.
  #
  #   my_config = Rails.application.encrypted("config/my_config.enc")
  #
  #   my_config.read
  #   # => "foo:\n  bar: 123\n"
  #
  #   my_config.foo.bar
  #   # => 123
  #
  # Encrypted files can be edited with the <tt>bin/rails encrypted:edit</tt>
  # command. (See the output of <tt>bin/rails encrypted:edit --help</tt> for
  # more information.)
  #
  # source://railties//lib/rails/application.rb#518
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # Stores some of the \Rails initial environment parameters which
  # will be used by middlewares and engines to configure themselves.
  #
  # source://railties//lib/rails/application.rb#300
  def env_config; end

  # Returns the value of attribute executor.
  #
  # source://railties//lib/rails/application.rb#102
  def executor; end

  # Sends any generators called in the instance of a new application up
  # to the +generators+ method defined in Rails::Railtie.
  #
  # source://railties//lib/rails/application.rb#360
  def generators(&blk); end

  # source://railties//lib/rails/application.rb#531
  def helpers_paths; end

  # Initialize the application passing the given group. By default, the
  # group is :default
  #
  # source://railties//lib/rails/application.rb#421
  def initialize!(group = T.unsafe(nil)); end

  # Returns true if the application is initialized.
  #
  # @return [Boolean]
  #
  # source://railties//lib/rails/application.rb#134
  def initialized?; end

  # Sends the initializers to the +initializer+ method defined in the
  # Rails::Initializable module. Each Rails::Application class has its own
  # set of initializers, as defined by the Initializable module.
  #
  # source://railties//lib/rails/application.rb#342
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties//lib/rails/application.rb#428
  def initializers; end

  # Sends the +isolate_namespace+ method up to the class method.
  #
  # source://railties//lib/rails/application.rb#371
  def isolate_namespace(mod); end

  # Returns a key generator (ActiveSupport::CachingKeyGenerator) for a
  # specified +secret_key_base+. The return value is memoized, so additional
  # calls with the same +secret_key_base+ will return the same key generator
  # instance.
  #
  # source://railties//lib/rails/application.rb#161
  def key_generator(secret_key_base = T.unsafe(nil)); end

  # source://railties//lib/rails/application.rb#551
  def load_generators(app = T.unsafe(nil)); end

  # Returns a message verifier object.
  #
  # This verifier can be used to generate and verify signed messages in the application.
  #
  # It is recommended not to use the same verifier for different things, so you can get different
  # verifiers passing the +verifier_name+ argument.
  #
  # ==== Parameters
  #
  # * +verifier_name+ - the name of the message verifier.
  #
  # ==== Examples
  #
  #     message = Rails.application.message_verifier('sensitive_data').generate('my sensible data')
  #     Rails.application.message_verifier('sensitive_data').verify(message)
  #     # => 'my sensible data'
  #
  # See the ActiveSupport::MessageVerifier documentation for more information.
  #
  # source://railties//lib/rails/application.rb#222
  def message_verifier(verifier_name); end

  # Returns a message verifier factory (ActiveSupport::MessageVerifiers). This
  # factory can be used as a central point to configure and create message
  # verifiers (ActiveSupport::MessageVerifier) for your application.
  #
  # By default, message verifiers created by this factory will generate
  # messages using the default ActiveSupport::MessageVerifier options. You can
  # override these options with a combination of
  # ActiveSupport::MessageVerifiers#clear_rotations and
  # ActiveSupport::MessageVerifiers#rotate. However, this must be done prior
  # to building any message verifier instances. For example, in a
  # +before_initialize+ block:
  #
  #   # Use `url_safe: true` when generating messages
  #   config.before_initialize do |app|
  #     app.message_verifiers.clear_rotations
  #     app.message_verifiers.rotate(url_safe: true)
  #   end
  #
  # Message verifiers created by this factory will always use a secret derived
  # from #secret_key_base when generating messages. +clear_rotations+ will not
  # affect this behavior. However, older +secret_key_base+ values can be
  # rotated for verifying messages:
  #
  #   # Fall back to old `secret_key_base` when verifying messages
  #   config.before_initialize do |app|
  #     app.message_verifiers.rotate(secret_key_base: "old secret_key_base")
  #   end
  #
  # source://railties//lib/rails/application.rb#197
  def message_verifiers; end

  # Return an array of railties respecting the order they're loaded
  # and the order specified by the +railties_order+ config.
  #
  # While running initializers we need engines in reverse order here when
  # copying migrations from railties ; we need them in the order given by
  # +railties_order+.
  #
  # source://railties//lib/rails/application.rb#547
  def migration_railties; end

  # source://sprockets-rails/3.4.2/lib/sprockets/railtie.rb#51
  def precompiled_assets(clear_cache = T.unsafe(nil)); end

  # If you try to define a set of Rake tasks on the instance, these will get
  # passed up to the Rake tasks defined on the application's class.
  #
  # source://railties//lib/rails/application.rb#335
  def rake_tasks(&block); end

  # Reload application routes regardless if they changed or not.
  #
  # source://railties//lib/rails/application.rb#153
  def reload_routes!; end

  # Returns the value of attribute reloader.
  #
  # source://railties//lib/rails/application.rb#102
  def reloader; end

  # Returns the value of attribute reloaders.
  #
  # source://railties//lib/rails/application.rb#102
  def reloaders; end

  # source://railties//lib/rails/application.rb#397
  def require_environment!; end

  # source://railties//lib/rails/application.rb#402
  def routes_reloader; end

  # source://railties//lib/rails/application.rb#138
  def run_load_hooks!; end

  # Sends any runner called in the instance of a new application up
  # to the +runner+ method defined in Rails::Railtie.
  #
  # source://railties//lib/rails/application.rb#348
  def runner(&blk); end

  # Returns the value of attribute sandbox.
  #
  # source://railties//lib/rails/application.rb#100
  def sandbox; end

  # Sets the attribute sandbox
  #
  # @param value the value to set the attribute sandbox to.
  #
  # source://railties//lib/rails/application.rb#100
  def sandbox=(_arg0); end

  # Returns the value of attribute sandbox.
  #
  # source://railties//lib/rails/application.rb#100
  def sandbox?; end

  # The secret_key_base is used as the input secret to the application's key generator, which in turn
  # is used to create all ActiveSupport::MessageVerifier and ActiveSupport::MessageEncryptor instances,
  # including the ones that sign and encrypt cookies.
  #
  # In development and test, this is randomly generated and stored in a
  # temporary file in <tt>tmp/local_secret.txt</tt>.
  #
  # You can also set <tt>ENV["SECRET_KEY_BASE_DUMMY"]</tt> to trigger the use of a randomly generated
  # secret_key_base that's stored in a temporary file. This is useful when precompiling assets for
  # production as part of a build step that otherwise does not need access to the production secrets.
  #
  # Dockerfile example: <tt>RUN SECRET_KEY_BASE_DUMMY=1 bundle exec rails assets:precompile</tt>.
  #
  # In all other environments, we look for it first in <tt>ENV["SECRET_KEY_BASE"]</tt>,
  # then +credentials.secret_key_base+, and finally +secrets.secret_key_base+. For most applications,
  # the correct place to store it is in the encrypted credentials file.
  #
  # source://railties//lib/rails/application.rb#475
  def secret_key_base; end

  # source://railties//lib/rails/application.rb#440
  def secrets; end

  # Sets the attribute secrets
  #
  # @param value the value to set the attribute secrets to.
  #
  # source://railties//lib/rails/application.rb#457
  def secrets=(_arg0); end

  # Sends any server called in the instance of a new application up
  # to the +server+ method defined in Rails::Railtie.
  #
  # source://railties//lib/rails/application.rb#366
  def server(&blk); end

  # source://railties//lib/rails/application.rb#527
  def to_app; end

  # Returns an array of file paths appended with a hash of
  # directories-extensions suitable for ActiveSupport::FileUpdateChecker
  # API.
  #
  # source://railties//lib/rails/application.rb#409
  def watchable_args; end

  protected

  # source://railties//lib/rails/application.rb#630
  def default_middleware_stack; end

  # source://railties//lib/rails/application.rb#645
  def ensure_generator_templates_added; end

  # Returns the ordered railties for this application considering railties_order.
  #
  # source://railties//lib/rails/application.rb#596
  def ordered_railties; end

  # source://railties//lib/rails/application.rb#618
  def railties_initializers(current); end

  # source://railties//lib/rails/application.rb#585
  def run_console_blocks(app); end

  # source://railties//lib/rails/application.rb#575
  def run_generators_blocks(app); end

  # source://railties//lib/rails/application.rb#580
  def run_runner_blocks(app); end

  # source://railties//lib/rails/application.rb#590
  def run_server_blocks(app); end

  # source://railties//lib/rails/application.rb#564
  def run_tasks_blocks(app); end

  # source://railties//lib/rails/application.rb#635
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties//lib/rails/application.rb#683
  def build_middleware; end

  # source://railties//lib/rails/application.rb#676
  def build_request(env); end

  # source://railties//lib/rails/application.rb#687
  def coerce_same_site_protection(protection); end

  # source://railties//lib/rails/application.rb#691
  def filter_parameters; end

  # source://railties//lib/rails/application.rb#651
  def generate_local_secret; end

  # source://railties//lib/rails/application.rb#670
  def secrets_secret_key_base; end

  class << self
    # This method is called just after an application inherits from Rails::Application,
    # allowing the developer to load classes in lib and use them during application
    # configuration.
    #
    #   class MyApplication < Rails::Application
    #     require "my_backend" # in lib/my_backend
    #     config.i18n.backend = MyBackend
    #   end
    #
    # Notice this method takes into consideration the default root path. So if you
    # are changing config.root inside your application definition or having a custom
    # Rails application, you will need to add lib to $LOAD_PATH on your own in case
    # you need to load files in lib/ during the application configuration as well.
    #
    # source://railties//lib/rails/application.rb#390
    def add_lib_to_load_path!(root); end

    # source://railties//lib/rails/application.rb#84
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties//lib/rails/application.rb#88
    def find_root(from); end

    # @private
    #
    # source://railties//lib/rails/application.rb#71
    def inherited(base); end

    # source://railties//lib/rails/application.rb#80
    def instance; end

    def new(*_arg0); end
  end
end

# source://railties//lib/rails/application/bootstrap.rb#12
module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

# source://railties//lib/rails/application/configuration.rb#13
class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://railties//lib/rails/application/configuration.rb#30
  def initialize(*_arg0); end

  # Returns the value of attribute add_autoload_paths_to_load_path.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def add_autoload_paths_to_load_path; end

  # Sets the attribute add_autoload_paths_to_load_path
  #
  # @param value the value to set the attribute add_autoload_paths_to_load_path to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def add_autoload_paths_to_load_path=(_arg0); end

  # Returns the value of attribute allow_concurrency.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def allow_concurrency; end

  # Sets the attribute allow_concurrency
  #
  # @param value the value to set the attribute allow_concurrency to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def allow_concurrency=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#532
  def annotations; end

  # Returns the value of attribute api_only.
  #
  # source://railties//lib/rails/application/configuration.rb#28
  def api_only; end

  # source://railties//lib/rails/application/configuration.rb#375
  def api_only=(value); end

  # Returns the value of attribute asset_host.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def asset_host; end

  # Sets the attribute asset_host
  #
  # @param value the value to set the attribute asset_host to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def asset_host=(_arg0); end

  # Returns the value of attribute assume_ssl.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def assume_ssl; end

  # Sets the attribute assume_ssl
  #
  # @param value the value to set the attribute assume_ssl to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def assume_ssl=(_arg0); end

  # Returns the value of attribute autoflush_log.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def autoflush_log; end

  # Sets the attribute autoflush_log
  #
  # @param value the value to set the attribute autoflush_log to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def autoflush_log=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#464
  def autoload_lib(ignore:); end

  # source://railties//lib/rails/application/configuration.rb#476
  def autoload_lib_once(ignore:); end

  # Returns the value of attribute beginning_of_week.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def beginning_of_week; end

  # Sets the attribute beginning_of_week
  #
  # @param value the value to set the attribute beginning_of_week to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def beginning_of_week=(_arg0); end

  # Returns the value of attribute cache_classes.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def cache_classes; end

  # Sets the attribute cache_classes
  #
  # @param value the value to set the attribute cache_classes to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def cache_classes=(_arg0); end

  # Returns the value of attribute cache_store.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def cache_store; end

  # Sets the attribute cache_store
  #
  # @param value the value to set the attribute cache_store to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def cache_store=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#488
  def colorize_logging; end

  # source://railties//lib/rails/application/configuration.rb#492
  def colorize_logging=(val); end

  # Returns the value of attribute consider_all_requests_local.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def consider_all_requests_local; end

  # Sets the attribute consider_all_requests_local
  #
  # @param value the value to set the attribute consider_all_requests_local to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def consider_all_requests_local=(_arg0); end

  # Returns the value of attribute console.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def console; end

  # Sets the attribute console
  #
  # @param value the value to set the attribute console to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def console=(_arg0); end

  # Configures the ActionDispatch::ContentSecurityPolicy.
  #
  # source://railties//lib/rails/application/configuration.rb#537
  def content_security_policy(&block); end

  # Returns the value of attribute content_security_policy_nonce_directives.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_directives; end

  # Sets the attribute content_security_policy_nonce_directives
  #
  # @param value the value to set the attribute content_security_policy_nonce_directives to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_directives=(_arg0); end

  # Returns the value of attribute content_security_policy_nonce_generator.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_generator; end

  # Sets the attribute content_security_policy_nonce_generator
  #
  # @param value the value to set the attribute content_security_policy_nonce_generator to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_nonce_generator=(_arg0); end

  # Returns the value of attribute content_security_policy_report_only.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_report_only; end

  # Sets the attribute content_security_policy_report_only
  #
  # @param value the value to set the attribute content_security_policy_report_only to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def content_security_policy_report_only=(_arg0); end

  # Returns the value of attribute credentials.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def credentials=(_arg0); end

  # Loads and returns the entire raw configuration of database from
  # values stored in <tt>config/database.yml</tt>.
  #
  # source://railties//lib/rails/application/configuration.rb#427
  def database_configuration; end

  # source://railties//lib/rails/application/configuration.rb#382
  def debug_exception_response_format; end

  # Sets the attribute debug_exception_response_format
  #
  # @param value the value to set the attribute debug_exception_response_format to.
  #
  # source://railties//lib/rails/application/configuration.rb#386
  def debug_exception_response_format=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#554
  def default_log_file; end

  # Returns the value of attribute disable_sandbox.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def disable_sandbox; end

  # Sets the attribute disable_sandbox
  #
  # @param value the value to set the attribute disable_sandbox to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def disable_sandbox=(_arg0); end

  # Returns the value of attribute dom_testing_default_html_version.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def dom_testing_default_html_version; end

  # Sets the attribute dom_testing_default_html_version
  #
  # @param value the value to set the attribute dom_testing_default_html_version to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def dom_testing_default_html_version=(_arg0); end

  # Returns the value of attribute eager_load.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def eager_load; end

  # Sets the attribute eager_load
  #
  # @param value the value to set the attribute eager_load to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def eager_load=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#357
  def enable_dependency_loading; end

  # source://railties//lib/rails/application/configuration.rb#362
  def enable_dependency_loading=(value); end

  # source://railties//lib/rails/application/configuration.rb#343
  def enable_reloading; end

  # source://railties//lib/rails/application/configuration.rb#347
  def enable_reloading=(value); end

  # Returns the value of attribute encoding.
  #
  # source://railties//lib/rails/application/configuration.rb#28
  def encoding; end

  # source://railties//lib/rails/application/configuration.rb#367
  def encoding=(value); end

  # Returns the value of attribute exceptions_app.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def exceptions_app; end

  # Sets the attribute exceptions_app
  #
  # @param value the value to set the attribute exceptions_app to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def exceptions_app=(_arg0); end

  # Returns the value of attribute file_watcher.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def file_watcher; end

  # Sets the attribute file_watcher
  #
  # @param value the value to set the attribute file_watcher to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def file_watcher=(_arg0); end

  # Returns the value of attribute filter_parameters.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def filter_parameters; end

  # Sets the attribute filter_parameters
  #
  # @param value the value to set the attribute filter_parameters to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def filter_parameters=(_arg0); end

  # Returns the value of attribute filter_redirect.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def filter_redirect; end

  # Sets the attribute filter_redirect
  #
  # @param value the value to set the attribute filter_redirect to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def filter_redirect=(_arg0); end

  # Returns the value of attribute force_ssl.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def force_ssl; end

  # Sets the attribute force_ssl
  #
  # @param value the value to set the attribute force_ssl to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def force_ssl=(_arg0); end

  # Returns the value of attribute helpers_paths.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def helpers_paths; end

  # Sets the attribute helpers_paths
  #
  # @param value the value to set the attribute helpers_paths to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def helpers_paths=(_arg0); end

  # Returns the value of attribute host_authorization.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def host_authorization; end

  # Sets the attribute host_authorization
  #
  # @param value the value to set the attribute host_authorization to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def host_authorization=(_arg0); end

  # Returns the value of attribute hosts.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def hosts; end

  # Sets the attribute hosts
  #
  # @param value the value to set the attribute hosts to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def hosts=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#566
  def inspect; end

  # Load the <tt>config/database.yml</tt> to create the Rake tasks for
  # multiple databases without loading the environment and filling in the
  # environment specific configuration values.
  #
  # Do not use this method, use #database_configuration instead.
  #
  # source://railties//lib/rails/application/configuration.rb#409
  def load_database_yaml; end

  # Loads default configuration values for a target version. This includes
  # defaults for versions prior to the target version. See the
  # {configuration guide}[https://guides.rubyonrails.org/configuring.html#versioned-default-values]
  # for the default values associated with a particular version.
  #
  # source://railties//lib/rails/application/configuration.rb#92
  def load_defaults(target_version); end

  # Returns the value of attribute loaded_config_version.
  #
  # source://railties//lib/rails/application/configuration.rb#28
  def loaded_config_version; end

  # Returns the value of attribute log_file_size.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_file_size; end

  # Sets the attribute log_file_size
  #
  # @param value the value to set the attribute log_file_size to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_file_size=(_arg0); end

  # Returns the value of attribute log_formatter.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_formatter; end

  # Sets the attribute log_formatter
  #
  # @param value the value to set the attribute log_formatter to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_formatter=(_arg0); end

  # Returns the value of attribute log_level.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_level=(_arg0); end

  # Returns the value of attribute log_tags.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_tags; end

  # Sets the attribute log_tags
  #
  # @param value the value to set the attribute log_tags to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def log_tags=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def logger=(_arg0); end

  # source://railties//lib/rails/application/configuration.rb#388
  def paths; end

  # Configures the ActionDispatch::PermissionsPolicy.
  #
  # source://railties//lib/rails/application/configuration.rb#546
  def permissions_policy(&block); end

  # Returns the value of attribute precompile_filter_parameters.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def precompile_filter_parameters; end

  # Sets the attribute precompile_filter_parameters
  #
  # @param value the value to set the attribute precompile_filter_parameters to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def precompile_filter_parameters=(_arg0); end

  # Returns the value of attribute public_file_server.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def public_file_server; end

  # Sets the attribute public_file_server
  #
  # @param value the value to set the attribute public_file_server to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def public_file_server=(_arg0); end

  # Returns the value of attribute railties_order.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def railties_order; end

  # Sets the attribute railties_order
  #
  # @param value the value to set the attribute railties_order to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def railties_order=(_arg0); end

  # Returns the value of attribute rake_eager_load.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def rake_eager_load; end

  # Sets the attribute rake_eager_load
  #
  # @param value the value to set the attribute rake_eager_load to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def rake_eager_load=(_arg0); end

  # Returns the value of attribute read_encrypted_secrets.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def read_encrypted_secrets; end

  # Sets the attribute read_encrypted_secrets
  #
  # @param value the value to set the attribute read_encrypted_secrets to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def read_encrypted_secrets=(_arg0); end

  # Returns the value of attribute relative_url_root.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def relative_url_root; end

  # Sets the attribute relative_url_root
  #
  # @param value the value to set the attribute relative_url_root to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def relative_url_root=(_arg0); end

  # Returns the value of attribute reload_classes_only_on_change.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def reload_classes_only_on_change; end

  # Sets the attribute reload_classes_only_on_change
  #
  # @param value the value to set the attribute reload_classes_only_on_change to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def reload_classes_only_on_change=(_arg0); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/application/configuration.rb#339
  def reloading_enabled?; end

  # Returns the value of attribute require_master_key.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def require_master_key; end

  # Sets the attribute require_master_key
  #
  # @param value the value to set the attribute require_master_key to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def require_master_key=(_arg0); end

  # Returns the value of attribute sandbox_by_default.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def sandbox_by_default; end

  # Sets the attribute sandbox_by_default
  #
  # @param value the value to set the attribute sandbox_by_default to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def sandbox_by_default=(_arg0); end

  # Returns the value of attribute secret_key_base.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def secret_key_base; end

  # Sets the attribute secret_key_base
  #
  # @param value the value to set the attribute secret_key_base to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def secret_key_base=(_arg0); end

  # Returns the value of attribute server_timing.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def server_timing; end

  # Sets the attribute server_timing
  #
  # @param value the value to set the attribute server_timing to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def server_timing=(_arg0); end

  # Returns the value of attribute session_options.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def session_options; end

  # Sets the attribute session_options
  #
  # @param value the value to set the attribute session_options to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def session_options=(_arg0); end

  # Specifies what class to use to store the session. Possible values
  # are +:cache_store+, +:cookie_store+, +:mem_cache_store+, a custom
  # store, or +:disabled+. +:disabled+ tells \Rails not to deal with
  # sessions.
  #
  # Additional options will be set as +session_options+:
  #
  #   config.session_store :cookie_store, key: "_your_app_session"
  #   config.session_options # => {key: "_your_app_session"}
  #
  # If a custom store is specified as a symbol, it will be resolved to
  # the +ActionDispatch::Session+ namespace:
  #
  #   # use ActionDispatch::Session::MyCustomStore as the session store
  #   config.session_store :my_custom_store
  #
  # source://railties//lib/rails/application/configuration.rb#512
  def session_store(new_session_store = T.unsafe(nil), **options); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/application/configuration.rb#528
  def session_store?; end

  # Returns the value of attribute ssl_options.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def ssl_options; end

  # Sets the attribute ssl_options
  #
  # @param value the value to set the attribute ssl_options to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def ssl_options=(_arg0); end

  # Returns the value of attribute time_zone.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def time_zone; end

  # Sets the attribute time_zone
  #
  # @param value the value to set the attribute time_zone to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def time_zone=(_arg0); end

  # Returns the value of attribute x.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def x; end

  # Sets the attribute x
  #
  # @param value the value to set the attribute x to.
  #
  # source://railties//lib/rails/application/configuration.rb#14
  def x=(_arg0); end

  private

  # source://railties//lib/rails/application/configuration.rb#591
  def credentials_defaults; end
end

# source://railties//lib/rails/application/configuration.rb#570
class Rails::Application::Configuration::Custom
  # @return [Custom] a new instance of Custom
  #
  # source://railties//lib/rails/application/configuration.rb#571
  def initialize; end

  # source://railties//lib/rails/application/configuration.rb#575
  def method_missing(method, *args); end

  private

  # @return [Boolean]
  #
  # source://railties//lib/rails/application/configuration.rb#585
  def respond_to_missing?(symbol, *_arg1); end
end

# source://railties//lib/rails/application/configuration.rb#351
Rails::Application::Configuration::ENABLE_DEPENDENCY_LOADING_WARNING = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/application/default_middleware_stack.rb#5
class Rails::Application::DefaultMiddlewareStack
  # @return [DefaultMiddlewareStack] a new instance of DefaultMiddlewareStack
  #
  # source://railties//lib/rails/application/default_middleware_stack.rb#8
  def initialize(app, config, paths); end

  # Returns the value of attribute app.
  #
  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def app; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#14
  def build_stack; end

  # Returns the value of attribute config.
  #
  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def config; end

  # Returns the value of attribute paths.
  #
  # source://railties//lib/rails/application/default_middleware_stack.rb#6
  def paths; end

  private

  # source://railties//lib/rails/application/default_middleware_stack.rb#109
  def load_rack_cache; end

  # source://railties//lib/rails/application/default_middleware_stack.rb#131
  def show_exceptions_app; end
end

# source://railties//lib/rails/application/finisher.rb#11
module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

# source://railties//lib/rails/application/finisher.rb#110
module Rails::Application::Finisher::InterlockHook
  class << self
    # source://railties//lib/rails/application/finisher.rb#115
    def complete(_state); end

    # source://railties//lib/rails/application/finisher.rb#111
    def run; end
  end
end

# source://railties//lib/rails/application/finisher.rb#96
class Rails::Application::Finisher::MonitorHook
  # @return [MonitorHook] a new instance of MonitorHook
  #
  # source://railties//lib/rails/application/finisher.rb#97
  def initialize(monitor = T.unsafe(nil)); end

  # source://railties//lib/rails/application/finisher.rb#105
  def complete(_state); end

  # source://railties//lib/rails/application/finisher.rb#101
  def run; end
end

# source://railties//lib/rails/application.rb#106
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/application/routes_reloader.rb#7
class Rails::Application::RoutesReloader
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker

  # @return [RoutesReloader] a new instance of RoutesReloader
  #
  # source://railties//lib/rails/application/routes_reloader.rb#15
  def initialize; end

  # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # Returns the value of attribute eager_load.
  #
  # source://railties//lib/rails/application/routes_reloader.rb#11
  def eager_load; end

  # Sets the attribute eager_load
  #
  # @param value the value to set the attribute eager_load to.
  #
  # source://railties//lib/rails/application/routes_reloader.rb#11
  def eager_load=(_arg0); end

  # source://railties//lib/rails/application/routes_reloader.rb#13
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/application/routes_reloader.rb#13
  def execute_if_updated(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute external_routes.
  #
  # source://railties//lib/rails/application/routes_reloader.rb#10
  def external_routes; end

  # Returns the value of attribute paths.
  #
  # source://railties//lib/rails/application/routes_reloader.rb#10
  def paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#22
  def reload!; end

  # Returns the value of attribute route_sets.
  #
  # source://railties//lib/rails/application/routes_reloader.rb#10
  def route_sets; end

  # source://railties//lib/rails/application/routes_reloader.rb#12
  def run_after_load_paths=(_arg0); end

  # source://railties//lib/rails/application/routes_reloader.rb#13
  def updated?(*_arg0, **_arg1, &_arg2); end

  private

  # source://railties//lib/rails/application/routes_reloader.rb#42
  def clear!; end

  # source://railties//lib/rails/application/routes_reloader.rb#58
  def finalize!; end

  # source://railties//lib/rails/application/routes_reloader.rb#49
  def load_paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#62
  def revert; end

  # source://railties//lib/rails/application/routes_reloader.rb#54
  def run_after_load_paths; end

  # source://railties//lib/rails/application/routes_reloader.rb#32
  def updater; end

  class << self
    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks?; end
  end
end

# source://railties//lib/rails/application_controller.rb#3
class Rails::ApplicationController < ::ActionController::Base
  private

  # source://actionview/7.1.1/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  # source://railties//lib/rails/application_controller.rb#25
  def disable_content_security_policy_nonce!; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/application_controller.rb#21
  def local_request?; end

  # source://railties//lib/rails/application_controller.rb#15
  def require_local!; end

  class << self
    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.1/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.1/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.1/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://railties//lib/rails/autoloaders.rb#4
class Rails::Autoloaders
  include ::Enumerable

  # @return [Autoloaders] a new instance of Autoloaders
  #
  # source://railties//lib/rails/autoloaders.rb#11
  def initialize; end

  # @yield [main]
  #
  # source://railties//lib/rails/autoloaders.rb#31
  def each; end

  # source://railties//lib/rails/autoloaders.rb#40
  def log!; end

  # source://railties//lib/rails/autoloaders.rb#36
  def logger=(logger); end

  # Returns the value of attribute main.
  #
  # source://railties//lib/rails/autoloaders.rb#9
  def main; end

  # Returns the value of attribute once.
  #
  # source://railties//lib/rails/autoloaders.rb#9
  def once; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/autoloaders.rb#44
  def zeitwerk_enabled?; end
end

# source://railties//lib/rails/autoloaders/inflector.rb#7
module Rails::Autoloaders::Inflector
  class << self
    # source://railties//lib/rails/autoloaders/inflector.rb#12
    def camelize(basename, _abspath); end

    # source://railties//lib/rails/autoloaders/inflector.rb#16
    def inflect(overrides); end
  end
end

# source://railties//lib/rails/backtrace_cleaner.rb#7
class Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  # @return [BacktraceCleaner] a new instance of BacktraceCleaner
  #
  # source://railties//lib/rails/backtrace_cleaner.rb#11
  def initialize; end
end

# source://railties//lib/rails/backtrace_cleaner.rb#8
Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://railties//lib/rails/backtrace_cleaner.rb#9
Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://railties//lib/rails/configuration.rb#9
module Rails::Configuration; end

# source://railties//lib/rails/configuration.rb#104
class Rails::Configuration::Generators
  # @return [Generators] a new instance of Generators
  #
  # source://railties//lib/rails/configuration.rb#108
  def initialize; end

  # source://railties//lib/rails/configuration.rb#130
  def after_generate(&block); end

  # Returns the value of attribute after_generate_callbacks.
  #
  # source://railties//lib/rails/configuration.rb#106
  def after_generate_callbacks; end

  # Returns the value of attribute aliases.
  #
  # source://railties//lib/rails/configuration.rb#105
  def aliases; end

  # Sets the attribute aliases
  #
  # @param value the value to set the attribute aliases to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def aliases=(_arg0); end

  # Returns the value of attribute api_only.
  #
  # source://railties//lib/rails/configuration.rb#105
  def api_only; end

  # Sets the attribute api_only
  #
  # @param value the value to set the attribute api_only to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def api_only=(_arg0); end

  # Returns the value of attribute colorize_logging.
  #
  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging; end

  # Sets the attribute colorize_logging
  #
  # @param value the value to set the attribute colorize_logging to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def colorize_logging=(_arg0); end

  # Returns the value of attribute fallbacks.
  #
  # source://railties//lib/rails/configuration.rb#105
  def fallbacks; end

  # Sets the attribute fallbacks
  #
  # @param value the value to set the attribute fallbacks to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def fallbacks=(_arg0); end

  # Returns the value of attribute hidden_namespaces.
  #
  # source://railties//lib/rails/configuration.rb#106
  def hidden_namespaces; end

  # source://railties//lib/rails/configuration.rb#126
  def hide_namespace(namespace); end

  # source://railties//lib/rails/configuration.rb#134
  def method_missing(method, *args); end

  # Returns the value of attribute options.
  #
  # source://railties//lib/rails/configuration.rb#105
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def options=(_arg0); end

  # Returns the value of attribute templates.
  #
  # source://railties//lib/rails/configuration.rb#105
  def templates; end

  # Sets the attribute templates
  #
  # @param value the value to set the attribute templates to.
  #
  # source://railties//lib/rails/configuration.rb#105
  def templates=(_arg0); end

  private

  # source://railties//lib/rails/configuration.rb#119
  def initialize_copy(source); end
end

# MiddlewareStackProxy is a proxy for the \Rails middleware stack that allows
# you to configure middlewares in your application. It works basically as a
# command recorder, saving each command to be applied after initialization
# over the default middleware stack, so you can add, swap, or remove any
# middleware in \Rails.
#
# You can add your own middlewares by using the +config.middleware.use+ method:
#
#     config.middleware.use Magical::Unicorns
#
# This will put the +Magical::Unicorns+ middleware on the end of the stack.
# You can use +insert_before+ if you wish to add a middleware before another:
#
#     config.middleware.insert_before Rack::Head, Magical::Unicorns
#
# There's also +insert_after+ which will insert a middleware after another:
#
#     config.middleware.insert_after Rack::Head, Magical::Unicorns
#
# Middlewares can also be completely swapped out and replaced with others:
#
#     config.middleware.swap ActionDispatch::Flash, Magical::Unicorns
#
# Middlewares can be moved from one place to another:
#
#     config.middleware.move_before ActionDispatch::Flash, Magical::Unicorns
#
# This will move the +Magical::Unicorns+ middleware before the
# +ActionDispatch::Flash+. You can also move it after:
#
#     config.middleware.move_after ActionDispatch::Flash, Magical::Unicorns
#
# And finally they can also be removed from the stack completely:
#
#     config.middleware.delete ActionDispatch::Flash
#
# source://railties//lib/rails/configuration.rb#46
class Rails::Configuration::MiddlewareStackProxy
  # @return [MiddlewareStackProxy] a new instance of MiddlewareStackProxy
  #
  # source://railties//lib/rails/configuration.rb#47
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  # source://railties//lib/rails/configuration.rb#96
  def +(other); end

  # source://railties//lib/rails/configuration.rb#70
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#58
  def insert_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#52
  def insert_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#88
  def merge_into(other); end

  # source://railties//lib/rails/configuration.rb#74
  def move(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#80
  def move_after(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#74
  def move_before(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#62
  def swap(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#84
  def unshift(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/configuration.rb#66
  def use(*_arg0, **_arg1, &_arg2); end

  protected

  # Returns the value of attribute delete_operations.
  #
  # source://railties//lib/rails/configuration.rb#101
  def delete_operations; end

  # Returns the value of attribute operations.
  #
  # source://railties//lib/rails/configuration.rb#101
  def operations; end
end

# +Rails::Engine+ allows you to wrap a specific \Rails application or subset of
# functionality and share it with other applications or within a larger packaged application.
# Every Rails::Application is just an engine, which allows for simple
# feature and application sharing.
#
# Any +Rails::Engine+ is also a Rails::Railtie, so the same
# methods (like <tt>rake_tasks</tt> and +generators+) and configuration
# options that are available in railties can also be used in engines.
#
# == Creating an Engine
#
# If you want a gem to behave as an engine, you have to specify an +Engine+
# for it somewhere inside your plugin's +lib+ folder (similar to how we
# specify a +Railtie+):
#
#   # lib/my_engine.rb
#   module MyEngine
#     class Engine < Rails::Engine
#     end
#   end
#
# Then ensure that this file is loaded at the top of your <tt>config/application.rb</tt>
# (or in your +Gemfile+), and it will automatically load models, controllers, and helpers
# inside +app+, load routes at <tt>config/routes.rb</tt>, load locales at
# <tt>config/locales/**/*</tt>, and load tasks at <tt>lib/tasks/**/*</tt>.
#
# == Configuration
#
# Like railties, engines can access a config object which contains configuration shared by
# all railties and the application.
# Additionally, each engine can access <tt>autoload_paths</tt>, <tt>eager_load_paths</tt> and
# <tt>autoload_once_paths</tt> settings which are scoped to that engine.
#
#   class MyEngine < Rails::Engine
#     # Add a load path for this specific Engine
#     config.autoload_paths << File.expand_path("lib/some/path", __dir__)
#
#     initializer "my_engine.add_middleware" do |app|
#       app.middleware.use MyEngine::Middleware
#     end
#   end
#
# == Generators
#
# You can set up generators for engines with <tt>config.generators</tt> method:
#
#   class MyEngine < Rails::Engine
#     config.generators do |g|
#       g.orm             :active_record
#       g.template_engine :erb
#       g.test_framework  :test_unit
#     end
#   end
#
# You can also set generators for an application by using <tt>config.app_generators</tt>:
#
#   class MyEngine < Rails::Engine
#     # note that you can also pass block to app_generators in the same way you
#     # can pass it to generators method
#     config.app_generators.orm :datamapper
#   end
#
# == Paths
#
# Applications and engines have flexible path configuration, meaning that you
# are not required to place your controllers at <tt>app/controllers</tt>, but
# in any place which you find convenient.
#
# For example, let's suppose you want to place your controllers in <tt>lib/controllers</tt>.
# You can set that as an option:
#
#   class MyEngine < Rails::Engine
#     paths["app/controllers"] = "lib/controllers"
#   end
#
# You can also have your controllers loaded from both <tt>app/controllers</tt> and
# <tt>lib/controllers</tt>:
#
#   class MyEngine < Rails::Engine
#     paths["app/controllers"] << "lib/controllers"
#   end
#
# The available paths in an engine are:
#
#   class MyEngine < Rails::Engine
#     paths["app"]                 # => ["app"]
#     paths["app/controllers"]     # => ["app/controllers"]
#     paths["app/helpers"]         # => ["app/helpers"]
#     paths["app/models"]          # => ["app/models"]
#     paths["app/views"]           # => ["app/views"]
#     paths["lib"]                 # => ["lib"]
#     paths["lib/tasks"]           # => ["lib/tasks"]
#     paths["config"]              # => ["config"]
#     paths["config/initializers"] # => ["config/initializers"]
#     paths["config/locales"]      # => ["config/locales"]
#     paths["config/routes.rb"]    # => ["config/routes.rb"]
#   end
#
# The <tt>Application</tt> class adds a couple more paths to this set. And as in your
# <tt>Application</tt>, all folders under +app+ are automatically added to the load path.
# If you have an <tt>app/services</tt> folder for example, it will be added by default.
#
# == Endpoint
#
# An engine can also be a Rack application. It can be useful if you have a Rack application that
# you would like to provide with some of the +Engine+'s features.
#
# To do that, use the +endpoint+ method:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       endpoint MyRackApplication
#     end
#   end
#
# Now you can mount your engine in application's routes:
#
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/engine"
#   end
#
# == Middleware stack
#
# As an engine can now be a Rack endpoint, it can also have a middleware
# stack. The usage is exactly the same as in <tt>Application</tt>:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       middleware.use SomeMiddleware
#     end
#   end
#
# == Routes
#
# If you don't specify an endpoint, routes will be used as the default
# endpoint. You can use them just like you use an application's routes:
#
#   # ENGINE/config/routes.rb
#   MyEngine::Engine.routes.draw do
#     get "/" => "posts#index"
#   end
#
# == Mount priority
#
# Note that now there can be more than one router in your application, and it's better to avoid
# passing requests through many routers. Consider this situation:
#
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/blog"
#     get "/blog/omg" => "main#omg"
#   end
#
# +MyEngine+ is mounted at <tt>/blog</tt>, and <tt>/blog/omg</tt> points to application's
# controller. In such a situation, requests to <tt>/blog/omg</tt> will go through +MyEngine+,
# and if there is no such route in +Engine+'s routes, it will be dispatched to <tt>main#omg</tt>.
# It's much better to swap that:
#
#   Rails.application.routes.draw do
#     get "/blog/omg" => "main#omg"
#     mount MyEngine::Engine => "/blog"
#   end
#
# Now, +Engine+ will get only requests that were not handled by +Application+.
#
# == Engine name
#
# There are some places where an Engine's name is used:
#
# * routes: when you mount an Engine with <tt>mount(MyEngine::Engine => '/my_engine')</tt>,
#   it's used as default <tt>:as</tt> option
# * rake task for installing migrations <tt>my_engine:install:migrations</tt>
#
# Engine name is set by default based on class name. For +MyEngine::Engine+ it will be
# <tt>my_engine_engine</tt>. You can change it manually using the <tt>engine_name</tt> method:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       engine_name "my_engine"
#     end
#   end
#
# == Isolated Engine
#
# Normally when you create controllers, helpers, and models inside an engine, they are treated
# as if they were created inside the application itself. This means that all helpers and
# named routes from the application will be available to your engine's controllers as well.
#
# However, sometimes you want to isolate your engine from the application, especially if your engine
# has its own router. To do that, you simply need to call +isolate_namespace+. This method requires
# you to pass a module where all your controllers, helpers, and models should be nested to:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       isolate_namespace MyEngine
#     end
#   end
#
# With such an engine, everything that is inside the +MyEngine+ module will be isolated from
# the application.
#
# Consider this controller:
#
#   module MyEngine
#     class FooController < ActionController::Base
#     end
#   end
#
# If the +MyEngine+ engine is marked as isolated, +FooController+ only has
# access to helpers from +MyEngine+, and <tt>url_helpers</tt> from
# <tt>MyEngine::Engine.routes</tt>.
#
# The next thing that changes in isolated engines is the behavior of routes.
# Normally, when you namespace your controllers, you also need to namespace
# the related routes. With an isolated engine, the engine's namespace is
# automatically applied, so you don't need to specify it explicitly in your
# routes:
#
#   MyEngine::Engine.routes.draw do
#     resources :articles
#   end
#
# If +MyEngine+ is isolated, the routes above will point to
# +MyEngine::ArticlesController+. You also don't need to use longer
# URL helpers like +my_engine_articles_path+. Instead, you should simply use
# +articles_path+, like you would do with your main application.
#
# To make this behavior consistent with other parts of the framework,
# isolated engines also have an effect on ActiveModel::Naming. In a
# normal \Rails app, when you use a namespaced model such as
# +Namespace::Article+, ActiveModel::Naming will generate
# names with the prefix "namespace". In an isolated engine, the prefix will
# be omitted in URL helpers and form fields, for convenience.
#
#   polymorphic_url(MyEngine::Article.new)
#   # => "articles_path" # not "my_engine_articles_path"
#
#   form_for(MyEngine::Article.new) do
#     text_field :title # => <input type="text" name="article[title]" id="article_title" />
#   end
#
# Additionally, an isolated engine will set its own name according to its
# namespace, so <tt>MyEngine::Engine.engine_name</tt> will return
# "my_engine". It will also set +MyEngine.table_name_prefix+ to "my_engine_",
# meaning for example that +MyEngine::Article+ will use the
# +my_engine_articles+ database table by default.
#
# == Using Engine's routes outside Engine
#
# Since you can now mount an engine inside application's routes, you do not have direct access to +Engine+'s
# <tt>url_helpers</tt> inside +Application+. When you mount an engine in an application's routes, a special helper is
# created to allow you to do that. Consider such a scenario:
#
#   # config/routes.rb
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/my_engine", as: "my_engine"
#     get "/foo" => "foo#index"
#   end
#
# Now, you can use the <tt>my_engine</tt> helper inside your application:
#
#   class FooController < ApplicationController
#     def index
#       my_engine.root_url # => /my_engine/
#     end
#   end
#
# There is also a <tt>main_app</tt> helper that gives you access to application's routes inside Engine:
#
#   module MyEngine
#     class BarController
#       def index
#         main_app.foo_path # => /foo
#       end
#     end
#   end
#
# Note that the <tt>:as</tt> option given to mount takes the <tt>engine_name</tt> as default, so most of the time
# you can simply omit it.
#
# Finally, if you want to generate a URL to an engine's route using
# <tt>polymorphic_url</tt>, you also need to pass the engine helper. Let's
# say that you want to create a form pointing to one of the engine's routes.
# All you need to do is pass the helper as the first element in array with
# attributes for URL:
#
#   form_for([my_engine, @user])
#
# This code will use <tt>my_engine.user_path(@user)</tt> to generate the proper route.
#
# == Isolated engine's helpers
#
# Sometimes you may want to isolate engine, but use helpers that are defined for it.
# If you want to share just a few specific helpers you can add them to application's
# helpers in ApplicationController:
#
#   class ApplicationController < ActionController::Base
#     helper MyEngine::SharedEngineHelper
#   end
#
# If you want to include all of the engine's helpers, you can use the #helper method on an engine's
# instance:
#
#   class ApplicationController < ActionController::Base
#     helper MyEngine::Engine.helpers
#   end
#
# It will include all of the helpers from engine's directory. Take into account this does
# not include helpers defined in controllers with helper_method or other similar solutions,
# only helpers defined in the helpers directory will be included.
#
# == Migrations & seed data
#
# Engines can have their own migrations. The default path for migrations is exactly the same
# as in application: <tt>db/migrate</tt>
#
# To use engine's migrations in application you can use the rake task below, which copies them to
# application's dir:
#
#   rake ENGINE_NAME:install:migrations
#
# Note that some of the migrations may be skipped if a migration with the same name already exists
# in application. In such a situation you must decide whether to leave that migration or rename the
# migration in the application and rerun copying migrations.
#
# If your engine has migrations, you may also want to prepare data for the database in
# the <tt>db/seeds.rb</tt> file. You can load that data using the <tt>load_seed</tt> method, e.g.
#
#   MyEngine::Engine.load_seed
#
# == Loading priority
#
# In order to change engine's priority you can use +config.railties_order+ in the main application.
# It will affect the priority of loading views, helpers, assets, and all the other files
# related to engine or application.
#
#   # load Blog::Engine with highest priority, followed by application and other railties
#   config.railties_order = [Blog::Engine, :main_app, :all]
#
# source://railties//lib/rails/engine/railties.rb#4
class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # @return [Engine] a new instance of Engine
  #
  # source://railties//lib/rails/engine.rb#432
  def initialize; end

  # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://activesupport/7.1.1/lib/active_support/callbacks.rb#963
  def _load_seed_callbacks; end

  # source://activesupport/7.1.1/lib/active_support/callbacks.rb#951
  def _run_load_seed_callbacks(&block); end

  # Returns the underlying Rack application for this engine.
  #
  # source://railties//lib/rails/engine.rb#510
  def app; end

  # Define the Rack API for this engine.
  #
  # source://railties//lib/rails/engine.rb#527
  def call(env); end

  # Define the configuration object for the engine.
  #
  # source://railties//lib/rails/engine.rb#546
  def config; end

  # source://railties//lib/rails/engine.rb#484
  def eager_load!; end

  # Returns the endpoint for this engine. If none is registered,
  # defaults to an ActionDispatch::Routing::RouteSet.
  #
  # source://railties//lib/rails/engine.rb#522
  def endpoint; end

  # source://railties//lib/rails/engine.rb#430
  def engine_name(*_arg0, **_arg1, &_arg2); end

  # Defines additional Rack env configuration that is added on each call.
  #
  # source://railties//lib/rails/engine.rb#533
  def env_config; end

  # Returns a module with all the helpers defined for the engine.
  #
  # source://railties//lib/rails/engine.rb#494
  def helpers; end

  # Returns all registered helpers paths.
  #
  # source://railties//lib/rails/engine.rb#505
  def helpers_paths; end

  # source://railties//lib/rails/engine.rb#430
  def isolated?(&block); end

  # Load console and invoke the registered hooks.
  # Check Rails::Railtie.console for more info.
  #
  # source://railties//lib/rails/engine.rb#446
  def load_console(app = T.unsafe(nil)); end

  # Load \Rails generators and invoke the registered hooks.
  # Check Rails::Railtie.generators for more info.
  #
  # source://railties//lib/rails/engine.rb#470
  def load_generators(app = T.unsafe(nil)); end

  # Load \Rails runner and invoke the registered hooks.
  # Check Rails::Railtie.runner for more info.
  #
  # source://railties//lib/rails/engine.rb#455
  def load_runner(app = T.unsafe(nil)); end

  # Load data from db/seeds.rb file. It can be used in to load engines'
  # seeds, e.g.:
  #
  # Blog::Engine.load_seed
  #
  # source://railties//lib/rails/engine.rb#554
  def load_seed; end

  # Invoke the server registered hooks.
  # Check Rails::Railtie.server for more info.
  #
  # source://railties//lib/rails/engine.rb#479
  def load_server(app = T.unsafe(nil)); end

  # Load Rake and railties tasks, and invoke the registered hooks.
  # Check Rails::Railtie.rake_tasks for more info.
  #
  # source://railties//lib/rails/engine.rb#462
  def load_tasks(app = T.unsafe(nil)); end

  # source://railties//lib/rails/engine.rb#429
  def middleware(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/engine.rb#429
  def paths(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/engine.rb#489
  def railties; end

  # source://railties//lib/rails/engine.rb#429
  def root(*_arg0, **_arg1, &_arg2); end

  # Defines the routes for this engine. If a block is given to
  # routes, it is appended to the engine.
  #
  # source://railties//lib/rails/engine.rb#539
  def routes(&block); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/engine.rb#670
  def routes?; end

  protected

  # source://railties//lib/rails/engine.rb#675
  def run_tasks_blocks(*_arg0); end

  private

  # source://railties//lib/rails/engine.rb#707
  def _all_autoload_once_paths; end

  # source://railties//lib/rails/engine.rb#711
  def _all_autoload_paths; end

  # source://railties//lib/rails/engine.rb#720
  def _all_load_paths(add_autoload_paths_to_load_path); end

  # source://railties//lib/rails/engine.rb#744
  def build_middleware; end

  # source://railties//lib/rails/engine.rb#736
  def build_request(env); end

  # source://railties//lib/rails/engine.rb#703
  def default_middleware_stack; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/engine.rb#731
  def fixtures_in_root_and_not_in_vendor?(fixtures); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/engine.rb#687
  def has_migrations?; end

  # source://railties//lib/rails/engine.rb#681
  def load_config_initializer(initializer); end

  class << self
    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#955
    def _load_seed_callbacks; end

    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#959
    def _load_seed_callbacks=(value); end

    # Returns the value of attribute called_from.
    #
    # source://railties//lib/rails/engine.rb#353
    def called_from; end

    # Sets the attribute called_from
    #
    # @param value the value to set the attribute called_from to.
    #
    # source://railties//lib/rails/engine.rb#353
    def called_from=(_arg0); end

    # source://railties//lib/rails/engine.rb#358
    def eager_load!(*_arg0, **_arg1, &_arg2); end

    # source://railties//lib/rails/engine.rb#378
    def endpoint(endpoint = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#176
    def engine_name(name = T.unsafe(nil)); end

    # Finds engine with given path.
    #
    # source://railties//lib/rails/engine.rb#416
    def find(path); end

    # source://railties//lib/rails/engine.rb#374
    def find_root(from); end

    # source://railties//lib/rails/engine.rb#691
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # @private
    #
    # source://railties//lib/rails/engine.rb#360
    def inherited(base); end

    # source://railties//lib/rails/engine.rb#384
    def isolate_namespace(mod); end

    # Returns the value of attribute isolated.
    #
    # source://railties//lib/rails/engine.rb#353
    def isolated; end

    # Sets the attribute isolated
    #
    # @param value the value to set the attribute isolated to.
    #
    # source://railties//lib/rails/engine.rb#353
    def isolated=(_arg0); end

    # Returns the value of attribute isolated.
    #
    # source://railties//lib/rails/engine.rb#353
    def isolated?; end
  end
end

# source://railties//lib/rails/engine/configuration.rb#7
class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://railties//lib/rails/engine/configuration.rb#12
  def initialize(root = T.unsafe(nil)); end

  # source://railties//lib/rails/engine/configuration.rb#88
  def autoload_once_paths; end

  # Sets the attribute autoload_once_paths
  #
  # @param value the value to set the attribute autoload_once_paths to.
  #
  # source://railties//lib/rails/engine/configuration.rb#10
  def autoload_once_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#92
  def autoload_paths; end

  # Sets the attribute autoload_paths
  #
  # @param value the value to set the attribute autoload_paths to.
  #
  # source://railties//lib/rails/engine/configuration.rb#10
  def autoload_paths=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#84
  def eager_load_paths; end

  # Sets the attribute eager_load_paths
  #
  # @param value the value to set the attribute eager_load_paths to.
  #
  # source://railties//lib/rails/engine/configuration.rb#10
  def eager_load_paths=(_arg0); end

  # Holds generators configuration:
  #
  #   config.generators do |g|
  #     g.orm             :data_mapper, migration: true
  #     g.template_engine :haml
  #     g.test_framework  :rspec
  #   end
  #
  # If you want to disable color in console, do:
  #
  #   config.generators.colorize_logging = false
  #
  # @yield [@generators]
  #
  # source://railties//lib/rails/engine/configuration.rb#32
  def generators; end

  # Returns the value of attribute javascript_path.
  #
  # source://railties//lib/rails/engine/configuration.rb#9
  def javascript_path; end

  # Sets the attribute javascript_path
  #
  # @param value the value to set the attribute javascript_path to.
  #
  # source://railties//lib/rails/engine/configuration.rb#9
  def javascript_path=(_arg0); end

  # Returns the value of attribute middleware.
  #
  # source://railties//lib/rails/engine/configuration.rb#9
  def middleware; end

  # Sets the attribute middleware
  #
  # @param value the value to set the attribute middleware to.
  #
  # source://railties//lib/rails/engine/configuration.rb#9
  def middleware=(_arg0); end

  # source://railties//lib/rails/engine/configuration.rb#38
  def paths; end

  # Returns the value of attribute root.
  #
  # source://railties//lib/rails/engine/configuration.rb#8
  def root; end

  # source://railties//lib/rails/engine/configuration.rb#80
  def root=(value); end
end

# source://railties//lib/rails/engine/railties.rb#5
class Rails::Engine::Railties
  include ::Enumerable

  # @return [Railties] a new instance of Railties
  #
  # source://railties//lib/rails/engine/railties.rb#9
  def initialize; end

  # source://railties//lib/rails/engine/railties.rb#18
  def -(others); end

  # Returns the value of attribute _all.
  #
  # source://railties//lib/rails/engine/railties.rb#7
  def _all; end

  # source://railties//lib/rails/engine/railties.rb#14
  def each(*args, &block); end
end

# Built-in Health Check Endpoint
#
# \Rails also comes with a built-in health check endpoint that is reachable at
# the +/up+ path. This endpoint will return a 200 status code if the app has
# booted with no exceptions, and a 500 status code otherwise.
#
# In production, many applications are required to report their status upstream,
# whether it's to an uptime monitor that will page an engineer when things go
# wrong, or a load balancer or Kubernetes controller used to determine a pod's
# health. This health check is designed to be a one-size fits all that will work
# in many situations.
#
# While any newly generated \Rails applications will have the health check at
# +/up+, you can configure the path to be anything you'd like in your
# <tt>"config/routes.rb"</tt>:
#
#   Rails.application.routes.draw do
#     get "healthz" => "rails/health#show", as: :rails_health_check
#   end
#
# The health check will now be accessible via the +/healthz+ path.
#
# NOTE: This endpoint does not reflect the status of all of your application's
# dependencies, such as the database or redis cluster. Replace
# <tt>"rails/health#show"</tt> with your own controller action if you have
# application specific needs.
#
# Think carefully about what you want to check as it can lead to situations
# where your application is being restarted due to a third-party service going
# bad. Ideally, you should design your application to handle those outages
# gracefully.
#
# source://railties//lib/rails/health_controller.rb#35
class Rails::HealthController < ::ActionController::Base
  # source://railties//lib/rails/health_controller.rb#38
  def show; end

  private

  # source://actionview/7.1.1/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  # source://railties//lib/rails/health_controller.rb#51
  def html_status(color:); end

  # source://railties//lib/rails/health_controller.rb#47
  def render_down; end

  # source://railties//lib/rails/health_controller.rb#43
  def render_up; end

  class << self
    # source://actionpack/7.1.1/lib/action_controller/metal.rb#262
    def middleware_stack; end

    # source://activesupport/7.1.1/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

# This module helps build the runtime properties that are displayed in
# Rails::InfoController responses. These include the active \Rails version,
# Ruby version, Rack version, and so on.
#
# source://railties//lib/rails/info.rb#9
module Rails::Info
  # source://railties//lib/rails/info.rb#10
  def properties; end

  # source://railties//lib/rails/info.rb#10
  def properties=(val); end

  class << self
    # source://railties//lib/rails/info.rb#31
    def inspect; end

    # source://railties//lib/rails/info.rb#10
    def properties; end

    # source://railties//lib/rails/info.rb#10
    def properties=(val); end

    # source://railties//lib/rails/info.rb#25
    def property(name, value = T.unsafe(nil)); end

    # source://railties//lib/rails/info.rb#43
    def to_html; end

    # source://railties//lib/rails/info.rb#31
    def to_s; end
  end
end

# source://railties//lib/rails/info_controller.rb#6
class Rails::InfoController < ::Rails::ApplicationController
  # source://railties//lib/rails/info_controller.rb#12
  def index; end

  # source://railties//lib/rails/info_controller.rb#16
  def properties; end

  # source://railties//lib/rails/info_controller.rb#21
  def routes; end

  private

  # source://actionview/7.1.1/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/info_controller.rb#8
  def _layout_from_proc; end

  # source://railties//lib/rails/info_controller.rb#36
  def matching_routes(query:, exact_match:); end

  class << self
    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.1/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.1/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.1/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://railties//lib/rails/initializable.rb#6
module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  # source://railties//lib/rails/initializable.rb#66
  def initializers; end

  # source://railties//lib/rails/initializable.rb#58
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    # source://railties//lib/rails/initializable.rb#7
    def included(base); end
  end
end

# source://railties//lib/rails/initializable.rb#70
module Rails::Initializable::ClassMethods
  # @raise [ArgumentError]
  #
  # source://railties//lib/rails/initializable.rb#88
  def initializer(name, opts = T.unsafe(nil), &blk); end

  # source://railties//lib/rails/initializable.rb#71
  def initializers; end

  # source://railties//lib/rails/initializable.rb#75
  def initializers_chain; end

  # source://railties//lib/rails/initializable.rb#84
  def initializers_for(binding); end
end

# source://railties//lib/rails/initializable.rb#45
class Rails::Initializable::Collection < ::Array
  include ::TSort

  # source://railties//lib/rails/initializable.rb#53
  def +(other); end

  # source://railties//lib/rails/initializable.rb#49
  def tsort_each_child(initializer, &block); end

  def tsort_each_node; end
end

# source://railties//lib/rails/initializable.rb#11
class Rails::Initializable::Initializer
  # @return [Initializer] a new instance of Initializer
  #
  # source://railties//lib/rails/initializable.rb#14
  def initialize(name, context, options, &block); end

  # source://railties//lib/rails/initializable.rb#23
  def after; end

  # source://railties//lib/rails/initializable.rb#19
  def before; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/initializable.rb#27
  def belongs_to?(group); end

  # source://railties//lib/rails/initializable.rb#35
  def bind(context); end

  # Returns the value of attribute block.
  #
  # source://railties//lib/rails/initializable.rb#12
  def block; end

  # source://railties//lib/rails/initializable.rb#40
  def context_class; end

  # Returns the value of attribute name.
  #
  # source://railties//lib/rails/initializable.rb#12
  def name; end

  # source://railties//lib/rails/initializable.rb#31
  def run(*args); end
end

# source://railties//lib/rails/test_unit/line_filtering.rb#6
module Rails::LineFiltering
  # source://railties//lib/rails/test_unit/line_filtering.rb#7
  def run(reporter, options = T.unsafe(nil)); end
end

# source://railties//lib/rails/mailers_controller.rb#5
class Rails::MailersController < ::Rails::ApplicationController
  # source://railties//lib/rails/mailers_controller.rb#21
  def download; end

  # source://railties//lib/rails/mailers_controller.rb#16
  def index; end

  # source://railties//lib/rails/mailers_controller.rb#31
  def preview; end

  private

  # source://actionview/7.1.1/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  # source://railties//lib/rails/mailers_controller.rb#90
  def find_part(format); end

  # source://railties//lib/rails/mailers_controller.rb#78
  def find_preferred_part(*formats); end

  # source://railties//lib/rails/mailers_controller.rb#66
  def find_preview; end

  # source://railties//lib/rails/mailers_controller.rb#102
  def locale_query(locale); end

  # source://railties//lib/rails/mailers_controller.rb#98
  def part_query(mime_type); end

  # source://railties//lib/rails/mailers_controller.rb#106
  def set_locale(&block); end

  # @return [Boolean]
  #
  # source://railties//lib/rails/mailers_controller.rb#62
  def show_previews?; end

  class << self
    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionpack/7.1.1/lib/abstract_controller/helpers.rb#12
    def _helper_methods; end

    # source://actionpack/7.1.1/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://railties//lib/rails/mailers_controller.rb#0
module Rails::MailersController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper
  include ::ViteRails::TagHelpers
  include ::ActionController::Base::HelperMethods

  # source://railties//lib/rails/mailers_controller.rb#12
  def locale_query(*args, **_arg1, &block); end

  # source://railties//lib/rails/mailers_controller.rb#12
  def part_query(*args, **_arg1, &block); end
end

# source://railties//lib/rails/paths.rb#6
module Rails::Paths; end

# source://railties//lib/rails/paths.rb#114
class Rails::Paths::Path
  include ::Enumerable

  # @return [Path] a new instance of Path
  #
  # source://railties//lib/rails/paths.rb#119
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#171
  def <<(path); end

  # source://railties//lib/rails/paths.rb#132
  def absolute_current; end

  # source://railties//lib/rails/paths.rb#153
  def autoload!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload?; end

  # source://railties//lib/rails/paths.rb#153
  def autoload_once!; end

  # source://railties//lib/rails/paths.rb#161
  def autoload_once?; end

  # source://railties//lib/rails/paths.rb#136
  def children; end

  # source://railties//lib/rails/paths.rb#176
  def concat(paths); end

  # source://railties//lib/rails/paths.rb#167
  def each(&block); end

  # source://railties//lib/rails/paths.rb#153
  def eager_load!; end

  # source://railties//lib/rails/paths.rb#161
  def eager_load?; end

  # Returns all expanded paths but only if they exist in the filesystem.
  #
  # source://railties//lib/rails/paths.rb#220
  def existent; end

  # source://railties//lib/rails/paths.rb#231
  def existent_directories; end

  # Expands all paths against the root and return all unique values.
  #
  # source://railties//lib/rails/paths.rb#201
  def expanded; end

  # source://railties//lib/rails/paths.rb#196
  def extensions; end

  # source://railties//lib/rails/paths.rb#143
  def first; end

  # Returns the value of attribute glob.
  #
  # source://railties//lib/rails/paths.rb#117
  def glob; end

  # Sets the attribute glob
  #
  # @param value the value to set the attribute glob to.
  #
  # source://railties//lib/rails/paths.rb#117
  def glob=(_arg0); end

  # source://railties//lib/rails/paths.rb#147
  def last; end

  # source://railties//lib/rails/paths.rb#153
  def load_path!; end

  # source://railties//lib/rails/paths.rb#161
  def load_path?; end

  # source://railties//lib/rails/paths.rb#188
  def paths; end

  # source://railties//lib/rails/paths.rb#171
  def push(path); end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_autoload_once!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_eager_load!; end

  # source://railties//lib/rails/paths.rb#157
  def skip_load_path!; end

  # Expands all paths against the root and return all unique values.
  #
  # source://railties//lib/rails/paths.rb#201
  def to_a; end

  # source://railties//lib/rails/paths.rb#184
  def to_ary; end

  # source://railties//lib/rails/paths.rb#180
  def unshift(*paths); end

  private

  # source://railties//lib/rails/paths.rb#238
  def files_in(path); end
end

# This object is an extended hash that behaves as root of the Rails::Paths system.
# It allows you to collect information about how you want to structure your application
# paths through a Hash-like \API. It requires you to give a physical path on initialization.
#
#   root = Root.new "/rails"
#   root.add "app/controllers", eager_load: true
#
# The above command creates a new root object and adds "app/controllers" as a path.
# This means we can get a Rails::Paths::Path object back like below:
#
#   path = root["app/controllers"]
#   path.eager_load?               # => true
#   path.is_a?(Rails::Paths::Path) # => true
#
# The Path[rdoc-ref:Rails::Paths::Path] object is simply an enumerable and
# allows you to easily add extra paths:
#
#   path.is_a?(Enumerable) # => true
#   path.to_ary.inspect    # => ["app/controllers"]
#
#   path << "lib/controllers"
#   path.to_ary.inspect    # => ["app/controllers", "lib/controllers"]
#
# Notice that when you add a path using #add, the
# Path[rdoc-ref:Rails::Paths::Path] object created already contains the path
# with the same path value given to #add. In some situations, you may not
# want this behavior, so you can give <tt>:with</tt> as option.
#
#   root.add "config/routes", with: "config/routes.rb"
#   root["config/routes"].inspect # => ["config/routes.rb"]
#
# The #add method accepts the following options as arguments:
# +eager_load+, +autoload+, +autoload_once+, and +glob+.
#
# Finally, the Path[rdoc-ref:Rails::Paths::Path] object also provides a few
# helpers:
#
#   root = Root.new "/rails"
#   root.add "app/controllers"
#
#   root["app/controllers"].expanded # => ["/rails/app/controllers"]
#   root["app/controllers"].existent # => ["/rails/app/controllers"]
#
# Check the Rails::Paths::Path documentation for more information.
#
# source://railties//lib/rails/paths.rb#51
class Rails::Paths::Root
  # @return [Root] a new instance of Root
  #
  # source://railties//lib/rails/paths.rb#54
  def initialize(path); end

  # source://railties//lib/rails/paths.rb#69
  def [](path); end

  # source://railties//lib/rails/paths.rb#59
  def []=(path, value); end

  # source://railties//lib/rails/paths.rb#64
  def add(path, options = T.unsafe(nil)); end

  # source://railties//lib/rails/paths.rb#85
  def all_paths; end

  # source://railties//lib/rails/paths.rb#89
  def autoload_once; end

  # source://railties//lib/rails/paths.rb#97
  def autoload_paths; end

  # source://railties//lib/rails/paths.rb#93
  def eager_load; end

  # source://railties//lib/rails/paths.rb#77
  def keys; end

  # source://railties//lib/rails/paths.rb#101
  def load_paths; end

  # Returns the value of attribute path.
  #
  # source://railties//lib/rails/paths.rb#52
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://railties//lib/rails/paths.rb#52
  def path=(_arg0); end

  # source://railties//lib/rails/paths.rb#73
  def values; end

  # source://railties//lib/rails/paths.rb#81
  def values_at(*list); end

  private

  # source://railties//lib/rails/paths.rb#106
  def filter_by(&block); end
end

# source://railties//lib/rails/rack.rb#4
module Rails::Rack; end

# Sets log tags, logs the request, calls the app, and flushes the logs.
#
# Log tags (+taggers+) can be an Array containing: methods that the +request+
# object responds to, objects that respond to +to_s+ or Proc objects that accept
# an instance of the +request+ object.
#
# source://railties//lib/rails/rack/logger.rb#14
class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # @return [Logger] a new instance of Logger
  #
  # source://railties//lib/rails/rack/logger.rb#15
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://railties//lib/rails/rack/logger.rb#20
  def call(env); end

  private

  # source://railties//lib/rails/rack/logger.rb#31
  def call_app(request, env); end

  # source://railties//lib/rails/rack/logger.rb#62
  def compute_tags(request); end

  # source://railties//lib/rails/rack/logger.rb#75
  def logger; end

  # Started GET "/session/new" for 127.0.0.1 at 2012-09-26 14:51:42 -0700
  #
  # source://railties//lib/rails/rack/logger.rb#54
  def started_request_message(request); end
end

# +Rails::Railtie+ is the core of the \Rails framework and provides
# several hooks to extend \Rails and/or modify the initialization process.
#
# Every major component of \Rails (Action Mailer, Action Controller, Active
# Record, etc.) implements a railtie. Each of them is responsible for their
# own initialization. This makes \Rails itself absent of any component hooks,
# allowing other components to be used in place of any of the \Rails defaults.
#
# Developing a \Rails extension does _not_ require implementing a railtie, but
# if you need to interact with the \Rails framework during or after boot, then
# a railtie is needed.
#
# For example, an extension doing any of the following would need a railtie:
#
# * creating initializers
# * configuring a \Rails framework for the application, like setting a generator
# * adding <tt>config.*</tt> keys to the environment
# * setting up a subscriber with ActiveSupport::Notifications
# * adding Rake tasks
#
# == Creating a Railtie
#
# To extend \Rails using a railtie, create a subclass of +Rails::Railtie+.
# This class must be loaded during the \Rails boot process, and is conventionally
# called +MyNamespace::Railtie+.
#
# The following example demonstrates an extension which can be used with or
# without \Rails.
#
#   # lib/my_gem/railtie.rb
#   module MyGem
#     class Railtie < Rails::Railtie
#     end
#   end
#
#   # lib/my_gem.rb
#   require "my_gem/railtie" if defined?(Rails::Railtie)
#
# == Initializers
#
# To add an initialization step to the \Rails boot process from your railtie, just
# define the initialization code with the +initializer+ macro:
#
#   class MyRailtie < Rails::Railtie
#     initializer "my_railtie.configure_rails_initialization" do
#       # some initialization behavior
#     end
#   end
#
# If specified, the block can also receive the application object, in case you
# need to access some application-specific configuration, like middleware:
#
#   class MyRailtie < Rails::Railtie
#     initializer "my_railtie.configure_rails_initialization" do |app|
#       app.middleware.use MyRailtie::Middleware
#     end
#   end
#
# Finally, you can also pass <tt>:before</tt> and <tt>:after</tt> as options to
# +initializer+, in case you want to couple it with a specific step in the
# initialization process.
#
# == Configuration
#
# Railties can access a config object which contains configuration shared by all
# railties and the application:
#
#   class MyRailtie < Rails::Railtie
#     # Customize the ORM
#     config.app_generators.orm :my_railtie_orm
#
#     # Add a to_prepare block which is executed once in production
#     # and before each request in development.
#     config.to_prepare do
#       MyRailtie.setup!
#     end
#   end
#
# == Loading Rake Tasks and Generators
#
# If your railtie has Rake tasks, you can tell \Rails to load them through the method
# +rake_tasks+:
#
#   class MyRailtie < Rails::Railtie
#     rake_tasks do
#       load "path/to/my_railtie.tasks"
#     end
#   end
#
# By default, \Rails loads generators from your load path. However, if you want to place
# your generators at a different location, you can specify in your railtie a block which
# will load them during normal generators lookup:
#
#   class MyRailtie < Rails::Railtie
#     generators do
#       require "path/to/my_railtie_generator"
#     end
#   end
#
# Since filenames on the load path are shared across gems, be sure that files you load
# through a railtie have unique names.
#
# == Run another program when the \Rails server starts
#
# In development, it's very usual to have to run another process next to the \Rails Server. In example
# you might want to start the Webpack or React server. Or maybe you need to run your job scheduler process
# like Sidekiq. This is usually done by opening a new shell and running the program from here.
#
# \Rails allow you to specify a +server+ block which will get called when a \Rails server starts.
# This way, your users don't need to remember to have to open a new shell and run another program, making
# this less confusing for everyone.
# It can be used like this:
#
#   class MyRailtie < Rails::Railtie
#     server do
#       WebpackServer.start
#     end
#   end
#
# == Application and Engine
#
# An engine is nothing more than a railtie with some initializers already set. And since
# Rails::Application is an engine, the same configuration described here can be
# used in both.
#
# Be sure to look at the documentation of those specific classes for more information.
#
# source://railties//lib/rails/railtie.rb#136
class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # @return [Railtie] a new instance of Railtie
  #
  # source://railties//lib/rails/railtie.rb#246
  def initialize; end

  # This is used to create the <tt>config</tt> object on Railties, an instance of
  # Railtie::Configuration, that is used by Railties and Application to store
  # related configuration.
  #
  # source://railties//lib/rails/railtie.rb#263
  def config; end

  # source://railties//lib/rails/railtie.rb#256
  def configure(&block); end

  # source://railties//lib/rails/railtie.rb#252
  def inspect; end

  # source://railties//lib/rails/railtie.rb#244
  def railtie_name(*_arg0, **_arg1, &_arg2); end

  # source://railties//lib/rails/railtie.rb#267
  def railtie_namespace; end

  protected

  # source://railties//lib/rails/railtie.rb#272
  def run_console_blocks(app); end

  # source://railties//lib/rails/railtie.rb#276
  def run_generators_blocks(app); end

  # source://railties//lib/rails/railtie.rb#280
  def run_runner_blocks(app); end

  # source://railties//lib/rails/railtie.rb#289
  def run_server_blocks(app); end

  # source://railties//lib/rails/railtie.rb#284
  def run_tasks_blocks(app); end

  private

  # run `&block` in every registered block in `#register_block_for`
  #
  # source://railties//lib/rails/railtie.rb#295
  def each_registered_block(type, &block); end

  class << self
    # source://railties//lib/rails/railtie.rb#194
    def <=>(other); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/railtie.rb#172
    def abstract_railtie?; end

    # source://railties//lib/rails/railtie.rb#146
    def config(*_arg0, **_arg1, &_arg2); end

    # Allows you to configure the railtie. This is the same method seen in
    # Railtie::Configurable, but this module is no longer required for all
    # subclasses of Railtie so we provide the class method here.
    #
    # source://railties//lib/rails/railtie.rb#190
    def configure(&block); end

    # source://railties//lib/rails/railtie.rb#156
    def console(&blk); end

    # source://railties//lib/rails/railtie.rb#164
    def generators(&blk); end

    # @private
    #
    # source://railties//lib/rails/railtie.rb#198
    def inherited(subclass); end

    # Since Rails::Railtie cannot be instantiated, any methods that call
    # +instance+ are intended to be called only on subclasses of a Railtie.
    #
    # source://railties//lib/rails/railtie.rb#183
    def instance; end

    # source://railties//lib/rails/railtie.rb#176
    def railtie_name(name = T.unsafe(nil)); end

    # source://railties//lib/rails/railtie.rb#152
    def rake_tasks(&blk); end

    # source://railties//lib/rails/railtie.rb#160
    def runner(&blk); end

    # source://railties//lib/rails/railtie.rb#168
    def server(&blk); end

    # source://railties//lib/rails/railtie.rb#148
    def subclasses; end

    protected

    # source://railties//lib/rails/railtie.rb#206
    def increment_load_index; end

    # Returns the value of attribute load_index.
    #
    # source://railties//lib/rails/railtie.rb#204
    def load_index; end

    private

    # source://railties//lib/rails/railtie.rb#212
    def generate_railtie_name(string); end

    # If the class method does not have a method, then send the method call
    # to the Railtie instance.
    #
    # source://railties//lib/rails/railtie.rb#224
    def method_missing(name, *args, **_arg2, &block); end

    def new(*_arg0); end

    # receives an instance variable identifier, set the variable value if is
    # blank and append given block to value, which will be used later in
    # `#each_registered_block(type, &block)`
    #
    # source://railties//lib/rails/railtie.rb#236
    def register_block_for(type, &blk); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/railtie.rb#216
    def respond_to_missing?(name, _); end
  end
end

# source://railties//lib/rails/railtie.rb#142
Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

# source://railties//lib/rails/railtie/configuration.rb#7
class Rails::Railtie::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://railties//lib/rails/railtie/configuration.rb#8
  def initialize; end

  # Last configurable block to run. Called after frameworks initialize.
  #
  # source://railties//lib/rails/railtie/configuration.rb#70
  def after_initialize(&block); end

  # Called after application routes have been loaded.
  #
  # source://railties//lib/rails/railtie/configuration.rb#75
  def after_routes_loaded(&block); end

  # This allows you to modify application's generators from Railties.
  #
  # Values set on app_generators will become defaults for application, unless
  # application overwrites them.
  #
  # @yield [@@app_generators]
  #
  # source://railties//lib/rails/railtie/configuration.rb#47
  def app_generators; end

  # This allows you to modify the application's middlewares from Engines.
  #
  # All operations you run on the app_middleware will be replayed on the
  # application once it is defined and the default_middlewares are
  # created
  #
  # source://railties//lib/rails/railtie/configuration.rb#39
  def app_middleware; end

  # First configurable block to run. Called before any initializers are run.
  #
  # source://railties//lib/rails/railtie/configuration.rb#54
  def before_configuration(&block); end

  # Third configurable block to run. Does not run if +config.eager_load+
  # set to false.
  #
  # source://railties//lib/rails/railtie/configuration.rb#60
  def before_eager_load(&block); end

  # Second configurable block to run. Called before frameworks initialize.
  #
  # source://railties//lib/rails/railtie/configuration.rb#65
  def before_initialize(&block); end

  # All namespaces that are eager loaded
  #
  # source://railties//lib/rails/railtie/configuration.rb#18
  def eager_load_namespaces; end

  # @return [Boolean]
  #
  # source://railties//lib/rails/railtie/configuration.rb#90
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # Defines generic callbacks to run before #after_initialize. Useful for
  # Rails::Railtie subclasses.
  #
  # source://railties//lib/rails/railtie/configuration.rb#86
  def to_prepare(&blk); end

  # Array of callbacks defined by #to_prepare.
  #
  # source://railties//lib/rails/railtie/configuration.rb#80
  def to_prepare_blocks; end

  # Add directories that should be watched for change.
  # The key of the hashes should be directories and the values should
  # be an array of extensions to match in each directory.
  #
  # source://railties//lib/rails/railtie/configuration.rb#30
  def watchable_dirs; end

  # Add files that should be watched for change.
  #
  # source://railties//lib/rails/railtie/configuration.rb#23
  def watchable_files; end

  private

  # @return [Boolean]
  #
  # source://railties//lib/rails/railtie/configuration.rb#95
  def actual_method?(key); end

  # source://railties//lib/rails/railtie/configuration.rb#99
  def method_missing(name, *args, &blk); end

  class << self
    # Expose the eager_load_namespaces at "module" level for convenience.
    #
    # source://railties//lib/rails/railtie/configuration.rb#13
    def eager_load_namespaces; end
  end
end

# Greatly inspired by Ara T. Howard's magnificent sekrets gem. 😘
#
# source://railties//lib/rails/secrets.rb#9
class Rails::Secrets
  class << self
    # source://railties//lib/rails/secrets.rb#46
    def decrypt(data); end

    # source://railties//lib/rails/secrets.rb#42
    def encrypt(data); end

    # source://railties//lib/rails/secrets.rb#38
    def key; end

    # source://railties//lib/rails/secrets.rb#25
    def parse(paths, env:); end

    # source://railties//lib/rails/secrets.rb#50
    def read; end

    # source://railties//lib/rails/secrets.rb#59
    def read_for_editing(&block); end

    # Sets the attribute root
    #
    # @param value the value to set the attribute root to.
    #
    # source://railties//lib/rails/secrets.rb#23
    def root=(_arg0); end

    # source://railties//lib/rails/secrets.rb#54
    def write(contents); end

    private

    # source://railties//lib/rails/secrets.rb#105
    def encryptor; end

    # @raise [MissingKeyError]
    #
    # source://railties//lib/rails/secrets.rb#64
    def handle_missing_key; end

    # source://railties//lib/rails/secrets.rb#74
    def key_path; end

    # source://railties//lib/rails/secrets.rb#78
    def path; end

    # source://railties//lib/rails/secrets.rb#82
    def preprocess(path); end

    # source://railties//lib/rails/secrets.rb#68
    def read_key_file; end

    # source://railties//lib/rails/secrets.rb#90
    def writing(contents); end
  end
end

# source://railties//lib/rails/secrets.rb#10
class Rails::Secrets::MissingKeyError < ::RuntimeError
  # @return [MissingKeyError] a new instance of MissingKeyError
  #
  # source://railties//lib/rails/secrets.rb#11
  def initialize; end
end

# Implements the logic behind +Rails::Command::NotesCommand+. See <tt>rails notes --help</tt> for usage information.
#
# Annotation objects are triplets <tt>:line</tt>, <tt>:tag</tt>, <tt>:text</tt> that
# represent the line where the annotation lives, its tag, and its text. Note
# the filename is not stored.
#
# Annotations are looked for in comments and modulus whitespace they have to
# start with the tag optionally followed by a colon. Everything up to the end
# of the line (or closing ERB comment tag) is considered to be their text.
#
# source://railties//lib/rails/source_annotation_extractor.rb#15
class Rails::SourceAnnotationExtractor
  # @return [SourceAnnotationExtractor] a new instance of SourceAnnotationExtractor
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#137
  def initialize(tag); end

  # Prints the mapping from filenames to annotations in +results+ ordered by filename.
  # The +options+ hash is passed to each annotation's +to_s+.
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#186
  def display(results, options = T.unsafe(nil)); end

  # Returns a hash that maps filenames under +dirs+ (recursively) to arrays
  # with their annotations.
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#143
  def find(dirs); end

  # Returns a hash that maps filenames under +dir+ (recursively) to arrays
  # with their annotations. Files with extensions registered in
  # <tt>Rails::SourceAnnotationExtractor::Annotation.extensions</tt> are
  # taken into account. Only files with annotations are included.
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#151
  def find_in(dir); end

  # Returns the value of attribute tag.
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#135
  def tag; end

  class << self
    # Prints all annotations with tag +tag+ under the root directories +app+,
    # +config+, +db+, +lib+, and +test+ (recursively).
    #
    # If +tag+ is <tt>nil</tt>, annotations with either default or registered tags are printed.
    #
    # Specific directories can be explicitly set using the <tt>:dirs</tt> key in +options+.
    #
    #   Rails::SourceAnnotationExtractor.enumerate 'TODO|FIXME', dirs: %w(app lib), tag: true
    #
    # If +options+ has a <tt>:tag</tt> flag, it will be passed to each annotation's +to_s+.
    #
    # See SourceAnnotationExtractor#find_in for a list of file extensions that will be taken into account.
    #
    # This class method is the single entry point for the <tt>rails notes</tt> command.
    #
    # source://railties//lib/rails/source_annotation_extractor.rb#128
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://railties//lib/rails/source_annotation_extractor.rb#54
class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # Returns a representation of the annotation that looks like this:
  #
  #   [126] [TODO] This algorithm is simple and clearly correct, make it faster.
  #
  # If +options+ has a flag <tt>:tag</tt> the tag is shown as in the example above.
  # Otherwise the string contains just line and text.
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#107
  def to_s(options = T.unsafe(nil)); end

  class << self
    # source://railties//lib/rails/source_annotation_extractor.rb#55
    def directories; end

    # source://railties//lib/rails/source_annotation_extractor.rb#75
    def extensions; end

    # Registers additional directories to be included
    #   Rails::SourceAnnotationExtractor::Annotation.register_directories("spec", "another")
    #
    # source://railties//lib/rails/source_annotation_extractor.rb#61
    def register_directories(*dirs); end

    # Registers new Annotations File Extensions
    #   Rails::SourceAnnotationExtractor::Annotation.register_extensions("css", "scss", "sass", "less", "js") { |tag| /\/\/\s*(#{tag}):?\s*(.*)$/ }
    #
    # source://railties//lib/rails/source_annotation_extractor.rb#81
    def register_extensions(*exts, &block); end

    # Registers additional tags
    #   Rails::SourceAnnotationExtractor::Annotation.register_tags("TESTME", "DEPRECATEME")
    #
    # source://railties//lib/rails/source_annotation_extractor.rb#71
    def register_tags(*additional_tags); end

    # source://railties//lib/rails/source_annotation_extractor.rb#65
    def tags; end
  end
end

# Wraps a regular expression that will be tested against each of the source
# file's comments.
#
# source://railties//lib/rails/source_annotation_extractor.rb#18
class Rails::SourceAnnotationExtractor::ParserExtractor < ::Struct
  # source://railties//lib/rails/source_annotation_extractor.rb#33
  def annotations(file); end
end

# source://railties//lib/rails/source_annotation_extractor.rb#19
class Rails::SourceAnnotationExtractor::ParserExtractor::Parser < ::Ripper
  # @return [Parser] a new instance of Parser
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#22
  def initialize(source, pattern:); end

  # Returns the value of attribute comments.
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#20
  def comments; end

  # source://railties//lib/rails/source_annotation_extractor.rb#28
  def on_comment(value); end

  # Returns the value of attribute pattern.
  #
  # source://railties//lib/rails/source_annotation_extractor.rb#20
  def pattern; end
end

# Wraps a regular expression that will iterate through a file's lines and
# test each one for the given pattern.
#
# source://railties//lib/rails/source_annotation_extractor.rb#42
class Rails::SourceAnnotationExtractor::PatternExtractor < ::Struct
  # source://railties//lib/rails/source_annotation_extractor.rb#43
  def annotations(file); end
end

# source://railties//lib/rails/test_unit/test_parser.rb#6
module Rails::TestUnit; end

# source://railties//lib/rails/test_unit/runner.rb#122
class Rails::TestUnit::CompositeFilter
  # @return [CompositeFilter] a new instance of CompositeFilter
  #
  # source://railties//lib/rails/test_unit/runner.rb#125
  def initialize(runnable, filter, patterns); end

  # minitest uses === to find matching filters.
  #
  # source://railties//lib/rails/test_unit/runner.rb#132
  def ===(method); end

  # Returns the value of attribute named_filter.
  #
  # source://railties//lib/rails/test_unit/runner.rb#123
  def named_filter; end

  private

  # source://railties//lib/rails/test_unit/runner.rb#147
  def derive_line_filters(patterns); end

  # source://railties//lib/rails/test_unit/runner.rb#137
  def derive_named_filter(filter); end
end

# source://railties//lib/rails/test_unit/runner.rb#158
class Rails::TestUnit::Filter
  # @return [Filter] a new instance of Filter
  #
  # source://railties//lib/rails/test_unit/runner.rb#159
  def initialize(runnable, file, line_or_range); end

  # source://railties//lib/rails/test_unit/runner.rb#168
  def ===(method); end

  private

  # source://railties//lib/rails/test_unit/runner.rb#180
  def definition_for(method); end
end

# source://railties//lib/rails/test_unit/runner.rb#12
class Rails::TestUnit::Runner
  # source://railties//lib/rails/test_unit/runner.rb#15
  def filters; end

  class << self
    # source://railties//lib/rails/test_unit/runner.rb#18
    def attach_before_load_options(opts); end

    # source://railties//lib/rails/test_unit/runner.rb#54
    def compose_filter(runnable, filter); end

    # source://railties//lib/rails/test_unit/runner.rb#15
    def filters; end

    # source://railties//lib/rails/test_unit/runner.rb#48
    def load_tests(argv); end

    # source://railties//lib/rails/test_unit/runner.rb#23
    def parse_options(argv); end

    # source://railties//lib/rails/test_unit/runner.rb#42
    def run(argv = T.unsafe(nil)); end

    # source://railties//lib/rails/test_unit/runner.rb#36
    def run_from_rake(test_command, argv = T.unsafe(nil)); end

    private

    # source://railties//lib/rails/test_unit/runner.rb#89
    def default_test_exclude_glob; end

    # source://railties//lib/rails/test_unit/runner.rb#85
    def default_test_glob; end

    # source://railties//lib/rails/test_unit/runner.rb#65
    def extract_filters(argv); end

    # source://railties//lib/rails/test_unit/runner.rb#101
    def list_tests(patterns); end

    # source://railties//lib/rails/test_unit/runner.rb#107
    def normalize_declarative_test_filter(filter); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/test_unit/runner.rb#97
    def path_argument?(arg); end

    # @return [Boolean]
    #
    # source://railties//lib/rails/test_unit/runner.rb#93
    def regexp_filter?(arg); end
  end
end

# source://railties//lib/rails/test_unit/runner.rb#14
Rails::TestUnit::Runner::PATH_ARGUMENT_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://railties//lib/rails/test_unit/runner.rb#13
Rails::TestUnit::Runner::TEST_FOLDERS = T.let(T.unsafe(nil), Array)

# Parse a test file to extract the line ranges of all tests in both
# method-style (def test_foo) and declarative-style (test "foo" do)
#
# source://railties//lib/rails/test_unit/test_parser.rb#11
class Rails::TestUnit::TestParser < ::Ripper
  # @return [TestParser] a new instance of TestParser
  #
  # source://railties//lib/rails/test_unit/test_parser.rb#19
  def initialize(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def first_arg(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def just_lineno(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_arg_paren(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#79
  def on_args_add(parts, part); end

  # source://railties//lib/rails/test_unit/test_parser.rb#83
  def on_args_add_block(args, *rest); end

  # source://railties//lib/rails/test_unit/test_parser.rb#75
  def on_args_new; end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_bodystmt(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_brace_block(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_command(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#52
  def on_command_call(*_arg0, begin_lineno, _args); end

  # method test e.g. `def test_some_description`
  # This event's first argument gets the `ident` node containing the method
  # name, which we have overridden to return the line number of the ident
  # instead.
  #
  # source://railties//lib/rails/test_unit/test_parser.rb#34
  def on_def(begin_line, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_do_block(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_ident(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_method_add_arg(arg, *_arg1); end

  # Everything past this point is to support declarative tests, which
  # require more work to get right because of the many different ways
  # methods can be invoked in ruby, all of which are parsed differently.
  #
  # The approach is just to store the current line number when the
  # "test" method is called and pass it up the tree so it's available at
  # the point when we also know the line where the associated block ends.
  #
  # source://railties//lib/rails/test_unit/test_parser.rb#46
  def on_method_add_block(begin_line, end_line); end

  # source://railties//lib/rails/test_unit/test_parser.rb#56
  def on_stmts_add(arg, *_arg1); end

  # source://railties//lib/rails/test_unit/test_parser.rb#60
  def on_stmts_new(*_arg0); end

  # source://railties//lib/rails/test_unit/test_parser.rb#25
  def parse; end

  class << self
    # Helper to translate a method object into the path and line range where
    # the method was defined.
    #
    # source://railties//lib/rails/test_unit/test_parser.rb#12
    def definition_for(method_obj); end
  end
end

# source://railties//lib/rails/test_unit/railtie.rb#6
class Rails::TestUnitRailtie < ::Rails::Railtie; end

# source://railties//lib/rails/gem_version.rb#9
module Rails::VERSION; end

# source://railties//lib/rails/gem_version.rb#10
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/gem_version.rb#11
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/gem_version.rb#13
Rails::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://railties//lib/rails/gem_version.rb#15
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://railties//lib/rails/gem_version.rb#12
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://railties//lib/rails/welcome_controller.rb#5
class Rails::WelcomeController < ::Rails::ApplicationController
  # source://railties//lib/rails/welcome_controller.rb#9
  def index; end

  private

  # source://actionview/7.1.1/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.1.1/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.1/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.1/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.1/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end
