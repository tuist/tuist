# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `omniauth-github` gem.
# Please instead update this file by running `bin/tapioca gem omniauth-github`.

# source://omniauth-github//lib/omniauth-github/version.rb#1
module OmniAuth
  class << self
    # source://omniauth/2.1.1/lib/omniauth.rb#130
    def config; end

    # source://omniauth/2.1.1/lib/omniauth.rb#134
    def configure; end

    # source://omniauth/2.1.1/lib/omniauth.rb#138
    def logger; end

    # source://omniauth/2.1.1/lib/omniauth.rb#142
    def mock_auth_for(provider); end

    # source://omniauth/2.1.1/lib/omniauth.rb#20
    def strategies; end
  end
end

# source://omniauth-github//lib/omniauth-github/version.rb#2
module OmniAuth::GitHub; end

# source://omniauth-github//lib/omniauth-github/version.rb#3
OmniAuth::GitHub::VERSION = T.let(T.unsafe(nil), String)

# source://omniauth-github//lib/omniauth/strategies/github.rb#4
module OmniAuth::Strategies; end

# source://omniauth-github//lib/omniauth/strategies/github.rb#5
class OmniAuth::Strategies::GitHub < ::OmniAuth::Strategies::OAuth2
  # source://omniauth-github//lib/omniauth/strategies/github.rb#16
  def authorize_params; end

  # source://omniauth-github//lib/omniauth/strategies/github.rb#77
  def callback_url; end

  # source://omniauth-github//lib/omniauth/strategies/github.rb#50
  def email; end

  # @return [Boolean]
  #
  # source://omniauth-github//lib/omniauth/strategies/github.rb#70
  def email_access_allowed?; end

  # The new /user/emails API - http://developer.github.com/v3/users/emails/#future-response
  #
  # source://omniauth-github//lib/omniauth/strategies/github.rb#64
  def emails; end

  # source://omniauth-github//lib/omniauth/strategies/github.rb#58
  def primary_email; end

  # source://omniauth-github//lib/omniauth/strategies/github.rb#45
  def raw_info; end

  # source://omniauth-github//lib/omniauth/strategies/github.rb#12
  def request_phase; end

  # source://omniauth-github//lib/omniauth/strategies/github.rb#54
  def scope; end
end
