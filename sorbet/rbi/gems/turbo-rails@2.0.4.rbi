# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `turbo-rails` gem.
# Please instead update this file by running `bin/tapioca gem turbo-rails`.

class ActionController::Base < ::ActionController::Metal
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionController::Head
  include ::AbstractController::Caching::ConfigMethods
  include ::ActionController::BasicImplicitRender
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  extend ::AbstractController::Helpers::Resolution

  # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
  def __callbacks; end

  # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
  def __callbacks?; end

  # source://actionpack/7.1.3.2/lib/abstract_controller/helpers.rb#12
  def _helper_methods; end

  # source://actionpack/7.1.3.2/lib/abstract_controller/helpers.rb#12
  def _helper_methods=(_arg0); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/helpers.rb#12
  def _helper_methods?; end

  # source://actionview/7.1.3.2/lib/action_view/layouts.rb#216
  def _layout_conditions(&block); end

  # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#963
  def _process_action_callbacks; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#951
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/params_wrapper.rb#187
  def _wrapper_options; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/params_wrapper.rb#187
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/params_wrapper.rb#187
  def _wrapper_options?; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def allow_forgery_protection; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def allow_forgery_protection=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def asset_host; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def asset_host=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def assets_dir; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def assets_dir=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def csrf_token_storage_strategy; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def csrf_token_storage_strategy=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def default_asset_host_protocol; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def default_protect_from_forgery; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def default_static_extension; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def default_static_extension=(value); end

  # source://actionpack/7.1.3.2/lib/action_dispatch/routing/url_for.rb#97
  def default_url_options; end

  # source://actionpack/7.1.3.2/lib/action_dispatch/routing/url_for.rb#97
  def default_url_options=(_arg0); end

  # source://actionpack/7.1.3.2/lib/action_dispatch/routing/url_for.rb#97
  def default_url_options?; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def enable_fragment_cache_logging; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def enable_fragment_cache_logging=(value); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/etag_with_template_digest.rb#29
  def etag_with_template_digest; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/etag_with_template_digest.rb#29
  def etag_with_template_digest=(_arg0); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/etag_with_template_digest.rb#29
  def etag_with_template_digest?; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def forgery_protection_origin_check; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def forgery_protection_strategy; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def forgery_protection_strategy=(value); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#25
  def fragment_cache_keys; end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#25
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#25
  def fragment_cache_keys?; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#65
  def helpers_path; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#65
  def helpers_path=(_arg0); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#65
  def helpers_path?; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#66
  def include_all_helpers; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#66
  def include_all_helpers=(_arg0); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#66
  def include_all_helpers?; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def javascripts_dir; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def javascripts_dir=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def logger; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def logger=(value); end

  # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to; end

  # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to=(_arg0); end

  # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to?; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def per_form_csrf_tokens; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def perform_caching; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def perform_caching=(value); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/callbacks.rb#36
  def raise_on_missing_callback_actions; end

  # source://actionpack/7.1.3.2/lib/abstract_controller/callbacks.rb#36
  def raise_on_missing_callback_actions=(val); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects; end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/redirecting.rb#15
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def relative_url_root; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def relative_url_root=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def request_forgery_protection_token; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
  def rescue_handlers; end

  # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
  def rescue_handlers?; end

  # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
  def responder; end

  # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
  def responder=(_arg0); end

  # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
  def responder?; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
  def stylesheets_dir; end

  # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
  def stylesheets_dir=(value); end

  private

  # source://actionview/7.1.3.2/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  # source://actionpack/7.1.3.2/lib/action_controller/base.rb#252
  def _protected_ivars; end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks?; end

    # source://actionpack/7.1.3.2/lib/action_controller/form_builder.rb#33
    def _default_form_builder; end

    # source://actionpack/7.1.3.2/lib/action_controller/form_builder.rb#33
    def _default_form_builder=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/form_builder.rb#33
    def _default_form_builder?; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack/7.1.3.2/lib/abstract_controller/helpers.rb#12
    def _helper_methods; end

    # source://actionpack/7.1.3.2/lib/abstract_controller/helpers.rb#12
    def _helper_methods=(value); end

    # source://actionpack/7.1.3.2/lib/abstract_controller/helpers.rb#12
    def _helper_methods?; end

    # source://actionpack/7.1.3.2/lib/abstract_controller/helpers.rb#16
    def _helpers; end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#211
    def _layout=(value); end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#211
    def _layout?; end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#212
    def _layout_conditions=(value); end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#212
    def _layout_conditions?; end

    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#955
    def _process_action_callbacks; end

    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#959
    def _process_action_callbacks=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/params_wrapper.rb#187
    def _wrapper_options; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/params_wrapper.rb#187
    def _wrapper_options=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/params_wrapper.rb#187
    def _wrapper_options?; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def allow_forgery_protection; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def allow_forgery_protection=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def asset_host; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def asset_host=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def assets_dir; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def assets_dir=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def csrf_token_storage_strategy; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def csrf_token_storage_strategy=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def default_asset_host_protocol; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def default_protect_from_forgery; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def default_static_extension; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def default_static_extension=(value); end

    # source://actionpack/7.1.3.2/lib/action_dispatch/routing/url_for.rb#97
    def default_url_options; end

    # source://actionpack/7.1.3.2/lib/action_dispatch/routing/url_for.rb#97
    def default_url_options=(value); end

    # source://actionpack/7.1.3.2/lib/action_dispatch/routing/url_for.rb#97
    def default_url_options?; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def enable_fragment_cache_logging; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def enable_fragment_cache_logging=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/etag_with_template_digest.rb#29
    def etag_with_template_digest; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/etag_with_template_digest.rb#29
    def etag_with_template_digest=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/etag_with_template_digest.rb#29
    def etag_with_template_digest?; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def forgery_protection_origin_check; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def forgery_protection_strategy; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def forgery_protection_strategy=(value); end

    # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#25
    def fragment_cache_keys; end

    # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#25
    def fragment_cache_keys=(value); end

    # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#25
    def fragment_cache_keys?; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#65
    def helpers_path; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#65
    def helpers_path=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#65
    def helpers_path?; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#66
    def include_all_helpers; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#66
    def include_all_helpers=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/helpers.rb#66
    def include_all_helpers?; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def javascripts_dir; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def javascripts_dir=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def logger; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def logger=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal.rb#262
    def middleware_stack; end

    # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to; end

    # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to=(value); end

    # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to?; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def per_form_csrf_tokens; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def perform_caching; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def perform_caching=(value); end

    # source://actionpack/7.1.3.2/lib/abstract_controller/callbacks.rb#36
    def raise_on_missing_callback_actions; end

    # source://actionpack/7.1.3.2/lib/abstract_controller/callbacks.rb#36
    def raise_on_missing_callback_actions=(val); end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal/redirecting.rb#15
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def relative_url_root; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def relative_url_root=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def request_forgery_protection_token; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
    def rescue_handlers; end

    # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
    def rescue_handlers=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
    def rescue_handlers?; end

    # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
    def responder; end

    # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
    def responder=(value); end

    # source://responders/3.1.1/lib/action_controller/respond_with.rb#11
    def responder?; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#115
    def stylesheets_dir; end

    # source://activesupport/7.1.3.2/lib/active_support/configurable.rb#116
    def stylesheets_dir=(value); end

    # source://actionpack/7.1.3.2/lib/action_controller/base.rb#184
    def without_modules(*modules); end
  end
end

module ActionController::Base::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper

  # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#33
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://devise/4.9.3/lib/devise/controllers/helpers.rb#13
  def devise_controller?(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/request_forgery_protection.rb#101
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/request_forgery_protection.rb#102
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://devise/4.9.3/lib/devise/controllers/helpers.rb#13
  def signed_in?(*args, **_arg1, &block); end

  def turbo_frame_request_id(*args, **_arg1, &block); end
  def turbo_native_app?(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end

  # source://devise/4.9.3/lib/devise/controllers/helpers.rb#13
  def warden(*args, **_arg1, &block); end
end

# source://turbo-rails//lib/turbo/engine.rb#3
module Turbo
  extend ::ActiveSupport::Autoload

  # source://activesupport/7.1.3.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#74
  def current_request_id; end

  # source://activesupport/7.1.3.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#116
  def current_request_id=(obj); end

  # source://turbo-rails//lib/turbo-rails.rb#7
  def draw_routes; end

  # source://turbo-rails//lib/turbo-rails.rb#7
  def draw_routes=(val); end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#49
    def current_request_id; end

    # source://activesupport/7.1.3.2/lib/active_support/core_ext/module/attribute_accessors_per_thread.rb#108
    def current_request_id=(obj); end

    # source://turbo-rails//lib/turbo-rails.rb#7
    def draw_routes; end

    # source://turbo-rails//lib/turbo-rails.rb#7
    def draw_routes=(val); end

    # source://railties/7.1.3.2/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.2/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.2/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://turbo-rails//lib/turbo-rails.rb#14
    def signed_stream_verifier; end

    # source://turbo-rails//lib/turbo-rails.rb#18
    def signed_stream_verifier_key; end

    # Sets the attribute signed_stream_verifier_key
    #
    # @param value the value to set the attribute signed_stream_verifier_key to.
    #
    # source://turbo-rails//lib/turbo-rails.rb#12
    def signed_stream_verifier_key=(_arg0); end

    # source://railties/7.1.3.2/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.1.3.2/lib/rails/engine.rb#408
    def use_relative_model_naming?; end

    # source://turbo-rails//lib/turbo-rails.rb#22
    def with_request_id(request_id); end
  end
end

module Turbo::Broadcastable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Turbo::Broadcastable::ClassMethods

  def broadcast_action(action, target: T.unsafe(nil), attributes: T.unsafe(nil), **rendering); end
  def broadcast_action_later(action:, target: T.unsafe(nil), attributes: T.unsafe(nil), **rendering); end
  def broadcast_action_later_to(*streamables, action:, target: T.unsafe(nil), attributes: T.unsafe(nil), **rendering); end
  def broadcast_action_to(*streamables, action:, target: T.unsafe(nil), attributes: T.unsafe(nil), **rendering); end
  def broadcast_after_to(*streamables, target:, **rendering); end
  def broadcast_append(target: T.unsafe(nil), **rendering); end
  def broadcast_append_later(target: T.unsafe(nil), **rendering); end
  def broadcast_append_later_to(*streamables, target: T.unsafe(nil), **rendering); end
  def broadcast_append_to(*streamables, target: T.unsafe(nil), **rendering); end
  def broadcast_before_to(*streamables, target:, **rendering); end
  def broadcast_prepend(target: T.unsafe(nil), **rendering); end
  def broadcast_prepend_later(target: T.unsafe(nil), **rendering); end
  def broadcast_prepend_later_to(*streamables, target: T.unsafe(nil), **rendering); end
  def broadcast_prepend_to(*streamables, target: T.unsafe(nil), **rendering); end
  def broadcast_refresh; end
  def broadcast_refresh_later; end
  def broadcast_refresh_later_to(*streamables); end
  def broadcast_refresh_to(*streamables); end
  def broadcast_remove; end
  def broadcast_remove_to(*streamables, target: T.unsafe(nil)); end
  def broadcast_render(**rendering); end
  def broadcast_render_later(**rendering); end
  def broadcast_render_later_to(*streamables, **rendering); end
  def broadcast_render_to(*streamables, **rendering); end
  def broadcast_replace(**rendering); end
  def broadcast_replace_later(**rendering); end
  def broadcast_replace_later_to(*streamables, **rendering); end
  def broadcast_replace_to(*streamables, **rendering); end
  def broadcast_update(**rendering); end
  def broadcast_update_later(**rendering); end
  def broadcast_update_later_to(*streamables, **rendering); end
  def broadcast_update_to(*streamables, **rendering); end

  private

  def broadcast_rendering_with_defaults(options); end
  def broadcast_target_default; end
end

module Turbo::Broadcastable::ClassMethods
  def broadcast_target_default; end
  def broadcasts(stream = T.unsafe(nil), inserts_by: T.unsafe(nil), target: T.unsafe(nil), **rendering); end
  def broadcasts_refreshes(stream = T.unsafe(nil)); end
  def broadcasts_refreshes_to(stream); end
  def broadcasts_to(stream, inserts_by: T.unsafe(nil), target: T.unsafe(nil), **rendering); end
  def suppressed_turbo_broadcasts?; end
  def suppressing_turbo_broadcasts(&block); end
end

# source://turbo-rails//lib/turbo/broadcastable/test_helper.rb#3
module Turbo::Broadcastable::TestHelper
  extend ::ActiveSupport::Concern
  include ::ActionCable::TestHelper
  include ::Turbo::Streams::StreamName

  # Asserts that no `<turbo-stream>` elements were broadcast over Action Cable
  #
  # ==== Arguments
  #
  # * <tt>stream_name_or_object</tt> the objects used to generate the
  #   channel Action Cable name, or the name itself
  # * <tt>&block</tt> optional block executed before the
  #   assertion
  #
  # Asserts that no `<turbo-stream>` elements were broadcast:
  #
  #     message = Message.find(1)
  #     message.broadcast_replace_to "messages"
  #
  #     assert_no_turbo_stream_broadcasts "messages" # fails with MiniTest::Assertion error
  #
  # You can pass a block to run before the assertion:
  #
  #     message = Message.find(1)
  #
  #     assert_no_turbo_stream_broadcasts "messages" do
  #       # do something other than broadcast to "messages"
  #     end
  #
  # In addition to a String, the helper also accepts an Object or Array to
  # determine the name of the channel the elements are broadcast to:
  #
  #     message = Message.find(1)
  #
  #     assert_no_turbo_stream_broadcasts message do
  #       # do something other than broadcast to "message_1"
  #     end
  #
  # source://turbo-rails//lib/turbo/broadcastable/test_helper.rb#104
  def assert_no_turbo_stream_broadcasts(stream_name_or_object, &block); end

  # Asserts that `<turbo-stream>` elements were broadcast over Action Cable
  #
  # ==== Arguments
  #
  # * <tt>stream_name_or_object</tt> the objects used to generate the
  #   channel Action Cable name, or the name itself
  # * <tt>&block</tt> optional block executed before the
  #   assertion
  #
  # ==== Options
  #
  # * <tt>count:</tt> the number of `<turbo-stream>` elements that are
  # expected to be broadcast
  #
  # Asserts `<turbo-stream>` elements were broadcast:
  #
  #     message = Message.find(1)
  #     message.broadcast_replace_to "messages"
  #
  #     assert_turbo_stream_broadcasts "messages"
  #
  # Asserts that two `<turbo-stream>` elements were broadcast:
  #
  #     message = Message.find(1)
  #     message.broadcast_replace_to "messages"
  #     message.broadcast_remove_to "messages"
  #
  #     assert_turbo_stream_broadcasts "messages", count: 2
  #
  # You can pass a block to run before the assertion:
  #
  #     message = Message.find(1)
  #
  #     assert_turbo_stream_broadcasts "messages" do
  #       message.broadcast_append_to "messages"
  #     end
  #
  # In addition to a String, the helper also accepts an Object or Array to
  # determine the name of the channel the elements are broadcast to:
  #
  #     message = Message.find(1)
  #
  #     assert_turbo_stream_broadcasts message do
  #       message.broadcast_replace
  #     end
  #
  # source://turbo-rails//lib/turbo/broadcastable/test_helper.rb#58
  def assert_turbo_stream_broadcasts(stream_name_or_object, count: T.unsafe(nil), &block); end

  # Captures any `<turbo-stream>` elements that were broadcast over Action Cable
  #
  # ==== Arguments
  #
  # * <tt>stream_name_or_object</tt> the objects used to generate the
  #   channel Action Cable name, or the name itself
  # * <tt>&block</tt> optional block to capture broadcasts during execution
  #
  # Returns any `<turbo-stream>` elements that have been broadcast as an
  # Array of <tt>Nokogiri::XML::Element</tt> instances
  #
  #     message = Message.find(1)
  #     message.broadcast_append_to "messages"
  #     message.broadcast_prepend_to "messages"
  #
  #     turbo_streams = capture_turbo_stream_broadcasts "messages"
  #
  #     assert_equal "append", turbo_streams.first["action"]
  #     assert_equal "prepend", turbo_streams.second["action"]
  #
  # You can pass a block to limit the scope of the broadcasts being captured:
  #
  #     message = Message.find(1)
  #
  #     turbo_streams = capture_turbo_stream_broadcasts "messages" do
  #       message.broadcast_append_to "messages"
  #     end
  #
  #     assert_equal "append", turbo_streams.first["action"]
  #
  # In addition to a String, the helper also accepts an Object or Array to
  # determine the name of the channel the elements are broadcast to:
  #
  #     message = Message.find(1)
  #
  #     replace, remove = capture_turbo_stream_broadcasts message do
  #       message.broadcast_replace
  #       message.broadcast_remove
  #     end
  #
  #     assert_equal "replace", replace["action"]
  #     assert_equal "replace", remove["action"]
  #
  # source://turbo-rails//lib/turbo/broadcastable/test_helper.rb#157
  def capture_turbo_stream_broadcasts(stream_name_or_object, &block); end
end

class Turbo::Debouncer
  def initialize(delay: T.unsafe(nil)); end

  def debounce(&block); end
  def delay; end
  def scheduled_task; end
  def wait; end

  private

  def wait_timeout; end
end

Turbo::Debouncer::DEFAULT_DELAY = T.let(T.unsafe(nil), Float)

module Turbo::DriveHelper
  def turbo_exempts_page_from_cache; end
  def turbo_exempts_page_from_cache_tag; end
  def turbo_exempts_page_from_preview; end
  def turbo_exempts_page_from_preview_tag; end
  def turbo_page_requires_reload; end
  def turbo_page_requires_reload_tag; end
  def turbo_refresh_method_tag(method = T.unsafe(nil)); end
  def turbo_refresh_scroll_tag(scroll = T.unsafe(nil)); end
  def turbo_refreshes_with(method: T.unsafe(nil), scroll: T.unsafe(nil)); end
end

# source://turbo-rails//lib/turbo/engine.rb#4
class Turbo::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# If you don't want to precompile Turbo's assets (eg. because you're using webpack),
# you can do this in an intiailzer:
#
# config.after_initialize do
#   config.assets.precompile -= Turbo::Engine::PRECOMPILE_ASSETS
# end
#
# source://turbo-rails//lib/turbo/engine.rb#28
Turbo::Engine::PRECOMPILE_ASSETS = T.let(T.unsafe(nil), Array)

module Turbo::Frames; end

module Turbo::Frames::FrameRequest
  extend ::ActiveSupport::Concern

  private

  def turbo_frame_request?; end
  def turbo_frame_request_id; end
end

module Turbo::FramesHelper
  def turbo_frame_tag(*ids, src: T.unsafe(nil), target: T.unsafe(nil), **attributes, &block); end
end

module Turbo::IncludesHelper
  def turbo_include_tags; end
end

module Turbo::Native; end

module Turbo::Native::Navigation
  extend ::ActiveSupport::Concern

  def recede_or_redirect_back_or_to(url, **options); end
  def recede_or_redirect_to(url, **options); end
  def refresh_or_redirect_back_or_to(url, **options); end
  def refresh_or_redirect_to(url, **options); end
  def resume_or_redirect_back_or_to(url, **options); end
  def resume_or_redirect_to(url, **options); end
  def turbo_native_app?; end

  private

  def turbo_native_action_or_redirect(url, action, redirect_type, options = T.unsafe(nil)); end
end

class Turbo::Native::NavigationController < ::ActionController::Base
  def recede; end
  def refresh; end
  def resume; end

  private

  # source://actionview/7.1.3.2/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://actionpack/7.1.3.2/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

module Turbo::RequestIdTracking
  extend ::ActiveSupport::Concern

  private

  def turbo_tracking_request_id(&block); end
end

module Turbo::Streams; end

class Turbo::Streams::ActionBroadcastJob < ::ActiveJob::Base
  def perform(stream, action:, target:, attributes: T.unsafe(nil), **rendering); end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

module Turbo::Streams::ActionHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper

  def turbo_stream_action_tag(action, target: T.unsafe(nil), targets: T.unsafe(nil), template: T.unsafe(nil), **attributes); end
  def turbo_stream_refresh_tag(request_id: T.unsafe(nil), **attributes); end

  private

  def convert_to_turbo_stream_dom_id(target, include_selector: T.unsafe(nil)); end
end

class Turbo::Streams::BroadcastJob < ::ActiveJob::Base
  def perform(stream, **rendering); end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

class Turbo::Streams::BroadcastStreamJob < ::ActiveJob::Base
  def perform(stream, content:); end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

module Turbo::Streams::Broadcasts
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper

  def broadcast_action_later_to(*streamables, action:, target: T.unsafe(nil), targets: T.unsafe(nil), attributes: T.unsafe(nil), **rendering); end
  def broadcast_action_to(*streamables, action:, target: T.unsafe(nil), targets: T.unsafe(nil), attributes: T.unsafe(nil), **rendering); end
  def broadcast_after_later_to(*streamables, **opts); end
  def broadcast_after_to(*streamables, **opts); end
  def broadcast_append_later_to(*streamables, **opts); end
  def broadcast_append_to(*streamables, **opts); end
  def broadcast_before_later_to(*streamables, **opts); end
  def broadcast_before_to(*streamables, **opts); end
  def broadcast_prepend_later_to(*streamables, **opts); end
  def broadcast_prepend_to(*streamables, **opts); end
  def broadcast_refresh_later_to(*streamables, request_id: T.unsafe(nil), **opts); end
  def broadcast_refresh_to(*streamables, **opts); end
  def broadcast_remove_to(*streamables, **opts); end
  def broadcast_render_later_to(*streamables, **rendering); end
  def broadcast_render_to(*streamables, **rendering); end
  def broadcast_replace_later_to(*streamables, **opts); end
  def broadcast_replace_to(*streamables, **opts); end
  def broadcast_stream_to(*streamables, content:); end
  def broadcast_update_later_to(*streamables, **opts); end
  def broadcast_update_to(*streamables, **opts); end
  def refresh_debouncer_for(*streamables, request_id: T.unsafe(nil)); end

  private

  def render_format(format, **rendering); end
end

module Turbo::Streams::StreamName
  def signed_stream_name(streamables); end
  def verified_stream_name(signed_stream_name); end

  private

  def stream_name_from(streamables); end
end

module Turbo::Streams::StreamName::ClassMethods
  def verified_stream_name_from_params; end
end

class Turbo::Streams::TagBuilder
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper

  def initialize(view_context); end

  def action(name, target, content = T.unsafe(nil), allow_inferred_rendering: T.unsafe(nil), **rendering, &block); end
  def action_all(name, targets, content = T.unsafe(nil), allow_inferred_rendering: T.unsafe(nil), **rendering, &block); end
  def after(target, content = T.unsafe(nil), **rendering, &block); end
  def after_all(targets, content = T.unsafe(nil), **rendering, &block); end
  def append(target, content = T.unsafe(nil), **rendering, &block); end
  def append_all(targets, content = T.unsafe(nil), **rendering, &block); end
  def before(target, content = T.unsafe(nil), **rendering, &block); end
  def before_all(targets, content = T.unsafe(nil), **rendering, &block); end
  def prepend(target, content = T.unsafe(nil), **rendering, &block); end
  def prepend_all(targets, content = T.unsafe(nil), **rendering, &block); end
  def remove(target); end
  def remove_all(targets); end
  def replace(target, content = T.unsafe(nil), **rendering, &block); end
  def replace_all(targets, content = T.unsafe(nil), **rendering, &block); end
  def update(target, content = T.unsafe(nil), **rendering, &block); end
  def update_all(targets, content = T.unsafe(nil), **rendering, &block); end

  private

  def render_record(possible_record); end
  def render_template(target, content = T.unsafe(nil), allow_inferred_rendering: T.unsafe(nil), **rendering, &block); end
end

module Turbo::Streams::TurboStreamsTagBuilder
  private

  def turbo_stream; end
end

class Turbo::StreamsChannel < ::ActionCable::Channel::Base
  include ::Turbo::Streams::StreamName::ClassMethods
  extend ::Turbo::Streams::StreamName
  extend ::ActionView::Helpers::CaptureHelper
  extend ::ActionView::Helpers::OutputSafetyHelper
  extend ::ActionView::Helpers::TagHelper
  extend ::Turbo::Streams::ActionHelper
  extend ::Turbo::Streams::Broadcasts

  def subscribed; end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

module Turbo::StreamsHelper
  def turbo_stream; end
  def turbo_stream_from(*streamables, **attributes); end
end

# source://turbo-rails//lib/turbo/test_assertions.rb#2
module Turbo::TestAssertions
  extend ::ActiveSupport::Concern

  # Assert that the rendered fragment of HTML does not contain a `<turbo-stream>`
  # element.
  #
  # ==== Options
  #
  # * <tt>:action</tt> [String] matches the element's <tt>[action]</tt>
  #   attribute
  # * <tt>:target</tt> [String, #to_key] matches the element's
  #   <tt>[target]</tt> attribute. If the value responds to <tt>#to_key</tt>,
  #   the value will be transformed by calling <tt>dom_id</tt>
  # * <tt>:targets</tt> [String] matches the element's <tt>[targets]</tt>
  #   attribute
  #
  #   Given the following HTML fragment:
  #
  #     <turbo-stream action="remove" target="message_1"></turbo-stream>
  #
  #   The following assertion would fail:
  #
  #     assert_no_turbo_stream action: "remove", target: "message_1"
  #
  # source://turbo-rails//lib/turbo/test_assertions.rb#76
  def assert_no_turbo_stream(action:, target: T.unsafe(nil), targets: T.unsafe(nil)); end

  # Assert that the rendered fragment of HTML contains a `<turbo-stream>`
  # element.
  #
  # ==== Options
  #
  # * <tt>:action</tt> [String] matches the element's <tt>[action]</tt>
  #   attribute
  # * <tt>:target</tt> [String, #to_key] matches the element's
  #   <tt>[target]</tt> attribute. If the value responds to <tt>#to_key</tt>,
  #   the value will be transformed by calling <tt>dom_id</tt>
  # * <tt>:targets</tt> [String] matches the element's <tt>[targets]</tt>
  #   attribute
  # * <tt>:count</tt> [Integer] indicates how many turbo streams are expected.
  #   Defaults to <tt>1</tt>.
  #
  #   Given the following HTML fragment:
  #
  #     <turbo-stream action="remove" target="message_1"></turbo-stream>
  #
  #   The following assertion would pass:
  #
  #     assert_turbo_stream action: "remove", target: "message_1"
  #
  # You can also pass a block make assertions about the contents of the
  # element. Given the following HTML fragment:
  #
  #     <turbo-stream action="replace" target="message_1">
  #       <template>
  #         <p>Hello!</p>
  #       <template>
  #     </turbo-stream>
  #
  #   The following assertion would pass:
  #
  #     assert_turbo_stream action: "replace", target: "message_1" do
  #       assert_select "template p", text: "Hello!"
  #     end
  #
  # source://turbo-rails//lib/turbo/test_assertions.rb#48
  def assert_turbo_stream(action:, target: T.unsafe(nil), targets: T.unsafe(nil), count: T.unsafe(nil), &block); end
end

# source://turbo-rails//lib/turbo/test_assertions/integration_test_assertions.rb#3
module Turbo::TestAssertions::IntegrationTestAssertions
  # Assert that the Turbo Stream request's response body's HTML does not
  # contain a `<turbo-stream>` element.
  #
  # ==== Options
  #
  # * <tt>:status</tt> [Integer, Symbol] the HTTP response status
  # * <tt>:action</tt> [String] matches the element's <tt>[action]</tt>
  #   attribute
  # * <tt>:target</tt> [String, #to_key] matches the element's
  #   <tt>[target]</tt> attribute. If the value responds to <tt>#to_key</tt>,
  #   the value will be transformed by calling <tt>dom_id</tt>
  # * <tt>:targets</tt> [String] matches the element's <tt>[targets]</tt>
  #   attribute
  #
  #   Given the following HTML response body:
  #
  #     <turbo-stream action="remove" target="message_1"></turbo-stream>
  #
  #   The following assertion would fail:
  #
  #     assert_no_turbo_stream action: "remove", target: "message_1"
  #
  # source://turbo-rails//lib/turbo/test_assertions/integration_test_assertions.rb#69
  def assert_no_turbo_stream(status: T.unsafe(nil), **attributes); end

  # Assert that the Turbo Stream request's response body's HTML contains a
  # `<turbo-stream>` element.
  #
  # ==== Options
  #
  # * <tt>:status</tt> [Integer, Symbol] the HTTP response status
  # * <tt>:action</tt> [String] matches the element's <tt>[action]</tt>
  #   attribute
  # * <tt>:target</tt> [String, #to_key] matches the element's
  #   <tt>[target]</tt> attribute. If the value responds to <tt>#to_key</tt>,
  #   the value will be transformed by calling <tt>dom_id</tt>
  # * <tt>:targets</tt> [String] matches the element's <tt>[targets]</tt>
  #   attribute
  #
  #   Given the following HTML response body:
  #
  #     <turbo-stream action="remove" target="message_1"></turbo-stream>
  #
  #   The following assertion would pass:
  #
  #     assert_turbo_stream action: "remove", target: "message_1"
  #
  # You can also pass a block make assertions about the contents of the
  # element. Given the following HTML response body:
  #
  #     <turbo-stream action="replace" target="message_1">
  #       <template>
  #         <p>Hello!</p>
  #       <template>
  #     </turbo-stream>
  #
  #   The following assertion would pass:
  #
  #     assert_turbo_stream action: "replace", target: "message_1" do
  #       assert_select "template p", text: "Hello!"
  #     end
  #
  # source://turbo-rails//lib/turbo/test_assertions/integration_test_assertions.rb#41
  def assert_turbo_stream(status: T.unsafe(nil), **attributes, &block); end
end

class Turbo::ThreadDebouncer
  def initialize(key, thread, delay:); end

  def debounce; end
  def wait(*_arg0, **_arg1, &_arg2); end

  private

  def debouncer; end
  def key; end
  def thread; end

  class << self
    def for(key, delay: T.unsafe(nil)); end

    private

    def new(*_arg0); end
  end
end
