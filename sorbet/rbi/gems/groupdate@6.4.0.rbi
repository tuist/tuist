# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `groupdate` gem.
# Please instead update this file by running `bin/tapioca gem groupdate`.

class ActiveRecord::Base
  include ::ActiveModel::Access
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Serialization
  extend ::Groupdate::QueryMethods
end

class ActiveRecord::Relation
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::Groupdate::Relation
end

# source://groupdate//lib/groupdate/enumerable.rb#1
module Enumerable
  extend ::ActiveSupport::EnumerableCoreExt::Constants

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_day(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_day_of_month(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_day_of_week(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_day_of_year(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_hour(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_hour_of_day(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_minute(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_minute_of_hour(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_month(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_month_of_year(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#15
  def group_by_period(period, *args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_quarter(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_second(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_week(*args, **options, &block); end

  # source://groupdate//lib/groupdate/enumerable.rb#3
  def group_by_year(*args, **options, &block); end
end

# source://groupdate//lib/groupdate/magic.rb#3
module Groupdate
  # source://groupdate//lib/groupdate.rb#23
  def day_start; end

  # source://groupdate//lib/groupdate.rb#23
  def day_start=(val); end

  # source://groupdate//lib/groupdate.rb#23
  def time_zone; end

  # source://groupdate//lib/groupdate.rb#23
  def time_zone=(val); end

  # source://groupdate//lib/groupdate.rb#23
  def week_start; end

  # source://groupdate//lib/groupdate.rb#23
  def week_start=(val); end

  class << self
    # source://groupdate//lib/groupdate.rb#35
    def adapters; end

    # source://groupdate//lib/groupdate.rb#23
    def day_start; end

    # source://groupdate//lib/groupdate.rb#23
    def day_start=(val); end

    # api for gems like ActiveMedian
    #
    # source://groupdate//lib/groupdate.rb#28
    def process_result(relation, result, **options); end

    # source://groupdate//lib/groupdate.rb#39
    def register_adapter(name, adapter); end

    # source://groupdate//lib/groupdate.rb#23
    def time_zone; end

    # source://groupdate//lib/groupdate.rb#23
    def time_zone=(val); end

    # source://groupdate//lib/groupdate.rb#23
    def week_start; end

    # source://groupdate//lib/groupdate.rb#23
    def week_start=(val); end
  end
end

# source://groupdate//lib/groupdate/adapters/base_adapter.rb#2
module Groupdate::Adapters; end

# source://groupdate//lib/groupdate/adapters/base_adapter.rb#3
class Groupdate::Adapters::BaseAdapter
  # @return [BaseAdapter] a new instance of BaseAdapter
  #
  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#6
  def initialize(relation, column:, period:, time_zone:, time_range:, week_start:, day_start:, n_seconds:); end

  # Returns the value of attribute column.
  #
  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#4
  def column; end

  # Returns the value of attribute day_start.
  #
  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#4
  def day_start; end

  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#27
  def generate; end

  # Returns the value of attribute n_seconds.
  #
  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#4
  def n_seconds; end

  # Returns the value of attribute period.
  #
  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#4
  def period; end

  # Returns the value of attribute week_start.
  #
  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#4
  def week_start; end

  private

  # source://groupdate//lib/groupdate/adapters/base_adapter.rb#33
  def where_clause; end
end

# source://groupdate//lib/groupdate/adapters/mysql_adapter.rb#3
class Groupdate::Adapters::MySQLAdapter < ::Groupdate::Adapters::BaseAdapter
  # source://groupdate//lib/groupdate/adapters/mysql_adapter.rb#57
  def clean_group_clause(clause); end

  # source://groupdate//lib/groupdate/adapters/mysql_adapter.rb#4
  def group_clause; end
end

# source://groupdate//lib/groupdate/adapters/postgresql_adapter.rb#3
class Groupdate::Adapters::PostgreSQLAdapter < ::Groupdate::Adapters::BaseAdapter
  # source://groupdate//lib/groupdate/adapters/postgresql_adapter.rb#41
  def clean_group_clause(clause); end

  # source://groupdate//lib/groupdate/adapters/postgresql_adapter.rb#4
  def group_clause; end
end

# source://groupdate//lib/groupdate/adapters/sqlite_adapter.rb#3
class Groupdate::Adapters::SQLiteAdapter < ::Groupdate::Adapters::BaseAdapter
  # @raise [Groupdate::Error]
  #
  # source://groupdate//lib/groupdate/adapters/sqlite_adapter.rb#4
  def group_clause; end
end

# source://groupdate//lib/groupdate.rb#18
class Groupdate::Error < ::RuntimeError; end

# source://groupdate//lib/groupdate.rb#21
Groupdate::METHODS = T.let(T.unsafe(nil), Array)

# source://groupdate//lib/groupdate/magic.rb#4
class Groupdate::Magic
  # @return [Magic] a new instance of Magic
  #
  # source://groupdate//lib/groupdate/magic.rb#9
  def initialize(period:, **options); end

  # source://groupdate//lib/groupdate/magic.rb#68
  def day_start; end

  # Returns the value of attribute group_index.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def group_index; end

  # Sets the attribute group_index
  #
  # @param value the value to set the attribute group_index to.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def group_index=(_arg0); end

  # Returns the value of attribute n_seconds.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def n_seconds; end

  # Sets the attribute n_seconds
  #
  # @param value the value to set the attribute n_seconds to.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def n_seconds=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def options=(_arg0); end

  # Returns the value of attribute period.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def period; end

  # Sets the attribute period
  #
  # @param value the value to set the attribute period to.
  #
  # source://groupdate//lib/groupdate/magic.rb#7
  def period=(_arg0); end

  # source://groupdate//lib/groupdate/magic.rb#72
  def range; end

  # source://groupdate//lib/groupdate/magic.rb#84
  def series_builder; end

  # source://groupdate//lib/groupdate/magic.rb#97
  def time_range; end

  # source://groupdate//lib/groupdate/magic.rb#53
  def time_zone; end

  # @raise [ArgumentError]
  #
  # source://groupdate//lib/groupdate/magic.rb#46
  def validate_arguments; end

  # @raise [ArgumentError]
  #
  # source://groupdate//lib/groupdate/magic.rb#24
  def validate_keywords; end

  # source://groupdate//lib/groupdate/magic.rb#61
  def week_start; end

  class << self
    # @raise [ArgumentError]
    #
    # source://groupdate//lib/groupdate/magic.rb#101
    def validate_period(period, permit); end
  end
end

# source://groupdate//lib/groupdate/magic.rb#5
Groupdate::Magic::DAYS = T.let(T.unsafe(nil), Array)

# source://groupdate//lib/groupdate/magic.rb#106
class Groupdate::Magic::Enumerable < ::Groupdate::Magic
  # source://groupdate//lib/groupdate/magic.rb#107
  def group_by(enum, &_block); end

  class << self
    # source://groupdate//lib/groupdate/magic.rb#116
    def group_by(enum, period, options, &block); end
  end
end

# source://groupdate//lib/groupdate/magic.rb#121
class Groupdate::Magic::Relation < ::Groupdate::Magic
  # @return [Relation] a new instance of Relation
  #
  # source://groupdate//lib/groupdate/magic.rb#122
  def initialize(**options); end

  # source://groupdate//lib/groupdate/magic.rb#145
  def cast_method; end

  # source://groupdate//lib/groupdate/magic.rb#169
  def cast_result(result, multiple_groups); end

  # source://groupdate//lib/groupdate/magic.rb#192
  def check_nils(result, multiple_groups, relation); end

  # source://groupdate//lib/groupdate/magic.rb#127
  def perform(relation, result, default_value:); end

  # @return [Boolean]
  #
  # source://groupdate//lib/groupdate/magic.rb#182
  def time_zone_support?(relation); end

  class << self
    # @raise [Groupdate::Error]
    #
    # source://groupdate//lib/groupdate/magic.rb#203
    def generate_relation(relation, field:, **options); end

    # allow any options to keep flexible for future
    #
    # source://groupdate//lib/groupdate/magic.rb#259
    def process_result(relation, result, **options); end

    # resolves eagerly
    # need to convert both where_clause (easy)
    # and group_clause (not easy) if want to avoid this
    #
    # source://groupdate//lib/groupdate/magic.rb#251
    def resolve_column(relation, column); end

    # basic version of Active Record disallow_raw_sql!
    # symbol = column (safe), Arel node = SQL (safe), other = untrusted
    # matches table.column and column
    #
    # source://groupdate//lib/groupdate/magic.rb#238
    def validate_column(column); end
  end
end

# source://groupdate//lib/groupdate.rb#20
Groupdate::PERIODS = T.let(T.unsafe(nil), Array)

# source://groupdate//lib/groupdate/query_methods.rb#2
module Groupdate::QueryMethods
  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_day(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_day_of_month(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_day_of_week(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_day_of_year(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_hour(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_hour_of_day(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_minute(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_minute_of_hour(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_month(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_month_of_year(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#13
  def group_by_period(period, field, permit: T.unsafe(nil), **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_quarter(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_second(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_week(field, **options); end

  # source://groupdate//lib/groupdate/query_methods.rb#4
  def group_by_year(field, **options); end
end

# source://groupdate//lib/groupdate/relation.rb#4
module Groupdate::Relation
  extend ::ActiveSupport::Concern

  # source://groupdate//lib/groupdate/relation.rb#11
  def calculate(*args, &block); end
end

# source://groupdate//lib/groupdate/series_builder.rb#2
class Groupdate::SeriesBuilder
  # @return [SeriesBuilder] a new instance of SeriesBuilder
  #
  # source://groupdate//lib/groupdate/series_builder.rb#5
  def initialize(period:, time_zone:, day_start:, week_start:, n_seconds:, **options); end

  # Returns the value of attribute day_start.
  #
  # source://groupdate//lib/groupdate/series_builder.rb#3
  def day_start; end

  # source://groupdate//lib/groupdate/series_builder.rb#15
  def generate(data, default_value:, series_default: T.unsafe(nil), multiple_groups: T.unsafe(nil), group_index: T.unsafe(nil)); end

  # Returns the value of attribute n_seconds.
  #
  # source://groupdate//lib/groupdate/series_builder.rb#3
  def n_seconds; end

  # Returns the value of attribute options.
  #
  # source://groupdate//lib/groupdate/series_builder.rb#3
  def options; end

  # Returns the value of attribute period.
  #
  # source://groupdate//lib/groupdate/series_builder.rb#3
  def period; end

  # source://groupdate//lib/groupdate/series_builder.rb#44
  def round_time(time); end

  # source://groupdate//lib/groupdate/series_builder.rb#99
  def time_range; end

  # Returns the value of attribute time_zone.
  #
  # source://groupdate//lib/groupdate/series_builder.rb#3
  def time_zone; end

  # Returns the value of attribute week_start.
  #
  # source://groupdate//lib/groupdate/series_builder.rb#3
  def week_start; end

  private

  # @return [Boolean]
  #
  # source://groupdate//lib/groupdate/series_builder.rb#296
  def entire_series?(series_default); end

  # source://groupdate//lib/groupdate/series_builder.rb#163
  def generate_series(data, multiple_groups, group_index); end

  # source://groupdate//lib/groupdate/series_builder.rb#280
  def handle_multiple(data, series, multiple_groups, group_index); end

  # source://groupdate//lib/groupdate/series_builder.rb#237
  def key_format; end

  # source://groupdate//lib/groupdate/series_builder.rb#159
  def now; end

  # source://groupdate//lib/groupdate/series_builder.rb#270
  def step; end

  # source://groupdate//lib/groupdate/series_builder.rb#300
  def utc; end
end

# source://groupdate//lib/groupdate/version.rb#2
Groupdate::VERSION = T.let(T.unsafe(nil), String)
