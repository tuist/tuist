# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `que-scheduler` gem.
# Please instead update this file by running `bin/tapioca gem que-scheduler`.

# The purpose of this module is to centralise the differences when supporting both que 0.x and
# 1.x with the same gem.
#
# source://que-scheduler//lib/que/scheduler/version.rb#1
module Que
  extend ::Que::Utils::Assertions
  extend ::Que::Utils::Constantization
  extend ::Que::Utils::ErrorNotification
  extend ::Que::Utils::Freeze
  extend ::Que::Utils::Introspection
  extend ::Que::Utils::JSONSerialization
  extend ::Que::Utils::Logging
  extend ::Que::Utils::Middleware
  extend ::Que::Utils::QueueManagement
  extend ::Que::Utils::Ruby2Keywords
  extend ::Que::Utils::Transactions

  class << self
    # source://forwardable/1.3.3/forwardable.rb#231
    def bulk_enqueue(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def checkout(*args, **_arg1, &block); end

    # source://que/2.3.0/lib/que.rb#87
    def connection=(conn); end

    # source://que/2.3.0/lib/que.rb#108
    def connection_proc=(connection_proc); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def db_version(*args, **_arg1, &block); end

    # source://que/2.3.0/lib/que.rb#78
    def default_queue; end

    # source://que/2.3.0/lib/que.rb#50
    def default_queue=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enqueue(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def execute(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def in_transaction?(*args, **_arg1, &block); end

    # source://que/2.3.0/lib/que/version.rb#6
    def job_schema_version; end

    # source://que/2.3.0/lib/que/locker.rb#11
    def locker; end

    # source://que/2.3.0/lib/que/locker.rb#11
    def locker=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def migrate!(*args, **_arg1, &block); end

    # source://que/2.3.0/lib/que.rb#113
    def pool; end

    # source://que/2.3.0/lib/que.rb#119
    def pool=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run_synchronously(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run_synchronously=(*args, **_arg1, &block); end

    # source://que/2.3.0/lib/que.rb#82
    def server?; end

    # source://que/2.3.0/lib/que.rb#76
    def use_prepared_statements; end

    # source://que/2.3.0/lib/que.rb#76
    def use_prepared_statements=(_arg0); end
  end
end

# source://que-scheduler//lib/que/scheduler/version.rb#2
module Que::Scheduler
  class << self
    # source://que-scheduler//lib/que/scheduler/configuration.rb#19
    def apply_defaults; end

    # Returns the value of attribute configuration.
    #
    # source://que-scheduler//lib/que/scheduler/configuration.rb#12
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://que-scheduler//lib/que/scheduler/configuration.rb#12
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://que-scheduler//lib/que/scheduler/configuration.rb#14
    def configure; end

    # source://que-scheduler//lib/que/scheduler/schedule.rb#80
    def schedule; end
  end
end

# For jobs of type ActiveJob
#
# source://que-scheduler//lib/que/scheduler/to_enqueue.rb#86
class Que::Scheduler::ActiveJobType < ::Que::Scheduler::ToEnqueue
  # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#96
  def calculate_enqueued_values(job); end

  # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#87
  def enqueue; end

  # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#133
  def enqueue_active_job; end
end

# source://que-scheduler//lib/que/scheduler/audit.rb#7
module Que::Scheduler::Audit
  class << self
    # source://que-scheduler//lib/que/scheduler/audit.rb#26
    def append(scheduler_job_id, executed_at, enqueued_jobs); end
  end
end

# source://que-scheduler//lib/que/scheduler/audit.rb#9
Que::Scheduler::Audit::ENQUEUED_TABLE_NAME = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/audit.rb#10
Que::Scheduler::Audit::INSERT_AUDIT = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/audit.rb#15
Que::Scheduler::Audit::INSERT_AUDIT_ENQUEUED = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/audit.rb#8
Que::Scheduler::Audit::TABLE_NAME = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/configuration.rb#6
class Que::Scheduler::Configuration
  # Returns the value of attribute que_scheduler_queue.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def que_scheduler_queue; end

  # Sets the attribute que_scheduler_queue
  #
  # @param value the value to set the attribute que_scheduler_queue to.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def que_scheduler_queue=(_arg0); end

  # Returns the value of attribute schedule.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def schedule; end

  # Sets the attribute schedule
  #
  # @param value the value to set the attribute schedule to.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def schedule=(_arg0); end

  # Returns the value of attribute schedule_location.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def schedule_location; end

  # Sets the attribute schedule_location
  #
  # @param value the value to set the attribute schedule_location to.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def schedule_location=(_arg0); end

  # Returns the value of attribute time_zone.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def time_zone; end

  # Sets the attribute time_zone
  #
  # @param value the value to set the attribute time_zone to.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def time_zone=(_arg0); end

  # Returns the value of attribute transaction_adapter.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def transaction_adapter; end

  # Sets the attribute transaction_adapter
  #
  # @param value the value to set the attribute transaction_adapter to.
  #
  # source://que-scheduler//lib/que/scheduler/configuration.rb#7
  def transaction_adapter=(_arg0); end
end

# source://que-scheduler//lib/que/scheduler/db.rb#7
module Que::Scheduler::Db
  class << self
    # source://que-scheduler//lib/que/scheduler/db.rb#13
    def count_schedulers; end

    # source://que-scheduler//lib/que/scheduler/db.rb#17
    def now; end

    # source://que-scheduler//lib/que/scheduler/db.rb#22
    def transaction; end
  end
end

# source://que-scheduler//lib/que/scheduler/db.rb#10
Que::Scheduler::Db::NOW_SQL = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/db.rb#8
Que::Scheduler::Db::SCHEDULER_COUNT_SQL = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/defined_job.rb#7
class Que::Scheduler::DefinedJob < ::Hashie::Dash
  include ::Hashie::Extensions::Dash::PropertyTranslation
  include ::Hashie::Extensions::Dash::PropertyTranslation::InstanceMethods
  extend ::Hashie::Extensions::Dash::PropertyTranslation::ClassMethods

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def args_array(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def args_array=(value); end

  # Given the last scheduler run time, and this run time, return all
  # the instances that should be enqueued for the job class.
  #
  # source://que-scheduler//lib/que/scheduler/defined_job.rb#40
  def calculate_missed_runs(last_run_time, as_time); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def cron(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def cron=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def job_class(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def job_class=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def name(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def name=(value); end

  # Given a "last time", return the next Time the event will occur, or nil if it
  # is after "to".
  #
  # source://que-scheduler//lib/que/scheduler/defined_job.rb#32
  def next_run_time(from, to); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def priority(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def priority=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def queue(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def queue=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def schedule_type(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def schedule_type=(value); end

  # source://que-scheduler//lib/que/scheduler/defined_job.rb#51
  def validate(options); end

  private

  # source://que-scheduler//lib/que/scheduler/defined_job.rb#107
  def err_field(field, options, reason = T.unsafe(nil)); end

  # source://que-scheduler//lib/que/scheduler/defined_job.rb#114
  def generate_to_enqueue_list(missed_times); end

  # source://que-scheduler//lib/que/scheduler/defined_job.rb#73
  def validate_fields_presence(options); end

  # source://que-scheduler//lib/que/scheduler/defined_job.rb#60
  def validate_fields_types(options); end

  # source://que-scheduler//lib/que/scheduler/defined_job.rb#80
  def validate_job_class_related(options); end

  class << self
    # source://que-scheduler//lib/que/scheduler/defined_job.rb#24
    def create(options); end
  end
end

# source://que-scheduler//lib/que/scheduler/defined_job.rb#10
Que::Scheduler::DefinedJob::DEFINED_JOB_TYPES = T.let(T.unsafe(nil), Array)

# source://que-scheduler//lib/que/scheduler/defined_job.rb#11
Que::Scheduler::DefinedJob::DEFINED_JOB_TYPE_DEFAULT = T.let(T.unsafe(nil), Symbol)

# source://que-scheduler//lib/que/scheduler/defined_job.rb#12
Que::Scheduler::DefinedJob::DEFINED_JOB_TYPE_EVERY_EVENT = T.let(T.unsafe(nil), Symbol)

# A value object returned after a job has been enqueued. This is necessary as Que (normal) and
# ActiveJob return very different objects from the `enqueue` call.
#
# source://que-scheduler//lib/que/scheduler/to_enqueue.rb#151
class Que::Scheduler::EnqueuedJobType < ::Hashie::Dash
  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def args(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def args=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def job_class(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def job_class=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def job_id(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def job_id=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def priority(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def priority=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def queue(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def queue=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def run_at(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def run_at=(value); end
end

# source://que-scheduler//lib/que/scheduler/enqueueing_calculator.rb#5
module Que::Scheduler::EnqueueingCalculator
  class << self
    # source://que-scheduler//lib/que/scheduler/enqueueing_calculator.rb#12
    def parse(scheduler_config, scheduler_job_args); end
  end
end

# source://que-scheduler//lib/que/scheduler/enqueueing_calculator.rb#6
class Que::Scheduler::EnqueueingCalculator::Result < ::Hashie::Dash
  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def job_dictionary(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def job_dictionary=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def missed_jobs(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def missed_jobs=(value); end
end

# source://que-scheduler//lib/que/scheduler/jobs/que_scheduler_audit_clear_down_job.rb#7
module Que::Scheduler::Jobs; end

# source://que-scheduler//lib/que/scheduler/jobs/que_scheduler_audit_clear_down_job.rb#8
class Que::Scheduler::Jobs::QueSchedulerAuditClearDownJob < ::Que::Job
  # source://que-scheduler//lib/que/scheduler/jobs/que_scheduler_audit_clear_down_job.rb#30
  def run(options); end

  class << self
    # source://que-scheduler//lib/que/scheduler/jobs/que_scheduler_audit_clear_down_job.rb#10
    def build_sql(table_name); end
  end
end

# source://que-scheduler//lib/que/scheduler/jobs/que_scheduler_audit_clear_down_job.rb#24
Que::Scheduler::Jobs::QueSchedulerAuditClearDownJob::DELETE_AUDIT_ENQUEUED_SQL = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/jobs/que_scheduler_audit_clear_down_job.rb#25
Que::Scheduler::Jobs::QueSchedulerAuditClearDownJob::DELETE_AUDIT_SQL = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/migrations.rb#5
module Que::Scheduler::Migrations
  class << self
    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/migrations.rb#37
    def audit_table_exists?; end

    # source://que-scheduler//lib/que/scheduler/migrations.rb#29
    def db_version; end

    # source://que-scheduler//lib/que/scheduler/migrations.rb#15
    def migrate!(version:); end

    # This method is only intended for use in squashed migrations
    #
    # source://que-scheduler//lib/que/scheduler/migrations.rb#45
    def reenqueue_scheduler_if_missing; end

    private

    # source://que-scheduler//lib/que/scheduler/migrations.rb#65
    def execute_step(number, direction); end

    # source://que-scheduler//lib/que/scheduler/migrations.rb#60
    def migrate_down(current, version); end

    # source://que-scheduler//lib/que/scheduler/migrations.rb#53
    def migrate_up(current, version); end
  end
end

# source://que-scheduler//lib/que/scheduler/migrations.rb#6
Que::Scheduler::Migrations::AUDIT_TABLE_NAME = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/migrations.rb#12
Que::Scheduler::Migrations::MAX_VERSION = T.let(T.unsafe(nil), Integer)

# source://que-scheduler//lib/que/scheduler/migrations.rb#7
Que::Scheduler::Migrations::TABLE_COMMENT = T.let(T.unsafe(nil), String)

# For jobs of type Que::Job
#
# source://que-scheduler//lib/que/scheduler/to_enqueue.rb#65
class Que::Scheduler::QueJobType < ::Que::Scheduler::ToEnqueue
  # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#66
  def enqueue; end
end

# source://que-scheduler//lib/que/scheduler/schedule.rb#6
class Que::Scheduler::Schedule
  class << self
    # source://que-scheduler//lib/que/scheduler/schedule.rb#29
    def from_file(location); end

    # source://que-scheduler//lib/que/scheduler/schedule.rb#38
    def from_hash(config_hash); end

    # source://que-scheduler//lib/que/scheduler/schedule.rb#33
    def from_yaml(config); end

    # source://que-scheduler//lib/que/scheduler/schedule.rb#44
    def hash_item_to_defined_job(name, defined_job_hash_in); end

    # The main method for determining the schedule. It has to evaluate the schedule as late as
    # possible (ie just as it is about to be used) as we cannot guarantee we are in a Rails
    # app with initializers. In a future release this may change to "fast fail" in Rails by
    # checking the config up front.
    #
    # source://que-scheduler//lib/que/scheduler/schedule.rb#12
    def schedule; end
  end
end

# source://que-scheduler//lib/que/scheduler/scheduler_job.rb#16
class Que::Scheduler::SchedulerJob < ::Que::Job
  # source://que-scheduler//lib/que/scheduler/scheduler_job.rb#40
  def enqueue_required_jobs(calculator_result, logs); end

  # source://que-scheduler//lib/que/scheduler/scheduler_job.rb#22
  def run(options = T.unsafe(nil)); end

  private

  # source://que-scheduler//lib/que/scheduler/scheduler_job.rb#50
  def check_enqueued_job(to_enqueue, enqueued_job, logs); end

  # source://que-scheduler//lib/que/scheduler/scheduler_job.rb#61
  def enqueue_self_again(scheduler_job_args, last_full_execution, job_dictionary, enqueued_jobs); end
end

# source://que-scheduler//lib/que/scheduler/scheduler_job.rb#17
Que::Scheduler::SchedulerJob::SCHEDULER_FREQUENCY = T.let(T.unsafe(nil), Integer)

# source://que-scheduler//lib/que/scheduler/scheduler_job_args.rb#8
class Que::Scheduler::SchedulerJobArgs < ::Hashie::Dash
  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def as_time(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def as_time=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def job_dictionary(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def job_dictionary=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def last_run_time(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def last_run_time=(value); end

  class << self
    # source://que-scheduler//lib/que/scheduler/scheduler_job_args.rb#13
    def build(options); end
  end
end

# source://que-scheduler//lib/que/scheduler/state_checks.rb#7
module Que::Scheduler::StateChecks
  class << self
    # source://que-scheduler//lib/que/scheduler/state_checks.rb#9
    def check; end

    private

    # source://que-scheduler//lib/que/scheduler/state_checks.rb#15
    def assert_db_migrated; end
  end
end

# source://que-scheduler//lib/que/scheduler/time_zone.rb#3
module Que::Scheduler::TimeZone
  class << self
    # source://que-scheduler//lib/que/scheduler/time_zone.rb#38
    def time_zone; end
  end
end

# source://que-scheduler//lib/que/scheduler/time_zone.rb#4
Que::Scheduler::TimeZone::BOTH_CONFIG_AND_TIME_DOT_ZONE_SET = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/time_zone.rb#32
Que::Scheduler::TimeZone::TIME_ZONE_CONFIG_IS_NOT_VALID = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/time_zone.rb#11
Que::Scheduler::TimeZone::TIME_ZONE_COULD_NOT_BE_DETERMINED = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/to_enqueue.rb#7
class Que::Scheduler::ToEnqueue < ::Hashie::Dash
  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def args(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def args=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def job_class(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def job_class=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def priority(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def priority=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def queue(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def queue=(value); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#92
  def run_at(&block); end

  # source://hashie/5.0.0/lib/hashie/dash.rb#99
  def run_at=(value); end

  class << self
    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#25
    def active_job_defined?; end

    # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#29
    def active_job_version; end

    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#33
    def active_job_version_supports_queues?; end

    # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#15
    def create(options); end

    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#21
    def valid_job_class?(job_class); end

    private

    # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#44
    def type_from_job_class(job_class); end

    # source://que-scheduler//lib/que/scheduler/to_enqueue.rb#51
    def types; end
  end
end

# source://que-scheduler//lib/que/scheduler/version.rb#3
Que::Scheduler::VERSION = T.let(T.unsafe(nil), String)

# source://que-scheduler//lib/que/scheduler/version_support.rb#7
module Que::Scheduler::VersionSupport
  class << self
    # Ensure the job runs at least once an hour when it is backing off due to errors
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#25
    def apply_retry_semantics(context); end

    # source://que-scheduler//lib/que/scheduler/version_support.rb#69
    def default_scheduler_queue; end

    # source://que-scheduler//lib/que/scheduler/version_support.rb#51
    def enqueue_a_job(clazz, job_options = T.unsafe(nil), job_args = T.unsafe(nil)); end

    # Between Que 0.x and 1.x the result of Que execute changed keys from strings to symbols.
    # Here we wrap the concept and make sure either way produces symbols
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#46
    def execute(str, args = T.unsafe(nil)); end

    # source://que-scheduler//lib/que/scheduler/version_support.rb#34
    def job_attributes(enqueued_job); end

    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#86
    def one_major?; end

    # source://que-scheduler//lib/que/scheduler/version_support.rb#91
    def que_version; end

    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#73
    def running_synchronously?; end

    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#77
    def running_synchronously_code?; end

    # Ensure que-scheduler runs at the highest priority. This is because its priority is a
    # the top of all jobs it enqueues.
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#16
    def set_priority(context, priority); end

    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#81
    def zero_major?; end

    private

    # source://que-scheduler//lib/que/scheduler/version_support.rb#105
    def normalise_array_of_hashes(array); end

    # source://que-scheduler//lib/que/scheduler/version_support.rb#101
    def que_version_object; end

    # @return [Boolean]
    #
    # source://que-scheduler//lib/que/scheduler/version_support.rb#97
    def supports_job_options_keyword?; end
  end
end

# source://que-scheduler//lib/que/scheduler/version_support.rb#8
Que::Scheduler::VersionSupport::RETRY_PROC = T.let(T.unsafe(nil), Proc)
