# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `vite_ruby` gem.
# Please instead update this file by running `bin/tapioca gem vite_ruby`.

# source://vite_ruby//lib/vite_ruby.rb#18
class ViteRuby
  # @return [ViteRuby] a new instance of ViteRuby
  #
  # source://vite_ruby//lib/vite_ruby.rb#70
  def initialize(**config_options); end

  # Public: Keeps track of watched files and triggers builds as needed.
  #
  # source://vite_ruby//lib/vite_ruby.rb#122
  def builder; end

  # Internal: Helper to run commands related with Vite.
  #
  # source://vite_ruby//lib/vite_ruby.rb#127
  def commands; end

  # Public: Current instance configuration for Vite.
  #
  # source://vite_ruby//lib/vite_ruby.rb#132
  def config; end

  # Public: Allows overriding the configuration for this instance.
  #
  # source://vite_ruby//lib/vite_ruby.rb#142
  def configure(**options); end

  # Public: Returns true if the Vite development server is currently running.
  # NOTE: Checks only once every second since every lookup calls this method.
  #
  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby.rb#86
  def dev_server_running?; end

  # Public: Returns a digest of all the watched files, allowing to detect
  # changes. Useful to perform version checks in single-page applications.
  #
  # source://vite_ruby//lib/vite_ruby.rb#80
  def digest; end

  # Public: Additional environment variables to pass to Vite.
  #
  # Example:
  #   ViteRuby.env['VITE_RUBY_CONFIG_PATH'] = 'config/alternate_vite.json'
  #
  # source://vite_ruby//lib/vite_ruby.rb#104
  def env; end

  # source://vite_ruby//lib/vite_ruby.rb#74
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://vite_ruby//lib/vite_ruby.rb#68
  def logger=(_arg0); end

  # Public: Enables looking up assets managed by Vite using name and type.
  #
  # source://vite_ruby//lib/vite_ruby.rb#147
  def manifest; end

  # Internal: Executes the vite binary.
  #
  # source://vite_ruby//lib/vite_ruby.rb#117
  def run(argv, **options); end

  # Public: The proxy for assets should only run in development mode.
  #
  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby.rb#109
  def run_proxy?; end

  class << self
    # Internal: Refreshes the manifest.
    #
    # source://vite_ruby//lib/vite_ruby.rb#43
    def bootstrap; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def commands(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def config(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def configure(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def digest(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def env(*args, **_arg1, &block); end

    # Internal: Detects if the application has installed a framework-specific
    # variant of Vite Ruby.
    #
    # source://vite_ruby//lib/vite_ruby.rb#59
    def framework_libraries; end

    # Internal: Loads all available rake tasks.
    #
    # source://vite_ruby//lib/vite_ruby.rb#48
    def install_tasks; end

    # source://vite_ruby//lib/vite_ruby.rb#38
    def instance; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def mode(*args, **_arg1, &block); end

    # Internal: Creates a new instance with the specified options.
    #
    # source://vite_ruby//lib/vite_ruby.rb#53
    def reload_with(**config_options); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def run_proxy?(*args, **_arg1, &block); end
  end
end

# source://vite_ruby//lib/vite_ruby/build.rb#7
class ViteRuby::Build < ::Struct
  def current_digest; end
  def current_digest=(_); end
  def digest; end
  def digest=(_); end
  def errors; end
  def errors=(_); end

  # source://vite_ruby//lib/vite_ruby/build.rb#43
  def fresh?; end

  def last_build_path; end
  def last_build_path=(_); end

  # source://vite_ruby//lib/vite_ruby/build.rb#49
  def retry_failed?; end

  # source://vite_ruby//lib/vite_ruby/build.rb#37
  def stale?; end

  def success; end
  def success=(_); end
  def timestamp; end
  def timestamp=(_); end

  # source://vite_ruby//lib/vite_ruby/build.rb#73
  def to_json(*_args); end

  def vite_ruby; end
  def vite_ruby=(_); end

  # source://vite_ruby//lib/vite_ruby/build.rb#56
  def with_result(**attrs); end

  # source://vite_ruby//lib/vite_ruby/build.rb#68
  def write_to_cache; end

  class << self
    def [](*_arg0); end

    # source://vite_ruby//lib/vite_ruby/build.rb#10
    def from_previous(last_build_path, current_digest); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end

    private

    # source://vite_ruby//lib/vite_ruby/build.rb#30
    def default_metadata; end

    # source://vite_ruby//lib/vite_ruby/build.rb#21
    def parse_metadata(pathname); end
  end
end

# Public: Keeps track of watched files and triggers builds as needed.
#
# source://vite_ruby//lib/vite_ruby/builder.rb#6
class ViteRuby::Builder
  extend ::Forwardable

  # @return [Builder] a new instance of Builder
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#7
  def initialize(vite_ruby); end

  # Public: Checks if the watched files have changed since the last compilation,
  # and triggers a Vite build if any files have changed.
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#13
  def build(*args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # Internal: Reads the result of the last compilation from disk.
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#31
  def last_build_metadata(ssr: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def logger(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def run(*args, **_arg1, &block); end

  private

  # Public: Initiates a Vite build command to generate assets.
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#66
  def build_with_vite(*args); end

  # Internal: The file path where metadata of the last build is stored.
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#48
  def last_build_path(ssr:); end

  # Internal: Outputs the build results.
  #
  # NOTE: By default it also outputs the manifest entries.
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#75
  def log_build_result(_stdout, stderr, status); end

  # Internal: Writes a digest of the watched files to disk for future checks.
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#42
  def record_build_metadata(build, **attrs); end

  # Internal: Returns a digest of all the watched files, allowing to detect
  # changes, and skip Vite builds if no files have changed.
  #
  # source://vite_ruby//lib/vite_ruby/builder.rb#54
  def watched_files_digest; end
end

# Public: Command line interface that allows to install the library, and run
# simple commands.
#
# source://vite_ruby//lib/vite_ruby/cli.rb#7
class ViteRuby::CLI
  extend ::Dry::CLI::Registry

  class << self
    # Internal: Allows framework-specific variants to extend the CLI.
    #
    # source://vite_ruby//lib/vite_ruby/cli.rb#20
    def require_framework_libraries(path = T.unsafe(nil)); end
  end
end

# source://vite_ruby//lib/vite_ruby/cli/build.rb#3
class ViteRuby::CLI::Build < ::ViteRuby::CLI::Vite
  # source://vite_rails/3.0.17/lib/vite_rails/cli.rb#9
  def call(**options); end
end

# source://vite_ruby//lib/vite_ruby/cli/build.rb#4
ViteRuby::CLI::Build::DEFAULT_ENV = T.let(T.unsafe(nil), String)

# source://vite_ruby//lib/vite_ruby/cli/clobber.rb#3
class ViteRuby::CLI::Clobber < ::Dry::CLI::Command
  extend ::Dry::CLI::Command::ClassMethods

  # source://vite_ruby//lib/vite_ruby/cli/clobber.rb#10
  def call(mode:, **_arg1); end
end

# source://vite_ruby//lib/vite_ruby/cli/dev.rb#3
class ViteRuby::CLI::Dev < ::ViteRuby::CLI::Vite
  # source://vite_ruby//lib/vite_ruby/cli/dev.rb#10
  def call(**options); end
end

# source://vite_ruby//lib/vite_ruby/cli/dev.rb#4
ViteRuby::CLI::Dev::DEFAULT_ENV = T.let(T.unsafe(nil), String)

# NOTE: Extracted from dry-cli version 0.6.0, which later removed this file as
# it was refactored and extracted into the more complete (and complex) dry-files.
#
# source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#8
module ViteRuby::CLI::FileUtils
  class << self
    # Adds a new line at the bottom of the file.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#34
    def append(path, contents); end

    # Copies source into destination.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#25
    def cp(source, destination); end

    # Inject `contents` in `path` after `target`.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#67
    def inject_line_after(path, target, contents); end

    # Inject `contents` in `path` after last `target`.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#75
    def inject_line_after_last(path, target, contents); end

    # Inject `contents` in `path` before `target`.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#59
    def inject_line_before(path, target, contents); end

    # Replace first line in `path` that contains `target` with `replacement`.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#48
    def replace_first_line(path, target, replacement); end

    # Creates a new file or rewrites the contents of an existing file.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#14
    def write(path, *content); end

    private

    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#122
    def _inject_line_after(path, target, contents, finder); end

    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#110
    def _inject_line_before(path, target, contents, finder); end

    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#96
    def index(content, path, target); end

    # Creates all parent directories for the given file path.
    #
    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#85
    def mkdir_p(path); end

    # Returns an array with lines in the specified file, empty if it doesn't exist.
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#90
    def read_lines(path); end

    # @api private
    # @since 1.2.11
    #
    # source://vite_ruby//lib/vite_ruby/cli/file_utils.rb#103
    def rindex(content, path, target); end
  end
end

# source://vite_ruby//lib/vite_ruby/cli/install.rb#5
class ViteRuby::CLI::Install < ::Dry::CLI::Command
  extend ::Dry::CLI::Command::ClassMethods

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#8
  def call(**_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # Internal: Create a sample JS file and attempt to inject it in an HTML template.
  #
  # source://vite_rails/3.0.17/lib/vite_rails/cli.rb#60
  def install_sample_files; end

  # Internal: Setup for a plain Rack application.
  #
  # source://vite_rails/3.0.17/lib/vite_rails/cli.rb#28
  def setup_app_files; end

  protected

  # Internal: The JS packages that should be added to the app.
  #
  # source://vite_ruby//lib/vite_ruby/cli/install.rb#32
  def js_dependencies; end

  private

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#60
  def append(*args); end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#67
  def copy_template(path, to:); end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#60
  def cp(*args); end

  # Internal: Creates the Vite and vite-plugin-ruby configuration files.
  #
  # source://vite_ruby//lib/vite_ruby/cli/install.rb#72
  def create_configuration_files; end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#60
  def inject_line_after(*args); end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#60
  def inject_line_after_last(*args); end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#60
  def inject_line_before(*args); end

  # Internal: Adds compilation output dirs to git ignore.
  #
  # source://vite_ruby//lib/vite_ruby/cli/install.rb#88
  def install_gitignore; end

  # Internal: Installs vite and vite-plugin-ruby at the project level.
  #
  # source://vite_ruby//lib/vite_ruby/cli/install.rb#80
  def install_js_dependencies; end

  # Internal: Support all popular package managers.
  #
  # source://vite_ruby//lib/vite_ruby/cli/install.rb#119
  def npm_install; end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#60
  def replace_first_line(*args); end

  # Internal: The root path for the Ruby application.
  #
  # source://vite_ruby//lib/vite_ruby/cli/install.rb#103
  def root; end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#111
  def run_with_capture(*args, **options); end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#107
  def say(*args); end

  # Internal: Avoid printing warning about missing vite.json, we will create one.
  #
  # source://vite_ruby//lib/vite_ruby/cli/install.rb#127
  def silent_warnings; end

  # source://vite_ruby//lib/vite_ruby/cli/install.rb#60
  def write(*args); end
end

# source://vite_ruby//lib/vite_ruby/cli/install.rb#65
ViteRuby::CLI::Install::TEMPLATES_PATH = T.let(T.unsafe(nil), Pathname)

# source://vite_ruby//lib/vite_ruby/cli/ssr.rb#3
class ViteRuby::CLI::SSR < ::ViteRuby::CLI::Vite
  # @raise [ArgumentError]
  #
  # source://vite_ruby//lib/vite_ruby/cli/ssr.rb#10
  def call(mode:, inspect: T.unsafe(nil), trace_deprecation: T.unsafe(nil)); end
end

# source://vite_ruby//lib/vite_ruby/cli/ssr.rb#4
ViteRuby::CLI::SSR::DEFAULT_ENV = T.let(T.unsafe(nil), String)

# source://vite_ruby//lib/vite_ruby/cli/ssr.rb#5
ViteRuby::CLI::SSR::JS_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://vite_ruby//lib/vite_ruby/cli/upgrade.rb#3
class ViteRuby::CLI::Upgrade < ::ViteRuby::CLI::Install
  # source://vite_ruby//lib/vite_ruby/cli/upgrade.rb#6
  def call(**_arg0); end

  protected

  # NOTE: Spawn a new process so that it uses the updated vite_ruby.
  #
  # source://vite_ruby//lib/vite_ruby/cli/upgrade.rb#22
  def upgrade_npm_packages; end

  # source://vite_ruby//lib/vite_ruby/cli/upgrade.rb#13
  def upgrade_ruby_gems; end
end

# source://vite_ruby//lib/vite_ruby/cli/upgrade_packages.rb#3
class ViteRuby::CLI::UpgradePackages < ::ViteRuby::CLI::Install
  # source://vite_ruby//lib/vite_ruby/cli/upgrade_packages.rb#6
  def call(**_arg0); end
end

# source://vite_ruby//lib/vite_ruby/cli/version.rb#3
class ViteRuby::CLI::Version < ::Dry::CLI::Command
  extend ::Dry::CLI::Command::ClassMethods

  # source://vite_ruby//lib/vite_ruby/cli/version.rb#6
  def call(**_arg0); end
end

# source://vite_ruby//lib/vite_ruby/cli/vite.rb#3
class ViteRuby::CLI::Vite < ::Dry::CLI::Command
  extend ::Dry::CLI::Command::ClassMethods

  # @yield [args]
  #
  # source://vite_ruby//lib/vite_ruby/cli/vite.rb#18
  def call(mode:, args: T.unsafe(nil), clobber: T.unsafe(nil), **boolean_opts); end

  class << self
    # source://vite_ruby//lib/vite_ruby/cli/vite.rb#6
    def executable_options; end

    # source://vite_ruby//lib/vite_ruby/cli/vite.rb#12
    def shared_options; end
  end
end

# source://vite_ruby//lib/vite_ruby/cli/vite.rb#4
ViteRuby::CLI::Vite::CURRENT_ENV = T.let(T.unsafe(nil), String)

# Internal: Companion libraries for Vite Ruby, and their target framework.
#
# source://vite_ruby//lib/vite_ruby.rb#23
ViteRuby::COMPANION_LIBRARIES = T.let(T.unsafe(nil), Hash)

# Public: Encapsulates common tasks, available both programatically and from the
# CLI and Rake tasks.
#
# source://vite_ruby//lib/vite_ruby/commands.rb#5
class ViteRuby::Commands
  extend ::Forwardable

  # @return [Commands] a new instance of Commands
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#6
  def initialize(vite_ruby); end

  # Public: Builds all assets that are managed by Vite, from the entrypoints.
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#20
  def build(*args); end

  # Public: Defaults to production, and exits if the build fails.
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#11
  def build_from_task(*args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def builder(*args, **_arg1, &block); end

  # Public: Cleanup old assets in the output directory.
  #
  # keep_up_to - Max amount of backups to preserve.
  # age_in_seconds - Amount of time to look back in order to preserve them.
  #
  # NOTE: By default keeps the last version, or 2 if created in the past hour.
  #
  # Examples:
  #   To force only 1 backup to be kept: clean(1, 0)
  #   To only keep files created within the last 10 minutes: clean(0, 600)
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#48
  def clean(keep_up_to: T.unsafe(nil), age_in_seconds: T.unsafe(nil)); end

  # Public: Receives arguments from a rake task.
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#32
  def clean_from_task(args); end

  # Public: Removes all build cache and previously compiled assets.
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#25
  def clobber; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # Internal: Installs the binstub for the CLI in the appropriate path.
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#64
  def install_binstubs; end

  # Internal: Checks if the npm version is 6 or lower.
  #
  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#70
  def legacy_npm_version?; end

  # Internal: Checks if the yarn version is 1.x.
  #
  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#75
  def legacy_yarn_version?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def logger(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def logger=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def manifest(*args, **_arg1, &block); end

  # Internal: Prints information about ViteRuby's environment.
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#102
  def print_info; end

  # Internal: Verifies if ViteRuby is properly installed.
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#80
  def verify_install; end

  private

  # source://vite_ruby//lib/vite_ruby/commands.rb#137
  def clean_files(files); end

  # source://vite_ruby//lib/vite_ruby/commands.rb#152
  def current_version_files; end

  # source://vite_ruby//lib/vite_ruby/commands.rb#164
  def ensure_log_goes_to_stdout; end

  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby/commands.rb#133
  def may_clean?; end

  # source://vite_ruby//lib/vite_ruby/commands.rb#144
  def versions; end

  # source://vite_ruby//lib/vite_ruby/commands.rb#156
  def with_node_env(env); end
end

# Internal: Verifies that the installed vite-plugin-ruby version is compatible
# with the current version of vite_ruby.
#
# This helps to prevent more subtle runtime errors if there is a mismatch in the
# manifest schema.
#
# source://vite_ruby//lib/vite_ruby/compatibility_check.rb#10
module ViteRuby::CompatibilityCheck
  class << self
    # Internal: Returns true unless the check is performed and does not meet the
    # requirement.
    #
    # @return [Boolean]
    #
    # source://vite_ruby//lib/vite_ruby/compatibility_check.rb#38
    def compatible_plugin?(npm_req, ruby_req); end

    # Internal: Notifies the user of a possible incompatible plugin.
    #
    # source://vite_ruby//lib/vite_ruby/compatibility_check.rb#22
    def raise_unless_satisfied(npm_req, ruby_req); end

    # Public: Attempt to verify that the vite-plugin-ruby version is compatible.
    #
    # source://vite_ruby//lib/vite_ruby/compatibility_check.rb#13
    def verify_plugin_version(root); end
  end
end

# Public: Allows to resolve configuration sourced from `config/vite.json` and
# environment variables, combining them with the default options.
#
# source://vite_ruby//lib/vite_ruby/config.rb#7
class ViteRuby::Config
  extend ::ViteRails::Config

  # @return [Config] a new instance of Config
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#105
  def initialize(attrs); end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def additional_entrypoints; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def asset_host; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def assets_dir; end

  # Internal: Path where vite-plugin-ruby outputs the assets manifest file.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#26
  def assets_manifest_path; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def auto_build; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def base; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def build_cache_dir; end

  # Public: The directory where Vite will store the built assets.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#36
  def build_output_dir; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def config_path; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def dev_server_connect_timeout; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def entrypoints_dir; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def hide_build_console_output; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def host; end

  # source://vite_ruby//lib/vite_ruby/config.rb#16
  def host_with_port; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def https; end

  # Public: Loads an optional config/vite.rb file that can modify ViteRuby.env
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#56
  def load_ruby_config; end

  # Internal: Path where Vite outputs the manifest file.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#21
  def manifest_path; end

  # Internal: Path to the manifest files generated by Vite and vite-plugin-ruby.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#31
  def manifest_paths; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def mode; end

  # source://vite_ruby//lib/vite_ruby/config.rb#8
  def origin; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def port; end

  # source://vite_ruby//lib/vite_ruby/config.rb#12
  def protocol; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def public_dir; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def public_output_dir; end

  # Public: The directory where the entries are located.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#41
  def resolved_entrypoints_dir; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def root; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def skip_compatibility_check; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def skip_proxy; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def source_code_dir; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def ssr_build_enabled; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def ssr_entrypoint; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def ssr_output_dir; end

  # Public: Sets additional environment variables for vite-plugin-ruby.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#62
  def to_env(env_vars = T.unsafe(nil)); end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def vite_bin_path; end

  # Internal: The directory where Vite stores its processing cache.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#46
  def vite_cache_dir; end

  # Public: The directory that Vite uses as root.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#51
  def vite_root_dir; end

  # source://vite_ruby//lib/vite_ruby/config.rb#202
  def watch_additional_paths; end

  # Internal: Files and directories that should be watched for changes.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#71
  def watched_paths; end

  # Internal: Changes the current directory to the root dir.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#83
  def within_root(&block); end

  private

  # Internal: Coerces configuration options to boolean.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#101
  def coerce_booleans(config, *names); end

  # Internal: Coerces all the configuration values, in case they were passed
  # as environment variables which are always strings.
  #
  # source://vite_ruby//lib/vite_ruby/config.rb#91
  def coerce_values(config); end

  class << self
    # Public: Returns the project configuration for Vite.
    #
    # source://vite_ruby//lib/vite_ruby/config.rb#114
    def resolve_config(**attrs); end

    private

    # Internal: Default values for a Ruby application.
    #
    # source://vite_rails/3.0.17/lib/vite_rails/config.rb#7
    def config_defaults; end

    # Internal: Extracts the configuration options provided as env vars.
    #
    # source://vite_ruby//lib/vite_ruby/config.rb#157
    def config_from_env; end

    # Internal: Loads the configuration options provided in a JSON file.
    #
    # source://vite_ruby//lib/vite_ruby/config.rb#166
    def config_from_file(path, mode:); end

    # Internal: Used to load a JSON file from the specified path.
    #
    # source://vite_ruby//lib/vite_ruby/config.rb#143
    def load_json(path); end

    def new(*_arg0); end

    # Internal: Retrieves a configuration option from environment variables.
    #
    # source://vite_ruby//lib/vite_ruby/config.rb#152
    def option_from_env(name); end
  end
end

# Internal: Configuration options that can be provided as env vars.
#
# source://vite_ruby//lib/vite_ruby/config.rb#183
ViteRuby::Config::CONFIGURABLE_WITH_ENV = T.let(T.unsafe(nil), Array)

# Internal: Shared configuration with the Vite plugin for Ruby.
#
# source://vite_ruby//lib/vite_ruby/config.rb#177
ViteRuby::Config::DEFAULT_CONFIG = T.let(T.unsafe(nil), Hash)

# Internal: If any of these files is modified the build won't be skipped.
#
# source://vite_ruby//lib/vite_ruby/config.rb#186
ViteRuby::Config::DEFAULT_WATCHED_PATHS = T.let(T.unsafe(nil), Array)

# Internal: Configuration options that can not be provided as env vars.
#
# source://vite_ruby//lib/vite_ruby/config.rb#180
ViteRuby::Config::NOT_CONFIGURABLE_WITH_ENV = T.let(T.unsafe(nil), Array)

# source://vite_ruby//lib/vite_ruby/version.rb#8
ViteRuby::DEFAULT_PLUGIN_VERSION = T.let(T.unsafe(nil), String)

# Internal: Versions used by default when running `vite install`.
#
# source://vite_ruby//lib/vite_ruby/version.rb#7
ViteRuby::DEFAULT_VITE_VERSION = T.let(T.unsafe(nil), String)

# Public: Allows to relay asset requests to the Vite development server.
#
# source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#6
class ViteRuby::DevServerProxy < ::Rack::Proxy
  extend ::Forwardable

  # @return [DevServerProxy] a new instance of DevServerProxy
  #
  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#10
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def dev_server_running?(*args, **_arg1, &block); end

  # Rack: Intercept asset requests and send them to the Vite server.
  #
  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#17
  def perform_request(env); end

  private

  # NOTE: When using an empty 'public_output_dir', we need to rely on a
  # filesystem check to check whether Vite should serve the request.
  #
  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#63
  def file_in_vite_root?(path); end

  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#44
  def forward_to_vite_dev_server(env); end

  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#37
  def normalize_uri(uri); end

  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#32
  def rewrite_uri_for_vite(env); end

  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#55
  def vite_should_handle?(env); end

  # NOTE: Vite is configured to use 'public_output_dir' as the base, which can
  # be customized by the user in development to not match any of the routes.
  #
  # If the path starts with that prefix, it will be redirected to Vite.
  #
  # source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#72
  def vite_url_prefix; end
end

# source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#7
ViteRuby::DevServerProxy::HOST_WITH_PORT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://vite_ruby//lib/vite_ruby/dev_server_proxy.rb#8
ViteRuby::DevServerProxy::VITE_DEPENDENCY_PREFIX = T.let(T.unsafe(nil), String)

# Internal: Prefix used for environment variables that modify the configuration.
#
# source://vite_ruby//lib/vite_ruby.rb#20
ViteRuby::ENV_PREFIX = T.let(T.unsafe(nil), String)

# Internal: Provides common functionality for errors.
#
# source://vite_ruby//lib/vite_ruby/error.rb#4
class ViteRuby::Error < ::StandardError
  # source://vite_ruby//lib/vite_ruby/error.rb#5
  def message; end
end

# Public: Builds on top of Ruby I/O open3 providing a friendlier experience.
#
# source://vite_ruby//lib/vite_ruby/io.rb#6
module ViteRuby::IO
  class << self
    # Internal: A modified version of capture3 that can continuosly print stdout.
    # NOTE: Streaming output provides a better UX when running bin/vite build.
    #
    # source://vite_ruby//lib/vite_ruby/io.rb#10
    def capture(*cmd, with_output: T.unsafe(nil), stdin_data: T.unsafe(nil), **opts); end

    # Internal: Reads and yield every line in the stream. Returns the full content.
    #
    # source://vite_ruby//lib/vite_ruby/io.rb#23
    def read_lines(io); end
  end
end

# Public: Registry for accessing resources managed by Vite, using a generated
# manifest file which maps entrypoint names to file paths.
#
# Example:
#   lookup_entrypoint('calendar', type: :javascript)
#   => { "file" => "/vite/assets/calendar-1016838bab065ae1e314.js", "imports" => [] }
#
# NOTE: Using `"autoBuild": true` in `config/vite.json` file will trigger a build
# on demand as needed, before performing any lookup.
#
# source://vite_ruby//lib/vite_ruby/manifest.rb#12
class ViteRuby::Manifest
  extend ::Forwardable

  # @return [Manifest] a new instance of Manifest
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#13
  def initialize(vite_ruby); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def builder(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def dev_server_running?(*args, **_arg1, &block); end

  # Public: Returns the path for the specified Vite entrypoint file.
  #
  # Raises an error if the resource could not be found in the manifest.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#21
  def path_for(name, **options); end

  # Public: Source script for the React Refresh plugin.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#61
  def react_preamble_code; end

  # Public: The content of the preamble needed by the React Refresh plugin.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#50
  def react_refresh_preamble; end

  # Public: Refreshes the cached mappings by reading the updated manifest files.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#40
  def refresh; end

  # Public: Returns scripts, imported modules, and stylesheets for the specified
  # entrypoint files.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#27
  def resolve_entries(*names, **options); end

  # Public: The path from where the browser can download the Vite HMR client.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#45
  def vite_client_src; end

  protected

  # Internal: Computes the path for a given Vite asset using manifest.json.
  #
  # Returns a relative path, or nil if the asset is not found.
  #
  # Example:
  #   manifest.lookup('calendar.js')
  #   => { "file" => "/vite/assets/calendar-1016838bab065ae1e122.js", "imports" => [] }
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#89
  def lookup(name, **options); end

  # Internal: Strict version of lookup.
  #
  # Returns a relative path for the asset, or raises an error if not found.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#78
  def lookup!(name, **options); end

  private

  # Internal: Allows to receive :javascript and :stylesheet as :type in helpers.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#204
  def extension_for_type(entry_type); end

  # Internal: Finds the specified entry in the manifest.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#111
  def find_manifest_entry(name); end

  # Internal: Loads and merges the manifest files, resolving the asset paths.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#130
  def load_manifest; end

  # Internal: The parsed data from manifest.json.
  #
  # NOTE: When using build-on-demand in development and testing, the manifest
  # is reloaded automatically before each lookup, to ensure it's always fresh.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#123
  def manifest; end

  # Internal: Raises a detailed message when an entry is missing in the manifest.
  #
  # @raise [ViteRuby::MissingEntrypointError]
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#214
  def missing_entry_error(name, **options); end

  # Internal: Prefixes an asset with the `asset_host` for tags that do not use
  # the framework tag helpers.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#142
  def prefix_asset_with_host(path); end

  # Internal: Scopes an asset to the output folder in public, as a path.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#136
  def prefix_vite_asset(path); end

  # Internal: Entry names in the manifest are relative to the Vite.js.
  # During develoment, files outside the root must be requested explicitly.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#181
  def resolve_absolute_entry(name); end

  # Internal: Resolves the manifest entry name for the specified resource.
  #
  # @raise [ArgumentError]
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#163
  def resolve_entry_name(name, type: T.unsafe(nil)); end

  # Internal: Resolves the paths that reference a manifest entry.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#152
  def resolve_references(manifest); end

  # Internal: Resolves a virtual entry by walking all the manifest keys.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#190
  def resolve_virtual_entry(name); end

  # NOTE: Auto compilation is convenient when running tests, when the developer
  # won't focus on the frontend, or when running the Vite server is not desired.
  #
  # @return [Boolean]
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#106
  def should_build?; end

  # Internal: The origin of assets managed by Vite.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#147
  def vite_asset_origin; end

  # Internal: Adds a file extension to the file name, unless it already has one.
  #
  # source://vite_ruby//lib/vite_ruby/manifest.rb#195
  def with_file_extension(name, entry_type); end
end

# Internal: The prefix used by Vite.js to request files with an absolute path.
#
# source://vite_ruby//lib/vite_ruby/manifest.rb#98
ViteRuby::Manifest::FS_PREFIX = T.let(T.unsafe(nil), String)

# Internal: Raised when an entry is not found in the build manifest.
#
# NOTE: The complexity here is justified by the improved usability of providing
# a more specific error message depending on the situation.
#
# source://vite_ruby//lib/vite_ruby/missing_entrypoint_error.rb#7
class ViteRuby::MissingEntrypointError < ::ViteRuby::Error
  extend ::Forwardable

  # @return [MissingEntrypointError] a new instance of MissingEntrypointError
  #
  # source://vite_ruby//lib/vite_ruby/missing_entrypoint_error.rb#11
  def initialize(info); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def file_name(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def last_build(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def manifest(*args, **_arg1, &block); end

  # source://vite_ruby//lib/vite_ruby/missing_entrypoint_error.rb#24
  def possible_causes(last_build); end
end

# source://vite_ruby//lib/vite_ruby/missing_entrypoint_error.rb#43
ViteRuby::MissingEntrypointError::DEFAULT_CAUSES = T.let(T.unsafe(nil), String)

# source://vite_ruby//lib/vite_ruby/missing_entrypoint_error.rb#36
ViteRuby::MissingEntrypointError::FAILED_BUILD_CAUSES = T.let(T.unsafe(nil), String)

# source://vite_ruby//lib/vite_ruby/missing_entrypoint_error.rb#49
ViteRuby::MissingEntrypointError::NO_AUTO_BUILD_CAUSES = T.let(T.unsafe(nil), String)

# Internal: Raised when the Vite executable can not be found.
#
# source://vite_ruby//lib/vite_ruby/missing_executable_error.rb#4
class ViteRuby::MissingExecutableError < ::ViteRuby::Error
  # @return [MissingExecutableError] a new instance of MissingExecutableError
  #
  # source://vite_ruby//lib/vite_ruby/missing_executable_error.rb#5
  def initialize(error = T.unsafe(nil)); end
end

# Public: Executes Vite commands, providing conveniences for debugging.
#
# source://vite_ruby//lib/vite_ruby/runner.rb#4
class ViteRuby::Runner
  extend ::Forwardable

  # @return [Runner] a new instance of Runner
  #
  # source://vite_ruby//lib/vite_ruby/runner.rb#5
  def initialize(vite_ruby); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def config(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def env(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def logger(*args, **_arg1, &block); end

  # Public: Executes Vite with the specified arguments.
  #
  # source://vite_ruby//lib/vite_ruby/runner.rb#10
  def run(argv, exec: T.unsafe(nil)); end

  private

  # Internal: Returns an Array with the command to run.
  #
  # source://vite_ruby//lib/vite_ruby/runner.rb#29
  def command_for(args); end

  # Internal: Resolves to an executable for Vite.
  #
  # source://vite_ruby//lib/vite_ruby/runner.rb#41
  def vite_executable; end
end

# source://vite_ruby//lib/vite_ruby/version.rb#4
ViteRuby::VERSION = T.let(T.unsafe(nil), String)
