# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `logtail-rails` gem.
# Please instead update this file by running `bin/tapioca gem logtail-rails`.

module ActiveSupport::TaggedLogging::Formatter
  include ::Logtail::Overrides::ActiveSupportTaggedLogging::FormatterMethods
end

# source://logtail-rails//lib/logtail-rails/overrides/active_support_tagged_logging.rb#7
module Logtail
  class << self
    # source://logtail/0.1.13/lib/logtail.rb#22
    def config; end

    # source://logtail/0.1.13/lib/logtail.rb#27
    def start_timer; end

    # source://logtail/0.1.13/lib/logtail.rb#33
    def with_context(context, &block); end
  end
end

# source://logtail-rails//lib/logtail-rails/config/action_view.rb#4
class Logtail::Config
  # source://logtail/0.1.13/lib/logtail/config.rb#60
  def debug(&block); end

  # source://logtail/0.1.13/lib/logtail/config.rb#84
  def debug_logger; end

  # source://logtail/0.1.13/lib/logtail/config.rb#79
  def debug_logger=(value); end

  # source://logtail/0.1.13/lib/logtail/config.rb#94
  def debug_to_file!(file_path); end

  # source://logtail/0.1.13/lib/logtail/config.rb#108
  def debug_to_stdout!; end

  # source://logtail/0.1.13/lib/logtail/config.rb#157
  def development?; end

  # source://logtail/0.1.13/lib/logtail/config.rb#125
  def environment; end

  # source://logtail/0.1.13/lib/logtail/config.rb#120
  def environment=(value); end

  # source://logtail/0.1.13/lib/logtail/config.rb#52
  def filter_sent_to_better_stack(&block); end

  # source://logtail/0.1.13/lib/logtail/config.rb#33
  def http_body_limit=(_arg0); end

  # source://logtail/0.1.13/lib/logtail/config.rb#132
  def integrations; end

  # source://logtail/0.1.13/lib/logtail/config.rb#148
  def logger; end

  # source://logtail/0.1.13/lib/logtail/config.rb#143
  def logger=(value); end

  # source://logtail/0.1.13/lib/logtail/config.rb#167
  def production?; end

  # source://logtail/0.1.13/lib/logtail/config.rb#36
  def send_to_better_stack?(log_entry); end

  # source://logtail/0.1.13/lib/logtail/config.rb#172
  def staging?; end

  # source://logtail/0.1.13/lib/logtail/config.rb#162
  def test?; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# Convenience module for accessing the various `Logtail::Integrations::*` classes
# through the {Logtail::Config} object. Logtail couples configuration with the class
# responsible for implementing it. This provides for a tighter design, but also
# requires the user to understand and access the various classes. This module aims
# to provide a simple ruby-like configuration interface for internal Logtail classes.
#
# For example:
#
#     config = Logtail::Config.instance
#     config.integrations.active_record.silence = true
#
# source://logtail-rails//lib/logtail-rails/config/action_view.rb#15
module Logtail::Config::Integrations
  extend ::Logtail::Config::Integrations

  # Convenience method for accessing the {Logtail::Integrations::ActionController} class
  # specific configuration.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.action_controller.silence = true
  #
  # source://logtail-rails//lib/logtail-rails/config/action_controller.rb#24
  def action_controller; end

  # Convenience method for accessing the {Logtail::Integrations::ActionView} class
  # specific configuration.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.action_view.silence = true
  #
  # source://logtail-rails//lib/logtail-rails/config/action_view.rb#24
  def action_view; end

  # Convenience method for accessing the {Logtail::Integrations::ActiveRecord} class
  # specific configuration.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.active_record.silence = true
  #
  # source://logtail-rails//lib/logtail-rails/config/active_record.rb#24
  def active_record; end

  # source://logtail-rack/0.2.5/lib/logtail-rack/config.rb#21
  def rack; end
end

# source://logtail-rails//lib/logtail-rails/railtie.rb#2
module Logtail::Frameworks; end

# Module for Rails specific code, such as the Railtie and any methods that assist
# with Rails setup.
#
# source://logtail-rails//lib/logtail-rails/railtie.rb#5
module Logtail::Frameworks::Rails; end

# Installs Logtail into your Rails app automatically.
#
# source://logtail-rails//lib/logtail-rails/railtie.rb#7
class Logtail::Frameworks::Rails::Railtie < ::Rails::Railtie; end

# source://logtail-rails//lib/logtail-rails/active_support_log_subscriber.rb#2
module Logtail::Integrations; end

# Module for holding *all* ActionController integrations. See {Integration} for
# configuration details for all integrations.
#
# source://logtail-rails//lib/logtail-rails/action_controller/log_subscriber.rb#3
module Logtail::Integrations::ActionController
  extend ::Logtail::Integration

  class << self
    # source://logtail-rails//lib/logtail-rails/action_controller.rb#10
    def integrate!; end
  end
end

# Responsible for removing the default ActionController::LogSubscriber and installing
# the LogtailLogSubscriber
#
# @private
#
# source://logtail-rails//lib/logtail-rails/action_controller/log_subscriber.rb#8
class Logtail::Integrations::ActionController::LogSubscriber < ::Logtail::Integrator
  # @return [LogSubscriber] a new instance of LogSubscriber
  #
  # source://logtail-rails//lib/logtail-rails/action_controller/log_subscriber.rb#9
  def initialize; end

  # source://logtail-rails//lib/logtail-rails/action_controller/log_subscriber.rb#17
  def integrate!; end
end

# Module for holding *all* ActionDispatch integrations. This
# module simply disables the exception tracking middleware so that our middleware
# works as expected.
#
# source://logtail-rails//lib/logtail-rails/action_dispatch/debug_exceptions.rb#3
module Logtail::Integrations::ActionDispatch
  class << self
    # @return [Boolean]
    #
    # source://logtail-rails//lib/logtail-rails/action_dispatch.rb#9
    def enabled?; end

    # source://logtail-rails//lib/logtail-rails/action_dispatch.rb#13
    def integrate!; end
  end
end

# Responsible for disabled logging in the ActionDispatch::DebugExceptions
# Rack middleware. We cannot simply remove the middleware because it is
# coupled with displaying an exception debug screen if debug exceptions is enabled.
#
# @private
#
# source://logtail-rails//lib/logtail-rails/action_dispatch/debug_exceptions.rb#9
class Logtail::Integrations::ActionDispatch::DebugExceptions < ::Logtail::Integrator
  # @return [DebugExceptions] a new instance of DebugExceptions
  #
  # source://logtail-rails//lib/logtail-rails/action_dispatch/debug_exceptions.rb#25
  def initialize; end

  # source://logtail-rails//lib/logtail-rails/action_dispatch/debug_exceptions.rb#37
  def integrate!; end
end

# Patch for disabling logging
#
# @private
#
# source://logtail-rails//lib/logtail-rails/action_dispatch/debug_exceptions.rb#14
module Logtail::Integrations::ActionDispatch::DebugExceptions::InstanceMethods
  class << self
    # @private
    #
    # source://logtail-rails//lib/logtail-rails/action_dispatch/debug_exceptions.rb#15
    def included(klass); end
  end
end

# Module for holding *all* ActionView integrations. See {Integration} for
# configuration details for all integrations.
#
# source://logtail-rails//lib/logtail-rails/action_view/log_subscriber.rb#3
module Logtail::Integrations::ActionView
  extend ::Logtail::Integration

  class << self
    # source://logtail-rails//lib/logtail-rails/action_view.rb#10
    def integrate!; end
  end
end

# Responsible for uninstalling the default `ActionView::LogSubscriber` and installing
# the LogtailLogSubscriber.
#
# @private
#
# source://logtail-rails//lib/logtail-rails/action_view/log_subscriber.rb#8
class Logtail::Integrations::ActionView::LogSubscriber < ::Logtail::Integrator
  # @return [LogSubscriber] a new instance of LogSubscriber
  #
  # source://logtail-rails//lib/logtail-rails/action_view/log_subscriber.rb#9
  def initialize; end

  # source://logtail-rails//lib/logtail-rails/action_view/log_subscriber.rb#16
  def integrate!; end
end

# Module for holding *all* ActiveRecord integrations. See {Integration} for
# configuration details for all integrations.
#
# source://logtail-rails//lib/logtail-rails/active_record/log_subscriber/logtail_log_subscriber.rb#9
module Logtail::Integrations::ActiveRecord
  extend ::Logtail::Integration

  class << self
    # source://logtail-rails//lib/logtail-rails/active_record.rb#10
    def integrate!; end
  end
end

# Responsible for uninstalling the default `ActiveRecord::LogSubscriber` and replacing it
# with the `LogtailLogSubscriber`.
#
# @private
#
# source://logtail-rails//lib/logtail-rails/active_record/log_subscriber/logtail_log_subscriber.rb#10
class Logtail::Integrations::ActiveRecord::LogSubscriber < ::Logtail::Integrator
  # source://logtail-rails//lib/logtail-rails/active_record/log_subscriber.rb#11
  def integrate!; end
end

# The log subscriber that replaces the default `ActiveRecord::LogSubscriber`.
# The intent of this subscriber is to, as transparently as possible, properly
# track events that are being logged here. This LogSubscriber will never change
# default behavior / log messages.
#
# @private
#
# source://logtail-rails//lib/logtail-rails/active_record/log_subscriber/logtail_log_subscriber.rb#17
class Logtail::Integrations::ActiveRecord::LogSubscriber::LogtailLogSubscriber < ::ActiveRecord::LogSubscriber
  # source://logtail-rails//lib/logtail-rails/active_record/log_subscriber/logtail_log_subscriber.rb#18
  def sql(event); end

  private

  # source://logtail-rails//lib/logtail-rails/active_record/log_subscriber/logtail_log_subscriber.rb#41
  def debug(message); end

  # @return [Boolean]
  #
  # source://logtail-rails//lib/logtail-rails/active_record/log_subscriber/logtail_log_subscriber.rb#45
  def silence?; end
end

# Module for holding *all* Rails integrations. This module does *not*
# extend {Integration} because it's dependent on {Rack::HTTPEvents}. This
# module simply disables the default HTTP request logging.
#
# source://logtail-rails//lib/logtail-rails/active_support_log_subscriber.rb#3
module Logtail::Integrations::Rails
  class << self
    # source://logtail-rails//lib/logtail-rails.rb#49
    def enabled=(value); end

    # @return [Boolean]
    #
    # source://logtail-rails//lib/logtail-rails.rb#35
    def enabled?; end

    # source://logtail-rails//lib/logtail-rails.rb#39
    def integrate!; end

    # All enabled middlewares. The order is relevant. Middlewares that set
    # context are added first so that context is included in subsequent log lines.
    #
    # source://logtail-rails//lib/logtail-rails.rb#63
    def middlewares; end
  end
end

# @private
#
# source://logtail-rails//lib/logtail-rails/active_support_log_subscriber.rb#5
module Logtail::Integrations::Rails::ActiveSupportLogSubscriber
  extend ::Logtail::Integrations::Rails::ActiveSupportLogSubscriber

  # source://logtail-rails//lib/logtail-rails/active_support_log_subscriber.rb#8
  def find(component, type); end

  # @return [Boolean]
  #
  # source://logtail-rails//lib/logtail-rails/active_support_log_subscriber.rb#14
  def subscribed?(component, type); end

  # I don't know why this has to be so complicated, but it is. This code was taken from
  # lograge :/
  #
  # source://logtail-rails//lib/logtail-rails/active_support_log_subscriber.rb#20
  def unsubscribe!(component, type); end
end

# A Rack middleware that is responsible for capturing exception and error events
# {Logtail::Events::Error}.
#
# source://logtail-rails//lib/logtail-rails/error_event.rb#17
class Logtail::Integrations::Rails::ErrorEvent < ::Logtail::Integrations::Rack::Middleware
  # source://logtail-rails//lib/logtail-rails/error_event.rb#22
  def call(env); end

  private

  # Rails provides a backtrace cleaner, so we use it here.
  #
  # source://logtail-rails//lib/logtail-rails/error_event.rb#42
  def extract_backtrace(env, exception); end
end

# We determine this when the app loads to avoid the overhead on a per request basis.
#
# source://logtail-rails//lib/logtail-rails/error_event.rb#19
Logtail::Integrations::Rails::ErrorEvent::EXCEPTION_WRAPPER_TAKES_CLEANER = T.let(T.unsafe(nil), TrueClass)

# Disables the default rail's rack logging. Note, we cannot simply uninstall this rack
# middleware because rails couples this with ActiveSupport instrumentation. As such,
# we simply disable the logger and let our Rack middleware handle the logging.
#
# See: https://github.com/rails/rails/blob/80e66cc4d90bf8c15d1a5f6e3152e90147f00772/railties/lib/rails/rack/logger.rb#L34
#
# @private
#
# source://logtail-rails//lib/logtail-rails/rack_logger.rb#11
class Logtail::Integrations::Rails::RackLogger < ::Logtail::Integrator
  # @return [RackLogger] a new instance of RackLogger
  #
  # source://logtail-rails//lib/logtail-rails/rack_logger.rb#45
  def initialize; end

  # source://logtail-rails//lib/logtail-rails/rack_logger.rb#51
  def integrate!; end
end

# @private
#
# source://logtail-rails//lib/logtail-rails/rack_logger.rb#14
module Logtail::Integrations::Rails::RackLogger::InstanceMethods
  class << self
    # @private
    #
    # source://logtail-rails//lib/logtail-rails/rack_logger.rb#17
    def included(klass); end
  end
end

# source://logtail-rails//lib/logtail-rails/rack_logger.rb#15
Logtail::Integrations::Rails::RackLogger::InstanceMethods::LOGGER = T.let(T.unsafe(nil), Logger)

# A Rack middleware that is responsible for adding the Session context
# {Logtail::Contexts::Session}.
#
# source://logtail-rails//lib/logtail-rails/session_context.rb#9
class Logtail::Integrations::Rails::SessionContext < ::Logtail::Integrations::Rack::Middleware
  # source://logtail-rails//lib/logtail-rails/session_context.rb#10
  def call(env); end

  private

  # source://logtail-rails//lib/logtail-rails/session_context.rb#28
  def extract_from_cookie(request, session_key); end

  # source://logtail-rails//lib/logtail-rails/session_context.rb#20
  def get_session_id(env); end
end

# source://logtail-rails//lib/logtail-rails/log_entry.rb#2
class Logtail::LogEntry
  # source://logtail/0.1.13/lib/logtail/log_entry.rb#29
  def initialize(level, time, progname, message, context_snapshot, event, options = T.unsafe(nil)); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#17
  def context_snapshot; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#17
  def event; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#83
  def inspect; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#17
  def level; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#17
  def message; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#17
  def progname; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#17
  def tags; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#17
  def time; end

  # source://logtail-rails//lib/logtail-rails/log_entry.rb#5
  def to_hash(options = T.unsafe(nil)); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#46
  def to_hash_unfiltered(options = T.unsafe(nil)); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#87
  def to_json(options = T.unsafe(nil)); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#91
  def to_msgpack(*args); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#96
  def to_s; end

  private

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#128
  def convert_to_runtime_context(frame); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#117
  def current_runtime_context; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#107
  def encode_string(string); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#101
  def formatted_dt; end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#136
  def logtail_logger_frame?(frame); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#140
  def path_relative_to_app_root(frame); end

  # source://logtail/0.1.13/lib/logtail/log_entry.rb#146
  def root_path; end
end

# The Logtail Logger behaves exactly like the standard Ruby `::Logger`, except that it supports a
# transparent API for logging structured data and events.
#
# @example Basic logging
#   logger.info "Payment rejected for customer #{customer_id}"
# @example Logging an event
#   logger.info "Payment rejected", payment_rejected: {customer_id: customer_id, amount: 100}
#
# source://logtail-rails//lib/logtail-rails/logger.rb#10
class Logtail::Logger < ::Logger
  include ::ActiveSupport::LoggerThreadSafeLevel
  include ::ActiveSupport::LoggerSilence

  # source://logtail/0.1.13/lib/logtail/logger.rb#155
  def initialize(*io_devices_and_loggers); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#226
  def add(severity, message = T.unsafe(nil), progname = T.unsafe(nil), &block); end

  # source://logtail-rails//lib/logtail-rails/logger.rb#31
  def broadcast_to(*io_devices_and_loggers); end

  # source://logtail-rails//lib/logtail-rails/logger.rb#27
  def broadcasts; end

  # source://logtail/0.1.13/lib/logtail/logger.rb#239
  def debug(*args, &block); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#250
  def debug?; end

  # source://logtail/0.1.13/lib/logtail/logger.rb#239
  def error(*args, &block); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#250
  def error?; end

  # source://logtail/0.1.13/lib/logtail/logger.rb#239
  def fatal(*args, &block); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#250
  def fatal?; end

  # source://logtail/0.1.13/lib/logtail/logger.rb#202
  def formatter=(value); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#239
  def info(*args, &block); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#250
  def info?; end

  # Logtail::Logger also works as ActiveSupport::BroadcastLogger
  #
  # @return [Boolean]
  #
  # source://logtail-rails//lib/logtail-rails/logger.rb#20
  def is_a?(clazz); end

  # Logtail::Logger also works as ActiveSupport::BroadcastLogger
  #
  # @return [Boolean]
  #
  # source://logtail-rails//lib/logtail-rails/logger.rb#20
  def kind_of?(clazz); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#212
  def level=(value); end

  # source://activesupport/7.1.3.2/lib/active_support/logger_silence.rb#12
  def silencer; end

  # source://activesupport/7.1.3.2/lib/active_support/logger_silence.rb#12
  def silencer=(val); end

  # source://logtail-rails//lib/logtail-rails/logger.rb#39
  def stop_broadcasting_to(io_device_or_logger); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#239
  def unknown(*args, &block); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#250
  def unknown?; end

  # source://logtail/0.1.13/lib/logtail/logger.rb#239
  def warn(*args, &block); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#250
  def warn?; end

  # source://logtail/0.1.13/lib/logtail/logger.rb#220
  def with_context(context, &block); end

  private

  # source://logtail/0.1.13/lib/logtail/logger.rb#257
  def environment_level; end

  # source://logtail/0.1.13/lib/logtail/logger.rb#274
  def is_a_logger?(obj); end

  # source://logtail/0.1.13/lib/logtail/logger.rb#262
  def level_from_symbol(value); end

  class << self
    # source://logtail-rails//lib/logtail-rails/logger.rb#58
    def create_default_logger(source_token); end

    # source://logtail-rails//lib/logtail-rails/logger.rb#49
    def create_logger(*io_devices_and_loggers); end

    # source://activesupport/7.1.3.2/lib/active_support/logger_silence.rb#12
    def silencer; end

    # source://activesupport/7.1.3.2/lib/active_support/logger_silence.rb#12
    def silencer=(val); end
  end
end

# @private
#
# source://logtail-rails//lib/logtail-rails/overrides/active_support_tagged_logging.rb#8
module Logtail::Overrides; end

# source://logtail-rails//lib/logtail-rails/overrides/active_support_tagged_logging.rb#10
module Logtail::Overrides::ActiveSupportTaggedLogging; end

# source://logtail-rails//lib/logtail-rails/overrides/active_support_tagged_logging.rb#12
module Logtail::Overrides::ActiveSupportTaggedLogging::FormatterMethods
  class << self
    # source://logtail-rails//lib/logtail-rails/overrides/active_support_tagged_logging.rb#13
    def included(mod); end
  end
end

# source://logtail-rails//lib/logtail-rails/overrides/active_support_tagged_logging.rb#31
module Logtail::Overrides::ActiveSupportTaggedLogging::LoggerMethods
  class << self
    # source://logtail-rails//lib/logtail-rails/overrides/active_support_tagged_logging.rb#32
    def included(klass); end
  end
end
