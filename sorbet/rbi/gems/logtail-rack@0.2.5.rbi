# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `logtail-rack` gem.
# Please instead update this file by running `bin/tapioca gem logtail-rack`.

# source://logtail-rack//lib/logtail-rack/config.rb#7
module Logtail
  class << self
    # source://logtail/0.1.13/lib/logtail.rb#22
    def config; end

    # source://logtail/0.1.13/lib/logtail.rb#27
    def start_timer; end

    # source://logtail/0.1.13/lib/logtail.rb#33
    def with_context(context, &block); end
  end
end

# source://logtail-rack//lib/logtail-rack/config.rb#8
class Logtail::Config
  # source://logtail/0.1.13/lib/logtail/config.rb#60
  def debug(&block); end

  # source://logtail/0.1.13/lib/logtail/config.rb#84
  def debug_logger; end

  # source://logtail/0.1.13/lib/logtail/config.rb#79
  def debug_logger=(value); end

  # source://logtail/0.1.13/lib/logtail/config.rb#94
  def debug_to_file!(file_path); end

  # source://logtail/0.1.13/lib/logtail/config.rb#108
  def debug_to_stdout!; end

  # source://logtail/0.1.13/lib/logtail/config.rb#157
  def development?; end

  # source://logtail/0.1.13/lib/logtail/config.rb#125
  def environment; end

  # source://logtail/0.1.13/lib/logtail/config.rb#120
  def environment=(value); end

  # source://logtail/0.1.13/lib/logtail/config.rb#52
  def filter_sent_to_better_stack(&block); end

  # source://logtail/0.1.13/lib/logtail/config.rb#33
  def http_body_limit=(_arg0); end

  # source://logtail/0.1.13/lib/logtail/config.rb#132
  def integrations; end

  # source://logtail/0.1.13/lib/logtail/config.rb#148
  def logger; end

  # source://logtail/0.1.13/lib/logtail/config.rb#143
  def logger=(value); end

  # source://logtail/0.1.13/lib/logtail/config.rb#167
  def production?; end

  # source://logtail/0.1.13/lib/logtail/config.rb#36
  def send_to_better_stack?(log_entry); end

  # source://logtail/0.1.13/lib/logtail/config.rb#172
  def staging?; end

  # source://logtail/0.1.13/lib/logtail/config.rb#162
  def test?; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://logtail-rack//lib/logtail-rack/config.rb#9
module Logtail::Config::Integrations
  # source://logtail-rails/0.2.6/lib/logtail-rails/config/action_controller.rb#24
  def action_controller; end

  # source://logtail-rails/0.2.6/lib/logtail-rails/config/action_view.rb#24
  def action_view; end

  # source://logtail-rails/0.2.6/lib/logtail-rails/config/active_record.rb#24
  def active_record; end

  # Convenience module for accessing the various `Logtail::Integrations::Rack::*` classes
  # through the {Logtail::Config} object. Logtail couples configuration with the class
  # responsibls for implementing it. This provides for a tighter design, but also
  # requires the user to understand and access the various classes. This module aims
  # to provide a simple ruby-like configuration interface for internal Logtail classes.
  #
  # For example:
  #
  #     config = Logtail::Config.instance
  #     config.integrations.rack.http_events.enabled = false
  #
  # source://logtail-rack//lib/logtail-rack/config.rb#21
  def rack; end
end

# source://logtail-rack//lib/logtail-rack/config.rb#25
module Logtail::Config::Integrations::Rack
  extend ::Logtail::Config::Integrations::Rack

  # Convenience method for accessing the {Logtail::Integrations::Rack::ErrorEvent}
  # middleware class specific configuration. See {Logtail::Integrations::Rack::ExceptionEvent}
  # for a list of methods available.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.rack.error_event.enabled = false
  #
  # source://logtail-rack//lib/logtail-rack/config.rb#35
  def error_event; end

  # Convenience method for accessing the {Logtail::Integrations::Rack::HTTPContext}
  # middleware class specific configuration. See {Logtail::Integrations::Rack::HTTPContext}
  # for a list of methods available.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.rack.http_context.enabled = false
  #
  # source://logtail-rack//lib/logtail-rack/config.rb#46
  def http_context; end

  # Convenience method for accessing the {Logtail::Integrations::Rack::HTTPEvents}
  # middleware class specific configuration. See {Logtail::Integrations::Rack::HTTPEvents}
  # for a list of methods available.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.rack.http_events.enabled = false
  #
  # source://logtail-rack//lib/logtail-rack/config.rb#57
  def http_events; end

  # Convenience method for accessing the {Logtail::Integrations::Rack::SessionContext}
  # middleware class specific configuration. See {Logtail::Integrations::Rack::SessionContext}
  # for a list of methods available.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.rack.session_context.enabled = false
  #
  # source://logtail-rack//lib/logtail-rack/config.rb#68
  def session_context; end

  # Convenience method for accessing the {Logtail::Integrations::Rack::UserContext}
  # middleware class specific configuration. See {Logtail::Integrations::Rack::UserContext}
  # for a list of methods available.
  #
  # @example
  #   config = Logtail::Config.instance
  #   config.integrations.rack.user_context.enabled = false
  #
  # source://logtail-rack//lib/logtail-rack/config.rb#79
  def user_context; end
end

# source://logtail-rack//lib/logtail-rack/middleware.rb#2
module Logtail::Integrations; end

# source://logtail-rack//lib/logtail-rack/middleware.rb#3
module Logtail::Integrations::Rack; end

# A Rack middleware that is reponsible for adding the HTTP context {Logtail::Contexts::HTTP}.
#
# source://logtail-rack//lib/logtail-rack/http_context.rb#11
class Logtail::Integrations::Rack::HTTPContext < ::Logtail::Integrations::Rack::Middleware
  # source://logtail-rack//lib/logtail-rack/http_context.rb#12
  def call(env); end
end

# A Rack middleware that is reponsible for capturing and logging HTTP server requests and
# response events. The {Events::HTTPRequest} and {Events::HTTPResponse} events
# respectively.
#
# source://logtail-rack//lib/logtail-rack/http_events.rb#17
class Logtail::Integrations::Rack::HTTPEvents < ::Logtail::Integrations::Rack::Middleware
  # source://logtail-rack//lib/logtail-rack/http_events.rb#128
  def call(env); end

  private

  # @return [Boolean]
  #
  # source://logtail-rack//lib/logtail-rack/http_events.rb#251
  def capture_request_body?; end

  # @return [Boolean]
  #
  # source://logtail-rack//lib/logtail-rack/http_events.rb#255
  def capture_response_body?; end

  # @return [Boolean]
  #
  # source://logtail-rack//lib/logtail-rack/http_events.rb#259
  def collapse_into_single_event?; end

  # source://logtail-rack//lib/logtail-rack/http_events.rb#271
  def filter_http_headers(headers); end

  # source://logtail-rack//lib/logtail-rack/http_events.rb#279
  def safe_to_i(val); end

  # @return [Boolean]
  #
  # source://logtail-rack//lib/logtail-rack/http_events.rb#263
  def silenced?(env, request); end

  class << self
    # Allows you to capture the HTTP request body, default is off (false).
    #
    # Capturing HTTP bodies can be extremely helpful when debugging issues,
    # but please proceed with caution:
    #
    # 1. Capturing HTTP bodies can use quite a bit of data (this can be mitigated, see below)
    #
    # If you opt to capture bodies, you can also truncate the size to reduce the data
    # captured. See {Events::HTTPRequest}.
    #
    # @example
    #   Logtail::Integrations::Rack::HTTPEvents.capture_request_body = true
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#31
    def capture_request_body=(value); end

    # Accessor method for {#capture_request_body=}
    #
    # @return [Boolean]
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#36
    def capture_request_body?; end

    # Just like {#capture_request_body=} but for the {Events::HTTPResponse} event.
    # Please see {#capture_request_body=} for more details. The documentation there also
    # applies here.
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#43
    def capture_response_body=(value); end

    # Accessor method for {#capture_response_body=}
    #
    # @return [Boolean]
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#48
    def capture_response_body?; end

    # Collapse both the HTTP request and response events into a single log line event.
    # While we don't recommend this, it can help to reduce log volume if desired.
    # The reason we don't recommend this, is because the logging service you use should
    # not be so expensive that you need to strip out useful logs. It should also provide
    # the tools necessary to properly search your logs and reduce noise. Such as viewing
    # logs for a specific request.
    #
    # To provide an example. This setting turns this:
    #
    #   Started GET "/" for 127.0.0.1 at 2012-03-10 14:28:14 +0100
    #   Completed 200 OK in 79ms (Views: 78.8ms | ActiveRecord: 0.0ms)
    #
    # Into this:
    #
    #   Get "/" sent 200 OK in 79ms
    #
    # The single event is still a {Logtail::Events::HTTPResponse} event. Because
    # we capture HTTP context, you still get the HTTP details, but you will not get
    # all of the request details that the {Logtail::Events::HTTPRequest} event would
    # provide.
    #
    # @example
    #   Logtail::Integrations::Rack::HTTPEvents.collapse_into_single_event = true
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#75
    def collapse_into_single_event=(value); end

    # Accessor method for {#collapse_into_single_event=}.
    #
    # @return [Boolean]
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#80
    def collapse_into_single_event?; end

    # Accessor method for {#http_header_filters=}
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#117
    def http_header_filters; end

    # Filter sensitive HTTP headers (such as "Authorization: Bearer secret_token")
    #
    # Filtered HTTP header values will be sent to Better Stack as "[FILTERED]"
    #
    # @example
    #   Logtail::Integrations::Rack::HTTPEvents.http_header_filters = ["Authorization"]
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#112
    def http_header_filters=(value); end

    # source://logtail-rack//lib/logtail-rack/http_events.rb#121
    def normalize_header_name(name); end

    # Accessor method for {#silence_request=}
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#102
    def silence_request; end

    # This setting allows you to silence requests based on any conditions you desire.
    # We require a block because it gives you complete control over how you want to
    # silence requests. The first parameter being the traditional Rack env hash, the
    # second being a [Rack Request](http://www.rubydoc.info/gems/rack/Rack/Request) object.
    #
    # @example
    #   Integrations::Rack::HTTPEvents.silence_request = lambda do |rack_env, rack_request|
    #   rack_request.path == "/_health"
    #   end
    #
    # source://logtail-rack//lib/logtail-rack/http_events.rb#93
    def silence_request=(proc); end
  end
end

# source://logtail-rack//lib/logtail-rack/http_events.rb#126
Logtail::Integrations::Rack::HTTPEvents::CONTENT_LENGTH_KEY = T.let(T.unsafe(nil), String)

# The HTTP server request event tracks incoming HTTP requests to your HTTP server.
# Such as unicorn, webrick, puma, etc.
#
# @note This event should be installed automatically through integrations,
#   such as the {Integrations::ActionController::LogSubscriber} integration.
#
# source://logtail-rack//lib/logtail-rack/http_request.rb#11
class Logtail::Integrations::Rack::HTTPRequest
  # @return [HTTPRequest] a new instance of HTTPRequest
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#15
  def initialize(attributes); end

  # Returns the value of attribute body.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def body; end

  # Returns the value of attribute content_length.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def content_length; end

  # Returns the value of attribute headers.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def headers; end

  # Returns the value of attribute headers_json.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def headers_json; end

  # Returns the value of attribute host.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def host; end

  # source://logtail-rack//lib/logtail-rack/http_request.rb#33
  def message; end

  # Returns the value of attribute method.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def method; end

  # Returns the value of attribute path.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def path; end

  # Returns the value of attribute port.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def port; end

  # Returns the value of attribute query_string.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def query_string; end

  # Returns the value of attribute request_id.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def request_id; end

  # Returns the value of attribute scheme.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def scheme; end

  # Returns the value of attribute service_name.
  #
  # source://logtail-rack//lib/logtail-rack/http_request.rb#12
  def service_name; end
end

# The HTTP server response event tracks outgoing HTTP responses that you send
# to clients.
#
# source://logtail-rack//lib/logtail-rack/http_response.rb#9
class Logtail::Integrations::Rack::HTTPResponse
  # @return [HTTPResponse] a new instance of HTTPResponse
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#13
  def initialize(attributes); end

  # Returns the value of attribute body.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def body; end

  # Returns the value of attribute content_length.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def content_length; end

  # Returns the value of attribute duration_ms.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def duration_ms; end

  # Returns the value of attribute headers.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def headers; end

  # Returns the value of attribute headers_json.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def headers_json; end

  # Returns the value of attribute http_context.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def http_context; end

  # Returns the human readable log message for this event.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#29
  def message; end

  # Returns the value of attribute request_id.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def request_id; end

  # Returns the value of attribute service_name.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def service_name; end

  # Returns the value of attribute status.
  #
  # source://logtail-rack//lib/logtail-rack/http_response.rb#10
  def status; end

  # source://logtail-rack//lib/logtail-rack/http_response.rb#50
  def status_description; end
end

# Base class that all Logtail Rack middlewares extend. See the class level methods for
# configuration options.
#
# source://logtail-rack//lib/logtail-rack/middleware.rb#6
class Logtail::Integrations::Rack::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://logtail-rack//lib/logtail-rack/middleware.rb#22
  def initialize(app); end

  class << self
    # Easily enable / disable specific middlewares.
    #
    # @example
    #   Logtail::Integrations::Rack::UserContext.enabled = false
    #
    # source://logtail-rack//lib/logtail-rack/middleware.rb#12
    def enabled=(value); end

    # Accessor method for {#enabled=}.
    #
    # @return [Boolean]
    #
    # source://logtail-rack//lib/logtail-rack/middleware.rb#17
    def enabled?; end
  end
end

# This is a Rack middleware responsible for setting the user context.
# See {Logtail::Contexts::User} for more information on the user context.
#
# ## Why a Rack middleware?
#
# We use a Rack middleware because we want to set the user context as early as
# possible, and before the initial incoming request log line:
#
#   Started GET /welcome
#
# The above log line is logged in a request middleware, before it reaches
# the controller.
#
# If, for example, we set the user context in a controller, the log line above
# will not have the user context attached. This is because it is logged before
# the controller is executed. This is not ideal, and it's why we take a middleware
# approach here. If for some reason you cannot identify the user at the middleware
# level then setting it in the controller is perfectly fine, just be aware of the
# above downside.
#
# ## Authentication frameworks automatically detected:
#
# If you use any of the following authentication frameworks, Logtail will
# automatically set the user context for you.
#
# * Devise, or any Warden based authentication strategy
# * Clearance
#
# Or, you can use your own custom authentication, see the {.custom_user_context}
# class method for more details.
#
# @note This middleware is automatically inserted for frameworks we support.
#   Such as Rails. See {Logtail::Frameworks} for a comprehensive list.
#
# source://logtail-rack//lib/logtail-rack/user_context.rb#41
class Logtail::Integrations::Rack::UserContext < ::Logtail::Integrations::Rack::Middleware
  # source://logtail-rack//lib/logtail-rack/user_context.rb#67
  def call(env); end

  private

  # source://logtail-rack//lib/logtail-rack/user_context.rb#79
  def get_user_hash(env); end

  # source://logtail-rack//lib/logtail-rack/user_context.rb#98
  def get_user_object_hash(user); end

  # source://logtail-rack//lib/logtail-rack/user_context.rb#124
  def try_user_email(user); end

  # source://logtail-rack//lib/logtail-rack/user_context.rb#110
  def try_user_id(user); end

  # source://logtail-rack//lib/logtail-rack/user_context.rb#114
  def try_user_name(user); end

  class << self
    # Accessor method for {#custom_user_hash=}.
    #
    # source://logtail-rack//lib/logtail-rack/user_context.rb#62
    def custom_user_hash; end

    # The custom user context allows you to hook in and set your own custom
    # user context. This is used in situations where either:
    #
    # 1. Logtail does not automatically support your authentication strategy (see module level docs)
    # 2. You need to customize your authentication beyond Logtail's defaults.
    #
    # @example Setting your own custom user context
    #   Logtail::Integrations::Rack::UserContext.custom_user_hash = lambda do |rack_env|
    #   rack_env['my_custom_key'].user
    #   end
    #
    # source://logtail-rack//lib/logtail-rack/user_context.rb#53
    def custom_user_hash=(proc); end
  end
end

# source://logtail-rack//lib/logtail-rack/util/encoding.rb#2
module Logtail::Util; end

# source://logtail-rack//lib/logtail-rack/util/encoding.rb#3
class Logtail::Util::Encoding
  class << self
    # source://logtail-rack//lib/logtail-rack/util/encoding.rb#4
    def force_utf8_encoding(data); end
  end
end

# @private
#
# source://logtail-rack//lib/logtail-rack/util/request.rb#4
class Logtail::Util::Request < ::Rack::Request
  # source://logtail-rack//lib/logtail-rack/util/request.rb#15
  def body_content; end

  # Returns a list of request headers. The rack env contains a lot of data, this function
  # identifies those that were the actual request headers.
  #
  # This was extracted from: https://github.com/ruby-grape/grape/blob/91c6c78ae3d3f3ffabaf57ffc4dc35ab7cfc7b5f/lib/grape/request.rb#L30
  #
  # source://logtail-rack//lib/logtail-rack/util/request.rb#25
  def headers; end

  # source://logtail-rack//lib/logtail-rack/util/request.rb#44
  def ip; end

  # source://logtail-rack//lib/logtail-rack/util/request.rb#52
  def referer; end

  # source://logtail-rack//lib/logtail-rack/util/request.rb#57
  def request_id; end
end

# source://logtail-rack//lib/logtail-rack/util/request.rb#8
Logtail::Util::Request::HTTP_HEADER_NEW_DELIMITER = T.let(T.unsafe(nil), String)

# We store strings as constants since they are reused on a per request basis.
# This avoids string allocations.
#
# source://logtail-rack//lib/logtail-rack/util/request.rb#7
Logtail::Util::Request::HTTP_HEADER_ORIGINAL_DELIMITER = T.let(T.unsafe(nil), String)

# source://logtail-rack//lib/logtail-rack/util/request.rb#9
Logtail::Util::Request::HTTP_PREFIX = T.let(T.unsafe(nil), String)

# source://logtail-rack//lib/logtail-rack/util/request.rb#11
Logtail::Util::Request::REMOTE_IP_KEY_NAME = T.let(T.unsafe(nil), String)

# source://logtail-rack//lib/logtail-rack/util/request.rb#12
Logtail::Util::Request::REQUEST_ID_KEY_NAME1 = T.let(T.unsafe(nil), String)

# source://logtail-rack//lib/logtail-rack/util/request.rb#13
Logtail::Util::Request::REQUEST_ID_KEY_NAME2 = T.let(T.unsafe(nil), String)
