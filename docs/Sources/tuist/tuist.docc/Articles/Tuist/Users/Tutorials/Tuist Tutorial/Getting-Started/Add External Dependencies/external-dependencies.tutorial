@Tutorial(time: 5) {
    @Intro(title: "Adding external Dependencies") {
        Learn how to integrate external Package dependencies into your Tuist project.

        @Image(source: "Logo-Blurred.png", alt: "Blurred Tuist Logo.")
    }

    @Section(title: "Defining package dependencies") {
        @ContentAndMedia {
            External dependencies are defined in a `Package.swift` manifest file in the `/Tuist` directory in the root of your project. You can also define your `Package.swift` directly in the root if you are working on an SPM package.
        }

        @Steps {
            @Step {
                Create a `Package.swift` file defining your external dependencies and their versions with the same `Swift Package Manager` syntax you might be familiar with.

                You can also add additional Swift Package Manager configuration such as the desired target platform, or some custom mapping for your dependencies using the `PackageSettings`. The `packageSettings` object must be inside the `#if TUIST ... #endif` directive.
                @Code(name: "Package.swift", file: "Package.swift", reset: true)

                > Note: For example, here we are declaring that the `Alamofire` target should be mapped to a dynamic framework, instead of the default static framework.
            }
        }
    }

    @Section(title: "Fetching package dependencies") {
        @ContentAndMedia {
            Unlike Xcode's default integration, which resolves the dependencies at launch time or whenever Xcode thinks resolution is necessary, we resolve them through the `tuist install` command.
        }
        
        @Steps {
            @Step {
                Run `tuist install` to resolve the dependencies using the Swift Package Manager under `Tuist/Dependencies`. The generated workspace will contain projects and targets for them.
                
                @Code(name: "Console", file: "tuist-install.sh", reset: true)
            }
            
            @Step {
                Don't forget to ignore the following directories and files from your version control system.
                @Code(name: ".gitignore", file: "dependencies-gitignore.txt", reset: true)
            }
        }
    }

    @Section(title: "Integrating package dependencies") {
        Once dependencies have been fetched, you can declare dependencies from your projects' targets.

        @Steps {
            @Step {
                Run `tuist edit` to edit your project's manifest.
                @Code(name: "console", file: "tuist-edit.txt", reset: true)
            }

            @Step {
                Use the `.external` target dependency option to declare the dependency.
                @Code(name: "Project.swift", file: "Project.swift", reset: true)
            }
            
            @Step {
                Generate the project, and try to build it.
                @Code(name: "Project.swift", file: "Project.swift", reset: true)
            }
        }
    }
        
}

