name: App Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release"
        type: string

permissions:
  contents: write
  pull-requests: read
  statuses: write
  packages: write

env:
  TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.TUIST_GITHUB_TOKEN }}
  MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}
  MISE_EXPERIMENTAL: "1"

jobs:
  setup:
    name: Setup and Check Release
    runs-on: namespace-profile-default-macos
    timeout-minutes: 20
    if: ${{ !contains(github.event.head_commit.message, '[Release] Tuist App') }}
    outputs:
      should-release: ${{ env.should-release }}
      next-version: ${{ steps.next-version.outputs.NEXT_VERSION }}
      next-version-number: ${{ steps.next-version.outputs.NEXT_VERSION_NUMBER }}
      release-notes: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - name: Activate .env.json
        run: cp .optional.env.json .env.json
      - uses: tuist/mise-action@18966898ea274fb74c1d7cf9cc1758fe0d9ddc7e
        with:
          version: 2025.7.0
          experimental: true
      - name: Check if there are releasable changes
        id: is-releasable
        working-directory: app
        run: |
          # Run git cliff and save the output
          # Check if app@0.20.2 tag exists
          if git rev-parse app@0.20.2 >/dev/null 2>&1; then
            bumped_output=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bump app@0.20.2..HEAD)
          else
            bumped_output=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bump)
          fi
          echo "Bumped output:"
          echo "${bumped_output}"

          # Read the content of CHANGELOG.md
          changelog_content=$(cat CHANGELOG.md || echo "")
          echo "CHANGELOG.md content:"
          echo "${changelog_content}"

          # Compare the outputs and set the result
          if [ "${bumped_output}" != "${changelog_content}" ]; then
            echo "should-release=true" >> $GITHUB_ENV
          else
            echo "should-release=false" >> $GITHUB_ENV
          fi
      - name: Get next version
        working-directory: app
        id: next-version
        if: env.should-release == 'true'
        run: |
          # Get the latest app version tag
          LATEST_VERSION=$(git tag -l | grep "app@" | sort -V | tail -n1 || echo "app@0.20.2")
          # Use git cliff to determine next version
          if git rev-parse app@0.20.2 >/dev/null 2>&1; then
            NEXT_VERSION=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bumped-version app@0.20.2..HEAD)
          else
            NEXT_VERSION=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bumped-version)
          fi

          if [ "$NEXT_VERSION" = "0.1.0" ]; then
            NEXT_VERSION="app@0.1.0"
          fi

          echo "NEXT_VERSION=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
          echo "NEXT_VERSION_NUMBER=${NEXT_VERSION#*@}" >> "$GITHUB_OUTPUT"
      - name: Get release notes
        id: release-notes
        if: env.should-release == 'true'
        working-directory: app
        run: |
          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
          if git rev-parse app@0.20.2 >/dev/null 2>&1; then
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --unreleased app@0.20.2..HEAD >> "$GITHUB_OUTPUT"
          else
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --unreleased >> "$GITHUB_OUTPUT"
          fi
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Update version
        working-directory: app
        if: env.should-release == 'true'
        run: |
          sed -i '' -e "s/CFBundleShortVersionString.*/CFBundleShortVersionString\": \"${{ steps.next-version.outputs.NEXT_VERSION_NUMBER }}\",/g" "Project.swift"
          COMMIT_COUNT=$(git rev-list --count HEAD)
          sed -i '' -e "s/CFBundleVersion.*/CFBundleVersion\": \"$COMMIT_COUNT\",/g" "Project.swift"
      - name: Update CHANGELOG.md
        working-directory: app
        if: env.should-release == 'true'
        run: |
          if git rev-parse app@0.20.2 >/dev/null 2>&1; then
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md app@0.20.2..HEAD
          else
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md
          fi
      - name: Upload updated files as artifact
        if: env.should-release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-files
          path: |
            app/Project.swift
            app/CHANGELOG.md

  release-macos:
    name: Release macOS App
    runs-on: namespace-profile-default-macos
    timeout-minutes: 50
    needs: setup
    if: needs.setup.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - name: Install create-dmg
        run: brew install create-dmg
      - name: Activate .env.json
        run: cp .optional.env.json .env.json
      - uses: tuist/mise-action@18966898ea274fb74c1d7cf9cc1758fe0d9ddc7e
        with:
          version: 2025.7.0
          experimental: true
      - name: Download updated files
        uses: actions/download-artifact@v4
        with:
          name: updated-files
          path: app
      - name: Install create-dmg
        run: brew install create-dmg
      - name: Bundle Tuist App
        run: mise run app:bundle
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          CERTIFICATE_ENCRYPTION_PASSWORD: ${{ secrets.CERTIFICATE_ENCRYPTION_PASSWORD }}
          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_APP_CONFIG_TOKEN }}
      - name: Generate Sparkle appcast
        env:
          TUIST_APP_PRIVATE_SPARKLE_KEY: ${{ secrets.TUIST_APP_PRIVATE_SPARKLE_KEY }}
        run: echo "$TUIST_APP_PRIVATE_SPARKLE_KEY" | .build/artifacts/sparkle/Sparkle/bin/generate_appcast --link https://github.com/tuist/tuist/releases --download-url-prefix https://github.com/tuist/tuist/releases/download/${{ needs.setup.outputs.next-version }}/Tuist.dmg -o app/appcast.xml app/build/artifacts --ed-key-file -
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            app/build/artifacts/Tuist.dmg
            app/build/artifacts/SHASUMS256.txt
            app/build/artifacts/SHASUMS512.txt
            app/appcast.xml

  release-ios:
    name: Release iOS App
    runs-on: namespace-profile-default-macos
    timeout-minutes: 30
    needs: setup
    if: needs.setup.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - name: Skip Xcode Macro Fingerprint Validation
        run: defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
      - name: Skip Xcode Package Validation
        run: defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidation -bool YES
      - name: Activate .env.json
        run: cp .optional.env.json .env.json
      - name: Restore cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: .build
          key: ${{ runner.os }}-app-${{ hashFiles('Package.resolved') }}
          restore-keys: .build
      - uses: jdx/mise-action@v2
        with:
          version: 2025.7.0
          experimental: true
      - name: Download updated files
        uses: actions/download-artifact@v4
        with:
          name: updated-files
          path: app
      - name: Generate TuistApp
        run: mise x -- tuist generate TuistApp --no-binary-cache
      - name: Upload iOS App to App Store Connect
        run: mise run app:upload-ios
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          CERTIFICATE_ENCRYPTION_PASSWORD: ${{ secrets.CERTIFICATE_ENCRYPTION_PASSWORD }}

  update-main:
    name: Update main with released apps
    runs-on: namespace-profile-default-macos
    timeout-minutes: 10
    needs: [setup, release-macos, release-ios]
    if: needs.setup.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Download updated files
        uses: actions/download-artifact@v4
        with:
          name: updated-files
          path: app
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: app
      - name: Commit changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add app/CHANGELOG.md app/Project.swift app/appcast.xml
          git commit -m "[Release] Tuist App ${{ needs.setup.outputs.next-version }}"
          git tag ${{ needs.setup.outputs.next-version }}
          git push origin ${{ github.ref_name }}
          git push origin ${{ github.ref_name }} --tags
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          repository: tuist/tuist
          name: ${{ needs.setup.outputs.next-version }}
          tag_name: ${{ needs.setup.outputs.next-version }}
          body: ${{ needs.setup.outputs.release-notes }}
          files: |
            app/build/artifacts/Tuist.dmg
            app/build/artifacts/SHASUMS256.txt
            app/build/artifacts/SHASUMS512.txt
      - name: Get DMG SHA256
        id: sha256
        run: |
          SHA256=$(grep "Tuist.dmg" app/build/artifacts/SHASUMS256.txt | cut -d' ' -f1)
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
      - name: Release Homebrew cask
        run: mise/tasks/cli/release/homebrew-cask.sh --version ${{ needs.setup.outputs.next-version }} --github-token ${{ secrets.TUIST_HOMEBREW_APP_CASK_RELEASE_TOKEN }} --sha256 ${{ steps.sha256.outputs.sha256 }}
