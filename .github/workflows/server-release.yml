name: Server Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release"
        type: string

permissions:
  contents: write
  pull-requests: read
  statuses: write
  packages: write

env:
  TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.TUIST_GITHUB_TOKEN }}
  MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}
  MISE_EXPERIMENTAL: "1"
  PNPM_HOME: ~/.pnpm

jobs:
  setup:
    name: Setup and Check Release
    runs-on: namespace-profile-default
    timeout-minutes: 20
    if: ${{ !contains(github.event.head_commit.message, '[Release] [skip ci] Tuist Server') }}
    outputs:
      should-release: ${{ env.should-release }}
      next-version: ${{ steps.next-version.outputs.NEXT_VERSION }}
      release-notes: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - uses: tuist/mise-action@18966898ea274fb74c1d7cf9cc1758fe0d9ddc7e
        with:
          version: 2025.7.0
          experimental: true
      - name: Check if there are releasable changes
        id: is-releasable
        working-directory: server
        run: |
          # Run git cliff and save the output (from server@0.1.0 onwards)
          bumped_output=$(git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bump server@0.1.0..HEAD)
          echo "Bumped output:"
          echo "${bumped_output}"

          # Check if CHANGELOG.md exists, if not create an empty one
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "<!-- generated by git-cliff -->" >> CHANGELOG.md
          fi

          # Read the content of CHANGELOG.md
          changelog_content=$(cat CHANGELOG.md)
          echo "CHANGELOG.md content:"
          echo "${changelog_content}"

          # Compare the outputs and set the result
          if [ "${bumped_output}" != "${changelog_content}" ]; then
            echo "should-release=true" >> $GITHUB_ENV
          else
            echo "should-release=false" >> $GITHUB_ENV
          fi
      - name: Get next version
        working-directory: server
        id: next-version
        if: env.should-release == 'true' || github.event.inputs.version != ''
        run: |
          # Use provided version or calculate next version
          if [ -n "${{ github.event.inputs.version }}" ]; then
            NEXT_VERSION="${{ github.event.inputs.version }}"
          else
            # Get the latest server version tag
            LATEST_VERSION=$(git tag -l | grep "server@" | sort -V | tail -n1 || echo "server@0.1.0")
            # Use git cliff to determine next version (from server@0.1.0 onwards)
            NEXT_VERSION=$(git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bumped-version server@0.1.0..HEAD)

            # If git cliff returns 0.1.0, increment from the latest version
            if [ "$NEXT_VERSION" = "0.1.0" ]; then
              # Extract version number from tag
              VERSION_NUMBER="${LATEST_VERSION#server@}"
              # Parse semver components
              IFS='.' read -r major minor patch <<< "$VERSION_NUMBER"
              # Increment minor version by default
              NEXT_VERSION="server@${major}.$((minor + 1)).0"
            fi
          fi

          echo "NEXT_VERSION=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
          echo "Next version: $NEXT_VERSION"
      - name: Get release notes
        id: release-notes
        if: env.should-release == 'true'
        working-directory: server
        run: |
          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
          git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --unreleased server@0.1.0..HEAD >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Update CHANGELOG.md
        working-directory: server
        if: env.should-release == 'true'
        run: git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md server@0.1.0..HEAD
      - name: Upload updated files as artifact
        if: env.should-release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-files
          path: |
            server/CHANGELOG.md

  release:
    name: Release Server
    runs-on: namespace-profile-default
    timeout-minutes: 30
    needs: setup
    if: needs.setup.outputs.should-release == 'true'
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Restore Mix Cache
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build
            _site
          key: mix-${{ hashFiles('mix.lock') }}
      - name: Restore PNPM Cache
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: |
            ~/.pnpm/store
          key: pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      - uses: tuist/mise-action@18966898ea274fb74c1d7cf9cc1758fe0d9ddc7e
        with:
          version: 2025.7.0
          experimental: true
      - name: Download updated files
        uses: actions/download-artifact@v4
        with:
          name: updated-files
          path: .
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/tuist/tuist
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{ needs.setup.outputs.next-version }}
          labels: |
            org.opencontainers.image.title=Tuist
            org.opencontainers.image.vendor=Tuist GmbH
            org.opencontainers.image.source=https://github.com/tuist/tuist
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TUIST_HOSTED=0
            TUIST_VERSION=${{ needs.setup.outputs.next-version }}
            MIX_ENV=prod
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          github-token: ${{ secrets.TUIST_RELEASE_GITHUB_TOKEN }}

  update-main:
    name: Update main with released server
    runs-on: namespace-profile-default
    timeout-minutes: 10
    needs: [setup, release]
    if: needs.setup.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Download updated files
        uses: actions/download-artifact@v4
        with:
          name: updated-files
          path: .
      - name: Commit changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add server/CHANGELOG.md
          git commit -m "[Release] [skip ci] Tuist Server ${{ needs.setup.outputs.next-version }}"
          git tag ${{ needs.setup.outputs.next-version }}
          git push origin main
          git push origin main --tags
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          repository: tuist/tuist
          name: ${{ needs.setup.outputs.next-version }}
          tag_name: ${{ needs.setup.outputs.next-version }}
          body: |
            ## Server Release

            ${{ needs.setup.outputs.release-notes }}
      - name: Create GitHub Release on tuist/server
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          repository: tuist/server
          name: ${{ needs.setup.outputs.next-version }}
          tag_name: ${{ needs.setup.outputs.next-version }}
          body: |
            ## Server Release

            ${{ needs.setup.outputs.release-notes }}
          token: ${{ secrets.TUIST_RELEASE_GITHUB_TOKEN }}
          target_commitish: main
