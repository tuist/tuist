name: TuistLab API

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - projects/lab-api/**

env:
  RAILS_ENV: test
  RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
  RUBY_VERSION: "2.7.3"
  NODE_VERSION: "16.4.0"
  CI: 1
jobs:
  test:
    name: Test Ruby
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:4.0.6
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        working-directory: projects/lab-api
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs=4 --retry=3
      - name: Set up database (to detect schema breaking changes)
        working-directory: projects/lab-api
        run: |
          cp config/database.ci.yml config/database.yml
          bundle exec rails db:create
          bundle exec rails db:schema:load
      - name: Migrate database
        working-directory: projects/lab-api
        run: bin/rails db:migrate
      - name: Run Ruby tests
        working-directory: projects/lab-api
        run: |
          bundle exec rails test
  assets_precompile:
    name: Assets precompile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        name: Cache Yarn dependencies
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('projects/lab-api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        working-directory: projects/lab-api
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs=4 --retry=3
          yarn install --frozen-lockfile
      - name: Precompile assets
        working-directory: projects/lab-api
        run: |
          bin/rails assets:precompile
  detect_schema_breaking_changes:
    name: GraphQL breaking changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        name: Cache Yarn dependencies
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('projects/lab-api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        working-directory: projects/lab-api
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs=4 --retry=3
          yarn install --frozen-lockfile
      - name: Precompile assets
        working-directory: projects/lab-api
        run: |
          mv schema.graphql old_schema.graphql
          bin/rails graphql:schema:dump
          bundle exec schema_comparator verify old_schema.graphql schema.graphql
  typescript_type_check:
    name: Typescript type-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        name: Cache Yarn dependencies
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('projects/lab-api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        working-directory: projects/lab-api
        run: |
          sudo apt-get -yqq install libpq-dev
          yarn install --frozen-lockfile
          yarn install --frozen-lockfile --cwd website
      - name: Typecheck
        working-directory: projects/lab-api
        run: |
          yarn type-check
  frontend_tests:
    name: Frontend tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        name: Cache Yarn dependencies
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('projects/lab-api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        working-directory: projects/lab-api
        run: |
          sudo apt-get -yqq install libpq-dev
          yarn install --frozen-lockfile
      - name: Typecheck
        working-directory: projects/lab-api
        run: |
          yarn test
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        name: Cache Yarn dependencies
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('projects/lab-api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        working-directory: projects/lab-api
        run: |
          sudo apt-get -yqq install libpq-dev
          yarn install --frozen-lockfile
          yarn install --frozen-lockfile --cwd website
      - name: ESLint
        working-directory: projects/lab-api
        run: |
          yarn lint

