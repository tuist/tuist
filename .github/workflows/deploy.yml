name: Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-${{ github.head_ref }}
  cancel-in-progress: true

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy-staging:
    environment:
      name: staging
      url: https://cloud-staging.tuist.io
    name: Deploy staging app
    env:
      DOCKER_BUILDKIT: 1
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      # We deploy first to staging to give some window to test the changes
      - name: Deploy staging
        run: flyctl deploy -c fly.staging.toml --build-arg RAILS_ENV=staging --wait-timeout 600
  deploy-canary:
    environment:
      name: canary
      url: https://cloud-canary.tuist.io
    name: Deploy canary app
    env:
      DOCKER_BUILDKIT: 1
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      # We deploy first to canary to give some window to test the changes
      - name: Deploy canary
        run: flyctl deploy -c fly.canary.toml --build-arg RAILS_ENV=canary --wait-timeout 600
  production:
    environment:
      name: production
      url: https://cloud.tuist.io
    name: Deploy app
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      DOCKER_BUILDKIT: 1
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # We deploy first to staging to give some window to test the changes
    needs: deploy-staging
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy
        run: flyctl deploy --remote-only --wait-timeout 3600
  docker:
    name: Push docker image
    env:
      DOCKER_BUILDKIT: 1
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@b4bedf8053341df3b5a9f9e0f2cf4e79e27360c6
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@879dcbb708d40f8b8679d4f7941b938a086e23a7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@4c1b68d83ad20cc1a09620ca477d5bbbb5fa14d0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

