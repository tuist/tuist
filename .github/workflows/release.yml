name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read
  statuses: write
  packages: write

concurrency:
  group: release-workflow-${{ github.ref }}
  cancel-in-progress: true

env:
  TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_CONFIG_TOKEN }}
  MISE_SOPS_AGE_KEY: ${{ secrets.MISE_SOPS_AGE_KEY }}
  PNPM_HOME: ~/.pnpm

jobs:
  check-releases:
    name: Check for releasable changes
    runs-on: ubuntu-latest
    outputs:
      cli-should-release: ${{ steps.cli-check.outputs.should-release }}
      cli-next-version: ${{ steps.cli-check.outputs.next-version }}
      cli-next-version-number: ${{ steps.cli-check.outputs.next-version-number }}
      app-should-release: ${{ steps.app-check.outputs.should-release }}
      app-next-version: ${{ steps.app-check.outputs.next-version }}
      app-next-version-number: ${{ steps.app-check.outputs.next-version-number }}
      server-should-release: ${{ steps.server-check.outputs.should-release }}
      server-next-version: ${{ steps.server-check.outputs.next-version }}
      server-next-version-number: ${{ steps.server-check.outputs.next-version-number }}
      should-release-any: ${{ steps.check-any.outputs.should-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@v2

      - name: Check CLI for releasable changes
        id: cli-check
        run: |
          cd cli
          # Get the latest CLI version tag dynamically
          LATEST_VERSION=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || echo "0.0.0")

          # Check if there are any releasable changes by generating changelog
          CHANGELOG=$(git cliff --include-path "cli/**/*" --config cliff.toml --repository "../" 2>/dev/null -- ${LATEST_VERSION}..HEAD || echo "")

          # Only bump version if there are actual release notes
          if echo "$CHANGELOG" | sed -n '/<!-- RELEASE NOTES START -->/,/<!-- generated by git-cliff -->/p' | grep -qE '^\*'; then
            NEXT_VERSION=$(git cliff --include-path "cli/**/*" --config cliff.toml --repository "../" --bumped-version 2>/dev/null -- ${LATEST_VERSION}..HEAD)
          else
            NEXT_VERSION="$LATEST_VERSION"
          fi

          echo "Latest CLI version: $LATEST_VERSION"
          echo "Next CLI version: $NEXT_VERSION"

          # Validate that next version is actually newer
          if [ "$NEXT_VERSION" = "$LATEST_VERSION" ]; then
            echo "No CLI version change detected (versions are equal)"
            echo "should-release=false" >> "$GITHUB_OUTPUT"
            echo "next-version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          elif [ "$(printf '%s\n' "$LATEST_VERSION" "$NEXT_VERSION" | sort -V | head -n1)" = "$NEXT_VERSION" ]; then
            echo "ERROR: Next version ($NEXT_VERSION) is older than latest version ($LATEST_VERSION)"
            echo "should-release=false" >> "$GITHUB_OUTPUT"
            echo "next-version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "CLI version bump detected: $LATEST_VERSION -> $NEXT_VERSION"
            echo "should-release=true" >> "$GITHUB_OUTPUT"
            echo "next-version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Check App for releasable changes
        id: app-check
        run: |
          cd app
          # Get the latest app version tag
          LATEST_VERSION=$(git tag -l | grep -E "^app@[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)

          # Check if there are any releasable changes by generating changelog
          if [ -n "$LATEST_VERSION" ]; then
            CHANGELOG=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" 2>/dev/null -- ${LATEST_VERSION}..HEAD || echo "")
          else
            CHANGELOG=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" 2>/dev/null || echo "")
          fi

          # Only bump version if there are actual release notes
          if echo "$CHANGELOG" | sed -n '/<!-- RELEASE NOTES START -->/,/<!-- generated by git-cliff -->/p' | grep -qE '^\*'; then
            if [ -n "$LATEST_VERSION" ]; then
              NEXT_VERSION=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bumped-version 2>/dev/null -- ${LATEST_VERSION}..HEAD)
            else
              NEXT_VERSION=$(git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bumped-version 2>/dev/null)
            fi
          else
            if [ -n "$LATEST_VERSION" ]; then
              NEXT_VERSION="${LATEST_VERSION#app@}"
            else
              NEXT_VERSION="0.1.0"
            fi
          fi

          # Add app@ prefix if not present and remove any duplicate prefixes
          if [[ "$NEXT_VERSION" == app@* ]]; then
            # If it already has app@ prefix, extract just the version number and re-add single prefix
            VERSION_NUM="${NEXT_VERSION#app@}"
            # Remove any additional app@ prefixes
            while [[ "$VERSION_NUM" == app@* ]]; do
              VERSION_NUM="${VERSION_NUM#app@}"
            done
            NEXT_VERSION="app@$VERSION_NUM"
          else
            NEXT_VERSION="app@$NEXT_VERSION"
          fi

          echo "Latest App version: ${LATEST_VERSION:-none}"
          echo "Next App version: $NEXT_VERSION"

          # Validate and compare versions
          if [ -z "$LATEST_VERSION" ]; then
            # No previous version, this is the first release
            echo "First App release: $NEXT_VERSION"
            echo "should-release=true" >> "$GITHUB_OUTPUT"
            echo "next-version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=${NEXT_VERSION#app@}" >> "$GITHUB_OUTPUT"
          elif [ "$NEXT_VERSION" = "$LATEST_VERSION" ]; then
            echo "No App version change detected (versions are equal)"
            echo "should-release=false" >> "$GITHUB_OUTPUT"
            echo "next-version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=${LATEST_VERSION#app@}" >> "$GITHUB_OUTPUT"
          else
            echo "App version bump detected: $LATEST_VERSION -> $NEXT_VERSION"
            echo "should-release=true" >> "$GITHUB_OUTPUT"
            echo "next-version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=${NEXT_VERSION#app@}" >> "$GITHUB_OUTPUT"
          fi

      - name: Check Server for releasable changes
        id: server-check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest server version tag
          LATEST_VERSION=$(git tag -l | grep -E "^server@[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)

          # Check if there are any releasable changes by generating changelog
          if [ -n "$LATEST_VERSION" ]; then
            CHANGELOG=$(git cliff --include-path "server/**/*" --config server/cliff.toml --repository "." 2>/dev/null -- ${LATEST_VERSION}..HEAD || echo "")
          else
            CHANGELOG=$(git cliff --include-path "server/**/*" --config server/cliff.toml --repository "." 2>/dev/null || echo "")
          fi

          # Only bump version if there are actual release notes
          if echo "$CHANGELOG" | sed -n '/<!-- RELEASE NOTES START -->/,/<!-- generated by git-cliff -->/p' | grep -qE '^\*'; then
            if [ -n "$LATEST_VERSION" ]; then
              NEXT_VERSION=$(git cliff --include-path "server/**/*" --config server/cliff.toml --repository "." --bumped-version 2>/dev/null -- ${LATEST_VERSION}..HEAD)
            else
              NEXT_VERSION=$(git cliff --include-path "server/**/*" --config server/cliff.toml --repository "." --bumped-version 2>/dev/null)
            fi
          else
            if [ -n "$LATEST_VERSION" ]; then
              NEXT_VERSION="${LATEST_VERSION#server@}"
            else
              echo "No server tags or server-scoped commits found, defaulting to initial version"
              NEXT_VERSION="0.1.0"
            fi
          fi

          # Add server@ prefix if not present and remove any duplicate prefixes
          if [[ "$NEXT_VERSION" == server@* ]]; then
            # If it already has server@ prefix, extract just the version number and re-add single prefix
            VERSION_NUM="${NEXT_VERSION#server@}"
            # Remove any additional server@ prefixes
            while [[ "$VERSION_NUM" == server@* ]]; do
              VERSION_NUM="${VERSION_NUM#server@}"
            done
            NEXT_VERSION="server@$VERSION_NUM"
          else
            NEXT_VERSION="server@$NEXT_VERSION"
          fi

          echo "Latest Server version: ${LATEST_VERSION:-none}"
          echo "Next Server version: $NEXT_VERSION"

          # Compare versions to determine if release is needed
          if [ "$LATEST_VERSION" != "$NEXT_VERSION" ]; then
            echo "Server version bump detected: ${LATEST_VERSION:-none} -> $NEXT_VERSION"
            echo "should-release=true" >> "$GITHUB_OUTPUT"
            echo "next-version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=${NEXT_VERSION#server@}" >> "$GITHUB_OUTPUT"
          else
            echo "No Server version change detected"
            echo "should-release=false" >> "$GITHUB_OUTPUT"
            echo "next-version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
            echo "next-version-number=${LATEST_VERSION#server@}" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if any component needs release
        id: check-any
        run: |
          if [ "${{ steps.cli-check.outputs.should-release }}" == "true" ] || \
             [ "${{ steps.app-check.outputs.should-release }}" == "true" ] || \
             [ "${{ steps.server-check.outputs.should-release }}" == "true" ]; then
            echo "At least one component needs release"
            echo "should-release=true" >> "$GITHUB_OUTPUT"
          else
            echo "No components need release"
            echo "should-release=false" >> "$GITHUB_OUTPUT"
          fi

  release-cli:
    name: Release CLI
    needs: check-releases
    if: needs.check-releases.outputs.cli-should-release == 'true'
    runs-on: namespace-profile-default-macos
    timeout-minutes: 30
    env:
      GITHUB_TOKEN: ${{ secrets.TUIST_GITHUB_TOKEN }}
    outputs:
      artifacts-uploaded: ${{ steps.upload.outputs.uploaded }}
      release-notes: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - uses: jdx/mise-action@v2
      - name: Initialize TuistCacheEE submodule
        env:
          TUIST_GITHUB_TOKEN: ${{ secrets.TUIST_GITHUB_TOKEN }}
        run: mise run cli:ee
      - name: Get release notes
        id: release-notes
        working-directory: cli
        run: |
          # Get the latest CLI version tag dynamically
          LATEST_VERSION=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || echo "0.0.0")
          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
          git cliff --include-path "cli/**/*" --config cliff.toml --repository "../" 2>/dev/null -- ${LATEST_VERSION}..HEAD | sed -n '/<!-- RELEASE NOTES START -->/,$p' | tail -n +2 >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Update version in Constants.swift
        run: |
          sed -i '' -e "s/@TaskLocal public static var version: String! = \".*\"/@TaskLocal public static var version: String! = \"${{ needs.check-releases.outputs.cli-next-version }}\"/" "cli/Sources/TuistSupport/Constants.swift"

      - name: Update CHANGELOG.md
        working-directory: cli
        run: git cliff --include-path "cli/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md 2>/dev/null

      - name: Bundle CLI
        run: mise run cli:bundle
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          BASE_64_DEVELOPER_ID_APPLICATION_CERTIFICATE: ${{ secrets.BASE_64_DEVELOPER_ID_APPLICATION_CERTIFICATE }}

      - name: Update mise.toml
        run: |
          sed -i '' "s/tuist = \".*\"/tuist = \"${{ needs.check-releases.outputs.cli-next-version }}\"/" mise.toml

      - name: Upload CLI artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: cli-artifacts
          path: |
            cli/CHANGELOG.md
            cli/Sources/TuistSupport/Constants.swift
            mise.toml
            build/tuist.zip
            build/SHASUMS256.txt
            build/SHASUMS512.txt
          retention-days: 1

  release-app:
    name: Release App
    needs: check-releases
    if: needs.check-releases.outputs.app-should-release == 'true'
    runs-on: namespace-profile-default-macos
    timeout-minutes: 50
    env:
      GITHUB_TOKEN: ${{ secrets.TUIST_GITHUB_TOKEN }}
    outputs:
      artifacts-uploaded: ${{ steps.upload.outputs.uploaded }}
      release-notes: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - name: Install create-dmg
        run: brew install create-dmg
      - uses: jdx/mise-action@v2

      - name: Get release notes
        id: release-notes
        working-directory: app
        run: |
          # Get the latest app version tag
          LATEST_VERSION=$(git tag -l | grep -E "^app@[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)

          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
          if [ -n "$LATEST_VERSION" ]; then
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" 2>/dev/null -- ${LATEST_VERSION}..HEAD | sed -n '/<!-- RELEASE NOTES START -->/,$p' | tail -n +2 >> "$GITHUB_OUTPUT"
          else
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" 2>/dev/null | sed -n '/<!-- RELEASE NOTES START -->/,$p' | tail -n +2 >> "$GITHUB_OUTPUT"
          fi
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Update version
        working-directory: app
        run: |
          VERSION_NUMBER="${{ needs.check-releases.outputs.app-next-version }}"
          VERSION_NUMBER="${VERSION_NUMBER#app@}"
          sed -i '' -e "s/CFBundleShortVersionString.*/CFBundleShortVersionString\": \"$VERSION_NUMBER\",/g" "Project.swift"
          COMMIT_COUNT=$(git rev-list --count HEAD)
          sed -i '' -e "s/CFBundleVersion.*/CFBundleVersion\": \"$COMMIT_COUNT\",/g" "Project.swift"

      - name: Update CHANGELOG.md
        working-directory: app
        run: |
          # Get the latest app version tag
          LATEST_VERSION=$(git tag -l | grep -E "^app@[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)

          if [ -n "$LATEST_VERSION" ]; then
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md 2>/dev/null -- ${LATEST_VERSION}..HEAD
          else
            git cliff --include-path "app/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md 2>/dev/null
          fi

      - name: Bundle macOS app
        run: mise run app:bundle
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          BASE_64_DEVELOPER_ID_APPLICATION_CERTIFICATE: ${{ secrets.BASE_64_DEVELOPER_ID_APPLICATION_CERTIFICATE }}
          BASE_64_DEVELOPER_ID_INSTALLER_CERTIFICATE: ${{ secrets.BASE_64_DEVELOPER_ID_INSTALLER_CERTIFICATE }}

      - name: Generate appcast.xml
        working-directory: app
        run: |
          VERSION_NUMBER="${{ needs.check-releases.outputs.app-next-version }}"
          VERSION_NUMBER="${VERSION_NUMBER#app@}"
          cat > appcast.xml << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <rss version="2.0" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" xmlns:dc="http://purl.org/dc/elements/1.1/">
            <channel>
              <title>Tuist App</title>
              <link>https://raw.githubusercontent.com/tuist/tuist/main/app/appcast.xml</link>
              <description>The most recent changes with links to updates.</description>
              <language>en</language>
              <item>
                <title>Version $VERSION_NUMBER</title>
                <description><![CDATA[
          ${{ steps.release-notes.outputs.RELEASE_NOTES }}
                ]]></description>
                <pubDate>$(date -u +"%a, %d %b %Y %H:%M:%S GMT")</pubDate>
                <enclosure url="https://github.com/tuist/tuist/releases/download/${{ needs.check-releases.outputs.app-next-version }}/Tuist.dmg"
                          sparkle:version="$(git rev-list --count HEAD)"
                          sparkle:shortVersionString="$VERSION_NUMBER"
                          type="application/octet-stream"/>
              </item>
            </channel>
          </rss>
          EOF

      - name: Upload App artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: app-artifacts
          path: |
            app/CHANGELOG.md
            app/Project.swift
            app/appcast.xml
            build/Tuist.zip
            build/Tuist.dmg
          retention-days: 1

  release-server:
    name: Release Server
    needs: check-releases
    if: needs.check-releases.outputs.server-should-release == 'true'
    runs-on: namespace-profile-default
    timeout-minutes: 30
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      artifacts-uploaded: ${{ steps.upload.outputs.uploaded }}
      release-notes: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@v2

      - name: Get release notes
        id: release-notes
        working-directory: server
        run: |
          # Get the latest server version tag
          LATEST_VERSION=$(git tag -l | grep -E "^server@[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)

          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
          if [ -n "$LATEST_VERSION" ]; then
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" 2>/dev/null -- ${LATEST_VERSION}..HEAD | sed -n '/<!-- RELEASE NOTES START -->/,$p' | tail -n +2 >> "$GITHUB_OUTPUT"
          else
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" 2>/dev/null | sed -n '/<!-- RELEASE NOTES START -->/,$p' | tail -n +2 >> "$GITHUB_OUTPUT"
          fi
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Update CHANGELOG.md
        working-directory: server
        run: |
          # Get the latest server version tag
          LATEST_VERSION=$(git tag -l | grep -E "^server@[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1)

          if [ -n "$LATEST_VERSION" ]; then
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md 2>/dev/null -- ${LATEST_VERSION}..HEAD
          else
            git cliff --include-path "server/**/*" --config cliff.toml --repository "../" --bump -o CHANGELOG.md 2>/dev/null
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/tuist/tuist
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{ needs.check-releases.outputs.server-next-version-number }}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TUIST_HOSTED=0
            TUIST_VERSION=${{ needs.check-releases.outputs.server-next-version-number }}
            MIX_ENV=prod
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload Server artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: server-artifacts
          path: |
            server/CHANGELOG.md
          retention-days: 1

  commit-and-release:
    name: Commit and Release
    needs: [check-releases, release-cli, release-app, release-server]
    if: always() && needs.check-releases.outputs.should-release-any == 'true'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.TUIST_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TUIST_GITHUB_TOKEN }}

      - uses: jdx/mise-action@v2

      - name: Download CLI artifacts
        if: needs.check-releases.outputs.cli-should-release == 'true' && needs.release-cli.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: cli-artifacts

      - name: Download App artifacts
        if: needs.check-releases.outputs.app-should-release == 'true' && needs.release-app.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts

      - name: Download Server artifacts
        if: needs.check-releases.outputs.server-should-release == 'true' && needs.release-server.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: server-artifacts

      - name: Commit all changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Track if any files were added
          FILES_ADDED=false

          # Add files from each component that was released
          if [ "${{ needs.check-releases.outputs.cli-should-release }}" == "true" ] && [ "${{ needs.release-cli.result }}" == "success" ]; then
            git add cli/CHANGELOG.md cli/Sources/TuistSupport/Constants.swift mise.toml
            FILES_ADDED=true
          fi

          if [ "${{ needs.check-releases.outputs.app-should-release }}" == "true" ] && [ "${{ needs.release-app.result }}" == "success" ]; then
            git add app/CHANGELOG.md app/Project.swift app/appcast.xml
            FILES_ADDED=true
          fi

          if [ "${{ needs.check-releases.outputs.server-should-release }}" == "true" ] && [ "${{ needs.release-server.result }}" == "success" ]; then
            git add server/CHANGELOG.md
            FILES_ADDED=true
          fi

          # Only commit if files were added
          if [ "$FILES_ADDED" = "true" ]; then
            # Check if there are actually changes to commit
            if ! git diff --cached --quiet; then
              # Create commit message
              COMMIT_MSG="[Release]"
              if [ "${{ needs.check-releases.outputs.cli-should-release }}" == "true" ] && [ "${{ needs.release-cli.result }}" == "success" ]; then
                COMMIT_MSG="$COMMIT_MSG Tuist CLI ${{ needs.check-releases.outputs.cli-next-version }}"
              fi
              if [ "${{ needs.check-releases.outputs.app-should-release }}" == "true" ] && [ "${{ needs.release-app.result }}" == "success" ]; then
                COMMIT_MSG="$COMMIT_MSG Tuist App ${{ needs.check-releases.outputs.app-next-version }}"
              fi
              if [ "${{ needs.check-releases.outputs.server-should-release }}" == "true" ] && [ "${{ needs.release-server.result }}" == "success" ]; then
                COMMIT_MSG="$COMMIT_MSG Tuist Server ${{ needs.check-releases.outputs.server-next-version }}"
              fi

              git commit -m "$COMMIT_MSG"
            else
              echo "No changes to commit"
            fi
          else
            echo "No components were released, skipping commit"
          fi

          # Create tags for successfully released components
          if [ "${{ needs.check-releases.outputs.cli-should-release }}" == "true" ] && [ "${{ needs.release-cli.result }}" == "success" ]; then
            git tag ${{ needs.check-releases.outputs.cli-next-version }}
          fi
          if [ "${{ needs.check-releases.outputs.app-should-release }}" == "true" ] && [ "${{ needs.release-app.result }}" == "success" ]; then
            git tag ${{ needs.check-releases.outputs.app-next-version }}
          fi
          if [ "${{ needs.check-releases.outputs.server-should-release }}" == "true" ] && [ "${{ needs.release-server.result }}" == "success" ]; then
            git tag ${{ needs.check-releases.outputs.server-next-version }}
          fi

          # Push with retry logic
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            if git pull --rebase origin ${{ github.ref_name }}; then
              if git push origin ${{ github.ref_name }} --tags; then
                echo "Successfully pushed changes and tags"
                break
              fi
            fi
            echo "Push failed, retrying in 5 seconds..."
            sleep 5
            attempt=$((attempt + 1))
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "Failed to push after $max_attempts attempts"
            exit 1
          fi

      - name: Create CLI GitHub Release
        if: needs.check-releases.outputs.cli-should-release == 'true' && needs.release-cli.result == 'success'
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          repository: tuist/tuist
          name: CLI ${{ needs.check-releases.outputs.cli-next-version-number }}
          tag_name: ${{ needs.check-releases.outputs.cli-next-version }}
          body: ${{ needs.release-cli.outputs.release-notes }}
          files: |
            build/tuist.zip
            build/SHASUMS256.txt
            build/SHASUMS512.txt

      - name: Create App GitHub Release
        if: needs.check-releases.outputs.app-should-release == 'true' && needs.release-app.result == 'success'
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          repository: tuist/tuist
          name: App ${{ needs.check-releases.outputs.app-next-version-number }}
          tag_name: ${{ needs.check-releases.outputs.app-next-version }}
          body: ${{ needs.release-app.outputs.release-notes }}
          files: |
            build/Tuist.zip
            build/Tuist.dmg

      - name: Create Server GitHub Release
        if: needs.check-releases.outputs.server-should-release == 'true' && needs.release-server.result == 'success'
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          repository: tuist/tuist
          name: Server ${{ needs.check-releases.outputs.server-next-version-number }}
          tag_name: ${{ needs.check-releases.outputs.server-next-version }}
          body: |
            Docker image: `ghcr.io/tuist/tuist:${{ needs.check-releases.outputs.server-next-version-number }}`

            ${{ needs.release-server.outputs.release-notes }}

      - name: Trigger Homebrew Formula Update
        if: needs.check-releases.outputs.cli-should-release == 'true' && needs.release-cli.result == 'success'
        run: |
          SHA256=$(cat build/SHASUMS256.txt | grep tuist.zip | awk '{print $1}')
          mise run cli:release:homebrew-formula --version "${{ needs.check-releases.outputs.cli-next-version }}" --github-token "${{ secrets.TUIST_GITHUB_TOKEN }}" --sha256 "$SHA256"

      - name: Trigger Homebrew Cask Update
        if: needs.check-releases.outputs.app-should-release == 'true' && needs.release-app.result == 'success'
        run: |
          SHA256=$(cat build/SHASUMS256.txt | grep tuist.zip | awk '{print $1}')
          mise run app:release:homebrew-cask --version "${{ needs.check-releases.outputs.app-next-version-number }}" --github-token "${{ secrets.TUIST_GITHUB_TOKEN }}" --sha256 "$SHA256"
