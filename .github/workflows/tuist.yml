name: Tuist

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - Tuist/**
      - Package.resolved
      - Gemfile*
      - Package.swift
      - Project.swift
      - Sources/**
      - Templates/**
      - Tests/**
      - projects/tuist/features/**
      - projects/tuist/fixtures/**
      - .package.resolved
      - projects/fourier/**
      - .github/workflows/tuist.yml

concurrency:
  group: tuist-${{ github.head_ref }}
  cancel-in-progress: true

env:
  RUBY_VERSION: '3.0.3'
  TUIST_STATS_OPT_OUT: true
  RAILS_ENV: development
  RAILS_MASTER_KEY: ${{ secrets.CLOUD_RAILS_MASTER_KEY }}
  NODE_VERSION: 16.17.0

jobs:
  unit_tests:
    name: Unit tests with Xcode
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - uses: actions/cache@v3
        name: 'Cache Tuist .build folder'
        with:
          path: .build
          key: ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm-${{ hashFiles('Package.resolved') }}-git-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm-${{ hashFiles('Package.resolved') }}
            ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-${{ env.RUBY_VERSION }}-gems-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.RUBY_VERSION }}-gems-
      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Run tests
        run: |
          ./fourier test tuist unit
  release_build:
    name: Release build with Xcode
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        name: 'Cache Tuist .build folder'
        with:
          path: .build
          key: ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm-${{ hashFiles('Package.resolved') }}-git-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm-${{ hashFiles('Package.resolved') }}
            ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm
      - name: Select Xcode for Tuist and Tuistenv
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - name: Build Tuist for release
        run: swift build -c release --product tuist
      - name: Build Tuistenv for release
        run: swift build -c release --product tuistenv
      - name: Build ProjectDescription for release
        run: swift build -c release --product ProjectDescription

  acceptance_tests:
    name: ${{ matrix.feature }} acceptance tests with Xcode
    runs-on: macos-13
    strategy:
      matrix:
        feature:
          [
            'build',
            'cache-frameworks',
            'cache-xcframeworks',
            'cloud',
            'dependencies',
            'docc',
            'edit',
            'env',
            'generate-1',
            'generate-2',
            'generate-3',
            'generate-4',
            'generate-5',
            'generate-6',
            'generate-7',
            'generate-8',
            'graph',
            'init',
            'list-targets',
            'plugins',
            'precompiled',
            'run',
            'scaffold',
            'tasks',
            'test',
            'plugin',
          ]
    env:
      TUIST_CONFIG_GITHUB_API_TOKEN: ${{ secrets.GH_TOKEN }}
    needs: release_build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - uses: actions/cache@v3
        name: 'Cache Tuist .build folder'
        with:
          path: .build
          key: ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm-${{ hashFiles('Package.resolved') }}-git-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm-${{ hashFiles('Package.resolved') }}
            ${{ runner.os }}-${{ hashFiles('.xcode-version') }}-spm
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-${{ env.RUBY_VERSION }}-gems-${{ hashFiles('Gemfile.lock', 'project/cloud/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.RUBY_VERSION }}-gems-
      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache cloud node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('projects/*/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install cloud dependencies
        working-directory: projects/cloud
        if: ${{ matrix.feature == 'cloud' }}
        run: |
          brew install postgresql@14
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs=4 --retry=3
          npm install
      - name: Start PostgreSQL for cloud
        if: ${{ matrix.feature == 'cloud' }}
        run: |
          brew services start postgresql
          echo "Check PostgreSQL service is running"
          i=10
          COMMAND='pg_isready'
          while [ $i -gt 0 ]; do
              echo "Check PostgreSQL service status"
              eval $COMMAND && break
              ((i--))
              if [ $i == 0 ]; then
                  echo "PostgreSQL service not ready, all attempts exhausted"
                  exit 1
              fi
              echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
              sleep 10
          done
      - name: Seed database
        working-directory: projects/cloud
        if: ${{ (matrix.feature == 'cloud') && (github.event.pull_request.head.repo.full_name == github.repository) }}
        run: |
          bin/rails db:create
          bin/rails db:migrate
          bin/rails db:seed
      - name: Run tests
        if: ${{ (matrix.feature != 'cloud') || (github.event.pull_request.head.repo.full_name == github.repository) }}
        run: ./fourier test tuist acceptance projects/tuist/features/${{ matrix.feature }}.feature
  
  lint:
    name: Lint
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-${{ env.RUBY_VERSION }}${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.RUBY_VERSION }}-gems-
      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Install Bundler dependencies
        run: bundle install
      - name: Run
        run: ./fourier lint tuist
  
  lint-lockfiles:
    name: Lint lockfiles
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$(cat .xcode-version).app
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-${{ env.RUBY_VERSION }}${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.RUBY_VERSION }}-gems-
      - name: Bundle install
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Install Bundler dependencies
        run: bundle install
      - name: Run
        run: ./fourier lint lockfiles
